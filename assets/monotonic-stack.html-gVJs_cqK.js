import{_ as i,r as _,o as a,c,a as t,b as e,w as o,d as l,f as r}from"./app-EzxVwzgV.js";const u={},h=t("h1",{id:"单调栈",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#单调栈","aria-hidden":"true"},"#"),l(" 单调栈")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),x=t("code",null,"矩阵",-1),b=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),M=t("span",{class:"blue"},"单调栈",-1),I=t("code",null,"队列",-1),v=t("code",null,"单调队列",-1),H=t("code",null,"堆（优先队列）",-1),w=t("code",null,"哈希表",-1),q=t("code",null,"字符串",-1),V=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),E=t("code",null,"二叉树",-1),L=t("code",null,"二叉搜索树",-1),j=t("code",null,"最小生成树",-1),B=t("code",null,"图",-1),N=t("code",null,"有序集合",-1),O=t("code",null,"拓扑排序",-1),C=t("code",null,"最短路",-1),K=t("code",null,"强连通分量",-1),Q=t("code",null,"欧拉回路",-1),R=t("code",null,"双连通分量",-1),A=t("code",null,"并查集",-1),P=t("code",null,"字典树",-1),S=t("code",null,"线段树",-1),T=t("code",null,"树状数组",-1),X=t("code",null,"后缀数组",-1),Y=t("p",null,[t("strong",null,"算法")],-1),D=t("code",null,"枚举",-1),F=t("code",null,"递归",-1),G=t("code",null,"分治",-1),J=t("code",null,"回溯",-1),U=t("code",null,"贪心",-1),W=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),lt=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),it=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),rt=t("code",null,"计数",-1),ut=t("code",null,"滑动窗口",-1),ht=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),xt=t("code",null,"数学",-1),bt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Mt=t("code",null,"模拟",-1),It=t("code",null,"组合数学",-1),vt=t("code",null,"随机化",-1),Ht=t("code",null,"概率与统计",-1),wt=t("code",null,"水塘抽样",-1),qt=t("code",null,"拒绝采样",-1),Vt=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Et=t("code",null,"数据流",-1),Lt=t("code",null,"脑筋急转弯",-1),jt=t("code",null,"交互",-1),Bt=t("code",null,"迭代器",-1),Nt=t("code",null,"多线程",-1),Ot=t("hr",null,null,-1),Ct=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Kt=t("td",{style:{"text-align":"center"}},"42",-1),Qt={style:{"text-align":"left"}},Rt={href:"https://leetcode.com/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},At={style:{"text-align":"center"}},Pt={style:{"text-align":"left"}},St=t("code",null,"栈",-1),Tt=t("code",null,"数组",-1),Xt=t("code",null,"双指针",-1),Yt=t("code",null,"2+",-1),Dt={style:{"text-align":"left"}},Ft=t("td",{style:{"text-align":"center"}},"84",-1),Gt={style:{"text-align":"left"}},Jt={href:"https://leetcode.com/problems/largest-rectangle-in-histogram",target:"_blank",rel:"noopener noreferrer"},Ut={style:{"text-align":"center"}},Wt={style:{"text-align":"left"}},Zt=t("code",null,"栈",-1),$t=t("code",null,"数组",-1),te=t("code",null,"单调栈",-1),ee={style:{"text-align":"left"}},le=t("td",{style:{"text-align":"center"}},"85",-1),oe={style:{"text-align":"left"}},ne={href:"https://leetcode.com/problems/maximal-rectangle",target:"_blank",rel:"noopener noreferrer"},se={style:{"text-align":"center"}},de={style:{"text-align":"left"}},_e=t("code",null,"栈",-1),ie=t("code",null,"数组",-1),ae=t("code",null,"动态规划",-1),ce=t("code",null,"2+",-1),re={style:{"text-align":"left"}},ue=t("td",{style:{"text-align":"center"}},"255",-1),he={style:{"text-align":"left"}},fe={href:"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ge=t("td",{style:{"text-align":"center"}},null,-1),me={style:{"text-align":"left"}},ye=t("code",null,"栈",-1),xe=t("code",null,"树",-1),be=t("code",null,"二叉搜索树",-1),pe=t("code",null,"4+",-1),ke={style:{"text-align":"left"}},Me=t("td",{style:{"text-align":"center"}},"316",-1),Ie={style:{"text-align":"left"}},ve={href:"https://leetcode.com/problems/remove-duplicate-letters",target:"_blank",rel:"noopener noreferrer"},He={style:{"text-align":"center"}},we={style:{"text-align":"left"}},qe=t("code",null,"栈",-1),Ve=t("code",null,"贪心",-1),ze=t("code",null,"字符串",-1),Ee=t("code",null,"1+",-1),Le={style:{"text-align":"left"}},je=t("td",{style:{"text-align":"center"}},"321",-1),Be={style:{"text-align":"left"}},Ne={href:"https://leetcode.com/problems/create-maximum-number",target:"_blank",rel:"noopener noreferrer"},Oe=t("td",{style:{"text-align":"center"}},null,-1),Ce={style:{"text-align":"left"}},Ke=t("code",null,"栈",-1),Qe=t("code",null,"贪心",-1),Re=t("code",null,"数组",-1),Ae=t("code",null,"2+",-1),Pe={style:{"text-align":"left"}},Se=t("td",{style:{"text-align":"center"}},"402",-1),Te={style:{"text-align":"left"}},Xe={href:"https://leetcode.com/problems/remove-k-digits",target:"_blank",rel:"noopener noreferrer"},Ye=t("td",{style:{"text-align":"center"}},null,-1),De={style:{"text-align":"left"}},Fe=t("code",null,"栈",-1),Ge=t("code",null,"贪心",-1),Je=t("code",null,"字符串",-1),Ue=t("code",null,"1+",-1),We={style:{"text-align":"left"}},Ze=t("td",{style:{"text-align":"center"}},"456",-1),$e={style:{"text-align":"left"}},tl={href:"https://leetcode.com/problems/132-pattern",target:"_blank",rel:"noopener noreferrer"},el=t("td",{style:{"text-align":"center"}},null,-1),ll={style:{"text-align":"left"}},ol=t("code",null,"栈",-1),nl=t("code",null,"数组",-1),sl=t("code",null,"二分查找",-1),dl=t("code",null,"2+",-1),_l={style:{"text-align":"left"}},il=t("td",{style:{"text-align":"center"}},"496",-1),al={style:{"text-align":"left"}},cl={href:"https://leetcode.com/problems/next-greater-element-i",target:"_blank",rel:"noopener noreferrer"},rl={style:{"text-align":"center"}},ul={style:{"text-align":"left"}},hl=t("code",null,"栈",-1),fl=t("code",null,"数组",-1),gl=t("code",null,"哈希表",-1),ml=t("code",null,"1+",-1),yl={style:{"text-align":"left"}},xl=t("td",{style:{"text-align":"center"}},"503",-1),bl={style:{"text-align":"left"}},pl={href:"https://leetcode.com/problems/next-greater-element-ii",target:"_blank",rel:"noopener noreferrer"},kl={style:{"text-align":"center"}},Ml={style:{"text-align":"left"}},Il=t("code",null,"栈",-1),vl=t("code",null,"数组",-1),Hl=t("code",null,"单调栈",-1),wl={style:{"text-align":"left"}},ql=t("td",{style:{"text-align":"center"}},"581",-1),Vl={style:{"text-align":"left"}},zl={href:"https://leetcode.com/problems/shortest-unsorted-continuous-subarray",target:"_blank",rel:"noopener noreferrer"},El=t("td",{style:{"text-align":"center"}},null,-1),Ll={style:{"text-align":"left"}},jl=t("code",null,"栈",-1),Bl=t("code",null,"贪心",-1),Nl=t("code",null,"数组",-1),Ol=t("code",null,"3+",-1),Cl={style:{"text-align":"left"}},Kl=t("td",{style:{"text-align":"center"}},"654",-1),Ql={style:{"text-align":"left"}},Rl={href:"https://leetcode.com/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},Al={style:{"text-align":"center"}},Pl={style:{"text-align":"left"}},Sl=t("code",null,"栈",-1),Tl=t("code",null,"树",-1),Xl=t("code",null,"数组",-1),Yl=t("code",null,"3+",-1),Dl={style:{"text-align":"left"}},Fl=t("td",{style:{"text-align":"center"}},"739",-1),Gl={style:{"text-align":"left"}},Jl={href:"https://leetcode.com/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},Ul={style:{"text-align":"center"}},Wl={style:{"text-align":"left"}},Zl=t("code",null,"栈",-1),$l=t("code",null,"数组",-1),to=t("code",null,"单调栈",-1),eo={style:{"text-align":"left"}},lo=t("td",{style:{"text-align":"center"}},"768",-1),oo={style:{"text-align":"left"}},no={href:"https://leetcode.com/problems/max-chunks-to-make-sorted-ii",target:"_blank",rel:"noopener noreferrer"},so=t("td",{style:{"text-align":"center"}},null,-1),_o={style:{"text-align":"left"}},io=t("code",null,"栈",-1),ao=t("code",null,"贪心",-1),co=t("code",null,"数组",-1),ro=t("code",null,"2+",-1),uo={style:{"text-align":"left"}},ho=t("td",{style:{"text-align":"center"}},"769",-1),fo={style:{"text-align":"left"}},go={href:"https://leetcode.com/problems/max-chunks-to-make-sorted",target:"_blank",rel:"noopener noreferrer"},mo=t("td",{style:{"text-align":"center"}},null,-1),yo={style:{"text-align":"left"}},xo=t("code",null,"栈",-1),bo=t("code",null,"贪心",-1),po=t("code",null,"数组",-1),ko=t("code",null,"2+",-1),Mo={style:{"text-align":"left"}},Io=t("td",{style:{"text-align":"center"}},"853",-1),vo={style:{"text-align":"left"}},Ho={href:"https://leetcode.com/problems/car-fleet",target:"_blank",rel:"noopener noreferrer"},wo=t("td",{style:{"text-align":"center"}},null,-1),qo={style:{"text-align":"left"}},Vo=t("code",null,"栈",-1),zo=t("code",null,"数组",-1),Eo=t("code",null,"排序",-1),Lo=t("code",null,"1+",-1),jo={style:{"text-align":"left"}},Bo=t("td",{style:{"text-align":"center"}},"901",-1),No={style:{"text-align":"left"}},Oo={href:"https://leetcode.com/problems/online-stock-span",target:"_blank",rel:"noopener noreferrer"},Co=t("td",{style:{"text-align":"center"}},null,-1),Ko={style:{"text-align":"left"}},Qo=t("code",null,"栈",-1),Ro=t("code",null,"设计",-1),Ao=t("code",null,"数据流",-1),Po=t("code",null,"1+",-1),So={style:{"text-align":"left"}},To=t("td",{style:{"text-align":"center"}},"907",-1),Xo={style:{"text-align":"left"}},Yo={href:"https://leetcode.com/problems/sum-of-subarray-minimums",target:"_blank",rel:"noopener noreferrer"},Do=t("td",{style:{"text-align":"center"}},null,-1),Fo={style:{"text-align":"left"}},Go=t("code",null,"栈",-1),Jo=t("code",null,"数组",-1),Uo=t("code",null,"动态规划",-1),Wo=t("code",null,"1+",-1),Zo={style:{"text-align":"left"}},$o=t("td",{style:{"text-align":"center"}},"962",-1),tn={style:{"text-align":"left"}},en={href:"https://leetcode.com/problems/maximum-width-ramp",target:"_blank",rel:"noopener noreferrer"},ln={style:{"text-align":"center"}},on={style:{"text-align":"left"}},nn=t("code",null,"栈",-1),sn=t("code",null,"数组",-1),dn=t("code",null,"单调栈",-1),_n={style:{"text-align":"left"}},an=t("td",{style:{"text-align":"center"}},"975",-1),cn={style:{"text-align":"left"}},rn={href:"https://leetcode.com/problems/odd-even-jump",target:"_blank",rel:"noopener noreferrer"},un=t("td",{style:{"text-align":"center"}},null,-1),hn={style:{"text-align":"left"}},fn=t("code",null,"栈",-1),gn=t("code",null,"数组",-1),mn=t("code",null,"动态规划",-1),yn=t("code",null,"2+",-1),xn={style:{"text-align":"left"}},bn=t("td",{style:{"text-align":"center"}},"1008",-1),pn={style:{"text-align":"left"}},kn={href:"https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Mn={style:{"text-align":"center"}},In={style:{"text-align":"left"}},vn=t("code",null,"栈",-1),Hn=t("code",null,"树",-1),wn=t("code",null,"二叉搜索树",-1),qn=t("code",null,"3+",-1),Vn={style:{"text-align":"left"}},zn=t("td",{style:{"text-align":"center"}},"1019",-1),En={style:{"text-align":"left"}},Ln={href:"https://leetcode.com/problems/next-greater-node-in-linked-list",target:"_blank",rel:"noopener noreferrer"},jn=t("td",{style:{"text-align":"center"}},null,-1),Bn={style:{"text-align":"left"}},Nn=t("code",null,"栈",-1),On=t("code",null,"数组",-1),Cn=t("code",null,"链表",-1),Kn=t("code",null,"1+",-1),Qn={style:{"text-align":"left"}},Rn=t("td",{style:{"text-align":"center"}},"1063",-1),An={style:{"text-align":"left"}},Pn={href:"https://leetcode.com/problems/number-of-valid-subarrays",target:"_blank",rel:"noopener noreferrer"},Sn=t("td",{style:{"text-align":"center"}},null,-1),Tn={style:{"text-align":"left"}},Xn=t("code",null,"栈",-1),Yn=t("code",null,"数组",-1),Dn=t("code",null,"单调栈",-1),Fn={style:{"text-align":"left"}},Gn=t("td",{style:{"text-align":"center"}},"1081",-1),Jn={style:{"text-align":"left"}},Un={href:"https://leetcode.com/problems/smallest-subsequence-of-distinct-characters",target:"_blank",rel:"noopener noreferrer"},Wn={style:{"text-align":"center"}},Zn={style:{"text-align":"left"}},$n=t("code",null,"栈",-1),ts=t("code",null,"贪心",-1),es=t("code",null,"字符串",-1),ls=t("code",null,"1+",-1),os={style:{"text-align":"left"}},ns=t("td",{style:{"text-align":"center"}},"1124",-1),ss={style:{"text-align":"left"}},ds={href:"https://leetcode.com/problems/longest-well-performing-interval",target:"_blank",rel:"noopener noreferrer"},_s=t("td",{style:{"text-align":"center"}},null,-1),is={style:{"text-align":"left"}},as=t("code",null,"栈",-1),cs=t("code",null,"数组",-1),rs=t("code",null,"哈希表",-1),us=t("code",null,"2+",-1),hs={style:{"text-align":"left"}},fs=t("td",{style:{"text-align":"center"}},"1130",-1),gs={style:{"text-align":"left"}},ms={href:"https://leetcode.com/problems/minimum-cost-tree-from-leaf-values",target:"_blank",rel:"noopener noreferrer"},ys=t("td",{style:{"text-align":"center"}},null,-1),xs={style:{"text-align":"left"}},bs=t("code",null,"栈",-1),ps=t("code",null,"贪心",-1),ks=t("code",null,"数组",-1),Ms=t("code",null,"2+",-1),Is={style:{"text-align":"left"}},vs=t("td",{style:{"text-align":"center"}},"1475",-1),Hs={style:{"text-align":"left"}},ws={href:"https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop",target:"_blank",rel:"noopener noreferrer"},qs={style:{"text-align":"center"}},Vs={style:{"text-align":"left"}},zs=t("code",null,"栈",-1),Es=t("code",null,"数组",-1),Ls=t("code",null,"单调栈",-1),js={style:{"text-align":"left"}},Bs=t("td",{style:{"text-align":"center"}},"1504",-1),Ns={style:{"text-align":"left"}},Os={href:"https://leetcode.com/problems/count-submatrices-with-all-ones",target:"_blank",rel:"noopener noreferrer"},Cs=t("td",{style:{"text-align":"center"}},null,-1),Ks={style:{"text-align":"left"}},Qs=t("code",null,"栈",-1),Rs=t("code",null,"数组",-1),As=t("code",null,"动态规划",-1),Ps=t("code",null,"2+",-1),Ss={style:{"text-align":"left"}},Ts=t("td",{style:{"text-align":"center"}},"1526",-1),Xs={style:{"text-align":"left"}},Ys={href:"https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array",target:"_blank",rel:"noopener noreferrer"},Ds=t("td",{style:{"text-align":"center"}},null,-1),Fs={style:{"text-align":"left"}},Gs=t("code",null,"栈",-1),Js=t("code",null,"贪心",-1),Us=t("code",null,"数组",-1),Ws=t("code",null,"2+",-1),Zs={style:{"text-align":"left"}},$s=t("td",{style:{"text-align":"center"}},"1574",-1),td={style:{"text-align":"left"}},ed={href:"https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted",target:"_blank",rel:"noopener noreferrer"},ld=t("td",{style:{"text-align":"center"}},null,-1),od={style:{"text-align":"left"}},nd=t("code",null,"栈",-1),sd=t("code",null,"数组",-1),dd=t("code",null,"双指针",-1),_d=t("code",null,"2+",-1),id={style:{"text-align":"left"}},ad=t("td",{style:{"text-align":"center"}},"1673",-1),cd={style:{"text-align":"left"}},rd={href:"https://leetcode.com/problems/find-the-most-competitive-subsequence",target:"_blank",rel:"noopener noreferrer"},ud=t("td",{style:{"text-align":"center"}},null,-1),hd={style:{"text-align":"left"}},fd=t("code",null,"栈",-1),gd=t("code",null,"贪心",-1),md=t("code",null,"数组",-1),yd=t("code",null,"1+",-1),xd={style:{"text-align":"left"}},bd=t("td",{style:{"text-align":"center"}},"1762",-1),pd={style:{"text-align":"left"}},kd={href:"https://leetcode.com/problems/buildings-with-an-ocean-view",target:"_blank",rel:"noopener noreferrer"},Md=t("td",{style:{"text-align":"center"}},null,-1),Id={style:{"text-align":"left"}},vd=t("code",null,"栈",-1),Hd=t("code",null,"数组",-1),wd=t("code",null,"单调栈",-1),qd={style:{"text-align":"left"}},Vd=t("td",{style:{"text-align":"center"}},"1776",-1),zd={style:{"text-align":"left"}},Ed={href:"https://leetcode.com/problems/car-fleet-ii",target:"_blank",rel:"noopener noreferrer"},Ld=t("td",{style:{"text-align":"center"}},null,-1),jd={style:{"text-align":"left"}},Bd=t("code",null,"栈",-1),Nd=t("code",null,"数组",-1),Od=t("code",null,"数学",-1),Cd=t("code",null,"2+",-1),Kd={style:{"text-align":"left"}},Qd=t("td",{style:{"text-align":"center"}},"1793",-1),Rd={style:{"text-align":"left"}},Ad={href:"https://leetcode.com/problems/maximum-score-of-a-good-subarray",target:"_blank",rel:"noopener noreferrer"},Pd=t("td",{style:{"text-align":"center"}},null,-1),Sd={style:{"text-align":"left"}},Td=t("code",null,"栈",-1),Xd=t("code",null,"数组",-1),Yd=t("code",null,"双指针",-1),Dd=t("code",null,"2+",-1),Fd={style:{"text-align":"left"}},Gd=t("td",{style:{"text-align":"center"}},"1856",-1),Jd={style:{"text-align":"left"}},Ud={href:"https://leetcode.com/problems/maximum-subarray-min-product",target:"_blank",rel:"noopener noreferrer"},Wd=t("td",{style:{"text-align":"center"}},null,-1),Zd={style:{"text-align":"left"}},$d=t("code",null,"栈",-1),t_=t("code",null,"数组",-1),e_=t("code",null,"前缀和",-1),l_=t("code",null,"1+",-1),o_={style:{"text-align":"left"}},n_=t("td",{style:{"text-align":"center"}},"1944",-1),s_={style:{"text-align":"left"}},d_={href:"https://leetcode.com/problems/number-of-visible-people-in-a-queue",target:"_blank",rel:"noopener noreferrer"},__=t("td",{style:{"text-align":"center"}},null,-1),i_={style:{"text-align":"left"}},a_=t("code",null,"栈",-1),c_=t("code",null,"数组",-1),r_=t("code",null,"单调栈",-1),u_={style:{"text-align":"left"}},h_=t("td",{style:{"text-align":"center"}},"1950",-1),f_={style:{"text-align":"left"}},g_={href:"https://leetcode.com/problems/maximum-of-minimum-values-in-all-subarrays",target:"_blank",rel:"noopener noreferrer"},m_=t("td",{style:{"text-align":"center"}},null,-1),y_={style:{"text-align":"left"}},x_=t("code",null,"栈",-1),b_=t("code",null,"数组",-1),p_=t("code",null,"单调栈",-1),k_={style:{"text-align":"left"}},M_=t("td",{style:{"text-align":"center"}},"1996",-1),I_={style:{"text-align":"left"}},v_={href:"https://leetcode.com/problems/the-number-of-weak-characters-in-the-game",target:"_blank",rel:"noopener noreferrer"},H_=t("td",{style:{"text-align":"center"}},null,-1),w_={style:{"text-align":"left"}},q_=t("code",null,"栈",-1),V_=t("code",null,"贪心",-1),z_=t("code",null,"数组",-1),E_=t("code",null,"2+",-1),L_={style:{"text-align":"left"}},j_=t("td",{style:{"text-align":"center"}},"2030",-1),B_={style:{"text-align":"left"}},N_={href:"https://leetcode.com/problems/smallest-k-length-subsequence-with-occurrences-of-a-letter",target:"_blank",rel:"noopener noreferrer"},O_=t("td",{style:{"text-align":"center"}},null,-1),C_={style:{"text-align":"left"}},K_=t("code",null,"栈",-1),Q_=t("code",null,"贪心",-1),R_=t("code",null,"字符串",-1),A_=t("code",null,"1+",-1),P_={style:{"text-align":"left"}},S_=t("td",{style:{"text-align":"center"}},"2104",-1),T_={style:{"text-align":"left"}},X_={href:"https://leetcode.com/problems/sum-of-subarray-ranges",target:"_blank",rel:"noopener noreferrer"},Y_=t("td",{style:{"text-align":"center"}},null,-1),D_={style:{"text-align":"left"}},F_=t("code",null,"栈",-1),G_=t("code",null,"数组",-1),J_=t("code",null,"单调栈",-1),U_={style:{"text-align":"left"}},W_=t("td",{style:{"text-align":"center"}},"2281",-1),Z_={style:{"text-align":"left"}},$_={href:"https://leetcode.com/problems/sum-of-total-strength-of-wizards",target:"_blank",rel:"noopener noreferrer"},ti=t("td",{style:{"text-align":"center"}},null,-1),ei={style:{"text-align":"left"}},li=t("code",null,"栈",-1),oi=t("code",null,"数组",-1),ni=t("code",null,"前缀和",-1),si=t("code",null,"1+",-1),di={style:{"text-align":"left"}},_i=t("td",{style:{"text-align":"center"}},"2282",-1),ii={style:{"text-align":"left"}},ai={href:"https://leetcode.com/problems/number-of-people-that-can-be-seen-in-a-grid",target:"_blank",rel:"noopener noreferrer"},ci=t("td",{style:{"text-align":"center"}},null,-1),ri={style:{"text-align":"left"}},ui=t("code",null,"栈",-1),hi=t("code",null,"数组",-1),fi=t("code",null,"矩阵",-1),gi=t("code",null,"1+",-1),mi={style:{"text-align":"left"}},yi=t("td",{style:{"text-align":"center"}},"2289",-1),xi={style:{"text-align":"left"}},bi={href:"https://leetcode.com/problems/steps-to-make-array-non-decreasing",target:"_blank",rel:"noopener noreferrer"},pi=t("td",{style:{"text-align":"center"}},null,-1),ki={style:{"text-align":"left"}},Mi=t("code",null,"栈",-1),Ii=t("code",null,"数组",-1),vi=t("code",null,"链表",-1),Hi=t("code",null,"1+",-1),wi={style:{"text-align":"left"}},qi=t("td",{style:{"text-align":"center"}},"2297",-1),Vi={style:{"text-align":"left"}},zi={href:"https://leetcode.com/problems/jump-game-viii",target:"_blank",rel:"noopener noreferrer"},Ei=t("td",{style:{"text-align":"center"}},null,-1),Li={style:{"text-align":"left"}},ji=t("code",null,"栈",-1),Bi=t("code",null,"图",-1),Ni=t("code",null,"数组",-1),Oi=t("code",null,"3+",-1),Ci={style:{"text-align":"left"}},Ki=t("td",{style:{"text-align":"center"}},"2334",-1),Qi={style:{"text-align":"left"}},Ri={href:"https://leetcode.com/problems/subarray-with-elements-greater-than-varying-threshold",target:"_blank",rel:"noopener noreferrer"},Ai=t("td",{style:{"text-align":"center"}},null,-1),Pi={style:{"text-align":"left"}},Si=t("code",null,"栈",-1),Ti=t("code",null,"并查集",-1),Xi=t("code",null,"数组",-1),Yi=t("code",null,"1+",-1),Di={style:{"text-align":"left"}},Fi=t("td",{style:{"text-align":"center"}},"2345",-1),Gi={style:{"text-align":"left"}},Ji={href:"https://leetcode.com/problems/finding-the-number-of-visible-mountains",target:"_blank",rel:"noopener noreferrer"},Ui=t("td",{style:{"text-align":"center"}},null,-1),Wi={style:{"text-align":"left"}},Zi=t("code",null,"栈",-1),$i=t("code",null,"数组",-1),ta=t("code",null,"排序",-1),ea=t("code",null,"1+",-1),la={style:{"text-align":"left"}},oa=t("td",{style:{"text-align":"center"}},"2355",-1),na={style:{"text-align":"left"}},sa={href:"https://leetcode.com/problems/maximum-number-of-books-you-can-take",target:"_blank",rel:"noopener noreferrer"},da=t("td",{style:{"text-align":"center"}},null,-1),_a={style:{"text-align":"left"}},ia=t("code",null,"栈",-1),aa=t("code",null,"数组",-1),ca=t("code",null,"动态规划",-1),ra=t("code",null,"1+",-1),ua={style:{"text-align":"left"}},ha=t("td",{style:{"text-align":"center"}},"2454",-1),fa={style:{"text-align":"left"}},ga={href:"https://leetcode.com/problems/next-greater-element-iv",target:"_blank",rel:"noopener noreferrer"},ma=t("td",{style:{"text-align":"center"}},null,-1),ya={style:{"text-align":"left"}},xa=t("code",null,"栈",-1),ba=t("code",null,"数组",-1),pa=t("code",null,"二分查找",-1),ka=t("code",null,"3+",-1),Ma={style:{"text-align":"left"}},Ia=t("td",{style:{"text-align":"center"}},"2487",-1),va={style:{"text-align":"left"}},Ha={href:"https://leetcode.com/problems/remove-nodes-from-linked-list",target:"_blank",rel:"noopener noreferrer"},wa=t("td",{style:{"text-align":"center"}},null,-1),qa={style:{"text-align":"left"}},Va=t("code",null,"栈",-1),za=t("code",null,"递归",-1),Ea=t("code",null,"链表",-1),La=t("code",null,"1+",-1),ja={style:{"text-align":"left"}},Ba=t("td",{style:{"text-align":"center"}},"2617",-1),Na={style:{"text-align":"left"}},Oa={href:"https://leetcode.com/problems/minimum-number-of-visited-cells-in-a-grid",target:"_blank",rel:"noopener noreferrer"},Ca=t("td",{style:{"text-align":"center"}},null,-1),Ka={style:{"text-align":"left"}},Qa=t("code",null,"栈",-1),Ra=t("code",null,"广度优先搜索",-1),Aa=t("code",null,"并查集",-1),Pa=t("code",null,"5+",-1),Sa={style:{"text-align":"left"}},Ta=t("td",{style:{"text-align":"center"}},"2736",-1),Xa={style:{"text-align":"left"}},Ya={href:"https://leetcode.com/problems/maximum-sum-queries",target:"_blank",rel:"noopener noreferrer"},Da=t("td",{style:{"text-align":"center"}},null,-1),Fa={style:{"text-align":"left"}},Ga=t("code",null,"栈",-1),Ja=t("code",null,"树状数组",-1),Ua=t("code",null,"线段树",-1),Wa=t("code",null,"4+",-1),Za={style:{"text-align":"left"}},$a=t("td",{style:{"text-align":"center"}},"2818",-1),tc={style:{"text-align":"left"}},ec={href:"https://leetcode.com/problems/apply-operations-to-maximize-score",target:"_blank",rel:"noopener noreferrer"},lc=t("td",{style:{"text-align":"center"}},null,-1),oc={style:{"text-align":"left"}},nc=t("code",null,"栈",-1),sc=t("code",null,"贪心",-1),dc=t("code",null,"数组",-1),_c=t("code",null,"3+",-1),ic={style:{"text-align":"left"}},ac=t("td",{style:{"text-align":"center"}},"2832",-1),cc={style:{"text-align":"left"}},rc={href:"https://leetcode.com/problems/maximal-range-that-each-element-is-maximum-in-it",target:"_blank",rel:"noopener noreferrer"},uc=t("td",{style:{"text-align":"center"}},null,-1),hc={style:{"text-align":"left"}},fc=t("code",null,"栈",-1),gc=t("code",null,"数组",-1),mc=t("code",null,"单调栈",-1),yc={style:{"text-align":"left"}},xc=t("td",{style:{"text-align":"center"}},"2863",-1),bc={style:{"text-align":"left"}},pc={href:"https://leetcode.com/problems/maximum-length-of-semi-decreasing-subarrays",target:"_blank",rel:"noopener noreferrer"},kc=t("td",{style:{"text-align":"center"}},null,-1),Mc={style:{"text-align":"left"}},Ic=t("code",null,"栈",-1),vc=t("code",null,"数组",-1),Hc=t("code",null,"排序",-1),wc=t("code",null,"1+",-1),qc={style:{"text-align":"left"}},Vc=t("td",{style:{"text-align":"center"}},"2865",-1),zc={style:{"text-align":"left"}},Ec={href:"https://leetcode.com/problems/beautiful-towers-i",target:"_blank",rel:"noopener noreferrer"},Lc=t("td",{style:{"text-align":"center"}},null,-1),jc={style:{"text-align":"left"}},Bc=t("code",null,"栈",-1),Nc=t("code",null,"数组",-1),Oc=t("code",null,"单调栈",-1),Cc={style:{"text-align":"left"}},Kc=t("td",{style:{"text-align":"center"}},"2866",-1),Qc={style:{"text-align":"left"}},Rc={href:"https://leetcode.com/problems/beautiful-towers-ii",target:"_blank",rel:"noopener noreferrer"},Ac=t("td",{style:{"text-align":"center"}},null,-1),Pc={style:{"text-align":"left"}},Sc=t("code",null,"栈",-1),Tc=t("code",null,"数组",-1),Xc=t("code",null,"单调栈",-1),Yc={style:{"text-align":"left"}},Dc=t("td",{style:{"text-align":"center"}},"2940",-1),Fc={style:{"text-align":"left"}},Gc={href:"https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet",target:"_blank",rel:"noopener noreferrer"},Jc=t("td",{style:{"text-align":"center"}},null,-1),Uc={style:{"text-align":"left"}},Wc=t("code",null,"栈",-1),Zc=t("code",null,"树状数组",-1),$c=t("code",null,"线段树",-1),tr=t("code",null,"4+",-1),er={style:{"text-align":"left"}},lr=t("td",{style:{"text-align":"center"}},"2945",-1),or={style:{"text-align":"left"}},nr={href:"https://leetcode.com/problems/find-maximum-non-decreasing-array-length",target:"_blank",rel:"noopener noreferrer"},sr=t("td",{style:{"text-align":"center"}},null,-1),dr={style:{"text-align":"left"}},_r=t("code",null,"栈",-1),ir=t("code",null,"队列",-1),ar=t("code",null,"数组",-1),cr=t("code",null,"4+",-1),rr={style:{"text-align":"left"}},ur=t("td",{style:{"text-align":"center"}},"3113",-1),hr={style:{"text-align":"left"}},fr={href:"https://leetcode.com/problems/find-the-number-of-subarrays-where-boundary-elements-are-maximum",target:"_blank",rel:"noopener noreferrer"},gr=t("td",{style:{"text-align":"center"}},null,-1),mr={style:{"text-align":"left"}},yr=t("code",null,"栈",-1),xr=t("code",null,"数组",-1),br=t("code",null,"二分查找",-1),pr=t("code",null,"1+",-1),kr={style:{"text-align":"left"}},Mr=t("td",{style:{"text-align":"center"}},"3205",-1),Ir={style:{"text-align":"left"}},vr={href:"https://leetcode.com/problems/maximum-array-hopping-score-i",target:"_blank",rel:"noopener noreferrer"},Hr=t("td",{style:{"text-align":"center"}},null,-1),wr={style:{"text-align":"left"}},qr=t("code",null,"栈",-1),Vr=t("code",null,"贪心",-1),zr=t("code",null,"数组",-1),Er=t("code",null,"2+",-1),Lr={style:{"text-align":"left"}},jr=t("td",{style:{"text-align":"center"}},"3221",-1),Br={style:{"text-align":"left"}},Nr={href:"https://leetcode.com/problems/maximum-array-hopping-score-ii",target:"_blank",rel:"noopener noreferrer"},Or=t("td",{style:{"text-align":"center"}},null,-1),Cr={style:{"text-align":"left"}},Kr=t("code",null,"栈",-1),Qr=t("code",null,"贪心",-1),Rr=t("code",null,"数组",-1),Ar=t("code",null,"1+",-1),Pr={style:{"text-align":"left"}},Sr=t("td",{style:{"text-align":"center"}},"3229",-1),Tr={style:{"text-align":"left"}},Xr={href:"https://leetcode.com/problems/minimum-operations-to-make-array-equal-to-target",target:"_blank",rel:"noopener noreferrer"},Yr=t("td",{style:{"text-align":"center"}},null,-1),Dr={style:{"text-align":"left"}},Fr=t("code",null,"栈",-1),Gr=t("code",null,"贪心",-1),Jr=t("code",null,"数组",-1),Ur=t("code",null,"2+",-1),Wr={style:{"text-align":"left"}},Zr=t("td",{style:{"text-align":"center"}},"剑指 Offer 33",-1),$r={style:{"text-align":"left"}},tu={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"},eu={style:{"text-align":"center"}},lu={style:{"text-align":"left"}},ou=t("code",null,"栈",-1),nu=t("code",null,"树",-1),su=t("code",null,"二叉搜索树",-1),du=t("code",null,"4+",-1),_u={style:{"text-align":"left"}},iu=t("td",{style:{"text-align":"center"}},"剑指 Offer II 38",-1),au={style:{"text-align":"left"}},cu={href:"https://leetcode.cn/problems/iIQa4I",target:"_blank",rel:"noopener noreferrer"},ru=t("td",{style:{"text-align":"center"}},null,-1),uu={style:{"text-align":"left"}},hu=t("code",null,"栈",-1),fu=t("code",null,"数组",-1),gu=t("code",null,"单调栈",-1),mu={style:{"text-align":"left"}},yu=t("td",{style:{"text-align":"center"}},"剑指 Offer II 39",-1),xu={style:{"text-align":"left"}},bu={href:"https://leetcode.cn/problems/0ynMMM",target:"_blank",rel:"noopener noreferrer"},pu=t("td",{style:{"text-align":"center"}},null,-1),ku={style:{"text-align":"left"}},Mu=t("code",null,"栈",-1),Iu=t("code",null,"数组",-1),vu=t("code",null,"单调栈",-1),Hu={style:{"text-align":"left"}},wu=t("td",{style:{"text-align":"center"}},"剑指 Offer II 40",-1),qu={style:{"text-align":"left"}},Vu={href:"https://leetcode.cn/problems/PLYXKQ",target:"_blank",rel:"noopener noreferrer"},zu=t("td",{style:{"text-align":"center"}},null,-1),Eu={style:{"text-align":"left"}},Lu=t("code",null,"栈",-1),ju=t("code",null,"数组",-1),Bu=t("code",null,"动态规划",-1),Nu=t("code",null,"2+",-1),Ou={style:{"text-align":"left"}},Cu=t("td",{style:{"text-align":"center"}},"面试题 03.05",-1),Ku={style:{"text-align":"left"}},Qu={href:"https://leetcode.cn/problems/sort-of-stacks-lcci",target:"_blank",rel:"noopener noreferrer"},Ru=t("td",{style:{"text-align":"center"}},null,-1),Au={style:{"text-align":"left"}},Pu=t("code",null,"栈",-1),Su=t("code",null,"设计",-1),Tu=t("code",null,"单调栈",-1),Xu={style:{"text-align":"left"}},Yu=t("td",{style:{"text-align":"center"}},"面试题 16.16",-1),Du={style:{"text-align":"left"}},Fu={href:"https://leetcode.cn/problems/sub-sort-lcci",target:"_blank",rel:"noopener noreferrer"},Gu=t("td",{style:{"text-align":"center"}},null,-1),Ju={style:{"text-align":"left"}},Uu=t("code",null,"栈",-1),Wu=t("code",null,"贪心",-1),Zu=t("code",null,"数组",-1),$u=t("code",null,"3+",-1),th={style:{"text-align":"left"}},eh=t("td",{style:{"text-align":"center"}},"面试题 17.21",-1),lh={style:{"text-align":"left"}},oh={href:"https://leetcode.cn/problems/volume-of-histogram-lcci",target:"_blank",rel:"noopener noreferrer"},nh=t("td",{style:{"text-align":"center"}},null,-1),sh={style:{"text-align":"left"}},dh=t("code",null,"栈",-1),_h=t("code",null,"数组",-1),ih=t("code",null,"双指针",-1),ah=t("code",null,"2+",-1),ch={style:{"text-align":"left"}};function rh(uh,hh){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return a(),c("div",null,[h,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/outline/tag/matrix.html"},{default:o(()=>[x]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[p]),_:1}),l(),e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[k]),_:1}),l(),M,l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[q]),_:1}),l(),e(n,{to:"/outline/tag/string-matching.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[z]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/outline/tag/ordered-set.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/outline/tag/topological-sort.html"},{default:o(()=>[O]),_:1}),l(),e(n,{to:"/outline/tag/shortest-path.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:o(()=>[Q]),_:1}),l(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[A]),_:1}),l(),e(n,{to:"/outline/tag/trie.html"},{default:o(()=>[P]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/outline/tag/suffix-array.html"},{default:o(()=>[X]),_:1})]),Y,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:o(()=>[D]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[F]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[G]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[J]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[U]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/outline/tag/counting-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/outline/tag/radix-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/outline/tag/merge-sort.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/outline/tag/quickselect.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/outline/tag/memoization.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/outline/tag/counting.html"},{default:o(()=>[rt]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[ut]),_:1}),l(),e(n,{to:"/outline/tag/bitmask.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/outline/tag/hash-function.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:o(()=>[gt]),_:1}),l(),e(n,{to:"/outline/tag/line-sweep.html"},{default:o(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/outline/tag/number-theory.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/outline/tag/geometry.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/outline/tag/game-theory.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/outline/tag/combinatorics.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/outline/tag/randomized.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/outline/tag/database.html"},{default:o(()=>[Vt]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[Et]),_:1}),l(),e(n,{to:"/outline/tag/brainteaser.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/outline/tag/interactive.html"},{default:o(()=>[jt]),_:1}),l(),e(n,{to:"/outline/tag/iterator.html"},{default:o(()=>[Bt]),_:1}),l(),e(n,{to:"/outline/tag/concurrency.html"},{default:o(()=>[Nt]),_:1})])]),Ot,r(" prettier-ignore "),t("table",null,[Ct,t("tbody",null,[t("tr",null,[Kt,t("td",Qt,[t("a",Rt,[l("接雨水"),e(s)])]),t("td",At,[e(n,{to:"/problem/0042.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Pt,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[St]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Tt]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[Xt]),_:1}),l(),Yt]),t("td",Dt,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ft,t("td",Gt,[t("a",Jt,[l("柱状图中最大的矩形"),e(s)])]),t("td",Ut,[e(n,{to:"/problem/0084.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Wt,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Zt]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[$t]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[te]),_:1})]),t("td",ee,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[le,t("td",oe,[t("a",ne,[l("最大矩形"),e(s)])]),t("td",se,[e(n,{to:"/problem/0085.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",de,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[_e]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ie]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[ae]),_:1}),l(),ce]),t("td",re,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ue,t("td",he,[t("a",fe,[l("验证二叉搜索树的前序遍历序列"),e(s)])]),ge,t("td",me,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ye]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[xe]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[be]),_:1}),l(),pe]),t("td",ke,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Me,t("td",Ie,[t("a",ve,[l("去除重复字母"),e(s)])]),t("td",He,[e(n,{to:"/problem/0316.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",we,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[qe]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Ve]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[ze]),_:1}),l(),Ee]),t("td",Le,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[je,t("td",Be,[t("a",Ne,[l("拼接最大数"),e(s)])]),Oe,t("td",Ce,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Ke]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Qe]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Re]),_:1}),l(),Ae]),t("td",Pe,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Se,t("td",Te,[t("a",Xe,[l("移掉 K 位数字"),e(s)])]),Ye,t("td",De,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Fe]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Ge]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[Je]),_:1}),l(),Ue]),t("td",We,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ze,t("td",$e,[t("a",tl,[l("132 模式"),e(s)])]),el,t("td",ll,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ol]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[nl]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[sl]),_:1}),l(),dl]),t("td",_l,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[il,t("td",al,[t("a",cl,[l("下一个更大元素 I"),e(s)])]),t("td",rl,[e(n,{to:"/problem/0496.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",ul,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[hl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[fl]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[gl]),_:1}),l(),ml]),t("td",yl,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[xl,t("td",bl,[t("a",pl,[l("下一个更大元素 II"),e(s)])]),t("td",kl,[e(n,{to:"/problem/0503.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Ml,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Il]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[vl]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[Hl]),_:1})]),t("td",wl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ql,t("td",Vl,[t("a",zl,[l("最短无序连续子数组"),e(s)])]),El,t("td",Ll,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[jl]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Bl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Nl]),_:1}),l(),Ol]),t("td",Cl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Kl,t("td",Ql,[t("a",Rl,[l("最大二叉树"),e(s)])]),t("td",Al,[e(n,{to:"/problem/0654.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Pl,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Sl]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Tl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Xl]),_:1}),l(),Yl]),t("td",Dl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Fl,t("td",Gl,[t("a",Jl,[l("每日温度"),e(s)])]),t("td",Ul,[e(n,{to:"/problem/0739.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Wl,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Zl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[$l]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[to]),_:1})]),t("td",eo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[lo,t("td",oo,[t("a",no,[l("最多能完成排序的块 II"),e(s)])]),so,t("td",_o,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[io]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[ao]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[co]),_:1}),l(),ro]),t("td",uo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ho,t("td",fo,[t("a",go,[l("最多能完成排序的块"),e(s)])]),mo,t("td",yo,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[xo]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[bo]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[po]),_:1}),l(),ko]),t("td",Mo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Io,t("td",vo,[t("a",Ho,[l("车队"),e(s)])]),wo,t("td",qo,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Vo]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[zo]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[Eo]),_:1}),l(),Lo]),t("td",jo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Bo,t("td",No,[t("a",Oo,[l("股票价格跨度"),e(s)])]),Co,t("td",Ko,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Qo]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Ro]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[Ao]),_:1}),l(),Po]),t("td",So,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[To,t("td",Xo,[t("a",Yo,[l("子数组的最小值之和"),e(s)])]),Do,t("td",Fo,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Go]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Jo]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Uo]),_:1}),l(),Wo]),t("td",Zo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[$o,t("td",tn,[t("a",en,[l("最大宽度坡"),e(s)])]),t("td",ln,[e(n,{to:"/problem/0962.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",on,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[nn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[sn]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[dn]),_:1})]),t("td",_n,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[an,t("td",cn,[t("a",rn,[l("奇偶跳"),e(s)])]),un,t("td",hn,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[fn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[gn]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[mn]),_:1}),l(),yn]),t("td",xn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[bn,t("td",pn,[t("a",kn,[l("前序遍历构造二叉搜索树"),e(s)])]),t("td",Mn,[e(n,{to:"/problem/1008.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",In,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[vn]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Hn]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[wn]),_:1}),l(),qn]),t("td",Vn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[zn,t("td",En,[t("a",Ln,[l("链表中的下一个更大节点"),e(s)])]),jn,t("td",Bn,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Nn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[On]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[Cn]),_:1}),l(),Kn]),t("td",Qn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Rn,t("td",An,[t("a",Pn,[l("有效子数组的数目"),e(s)])]),Sn,t("td",Tn,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Xn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Yn]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[Dn]),_:1})]),t("td",Fn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Gn,t("td",Jn,[t("a",Un,[l("不同字符的最小子序列"),e(s)])]),t("td",Wn,[e(n,{to:"/problem/1081.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Zn,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[$n]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[ts]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[es]),_:1}),l(),ls]),t("td",os,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ns,t("td",ss,[t("a",ds,[l("表现良好的最长时间段"),e(s)])]),_s,t("td",is,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[as]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[cs]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[rs]),_:1}),l(),us]),t("td",hs,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[fs,t("td",gs,[t("a",ms,[l("叶值的最小代价生成树"),e(s)])]),ys,t("td",xs,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[bs]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[ps]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ks]),_:1}),l(),Ms]),t("td",Is,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[vs,t("td",Hs,[t("a",ws,[l("商品折扣后的最终价格"),e(s)])]),t("td",qs,[e(n,{to:"/problem/1475.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Vs,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[zs]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Es]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[Ls]),_:1})]),t("td",js,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Bs,t("td",Ns,[t("a",Os,[l("统计全 1 子矩形"),e(s)])]),Cs,t("td",Ks,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Qs]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Rs]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[As]),_:1}),l(),Ps]),t("td",Ss,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ts,t("td",Xs,[t("a",Ys,[l("形成目标数组的子数组最少增加次数"),e(s)])]),Ds,t("td",Fs,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Gs]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Js]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Us]),_:1}),l(),Ws]),t("td",Zs,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[$s,t("td",td,[t("a",ed,[l("删除最短的子数组使剩余数组有序"),e(s)])]),ld,t("td",od,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[nd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[sd]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[dd]),_:1}),l(),_d]),t("td",id,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ad,t("td",cd,[t("a",rd,[l("找出最具竞争力的子序列"),e(s)])]),ud,t("td",hd,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[fd]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[gd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[md]),_:1}),l(),yd]),t("td",xd,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[bd,t("td",pd,[t("a",kd,[l("能看到海景的建筑物"),e(s)])]),Md,t("td",Id,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[vd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Hd]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[wd]),_:1})]),t("td",qd,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Vd,t("td",zd,[t("a",Ed,[l("车队 II"),e(s)])]),Ld,t("td",jd,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Bd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Nd]),_:1}),l(),e(n,{to:"/outline/tag/math.html"},{default:o(()=>[Od]),_:1}),l(),Cd]),t("td",Kd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Qd,t("td",Rd,[t("a",Ad,[l("好子数组的最大分数"),e(s)])]),Pd,t("td",Sd,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Td]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Xd]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[Yd]),_:1}),l(),Dd]),t("td",Fd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Gd,t("td",Jd,[t("a",Ud,[l("子数组最小乘积的最大值"),e(s)])]),Wd,t("td",Zd,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[$d]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[t_]),_:1}),l(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:o(()=>[e_]),_:1}),l(),l_]),t("td",o_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[n_,t("td",s_,[t("a",d_,[l("队列中可以看到的人数"),e(s)])]),__,t("td",i_,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[a_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[c_]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[r_]),_:1})]),t("td",u_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[h_,t("td",f_,[t("a",g_,[l("所有子数组最小值中的最大值"),e(s)])]),m_,t("td",y_,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[x_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[b_]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[p_]),_:1})]),t("td",k_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[M_,t("td",I_,[t("a",v_,[l("游戏中弱角色的数量"),e(s)])]),H_,t("td",w_,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[q_]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[V_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[z_]),_:1}),l(),E_]),t("td",L_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[j_,t("td",B_,[t("a",N_,[l("含特定字母的最小子序列"),e(s)])]),O_,t("td",C_,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[K_]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Q_]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[R_]),_:1}),l(),A_]),t("td",P_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[S_,t("td",T_,[t("a",X_,[l("子数组范围和"),e(s)])]),Y_,t("td",D_,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[F_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[G_]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[J_]),_:1})]),t("td",U_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[W_,t("td",Z_,[t("a",$_,[l("巫师的总力量和"),e(s)])]),ti,t("td",ei,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[li]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[oi]),_:1}),l(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:o(()=>[ni]),_:1}),l(),si]),t("td",di,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[_i,t("td",ii,[t("a",ai,[l("在一个网格中可以看到的人数"),e(s)])]),ci,t("td",ri,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ui]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[hi]),_:1}),l(),e(n,{to:"/outline/tag/matrix.html"},{default:o(()=>[fi]),_:1}),l(),gi]),t("td",mi,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[yi,t("td",xi,[t("a",bi,[l("使数组按非递减顺序排列"),e(s)])]),pi,t("td",ki,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Mi]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ii]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[vi]),_:1}),l(),Hi]),t("td",wi,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[qi,t("td",Vi,[t("a",zi,[l("跳跃游戏 VIII"),e(s)])]),Ei,t("td",Li,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ji]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[Bi]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ni]),_:1}),l(),Oi]),t("td",Ci,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ki,t("td",Qi,[t("a",Ri,[l("元素值大于变化阈值的子数组"),e(s)])]),Ai,t("td",Pi,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Si]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[Ti]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Xi]),_:1}),l(),Yi]),t("td",Di,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Fi,t("td",Gi,[t("a",Ji,[l("寻找可见山的数量"),e(s)])]),Ui,t("td",Wi,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Zi]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[$i]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[ta]),_:1}),l(),ea]),t("td",la,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[oa,t("td",na,[t("a",sa,[l("你能拿走的最大图书数量"),e(s)])]),da,t("td",_a,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ia]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[aa]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[ca]),_:1}),l(),ra]),t("td",ua,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ha,t("td",fa,[t("a",ga,[l("下一个更大元素 IV"),e(s)])]),ma,t("td",ya,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[xa]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ba]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[pa]),_:1}),l(),ka]),t("td",Ma,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ia,t("td",va,[t("a",Ha,[l("从链表中移除节点"),e(s)])]),wa,t("td",qa,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Va]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[za]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[Ea]),_:1}),l(),La]),t("td",ja,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ba,t("td",Na,[t("a",Oa,[l("网格图中最少访问的格子数"),e(s)])]),Ca,t("td",Ka,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Qa]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Ra]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[Aa]),_:1}),l(),Pa]),t("td",Sa,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ta,t("td",Xa,[t("a",Ya,[l("最大和查询"),e(s)])]),Da,t("td",Fa,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Ga]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ja]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Ua]),_:1}),l(),Wa]),t("td",Za,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[$a,t("td",tc,[t("a",ec,[l("操作使得分最大"),e(s)])]),lc,t("td",oc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[nc]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[sc]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[dc]),_:1}),l(),_c]),t("td",ic,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ac,t("td",cc,[t("a",rc,[l("每个元素为最大值的最大范围"),e(s)])]),uc,t("td",hc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[fc]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[gc]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[mc]),_:1})]),t("td",yc,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[xc,t("td",bc,[t("a",pc,[l("最长半递减子数组的长度"),e(s)])]),kc,t("td",Mc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Ic]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[vc]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[Hc]),_:1}),l(),wc]),t("td",qc,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Vc,t("td",zc,[t("a",Ec,[l("美丽塔 I"),e(s)])]),Lc,t("td",jc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Bc]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Nc]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[Oc]),_:1})]),t("td",Cc,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Kc,t("td",Qc,[t("a",Rc,[l("美丽塔 II"),e(s)])]),Ac,t("td",Pc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Sc]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Tc]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[Xc]),_:1})]),t("td",Yc,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Dc,t("td",Fc,[t("a",Gc,[l("找到 Alice 和 Bob 可以相遇的建筑"),e(s)])]),Jc,t("td",Uc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Wc]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Zc]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[$c]),_:1}),l(),tr]),t("td",er,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[lr,t("td",or,[t("a",nr,[l("找到最大非递减数组的长度"),e(s)])]),sr,t("td",dr,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[_r]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ir]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ar]),_:1}),l(),cr]),t("td",rr,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ur,t("td",hr,[t("a",fr,[l("边界元素是最大值的子数组数目"),e(s)])]),gr,t("td",mr,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[yr]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[xr]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[br]),_:1}),l(),pr]),t("td",kr,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Mr,t("td",Ir,[t("a",vr,[l("最大数组跳跃得分 I"),e(s)])]),Hr,t("td",wr,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[qr]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Vr]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[zr]),_:1}),l(),Er]),t("td",Lr,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[jr,t("td",Br,[t("a",Nr,[l("最大数组跳跃得分 II"),e(s)])]),Or,t("td",Cr,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Kr]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Qr]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Rr]),_:1}),l(),Ar]),t("td",Pr,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Sr,t("td",Tr,[t("a",Xr,[l("使数组等于目标数组所需的最少操作次数"),e(s)])]),Yr,t("td",Dr,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Fr]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Gr]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Jr]),_:1}),l(),Ur]),t("td",Wr,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Zr,t("td",$r,[t("a",tu,[l("二叉搜索树的后序遍历序列"),e(s)])]),t("td",eu,[e(n,{to:"/problem/jz_offer_33_1.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",lu,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ou]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[nu]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[su]),_:1}),l(),du]),t("td",_u,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[iu,t("td",au,[t("a",cu,[l("每日温度"),e(s)])]),ru,t("td",uu,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[hu]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[fu]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[gu]),_:1})]),t("td",mu,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[yu,t("td",xu,[t("a",bu,[l("直方图最大矩形面积"),e(s)])]),pu,t("td",ku,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Mu]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Iu]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[vu]),_:1})]),t("td",Hu,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[wu,t("td",qu,[t("a",Vu,[l("矩阵中最大的矩形"),e(s)])]),zu,t("td",Eu,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Lu]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ju]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Bu]),_:1}),l(),Nu]),t("td",Ou,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Cu,t("td",Ku,[t("a",Qu,[l("栈排序"),e(s)])]),Ru,t("td",Au,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Pu]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Su]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[Tu]),_:1})]),t("td",Xu,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Yu,t("td",Du,[t("a",Fu,[l("部分排序"),e(s)])]),Gu,t("td",Ju,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Uu]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Wu]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Zu]),_:1}),l(),$u]),t("td",th,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[eh,t("td",lh,[t("a",oh,[l("直方图的水量"),e(s)])]),nh,t("td",sh,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[dh]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[_h]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[ih]),_:1}),l(),ah]),t("td",ch,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])])])])])}const gh=i(u,[["render",rh],["__file","monotonic-stack.html.vue"]]);export{gh as default};
