import{_ as r,r as l,o as i,c as d,a as t,b as e,d as n,w as s,f as p,e as u}from"./app-UFGGnKWA.js";const _={},h=t("h1",{id:"_2-两数相加",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-两数相加","aria-hidden":"true"},"#"),e(" 2. 两数相加")],-1),m=t("code",null,"递归",-1),k=t("code",null,"链表",-1),g=t("code",null,"数学",-1),b={href:"https://leetcode.cn/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> , and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: l1 = [2,4,3], l2 = [5,6,4]</p><p>Output: [7,0,8]</p><p>Explanation: 342 + 465 = 807.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: l1 = [0], l2 = [0]</p><p>Output: [0]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</p><p>Output: [8,9,9,9,0,0,0,1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>It is guaranteed that the list represents a number that does not have leading zeros.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>2 个逆序的链表，要求从低位开始相加，得出结果也逆序输出，返回值是逆序结果链表的头结点。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>需要注意的是各种进位问题。</p><p>极端情况，例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Input: (9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9) + (1 -&gt; )
Output: 0 -&gt; 0 -&gt; 0 -&gt; 0 -&gt; 0 -&gt; 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了处理方法统一，可以先建立一个虚拟头结点，这个虚拟头结点的 <code>next</code> 指向真正的 <code>head</code>，这样 <code>head</code> 不需要单独处理，直接 <code>while</code> 循环即可。另外判断循环终止的条件不用是 <code>p.next ！= null</code>，这样最后一位还需要额外计算，循环终止条件应该是 <code>p != null</code>。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> head <span class="token operator">=</span> List<span class="token punctuation">;</span>
	<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">=</span> sum <span class="token operator">+</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
			l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">=</span> sum <span class="token operator">+</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
			l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			sum <span class="token operator">=</span> sum <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
		head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

		sum <span class="token operator">=</span> carry<span class="token punctuation">;</span>
		carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> List<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,22),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"center"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),L=t("td",{style:{"text-align":"center"}},"43",-1),N=t("td",{style:{"text-align":"left"}},"字符串相乘",-1),I={style:{"text-align":"center"}},E={style:{"text-align":"left"}},q=t("code",null,"数学",-1),C=t("code",null,"字符串",-1),V=t("code",null,"模拟",-1),j=t("td",{style:{"text-align":"center"}},"🟠",-1),O={style:{"text-align":"center"}},T={href:"https://leetcode.cn/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},z={href:"https://leetcode.com/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"center"}},"67",-1),R=t("td",{style:{"text-align":"left"}},"二进制求和",-1),Y={style:{"text-align":"center"}},A={style:{"text-align":"left"}},M=t("code",null,"位运算",-1),S=t("code",null,"数学",-1),D=t("code",null,"字符串",-1),F=t("code",null,"1+",-1),G=t("td",{style:{"text-align":"center"}},"🟢",-1),H={style:{"text-align":"center"}},J={href:"https://leetcode.cn/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},K={href:"https://leetcode.com/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},P=t("td",{style:{"text-align":"center"}},"371",-1),Q=t("td",{style:{"text-align":"left"}},"两整数之和",-1),U=t("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},X=t("code",null,"位运算",-1),Z=t("code",null,"数学",-1),$=t("td",{style:{"text-align":"center"}},"🟠",-1),tt={style:{"text-align":"center"}},et={href:"https://leetcode.cn/problems/sum-of-two-integers",target:"_blank",rel:"noopener noreferrer"},nt={href:"https://leetcode.com/problems/sum-of-two-integers",target:"_blank",rel:"noopener noreferrer"},st=t("td",{style:{"text-align":"center"}},"415",-1),at=t("td",{style:{"text-align":"left"}},"字符串相加",-1),ot={style:{"text-align":"center"}},lt={style:{"text-align":"left"}},ct=t("code",null,"数学",-1),rt=t("code",null,"字符串",-1),it=t("code",null,"模拟",-1),dt=t("td",{style:{"text-align":"center"}},"🟢",-1),pt={style:{"text-align":"center"}},ut={href:"https://leetcode.cn/problems/add-strings",target:"_blank",rel:"noopener noreferrer"},_t={href:"https://leetcode.com/problems/add-strings",target:"_blank",rel:"noopener noreferrer"},ht=t("td",{style:{"text-align":"center"}},"445",-1),mt=t("td",{style:{"text-align":"left"}},"两数相加 II",-1),kt={style:{"text-align":"center"}},gt={style:{"text-align":"left"}},bt=t("code",null,"栈",-1),ft=t("code",null,"链表",-1),vt=t("code",null,"数学",-1),yt=t("td",{style:{"text-align":"center"}},"🟠",-1),xt={style:{"text-align":"center"}},wt={href:"https://leetcode.cn/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"},Lt={href:"https://leetcode.com/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"},Nt=t("td",{style:{"text-align":"center"}},"989",-1),It=t("td",{style:{"text-align":"left"}},"数组形式的整数加法",-1),Et=t("td",{style:{"text-align":"center"}},null,-1),qt={style:{"text-align":"left"}},Ct=t("code",null,"数组",-1),Vt=t("code",null,"数学",-1),jt=t("td",{style:{"text-align":"center"}},"🟢",-1),Ot={style:{"text-align":"center"}},Tt={href:"https://leetcode.cn/problems/add-to-array-form-of-integer",target:"_blank",rel:"noopener noreferrer"},zt={href:"https://leetcode.com/problems/add-to-array-form-of-integer",target:"_blank",rel:"noopener noreferrer"},Bt=t("td",{style:{"text-align":"center"}},"1634",-1),Rt=t("td",{style:{"text-align":"left"}},"求两个多项式链表的和 🔒",-1),Yt=t("td",{style:{"text-align":"center"}},null,-1),At={style:{"text-align":"left"}},Mt=t("code",null,"链表",-1),St=t("code",null,"数学",-1),Dt=t("code",null,"双指针",-1),Ft=t("td",{style:{"text-align":"center"}},"🟠",-1),Gt={style:{"text-align":"center"}},Ht={href:"https://leetcode.cn/problems/add-two-polynomials-represented-as-linked-lists",target:"_blank",rel:"noopener noreferrer"},Jt={href:"https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists",target:"_blank",rel:"noopener noreferrer"},Kt=t("td",{style:{"text-align":"center"}},"2816",-1),Pt=t("td",{style:{"text-align":"left"}},"翻倍以链表形式表示的数字",-1),Qt=t("td",{style:{"text-align":"center"}},null,-1),Ut={style:{"text-align":"left"}},Wt=t("code",null,"栈",-1),Xt=t("code",null,"链表",-1),Zt=t("code",null,"数学",-1),$t=t("td",{style:{"text-align":"center"}},"🟠",-1),te={style:{"text-align":"center"}},ee={href:"https://leetcode.cn/problems/double-a-number-represented-as-a-linked-list",target:"_blank",rel:"noopener noreferrer"},ne={href:"https://leetcode.com/problems/double-a-number-represented-as-a-linked-list",target:"_blank",rel:"noopener noreferrer"};function se(ae,oe){const c=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return i(),d("div",null,[h,t("p",null,[e("🟠 "),n(c,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/tag/recursion.html"},{default:s(()=>[m]),_:1}),e(),n(a,{to:"/tag/linked-list.html"},{default:s(()=>[k]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[g]),_:1}),e("  🔗 "),t("a",b,[f,n(o)]),e(),t("a",v,[y,n(o)])]),x,p(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[L,N,t("td",I,[n(a,{to:"/problem/0043.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",E,[n(a,{to:"/tag/math.html"},{default:s(()=>[q]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[C]),_:1}),e(),n(a,{to:"/tag/simulation.html"},{default:s(()=>[V]),_:1})]),j,t("td",O,[t("a",T,[e("🀄️"),n(o)]),e(),t("a",z,[e("🔗"),n(o)])])]),t("tr",null,[B,R,t("td",Y,[n(a,{to:"/problem/0067.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",A,[n(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[M]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[S]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[D]),_:1}),e(),F]),G,t("td",H,[t("a",J,[e("🀄️"),n(o)]),e(),t("a",K,[e("🔗"),n(o)])])]),t("tr",null,[P,Q,U,t("td",W,[n(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[X]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[Z]),_:1})]),$,t("td",tt,[t("a",et,[e("🀄️"),n(o)]),e(),t("a",nt,[e("🔗"),n(o)])])]),t("tr",null,[st,at,t("td",ot,[n(a,{to:"/problem/0415.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",lt,[n(a,{to:"/tag/math.html"},{default:s(()=>[ct]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/tag/simulation.html"},{default:s(()=>[it]),_:1})]),dt,t("td",pt,[t("a",ut,[e("🀄️"),n(o)]),e(),t("a",_t,[e("🔗"),n(o)])])]),t("tr",null,[ht,mt,t("td",kt,[n(a,{to:"/problem/0445.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",gt,[n(a,{to:"/tag/stack.html"},{default:s(()=>[bt]),_:1}),e(),n(a,{to:"/tag/linked-list.html"},{default:s(()=>[ft]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[vt]),_:1})]),yt,t("td",xt,[t("a",wt,[e("🀄️"),n(o)]),e(),t("a",Lt,[e("🔗"),n(o)])])]),t("tr",null,[Nt,It,Et,t("td",qt,[n(a,{to:"/tag/array.html"},{default:s(()=>[Ct]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[Vt]),_:1})]),jt,t("td",Ot,[t("a",Tt,[e("🀄️"),n(o)]),e(),t("a",zt,[e("🔗"),n(o)])])]),t("tr",null,[Bt,Rt,Yt,t("td",At,[n(a,{to:"/tag/linked-list.html"},{default:s(()=>[Mt]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[St]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Dt]),_:1})]),Ft,t("td",Gt,[t("a",Ht,[e("🀄️"),n(o)]),e(),t("a",Jt,[e("🔗"),n(o)])])]),t("tr",null,[Kt,Pt,Qt,t("td",Ut,[n(a,{to:"/tag/stack.html"},{default:s(()=>[Wt]),_:1}),e(),n(a,{to:"/tag/linked-list.html"},{default:s(()=>[Xt]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[Zt]),_:1})]),$t,t("td",te,[t("a",ee,[e("🀄️"),n(o)]),e(),t("a",ne,[e("🔗"),n(o)])])])])])])}const ce=r(_,[["render",se],["__file","0002.html.vue"]]);export{ce as default};
