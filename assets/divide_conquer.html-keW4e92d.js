import{_ as a,r as _,o as c,c as i,f as r,a as t,d as o,w as l,b as e}from"./app-JnDxddK3.js";const h={},f=t("h1",{id:"_3-3-分治算法",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_3-3-分治算法","aria-hidden":"true"},"#"),e(" 3.3 分治算法")],-1),u=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),m=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),g=t("td",{style:{"text-align":"center"}},"4",-1),p=t("td",{style:{"text-align":"left"}},"寻找两个正序数组的中位数",-1),x={style:{"text-align":"center"}},y={style:{"text-align":"left"}},b=t("code",null,"数组",-1),k=t("code",null,"二分查找",-1),E=t("code",null,"分治",-1),T={style:{"text-align":"left"}},w={style:{"text-align":"center"}},v={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},q=t("td",{style:{"text-align":"center"}},"23",-1),I=t("td",{style:{"text-align":"left"}},"合并 K 个升序链表",-1),L={style:{"text-align":"center"}},R={style:{"text-align":"left"}},A=t("code",null,"链表",-1),B=t("code",null,"分治",-1),C=t("code",null,"堆（优先队列）",-1),D=t("code",null,"1+",-1),M={style:{"text-align":"left"}},O={style:{"text-align":"center"}},S={href:"https://leetcode.cn/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},j=t("td",{style:{"text-align":"center"}},"53",-1),H=t("td",{style:{"text-align":"left"}},"最大子数组和",-1),P={style:{"text-align":"center"}},z={style:{"text-align":"left"}},U=t("code",null,"数组",-1),K=t("code",null,"分治",-1),F=t("code",null,"动态规划",-1),G={style:{"text-align":"left"}},J={style:{"text-align":"center"}},Q={href:"https://leetcode.cn/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},W={href:"https://leetcode.com/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},X=t("td",{style:{"text-align":"center"}},"241",-1),Y=t("td",{style:{"text-align":"left"}},"为运算表达式设计优先级",-1),Z=t("td",{style:{"text-align":"center"}},null,-1),$={style:{"text-align":"left"}},tt=t("code",null,"递归",-1),et=t("code",null,"记忆化搜索",-1),ot=t("code",null,"数学",-1),lt=t("code",null,"2+",-1),nt={style:{"text-align":"left"}},st={style:{"text-align":"center"}},dt={href:"https://leetcode.cn/problems/different-ways-to-add-parentheses",target:"_blank",rel:"noopener noreferrer"},rt={href:"https://leetcode.com/problems/different-ways-to-add-parentheses",target:"_blank",rel:"noopener noreferrer"},_t=t("td",{style:{"text-align":"center"}},"169",-1),at=t("td",{style:{"text-align":"left"}},"多数元素",-1),ct={style:{"text-align":"center"}},it={style:{"text-align":"left"}},ht=t("code",null,"数组",-1),ft=t("code",null,"哈希表",-1),ut=t("code",null,"分治",-1),mt=t("code",null,"2+",-1),gt={style:{"text-align":"left"}},pt={style:{"text-align":"center"}},xt={href:"https://leetcode.cn/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},yt={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},bt=t("td",{style:{"text-align":"center"}},"50",-1),kt=t("td",{style:{"text-align":"left"}},"Pow(x, n)",-1),Et={style:{"text-align":"center"}},Tt={style:{"text-align":"left"}},wt=t("code",null,"递归",-1),vt=t("code",null,"数学",-1),Nt={style:{"text-align":"left"}},qt={style:{"text-align":"center"}},It={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},Lt={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},Rt=t("td",{style:{"text-align":"center"}},"14",-1),At=t("td",{style:{"text-align":"left"}},"最长公共前缀",-1),Bt={style:{"text-align":"center"}},Ct={style:{"text-align":"left"}},Dt=t("code",null,"字典树",-1),Mt=t("code",null,"字符串",-1),Ot={style:{"text-align":"left"}},St={style:{"text-align":"center"}},Vt={href:"https://leetcode.cn/problems/longest-common-prefix",target:"_blank",rel:"noopener noreferrer"},jt={href:"https://leetcode.com/problems/longest-common-prefix",target:"_blank",rel:"noopener noreferrer"},Ht=t("td",{style:{"text-align":"center"}},"剑指 Offer 33",-1),Pt=t("td",{style:{"text-align":"left"}},"二叉搜索树的后序遍历序列",-1),zt={style:{"text-align":"center"}},Ut={style:{"text-align":"left"}},Kt=t("code",null,"栈",-1),Ft=t("code",null,"树",-1),Gt=t("code",null,"二叉搜索树",-1),Jt=t("code",null,"4+",-1),Qt={style:{"text-align":"left"}},Wt={style:{"text-align":"center"}},Xt={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"};function Yt(Zt,$t){const n=_("RouterLink"),d=_("font"),s=_("ExternalLinkIcon");return c(),i("div",null,[f,r(" START TABLE "),r(" Please keep comment here to allow auto update "),r(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),u,r(" prettier-ignore "),t("table",null,[m,t("tbody",null,[t("tr",null,[g,p,t("td",x,[o(n,{to:"/problem/0004.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",y,[o(n,{to:"/tag/array.html"},{default:l(()=>[b]),_:1}),e(),o(n,{to:"/tag/binary-search.html"},{default:l(()=>[k]),_:1}),e(),o(n,{to:"/tag/divide-and-conquer.html"},{default:l(()=>[E]),_:1})]),t("td",T,[o(d,{color:"#ff334b"},{default:l(()=>[e("Hard")]),_:1})]),t("td",w,[t("a",v,[e("🀄️"),o(s)]),e(),t("a",N,[e("🔗"),o(s)])])]),t("tr",null,[q,I,t("td",L,[o(n,{to:"/problem/0023.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",R,[o(n,{to:"/tag/linked-list.html"},{default:l(()=>[A]),_:1}),e(),o(n,{to:"/tag/divide-and-conquer.html"},{default:l(()=>[B]),_:1}),e(),o(n,{to:"/tag/heap-priority-queue.html"},{default:l(()=>[C]),_:1}),e(),D]),t("td",M,[o(d,{color:"#ff334b"},{default:l(()=>[e("Hard")]),_:1})]),t("td",O,[t("a",S,[e("🀄️"),o(s)]),e(),t("a",V,[e("🔗"),o(s)])])]),t("tr",null,[j,H,t("td",P,[o(n,{to:"/problem/0053.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",z,[o(n,{to:"/tag/array.html"},{default:l(()=>[U]),_:1}),e(),o(n,{to:"/tag/divide-and-conquer.html"},{default:l(()=>[K]),_:1}),e(),o(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[F]),_:1})]),t("td",G,[o(d,{color:"#ffb800"},{default:l(()=>[e("Medium")]),_:1})]),t("td",J,[t("a",Q,[e("🀄️"),o(s)]),e(),t("a",W,[e("🔗"),o(s)])])]),t("tr",null,[X,Y,Z,t("td",$,[o(n,{to:"/tag/recursion.html"},{default:l(()=>[tt]),_:1}),e(),o(n,{to:"/tag/memoization.html"},{default:l(()=>[et]),_:1}),e(),o(n,{to:"/tag/math.html"},{default:l(()=>[ot]),_:1}),e(),lt]),t("td",nt,[o(d,{color:"#ffb800"},{default:l(()=>[e("Medium")]),_:1})]),t("td",st,[t("a",dt,[e("🀄️"),o(s)]),e(),t("a",rt,[e("🔗"),o(s)])])]),t("tr",null,[_t,at,t("td",ct,[o(n,{to:"/problem/0169.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",it,[o(n,{to:"/tag/array.html"},{default:l(()=>[ht]),_:1}),e(),o(n,{to:"/tag/hash-table.html"},{default:l(()=>[ft]),_:1}),e(),o(n,{to:"/tag/divide-and-conquer.html"},{default:l(()=>[ut]),_:1}),e(),mt]),t("td",gt,[o(d,{color:"#15bd66"},{default:l(()=>[e("Easy")]),_:1})]),t("td",pt,[t("a",xt,[e("🀄️"),o(s)]),e(),t("a",yt,[e("🔗"),o(s)])])]),t("tr",null,[bt,kt,t("td",Et,[o(n,{to:"/problem/0050.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",Tt,[o(n,{to:"/tag/recursion.html"},{default:l(()=>[wt]),_:1}),e(),o(n,{to:"/tag/math.html"},{default:l(()=>[vt]),_:1})]),t("td",Nt,[o(d,{color:"#ffb800"},{default:l(()=>[e("Medium")]),_:1})]),t("td",qt,[t("a",It,[e("🀄️"),o(s)]),e(),t("a",Lt,[e("🔗"),o(s)])])]),t("tr",null,[Rt,At,t("td",Bt,[o(n,{to:"/problem/0014.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",Ct,[o(n,{to:"/tag/trie.html"},{default:l(()=>[Dt]),_:1}),e(),o(n,{to:"/tag/string.html"},{default:l(()=>[Mt]),_:1})]),t("td",Ot,[o(d,{color:"#15bd66"},{default:l(()=>[e("Easy")]),_:1})]),t("td",St,[t("a",Vt,[e("🀄️"),o(s)]),e(),t("a",jt,[e("🔗"),o(s)])])]),t("tr",null,[Ht,Pt,t("td",zt,[o(n,{to:"/offer/jz_offer_33_1.html"},{default:l(()=>[e("[✓]")]),_:1})]),t("td",Ut,[o(n,{to:"/tag/stack.html"},{default:l(()=>[Kt]),_:1}),e(),o(n,{to:"/tag/tree.html"},{default:l(()=>[Ft]),_:1}),e(),o(n,{to:"/tag/binary-search-tree.html"},{default:l(()=>[Gt]),_:1}),e(),Jt]),t("td",Qt,[o(d,{color:"#ffb800"},{default:l(()=>[e("Medium")]),_:1})]),t("td",Wt,[t("a",Xt,[e("🀄️"),o(s)])])])])])])}const ee=a(h,[["render",Yt],["__file","divide_conquer.html.vue"]]);export{ee as default};
