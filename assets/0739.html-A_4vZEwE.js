import{_ as c,r as l,o as i,c as r,a as n,b as t,d as s,w as e,f as u,e as d}from"./app-Ob52y8QZ.js";const k={},h=n("h1",{id:"_739-每日温度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_739-每日温度","aria-hidden":"true"},"#"),t(" 739. 每日温度")],-1),m=n("code",null,"栈",-1),_=n("code",null,"数组",-1),f=n("code",null,"单调栈",-1),g={href:"https://leetcode.cn/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of integers <code>temperatures</code> represents the daily temperatures, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is the number of days you have to wait after the</em> <code>ith</code> <em>day to get a warmer temperature</em>. If there is no future day for which this is possible, keep <code>answer[i] == 0</code> instead.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: temperatures = [73,74,75,71,69,72,76,73]</p><p>Output: [1,1,4,2,1,1,0,0]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: temperatures = [30,40,50,60]</p><p>Output: [1,1,1,0]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: temperatures = [30,60,90]</p><p>Output: [1,1,0]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= temperatures.length &lt;= 10^5</code></li><li><code>30 &lt;= temperatures[i] &lt;= 100</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>栈（stack）是一种非常适合解决这一类“下一大于”问题的数据结构。通过栈，可以有效地跟踪当前未找到更高温度的天数。</p><ol><li><p><strong>遍历温度数组</strong>：</p><ul><li>使用一个 <code>for</code> 循环遍历 <code>temperatures</code> 数组。对于每个温度： <ul><li>使用一个 <code>while</code> 循环检查栈顶的索引所对应的温度是否小于当前温度。</li></ul></li><li>如果小于，说明找到了一个更高的温度：从栈中弹出索引，并记录当前温度的索引（作为更高温度的索引）到 <code>map</code> 中。</li><li>将当前的索引压入栈中，表示当前温度尚未找到更高的温度。</li></ul></li><li><p><strong>构建结果数组</strong>：</p><ul><li>遍历 <code>temperatures</code> 数组，利用 <code>map</code> 中存储的索引计算每一天距离下一个更高温度的天数： <ul><li>如果当前索引在 <code>map</code> 中存在，则用 <code>map.get(i) - i</code> 计算天数（下一个更高温度的索引减去当前索引）。</li><li>如果不存在，则说明没有找到更高温度，返回 0。</li></ul></li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>最后，返回更新后的 <code>temperatures</code> 数组，表示每一天距离下一个更高温度的天数。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>： <code>O(n)</code>，其中 n 是 <code>temperatures</code> 数组的长度。</p><ul><li>需要遍历一次 <code>temperatures</code> 数组。</li><li>在每个温度的处理过程中，栈的每个索引在整个过程中最多被入栈和出栈各一次。因此，入栈和出栈操作的总次数也为 <code>O(n)</code>。</li><li>因此，整个算法的时间复杂度为 <code>O(n)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>： <code>O(n)</code></p><ul><li>使用了一个栈来存储索引。在最坏情况下（例如，温度是递增的），栈可能会存储所有的索引，空间复杂度为 <code>O(n)</code>。</li><li>还使用了一个 <code>Map</code> 来存储每个索引对应的下一个更高温度的索引，最坏情况下也需要存储 <code>n</code> 个元素，空间复杂度同样是 <code>O(n)</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">temperatures</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">dailyTemperatures</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">temperatures</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>
			stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>
			temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> temperatures<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,20),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),O=n("td",{style:{"text-align":"center"}},"496",-1),E=n("td",{style:{"text-align":"left"}},"下一个更大元素 I",-1),I={style:{"text-align":"center"}},q={style:{"text-align":"left"}},C=n("code",null,"栈",-1),L=n("code",null,"数组",-1),N=n("code",null,"哈希表",-1),V=n("code",null,"1+",-1),M={style:{"text-align":"left"}},j={style:{"text-align":"center"}},B={href:"https://leetcode.cn/problems/next-greater-element-i",target:"_blank",rel:"noopener noreferrer"},R={href:"https://leetcode.com/problems/next-greater-element-i",target:"_blank",rel:"noopener noreferrer"},T=n("td",{style:{"text-align":"center"}},"901",-1),G=n("td",{style:{"text-align":"left"}},"股票价格跨度",-1),S=n("td",{style:{"text-align":"center"}},null,-1),z={style:{"text-align":"left"}},A=n("code",null,"栈",-1),D=n("code",null,"设计",-1),F=n("code",null,"数据流",-1),H=n("code",null,"1+",-1),J={style:{"text-align":"left"}},K={style:{"text-align":"center"}},P={href:"https://leetcode.cn/problems/online-stock-span",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://leetcode.com/problems/online-stock-span",target:"_blank",rel:"noopener noreferrer"};function U(W,X){const p=l("font"),a=l("RouterLink"),o=l("ExternalLinkIcon");return i(),r("div",null,[h,n("p",null,[t("🟠 "),s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(a,{to:"/tag/stack.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[_]),_:1}),t(),s(a,{to:"/tag/monotonic-stack.html"},{default:e(()=>[f]),_:1}),t("  🔗 "),n("a",g,[b,s(o)]),t(),n("a",v,[y,s(o)])]),x,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[O,E,n("td",I,[s(a,{to:"/problem/0496.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",q,[s(a,{to:"/tag/stack.html"},{default:e(()=>[C]),_:1}),t(),s(a,{to:"/tag/array.html"},{default:e(()=>[L]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[N]),_:1}),t(),V]),n("td",M,[s(p,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})]),n("td",j,[n("a",B,[t("🀄️"),s(o)]),t(),n("a",R,[t("🔗"),s(o)])])]),n("tr",null,[T,G,S,n("td",z,[s(a,{to:"/tag/stack.html"},{default:e(()=>[A]),_:1}),t(),s(a,{to:"/tag/design.html"},{default:e(()=>[D]),_:1}),t(),s(a,{to:"/tag/data-stream.html"},{default:e(()=>[F]),_:1}),t(),H]),n("td",J,[s(p,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})]),n("td",K,[n("a",P,[t("🀄️"),s(o)]),t(),n("a",Q,[t("🔗"),s(o)])])])])])])}const Z=c(k,[["render",U],["__file","0739.html.vue"]]);export{Z as default};
