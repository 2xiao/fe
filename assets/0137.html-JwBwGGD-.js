import{_ as u,r as l,o as p,c as k,a as n,b as e,d as s,w as t,f as m,e as h}from"./app-ZVJfwurD.js";const b={},_={id:"_137-只出现一次的数字-ii",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#_137-只出现一次的数字-ii","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0137.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"位运算",-1),y=n("code",null,"数组",-1),w={href:"https://leetcode.cn/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"力扣",-1),I={href:"https://leetcode.com/problems/single-number-ii",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"LeetCode",-1),O=h('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code> where every element appears <strong>three times</strong> except for one, which appears <strong>exactly once</strong>. <em>Find the single element and return it</em>.</p><p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [2,2,3,2]</p><p>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,1,0,1,0,1,99]</p><p>Output: 99</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li><li>Each element in <code>nums</code> appears exactly <strong>three times</strong> except for one element which appears <strong>once</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong> 。请你找出并返回那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法且使用常数级空间来解决此问题。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-位运算" tabindex="-1"><a class="header-anchor" href="#思路一-位运算" aria-hidden="true">#</a> 思路一：位运算</h3><ol><li>使用两个变量 <code>ones</code> 和 <code>twos</code> 来分别记录当前位中出现 1 次和 2 次的数字，初始化为 <code>0</code>；</li><li>遍历数组中的每一个数字，更新 <code>ones</code> 和 <code>twos</code> 的状态；</li><li>使用位运算更新 <code>twos</code>，只在 <code>ones</code> 中存在的数字中增加计数，这样可以防止将已经出现 3 次的数字再次计入；</li></ol><ul><li><code>twos |= ones &amp; num</code>: 将 <code>twos</code> 中的位更新为那些同时在 <code>ones</code> 和 <code>num</code> 中为 <code>1</code> 的位；</li><li><code>ones &amp; num</code>: 这部分计算在 <code>ones</code> 和 <code>num</code> 中都为 <code>1</code> 的位，结果是一个新的整数；</li><li><code>twos |=</code>: 这部分是将计算得到的结果与 <code>twos</code> 进行按位或（OR）操作，更新 <code>twos</code> 的值；</li></ul><ol start="4"><li>使用异或运算更新 <code>ones</code>，添加当前数字；</li></ol><ul><li><code>ones ^= num</code>: 任何一个数字异或它自己都等于 <code>0</code> (<code>x ^ x = 0</code>)，出现两次的数字在异或中会被抵消掉；</li></ul><ol start="5"><li><p><code>threes</code> 变量通过 <code>ones &amp; twos</code> 计算得出，表示哪些数字出现了 3 次；</p></li><li><p>使用位清除操作将这些数字从 <code>ones</code> 和 <code>twos</code> 中移除，<code>ones &amp;= ~threes</code>；</p></li></ol><ul><li><code>~threes</code>: 这是 <code>threes</code> 的按位取反（bitwise NOT），将所有的二进制位反转。即，如果 <code>threes</code> 中某个位置是 <code>1</code>，那么 <code>~threes</code> 中该位置就是 <code>0</code>，反之亦然。</li><li><code>ones</code> 中的每一位和 <code>~threes</code> 中的每一位进行按位与（AND）操作。</li><li>如果 <code>threes</code> 中的某一位是 <code>1</code>，那么 <code>~threes</code> 中的对应位是 <code>0</code>，因此 <code>ones</code> 的该位将被置为 <code>0</code>。</li><li>如果 <code>threes</code> 中的某一位是 <code>0</code>，那么 <code>~threes</code> 中的对应位是 <code>1</code>，因此 <code>ones</code> 的该位保持不变。</li></ul><ol start="7"><li>在遍历完成后，<code>ones</code> 中的值就是只出现一次的数字。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，只需遍历数组一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用了常数级别的额外空间。</li></ul><hr><h3 id="思路二-位运算" tabindex="-1"><a class="header-anchor" href="#思路二-位运算" aria-hidden="true">#</a> 思路二：位运算</h3><ol><li><strong>位计数</strong>：初始化一个大小为 32 的数组 <code>count</code>（因为整数通常是 32 位的），用来计数每个位上 <code>1</code> 出现的次数；</li><li><strong>遍历</strong>：遍历数组，对于每个数，更新 <code>count</code> 每个位上 1 的个数；</li><li><strong>取模</strong>：对于每个位，如果该位的计数可以被 <code>3</code> 整除，说明该位不是唯一的数的一部分；否则，说明该位是唯一的数的一部分；</li><li><strong>构造结果</strong>：计算结果，根据计数结果构造只出现一次的数；</li></ol><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析：</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，其中 <code>n</code> 是数组的长度，需要遍历数组两次。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，只使用了常量的额外空间来存储计数数组（大小为 32）。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',29),E=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"nums"),e(`
 * `),n("span",{class:"token keyword"},"@return"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"var"),e(),n("span",{class:"token function-variable function"},"singleNumber"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
	`),n("span",{class:"token keyword"},"let"),e(" ones "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),e(`
		twos `),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(`

	`),n("span",{class:"token keyword"},"for"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),e(" num "),n("span",{class:"token keyword"},"of"),e(" nums"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
		`),n("span",{class:"token comment"},"// 更新 twos：只记录在 ones 中已经出现过的数字"),e(`
		twos `),n("span",{class:"token operator"},"|="),e(" ones "),n("span",{class:"token operator"},"&"),e(" num"),n("span",{class:"token punctuation"},";"),e(`

		`),n("span",{class:"token comment"},"// 更新 ones：将当前数字加入 ones"),e(`
		ones `),n("span",{class:"token operator"},"^="),e(" num"),n("span",{class:"token punctuation"},";"),e(`

		`),n("span",{class:"token comment"},"// 将出现 3 次的数字从 ones 和 twos 中移除"),e(`
		`),n("span",{class:"token keyword"},"const"),e(" threes "),n("span",{class:"token operator"},"="),e(" ones "),n("span",{class:"token operator"},"&"),e(" twos"),n("span",{class:"token punctuation"},";"),e(`
		ones `),n("span",{class:"token operator"},"&="),e(),n("span",{class:"token operator"},"~"),e("threes"),n("span",{class:"token punctuation"},";"),e(`
		twos `),n("span",{class:"token operator"},"&="),e(),n("span",{class:"token operator"},"~"),e("threes"),n("span",{class:"token punctuation"},";"),e(`
	`),n("span",{class:"token punctuation"},"}"),e(`

	`),n("span",{class:"token keyword"},"return"),e(" ones"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token comment"},"// 结果在 ones 中"),e(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[e(`/**
 * `),n("span",{class:"token keyword"},"@param"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),e(),n("span",{class:"token parameter"},"nums"),e(`
 * `),n("span",{class:"token keyword"},"@return"),e(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),e("number"),n("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),n("span",{class:"token keyword"},"var"),e(),n("span",{class:"token function-variable function"},"singleNumber"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"nums"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
	`),n("span",{class:"token keyword"},"const"),e(" count "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"fill"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`

	`),n("span",{class:"token comment"},"// 统计每个位上1的个数"),e(`
	`),n("span",{class:"token keyword"},"for"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),e(" num "),n("span",{class:"token keyword"},"of"),e(" nums"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
		`),n("span",{class:"token keyword"},"for"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),e(" i "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(" i "),n("span",{class:"token operator"},"<"),e(),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},";"),e(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
			count`),n("span",{class:"token punctuation"},"["),e("i"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token operator"},"+="),e(),n("span",{class:"token punctuation"},"("),e("num "),n("span",{class:"token operator"},">>"),e(" i"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token operator"},"&"),e(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),e(),n("span",{class:"token comment"},"// 统计第i位上的1的个数"),e(`
		`),n("span",{class:"token punctuation"},"}"),e(`
	`),n("span",{class:"token punctuation"},"}"),e(`

	`),n("span",{class:"token keyword"},"let"),e(" result "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(`
	`),n("span",{class:"token comment"},"// 通过计数结果构造数返回值"),e(`
	`),n("span",{class:"token keyword"},"for"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),e(" i "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),e(" i "),n("span",{class:"token operator"},"<"),e(),n("span",{class:"token number"},"32"),n("span",{class:"token punctuation"},";"),e(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
		`),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("count"),n("span",{class:"token punctuation"},"["),e("i"),n("span",{class:"token punctuation"},"]"),e(),n("span",{class:"token operator"},"%"),e(),n("span",{class:"token number"},"3"),e(),n("span",{class:"token operator"},"!=="),e(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
			result `),n("span",{class:"token operator"},"|="),e(),n("span",{class:"token number"},"1"),e(),n("span",{class:"token operator"},"<<"),e(" i"),n("span",{class:"token punctuation"},";"),e(`
		`),n("span",{class:"token punctuation"},"}"),e(`
	`),n("span",{class:"token punctuation"},"}"),e(`

	`),n("span",{class:"token keyword"},"return"),e(" result"),n("span",{class:"token punctuation"},";"),e(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),e(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),A=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),L=n("td",{style:{"text-align":"center"}},"136",-1),V={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},T={style:{"text-align":"left"}},B=n("code",null,"位运算",-1),M=n("code",null,"数组",-1),D={style:{"text-align":"left"}},F=n("td",{style:{"text-align":"center"}},"260",-1),G={style:{"text-align":"left"}},S={href:"https://leetcode.com/problems/single-number-iii",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},z=n("code",null,"位运算",-1),H=n("code",null,"数组",-1),J={style:{"text-align":"left"}},K=n("td",{style:{"text-align":"center"}},"3158",-1),P={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/find-the-xor-of-numbers-which-appear-twice",target:"_blank",rel:"noopener noreferrer"},U=n("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},Z=n("code",null,"位运算",-1),$=n("code",null,"数组",-1),nn=n("code",null,"哈希表",-1),en={style:{"text-align":"left"}};function sn(tn,on){const a=l("ExternalLinkIcon"),c=l("font"),o=l("RouterLink"),d=l("CodeTabs");return p(),k("div",null,[n("h1",_,[g,e(),n("a",f,[e("137. 只出现一次的数字 II"),s(a)])]),n("p",null,[e("🟠 "),s(c,{color:"#ffb800"},{default:t(()=>[e("Medium")]),_:1}),e("  🔖  "),s(o,{to:"/tag/bit-manipulation.html"},{default:t(()=>[v]),_:1}),e(),s(o,{to:"/tag/array.html"},{default:t(()=>[y]),_:1}),e("  🔗 "),n("a",w,[x,s(a)]),e(),n("a",I,[N,s(a)])]),O,s(d,{id:"220",data:[{id:"思路一"},{id:"思路二"}]},{title0:t(({value:i,isActive:r})=>[e("思路一")]),title1:t(({value:i,isActive:r})=>[e("思路二")]),tab0:t(({value:i,isActive:r})=>[E]),tab1:t(({value:i,isActive:r})=>[j]),_:1}),C,m(" prettier-ignore "),n("table",null,[A,n("tbody",null,[n("tr",null,[L,n("td",V,[n("a",q,[e("只出现一次的数字"),s(a)])]),n("td",R,[s(o,{to:"/problem/0136.html"},{default:t(()=>[e("[✓]")]),_:1})]),n("td",T,[s(o,{to:"/tag/bit-manipulation.html"},{default:t(()=>[B]),_:1}),e(),s(o,{to:"/tag/array.html"},{default:t(()=>[M]),_:1})]),n("td",D,[s(c,{color:"#15bd66"},{default:t(()=>[e("Easy")]),_:1})])]),n("tr",null,[F,n("td",G,[n("a",S,[e("只出现一次的数字 III"),s(a)])]),X,n("td",Y,[s(o,{to:"/tag/bit-manipulation.html"},{default:t(()=>[z]),_:1}),e(),s(o,{to:"/tag/array.html"},{default:t(()=>[H]),_:1})]),n("td",J,[s(c,{color:"#ffb800"},{default:t(()=>[e("Medium")]),_:1})])]),n("tr",null,[K,n("td",P,[n("a",Q,[e("求出出现两次数字的 XOR 值"),s(a)])]),U,n("td",W,[s(o,{to:"/tag/bit-manipulation.html"},{default:t(()=>[Z]),_:1}),e(),s(o,{to:"/tag/array.html"},{default:t(()=>[$]),_:1}),e(),s(o,{to:"/tag/hash-table.html"},{default:t(()=>[nn]),_:1})]),n("td",en,[s(c,{color:"#15bd66"},{default:t(()=>[e("Easy")]),_:1})])])])])])}const cn=u(b,[["render",sn],["__file","0137.html.vue"]]);export{cn as default};
