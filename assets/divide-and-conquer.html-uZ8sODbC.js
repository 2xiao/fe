import{_ as i,r as _,o as a,c as r,a as t,b as e,w as l,d as o,f as c}from"./app-ynO5B_DP.js";const h={},u=t("h1",{id:"分治",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#分治","aria-hidden":"true"},"#"),o(" 分治")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),x=t("code",null,"矩阵",-1),b=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),q=t("code",null,"单调栈",-1),v=t("code",null,"队列",-1),M=t("code",null,"单调队列",-1),z=t("code",null,"堆（优先队列）",-1),H=t("code",null,"哈希表",-1),w=t("code",null,"字符串",-1),I=t("code",null,"字符串匹配",-1),E=t("code",null,"树",-1),K=t("code",null,"二叉树",-1),O=t("code",null,"二叉搜索树",-1),j=t("code",null,"最小生成树",-1),B=t("code",null,"图",-1),C=t("code",null,"有序集合",-1),L=t("code",null,"拓扑排序",-1),N=t("code",null,"最短路",-1),V=t("code",null,"强连通分量",-1),R=t("code",null,"欧拉回路",-1),T=t("code",null,"双连通分量",-1),W=t("code",null,"并查集",-1),A=t("code",null,"字典树",-1),S=t("code",null,"线段树",-1),X=t("code",null,"树状数组",-1),D=t("code",null,"后缀数组",-1),F=t("p",null,[t("strong",null,"算法")],-1),G=t("code",null,"枚举",-1),J=t("code",null,"递归",-1),P=t("span",{class:"blue"},"分治",-1),Q=t("code",null,"回溯",-1),U=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),ot=t("code",null,"归并排序",-1),lt=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),it=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),rt=t("code",null,"前缀和",-1),ct=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),ut=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),xt=t("code",null,"数学",-1),bt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),qt=t("code",null,"模拟",-1),vt=t("code",null,"组合数学",-1),Mt=t("code",null,"随机化",-1),zt=t("code",null,"概率与统计",-1),Ht=t("code",null,"水塘抽样",-1),wt=t("code",null,"拒绝采样",-1),It=t("code",null,"数据库",-1),Et=t("code",null,"设计",-1),Kt=t("code",null,"数据流",-1),Ot=t("code",null,"脑筋急转弯",-1),jt=t("code",null,"交互",-1),Bt=t("code",null,"迭代器",-1),Ct=t("code",null,"多线程",-1),Lt=t("hr",null,null,-1),Nt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Vt=t("td",{style:{"text-align":"center"}},"4",-1),Rt={style:{"text-align":"left"}},Tt={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},Wt={style:{"text-align":"center"}},At={href:"/problem/0004",target:"_blank",rel:"noopener noreferrer"},St={style:{"text-align":"left"}},Xt=t("code",null,"数组",-1),Dt=t("code",null,"二分查找",-1),Ft=t("code",null,"分治",-1),Gt={style:{"text-align":"left"}},Jt=t("td",{style:{"text-align":"center"}},"23",-1),Pt={style:{"text-align":"left"}},Qt={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Ut={style:{"text-align":"center"}},Yt={href:"/problem/0023",target:"_blank",rel:"noopener noreferrer"},Zt={style:{"text-align":"left"}},$t=t("code",null,"链表",-1),te=t("code",null,"分治",-1),ee=t("code",null,"堆（优先队列）",-1),oe=t("code",null,"1+",-1),le={style:{"text-align":"left"}},ne=t("td",{style:{"text-align":"center"}},"53",-1),se={style:{"text-align":"left"}},de={href:"https://leetcode.com/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},_e={style:{"text-align":"center"}},ie={href:"/problem/0053",target:"_blank",rel:"noopener noreferrer"},ae={style:{"text-align":"left"}},re=t("code",null,"数组",-1),ce=t("code",null,"分治",-1),he=t("code",null,"动态规划",-1),ue={style:{"text-align":"left"}},fe=t("td",{style:{"text-align":"center"}},"105",-1),ge={style:{"text-align":"left"}},me={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},ye={style:{"text-align":"center"}},xe={href:"/problem/0105",target:"_blank",rel:"noopener noreferrer"},be={style:{"text-align":"left"}},pe=t("code",null,"树",-1),ke=t("code",null,"数组",-1),qe=t("code",null,"哈希表",-1),ve=t("code",null,"2+",-1),Me={style:{"text-align":"left"}},ze=t("td",{style:{"text-align":"center"}},"106",-1),He={style:{"text-align":"left"}},we={href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ie={style:{"text-align":"center"}},Ee={href:"/problem/0106",target:"_blank",rel:"noopener noreferrer"},Ke={style:{"text-align":"left"}},Oe=t("code",null,"树",-1),je=t("code",null,"数组",-1),Be=t("code",null,"哈希表",-1),Ce=t("code",null,"2+",-1),Le={style:{"text-align":"left"}},Ne=t("td",{style:{"text-align":"center"}},"108",-1),Ve={style:{"text-align":"left"}},Re={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Te={style:{"text-align":"center"}},We={href:"/problem/0108",target:"_blank",rel:"noopener noreferrer"},Ae={style:{"text-align":"left"}},Se=t("code",null,"树",-1),Xe=t("code",null,"二叉搜索树",-1),De=t("code",null,"数组",-1),Fe=t("code",null,"2+",-1),Ge={style:{"text-align":"left"}},Je=t("td",{style:{"text-align":"center"}},"109",-1),Pe={style:{"text-align":"left"}},Qe={href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ue={style:{"text-align":"center"}},Ye={href:"/problem/0109",target:"_blank",rel:"noopener noreferrer"},Ze={style:{"text-align":"left"}},$e=t("code",null,"树",-1),to=t("code",null,"二叉搜索树",-1),eo=t("code",null,"链表",-1),oo=t("code",null,"2+",-1),lo={style:{"text-align":"left"}},no=t("td",{style:{"text-align":"center"}},"148",-1),so={style:{"text-align":"left"}},_o={href:"https://leetcode.com/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},io={style:{"text-align":"center"}},ao={href:"/problem/0148",target:"_blank",rel:"noopener noreferrer"},ro={style:{"text-align":"left"}},co=t("code",null,"链表",-1),ho=t("code",null,"双指针",-1),uo=t("code",null,"分治",-1),fo=t("code",null,"2+",-1),go={style:{"text-align":"left"}},mo=t("td",{style:{"text-align":"center"}},"169",-1),yo={style:{"text-align":"left"}},xo={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},bo={style:{"text-align":"center"}},po={href:"/problem/0169",target:"_blank",rel:"noopener noreferrer"},ko={style:{"text-align":"left"}},qo=t("code",null,"数组",-1),vo=t("code",null,"哈希表",-1),Mo=t("code",null,"分治",-1),zo=t("code",null,"2+",-1),Ho={style:{"text-align":"left"}},wo=t("td",{style:{"text-align":"center"}},"190",-1),Io={style:{"text-align":"left"}},Eo={href:"https://leetcode.com/problems/reverse-bits",target:"_blank",rel:"noopener noreferrer"},Ko={style:{"text-align":"center"}},Oo={href:"/problem/0190",target:"_blank",rel:"noopener noreferrer"},jo={style:{"text-align":"left"}},Bo=t("code",null,"位运算",-1),Co=t("code",null,"分治",-1),Lo={style:{"text-align":"left"}},No=t("td",{style:{"text-align":"center"}},"191",-1),Vo={style:{"text-align":"left"}},Ro={href:"https://leetcode.com/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},To={style:{"text-align":"center"}},Wo={href:"/problem/0191",target:"_blank",rel:"noopener noreferrer"},Ao={style:{"text-align":"left"}},So=t("code",null,"位运算",-1),Xo=t("code",null,"分治",-1),Do={style:{"text-align":"left"}},Fo=t("td",{style:{"text-align":"center"}},"215",-1),Go={style:{"text-align":"left"}},Jo={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},Po={style:{"text-align":"center"}},Qo={href:"/problem/0215",target:"_blank",rel:"noopener noreferrer"},Uo={style:{"text-align":"left"}},Yo=t("code",null,"数组",-1),Zo=t("code",null,"分治",-1),$o=t("code",null,"快速选择",-1),tl=t("code",null,"2+",-1),el={style:{"text-align":"left"}},ol=t("td",{style:{"text-align":"center"}},"218",-1),ll={style:{"text-align":"left"}},nl={href:"https://leetcode.com/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},sl=t("td",{style:{"text-align":"center"}},null,-1),dl={style:{"text-align":"left"}},_l=t("code",null,"树状数组",-1),il=t("code",null,"线段树",-1),al=t("code",null,"数组",-1),rl=t("code",null,"4+",-1),cl={style:{"text-align":"left"}},hl=t("td",{style:{"text-align":"center"}},"240",-1),ul={style:{"text-align":"left"}},fl={href:"https://leetcode.com/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},gl={style:{"text-align":"center"}},ml={href:"/problem/0240",target:"_blank",rel:"noopener noreferrer"},yl={style:{"text-align":"left"}},xl=t("code",null,"数组",-1),bl=t("code",null,"二分查找",-1),pl=t("code",null,"分治",-1),kl=t("code",null,"1+",-1),ql={style:{"text-align":"left"}},vl=t("td",{style:{"text-align":"center"}},"315",-1),Ml={style:{"text-align":"left"}},zl={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Hl=t("td",{style:{"text-align":"center"}},null,-1),wl={style:{"text-align":"left"}},Il=t("code",null,"树状数组",-1),El=t("code",null,"线段树",-1),Kl=t("code",null,"数组",-1),Ol=t("code",null,"4+",-1),jl={style:{"text-align":"left"}},Bl=t("td",{style:{"text-align":"center"}},"324",-1),Cl={style:{"text-align":"left"}},Ll={href:"https://leetcode.com/problems/wiggle-sort-ii",target:"_blank",rel:"noopener noreferrer"},Nl=t("td",{style:{"text-align":"center"}},null,-1),Vl={style:{"text-align":"left"}},Rl=t("code",null,"贪心",-1),Tl=t("code",null,"数组",-1),Wl=t("code",null,"分治",-1),Al=t("code",null,"2+",-1),Sl={style:{"text-align":"left"}},Xl=t("td",{style:{"text-align":"center"}},"327",-1),Dl={style:{"text-align":"left"}},Fl={href:"https://leetcode.com/problems/count-of-range-sum",target:"_blank",rel:"noopener noreferrer"},Gl=t("td",{style:{"text-align":"center"}},null,-1),Jl={style:{"text-align":"left"}},Pl=t("code",null,"树状数组",-1),Ql=t("code",null,"线段树",-1),Ul=t("code",null,"数组",-1),Yl=t("code",null,"4+",-1),Zl={style:{"text-align":"left"}},$l=t("td",{style:{"text-align":"center"}},"347",-1),tn={style:{"text-align":"left"}},en={href:"https://leetcode.com/problems/top-k-frequent-elements",target:"_blank",rel:"noopener noreferrer"},on={style:{"text-align":"center"}},ln={href:"/problem/0347",target:"_blank",rel:"noopener noreferrer"},nn={style:{"text-align":"left"}},sn=t("code",null,"数组",-1),dn=t("code",null,"哈希表",-1),_n=t("code",null,"分治",-1),an=t("code",null,"5+",-1),rn={style:{"text-align":"left"}},cn=t("td",{style:{"text-align":"center"}},"372",-1),hn={style:{"text-align":"left"}},un={href:"https://leetcode.com/problems/super-pow",target:"_blank",rel:"noopener noreferrer"},fn=t("td",{style:{"text-align":"center"}},null,-1),gn={style:{"text-align":"left"}},mn=t("code",null,"数学",-1),yn=t("code",null,"分治",-1),xn={style:{"text-align":"left"}},bn=t("td",{style:{"text-align":"center"}},"395",-1),pn={style:{"text-align":"left"}},kn={href:"https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters",target:"_blank",rel:"noopener noreferrer"},qn=t("td",{style:{"text-align":"center"}},null,-1),vn={style:{"text-align":"left"}},Mn=t("code",null,"哈希表",-1),zn=t("code",null,"字符串",-1),Hn=t("code",null,"分治",-1),wn=t("code",null,"1+",-1),In={style:{"text-align":"left"}},En=t("td",{style:{"text-align":"center"}},"427",-1),Kn={style:{"text-align":"left"}},On={href:"https://leetcode.com/problems/construct-quad-tree",target:"_blank",rel:"noopener noreferrer"},jn={style:{"text-align":"center"}},Bn={href:"/problem/0427",target:"_blank",rel:"noopener noreferrer"},Cn={style:{"text-align":"left"}},Ln=t("code",null,"树",-1),Nn=t("code",null,"数组",-1),Vn=t("code",null,"分治",-1),Rn=t("code",null,"1+",-1),Tn={style:{"text-align":"left"}},Wn=t("td",{style:{"text-align":"center"}},"493",-1),An={style:{"text-align":"left"}},Sn={href:"https://leetcode.com/problems/reverse-pairs",target:"_blank",rel:"noopener noreferrer"},Xn=t("td",{style:{"text-align":"center"}},null,-1),Dn={style:{"text-align":"left"}},Fn=t("code",null,"树状数组",-1),Gn=t("code",null,"线段树",-1),Jn=t("code",null,"数组",-1),Pn=t("code",null,"4+",-1),Qn={style:{"text-align":"left"}},Un=t("td",{style:{"text-align":"center"}},"558",-1),Yn={style:{"text-align":"left"}},Zn={href:"https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",target:"_blank",rel:"noopener noreferrer"},$n=t("td",{style:{"text-align":"center"}},null,-1),ts={style:{"text-align":"left"}},es=t("code",null,"树",-1),os=t("code",null,"分治",-1),ls={style:{"text-align":"left"}},ns=t("td",{style:{"text-align":"center"}},"654",-1),ss={style:{"text-align":"left"}},ds={href:"https://leetcode.com/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},_s={style:{"text-align":"center"}},is={href:"/problem/0654",target:"_blank",rel:"noopener noreferrer"},as={style:{"text-align":"left"}},rs=t("code",null,"栈",-1),cs=t("code",null,"树",-1),hs=t("code",null,"数组",-1),us=t("code",null,"3+",-1),fs={style:{"text-align":"left"}},gs=t("td",{style:{"text-align":"center"}},"889",-1),ms={style:{"text-align":"left"}},ys={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},xs={style:{"text-align":"center"}},bs={href:"/problem/0889",target:"_blank",rel:"noopener noreferrer"},ps={style:{"text-align":"left"}},ks=t("code",null,"树",-1),qs=t("code",null,"数组",-1),vs=t("code",null,"哈希表",-1),Ms=t("code",null,"2+",-1),zs={style:{"text-align":"left"}},Hs=t("td",{style:{"text-align":"center"}},"912",-1),ws={style:{"text-align":"left"}},Is={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Es=t("td",{style:{"text-align":"center"}},null,-1),Ks={style:{"text-align":"left"}},Os=t("code",null,"数组",-1),js=t("code",null,"分治",-1),Bs=t("code",null,"桶排序",-1),Cs=t("code",null,"5+",-1),Ls={style:{"text-align":"left"}},Ns=t("td",{style:{"text-align":"center"}},"918",-1),Vs={style:{"text-align":"left"}},Rs={href:"https://leetcode.com/problems/maximum-sum-circular-subarray",target:"_blank",rel:"noopener noreferrer"},Ts={style:{"text-align":"center"}},Ws={href:"/problem/0918",target:"_blank",rel:"noopener noreferrer"},As={style:{"text-align":"left"}},Ss=t("code",null,"队列",-1),Xs=t("code",null,"数组",-1),Ds=t("code",null,"分治",-1),Fs=t("code",null,"2+",-1),Gs={style:{"text-align":"left"}},Js=t("td",{style:{"text-align":"center"}},"932",-1),Ps={style:{"text-align":"left"}},Qs={href:"https://leetcode.com/problems/beautiful-array",target:"_blank",rel:"noopener noreferrer"},Us=t("td",{style:{"text-align":"center"}},null,-1),Ys={style:{"text-align":"left"}},Zs=t("code",null,"数组",-1),$s=t("code",null,"数学",-1),td=t("code",null,"分治",-1),ed={style:{"text-align":"left"}},od=t("td",{style:{"text-align":"center"}},"973",-1),ld={style:{"text-align":"left"}},nd={href:"https://leetcode.com/problems/k-closest-points-to-origin",target:"_blank",rel:"noopener noreferrer"},sd={style:{"text-align":"center"}},dd={href:"/problem/0973",target:"_blank",rel:"noopener noreferrer"},_d={style:{"text-align":"left"}},id=t("code",null,"几何",-1),ad=t("code",null,"数组",-1),rd=t("code",null,"数学",-1),cd=t("code",null,"4+",-1),hd={style:{"text-align":"left"}},ud=t("td",{style:{"text-align":"center"}},"1274",-1),fd={style:{"text-align":"left"}},gd={href:"https://leetcode.com/problems/number-of-ships-in-a-rectangle",target:"_blank",rel:"noopener noreferrer"},md=t("td",{style:{"text-align":"center"}},null,-1),yd={style:{"text-align":"left"}},xd=t("code",null,"数组",-1),bd=t("code",null,"分治",-1),pd=t("code",null,"交互",-1),kd={style:{"text-align":"left"}},qd=t("td",{style:{"text-align":"center"}},"1382",-1),vd={style:{"text-align":"left"}},Md={href:"https://leetcode.com/problems/balance-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},zd=t("td",{style:{"text-align":"center"}},null,-1),Hd={style:{"text-align":"left"}},wd=t("code",null,"贪心",-1),Id=t("code",null,"树",-1),Ed=t("code",null,"深度优先搜索",-1),Kd=t("code",null,"3+",-1),Od={style:{"text-align":"left"}},jd=t("td",{style:{"text-align":"center"}},"1569",-1),Bd={style:{"text-align":"left"}},Cd={href:"https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst",target:"_blank",rel:"noopener noreferrer"},Ld=t("td",{style:{"text-align":"center"}},null,-1),Nd={style:{"text-align":"left"}},Vd=t("code",null,"树",-1),Rd=t("code",null,"并查集",-1),Td=t("code",null,"二叉搜索树",-1),Wd=t("code",null,"7+",-1),Ad={style:{"text-align":"left"}},Sd=t("td",{style:{"text-align":"center"}},"1649",-1),Xd={style:{"text-align":"left"}},Dd={href:"https://leetcode.com/problems/create-sorted-array-through-instructions",target:"_blank",rel:"noopener noreferrer"},Fd=t("td",{style:{"text-align":"center"}},null,-1),Gd={style:{"text-align":"left"}},Jd=t("code",null,"树状数组",-1),Pd=t("code",null,"线段树",-1),Qd=t("code",null,"数组",-1),Ud=t("code",null,"4+",-1),Yd={style:{"text-align":"left"}},Zd=t("td",{style:{"text-align":"center"}},"1738",-1),$d={style:{"text-align":"left"}},t_={href:"https://leetcode.com/problems/find-kth-largest-xor-coordinate-value",target:"_blank",rel:"noopener noreferrer"},e_=t("td",{style:{"text-align":"center"}},null,-1),o_={style:{"text-align":"left"}},l_=t("code",null,"位运算",-1),n_=t("code",null,"数组",-1),s_=t("code",null,"分治",-1),d_=t("code",null,"5+",-1),__={style:{"text-align":"left"}},i_=t("td",{style:{"text-align":"center"}},"1763",-1),a_={style:{"text-align":"left"}},r_={href:"https://leetcode.com/problems/longest-nice-substring",target:"_blank",rel:"noopener noreferrer"},c_=t("td",{style:{"text-align":"center"}},null,-1),h_={style:{"text-align":"left"}},u_=t("code",null,"位运算",-1),f_=t("code",null,"哈希表",-1),g_=t("code",null,"字符串",-1),m_=t("code",null,"2+",-1),y_={style:{"text-align":"left"}},x_=t("td",{style:{"text-align":"center"}},"1982",-1),b_={style:{"text-align":"left"}},p_={href:"https://leetcode.com/problems/find-array-given-subset-sums",target:"_blank",rel:"noopener noreferrer"},k_=t("td",{style:{"text-align":"center"}},null,-1),q_={style:{"text-align":"left"}},v_=t("code",null,"数组",-1),M_=t("code",null,"分治",-1),z_={style:{"text-align":"left"}},H_=t("td",{style:{"text-align":"center"}},"1985",-1),w_={style:{"text-align":"left"}},I_={href:"https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array",target:"_blank",rel:"noopener noreferrer"},E_=t("td",{style:{"text-align":"center"}},null,-1),K_={style:{"text-align":"left"}},O_=t("code",null,"数组",-1),j_=t("code",null,"字符串",-1),B_=t("code",null,"分治",-1),C_=t("code",null,"3+",-1),L_={style:{"text-align":"left"}},N_=t("td",{style:{"text-align":"center"}},"2031",-1),V_={style:{"text-align":"left"}},R_={href:"https://leetcode.com/problems/count-subarrays-with-more-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},T_=t("td",{style:{"text-align":"center"}},null,-1),W_={style:{"text-align":"left"}},A_=t("code",null,"树状数组",-1),S_=t("code",null,"线段树",-1),X_=t("code",null,"数组",-1),D_=t("code",null,"4+",-1),F_={style:{"text-align":"left"}},G_=t("td",{style:{"text-align":"center"}},"2179",-1),J_={style:{"text-align":"left"}},P_={href:"https://leetcode.com/problems/count-good-triplets-in-an-array",target:"_blank",rel:"noopener noreferrer"},Q_=t("td",{style:{"text-align":"center"}},null,-1),U_={style:{"text-align":"left"}},Y_=t("code",null,"树状数组",-1),Z_=t("code",null,"线段树",-1),$_=t("code",null,"数组",-1),ti=t("code",null,"4+",-1),ei={style:{"text-align":"left"}},oi=t("td",{style:{"text-align":"center"}},"2343",-1),li={style:{"text-align":"left"}},ni={href:"https://leetcode.com/problems/query-kth-smallest-trimmed-number",target:"_blank",rel:"noopener noreferrer"},si=t("td",{style:{"text-align":"center"}},null,-1),di={style:{"text-align":"left"}},_i=t("code",null,"数组",-1),ii=t("code",null,"字符串",-1),ai=t("code",null,"分治",-1),ri=t("code",null,"4+",-1),ci={style:{"text-align":"left"}},hi=t("td",{style:{"text-align":"center"}},"2407",-1),ui={style:{"text-align":"left"}},fi={href:"https://leetcode.com/problems/longest-increasing-subsequence-ii",target:"_blank",rel:"noopener noreferrer"},gi=t("td",{style:{"text-align":"center"}},null,-1),mi={style:{"text-align":"left"}},yi=t("code",null,"树状数组",-1),xi=t("code",null,"线段树",-1),bi=t("code",null,"队列",-1),pi=t("code",null,"4+",-1),ki={style:{"text-align":"left"}},qi=t("td",{style:{"text-align":"center"}},"2426",-1),vi={style:{"text-align":"left"}},Mi={href:"https://leetcode.com/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},zi=t("td",{style:{"text-align":"center"}},null,-1),Hi={style:{"text-align":"left"}},wi=t("code",null,"树状数组",-1),Ii=t("code",null,"线段树",-1),Ei=t("code",null,"数组",-1),Ki=t("code",null,"4+",-1),Oi={style:{"text-align":"left"}},ji=t("td",{style:{"text-align":"center"}},"2519",-1),Bi={style:{"text-align":"left"}},Ci={href:"https://leetcode.com/problems/count-the-number-of-k-big-indices",target:"_blank",rel:"noopener noreferrer"},Li=t("td",{style:{"text-align":"center"}},null,-1),Ni={style:{"text-align":"left"}},Vi=t("code",null,"树状数组",-1),Ri=t("code",null,"线段树",-1),Ti=t("code",null,"数组",-1),Wi=t("code",null,"4+",-1),Ai={style:{"text-align":"left"}},Si=t("td",{style:{"text-align":"center"}},"2613",-1),Xi={style:{"text-align":"left"}},Di={href:"https://leetcode.com/problems/beautiful-pairs",target:"_blank",rel:"noopener noreferrer"},Fi=t("td",{style:{"text-align":"center"}},null,-1),Gi={style:{"text-align":"left"}},Ji=t("code",null,"几何",-1),Pi=t("code",null,"数组",-1),Qi=t("code",null,"数学",-1),Ui=t("code",null,"3+",-1),Yi={style:{"text-align":"left"}},Zi=t("td",{style:{"text-align":"center"}},"2792",-1),$i={style:{"text-align":"left"}},ta={href:"https://leetcode.com/problems/count-nodes-that-are-great-enough",target:"_blank",rel:"noopener noreferrer"},ea=t("td",{style:{"text-align":"center"}},null,-1),oa={style:{"text-align":"left"}},la=t("code",null,"树",-1),na=t("code",null,"深度优先搜索",-1),sa=t("code",null,"分治",-1),da=t("code",null,"1+",-1),_a={style:{"text-align":"left"}},ia=t("td",{style:{"text-align":"center"}},"3109",-1),aa={style:{"text-align":"left"}},ra={href:"https://leetcode.com/problems/find-the-index-of-permutation",target:"_blank",rel:"noopener noreferrer"},ca=t("td",{style:{"text-align":"center"}},null,-1),ha={style:{"text-align":"left"}},ua=t("code",null,"树状数组",-1),fa=t("code",null,"线段树",-1),ga=t("code",null,"数组",-1),ma=t("code",null,"4+",-1),ya={style:{"text-align":"left"}},xa=t("td",{style:{"text-align":"center"}},"3165",-1),ba={style:{"text-align":"left"}},pa={href:"https://leetcode.com/problems/maximum-sum-of-subsequence-with-non-adjacent-elements",target:"_blank",rel:"noopener noreferrer"},ka=t("td",{style:{"text-align":"center"}},null,-1),qa={style:{"text-align":"left"}},va=t("code",null,"线段树",-1),Ma=t("code",null,"数组",-1),za=t("code",null,"分治",-1),Ha=t("code",null,"1+",-1),wa={style:{"text-align":"left"}},Ia=t("td",{style:{"text-align":"center"}},"剑指 Offer 04",-1),Ea={style:{"text-align":"left"}},Ka={href:"https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof",target:"_blank",rel:"noopener noreferrer"},Oa={style:{"text-align":"center"}},ja={href:"/problem/jz_offer_04_1",target:"_blank",rel:"noopener noreferrer"},Ba={style:{"text-align":"left"}},Ca=t("code",null,"数组",-1),La=t("code",null,"二分查找",-1),Na=t("code",null,"分治",-1),Va=t("code",null,"1+",-1),Ra={style:{"text-align":"left"}},Ta=t("td",{style:{"text-align":"center"}},"剑指 Offer 07",-1),Wa={style:{"text-align":"left"}},Aa={href:"https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof",target:"_blank",rel:"noopener noreferrer"},Sa={style:{"text-align":"center"}},Xa={href:"/problem/jz_offer_07_1",target:"_blank",rel:"noopener noreferrer"},Da={style:{"text-align":"left"}},Fa=t("code",null,"树",-1),Ga=t("code",null,"数组",-1),Ja=t("code",null,"哈希表",-1),Pa=t("code",null,"2+",-1),Qa={style:{"text-align":"left"}},Ua=t("td",{style:{"text-align":"center"}},"剑指 Offer 39",-1),Ya={style:{"text-align":"left"}},Za={href:"https://leetcode.cn/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"},$a={style:{"text-align":"center"}},tr={href:"/problem/jz_offer_39_1",target:"_blank",rel:"noopener noreferrer"},er={style:{"text-align":"left"}},or=t("code",null,"数组",-1),lr=t("code",null,"哈希表",-1),nr=t("code",null,"分治",-1),sr=t("code",null,"2+",-1),dr={style:{"text-align":"left"}},_r=t("td",{style:{"text-align":"center"}},"剑指 Offer 40",-1),ir={style:{"text-align":"left"}},ar={href:"https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof",target:"_blank",rel:"noopener noreferrer"},rr=t("td",{style:{"text-align":"center"}},null,-1),cr={style:{"text-align":"left"}},hr=t("code",null,"数组",-1),ur=t("code",null,"分治",-1),fr=t("code",null,"快速选择",-1),gr=t("code",null,"2+",-1),mr={style:{"text-align":"left"}},yr=t("td",{style:{"text-align":"center"}},"剑指 Offer 42",-1),xr={style:{"text-align":"left"}},br={href:"https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof",target:"_blank",rel:"noopener noreferrer"},pr={style:{"text-align":"center"}},kr={href:"/problem/jz_offer_42_1",target:"_blank",rel:"noopener noreferrer"},qr={style:{"text-align":"left"}},vr=t("code",null,"数组",-1),Mr=t("code",null,"分治",-1),zr=t("code",null,"动态规划",-1),Hr={style:{"text-align":"left"}},wr=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),Ir={style:{"text-align":"left"}},Er={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},Kr=t("td",{style:{"text-align":"center"}},null,-1),Or={style:{"text-align":"left"}},jr=t("code",null,"树状数组",-1),Br=t("code",null,"线段树",-1),Cr=t("code",null,"数组",-1),Lr=t("code",null,"4+",-1),Nr={style:{"text-align":"left"}},Vr=t("td",{style:{"text-align":"center"}},"剑指 Offer II 60",-1),Rr={style:{"text-align":"left"}},Tr={href:"https://leetcode.cn/problems/g5c51o",target:"_blank",rel:"noopener noreferrer"},Wr=t("td",{style:{"text-align":"center"}},null,-1),Ar={style:{"text-align":"left"}},Sr=t("code",null,"数组",-1),Xr=t("code",null,"哈希表",-1),Dr=t("code",null,"分治",-1),Fr=t("code",null,"5+",-1),Gr={style:{"text-align":"left"}},Jr=t("td",{style:{"text-align":"center"}},"剑指 Offer II 76",-1),Pr={style:{"text-align":"left"}},Qr={href:"https://leetcode.cn/problems/xx4gT2",target:"_blank",rel:"noopener noreferrer"},Ur=t("td",{style:{"text-align":"center"}},null,-1),Yr={style:{"text-align":"left"}},Zr=t("code",null,"数组",-1),$r=t("code",null,"分治",-1),tc=t("code",null,"快速选择",-1),ec=t("code",null,"2+",-1),oc={style:{"text-align":"left"}},lc=t("td",{style:{"text-align":"center"}},"剑指 Offer II 77",-1),nc={style:{"text-align":"left"}},sc={href:"https://leetcode.cn/problems/7WHec2",target:"_blank",rel:"noopener noreferrer"},dc=t("td",{style:{"text-align":"center"}},null,-1),_c={style:{"text-align":"left"}},ic=t("code",null,"链表",-1),ac=t("code",null,"双指针",-1),rc=t("code",null,"分治",-1),cc=t("code",null,"2+",-1),hc={style:{"text-align":"left"}},uc=t("td",{style:{"text-align":"center"}},"剑指 Offer II 78",-1),fc={style:{"text-align":"left"}},gc={href:"https://leetcode.cn/problems/vvXgSW",target:"_blank",rel:"noopener noreferrer"},mc=t("td",{style:{"text-align":"center"}},null,-1),yc={style:{"text-align":"left"}},xc=t("code",null,"链表",-1),bc=t("code",null,"分治",-1),pc=t("code",null,"堆（优先队列）",-1),kc=t("code",null,"1+",-1),qc={style:{"text-align":"left"}},vc=t("td",{style:{"text-align":"center"}},"面试题 04.02",-1),Mc={style:{"text-align":"left"}},zc={href:"https://leetcode.cn/problems/minimum-height-tree-lcci",target:"_blank",rel:"noopener noreferrer"},Hc=t("td",{style:{"text-align":"center"}},null,-1),wc={style:{"text-align":"left"}},Ic=t("code",null,"树",-1),Ec=t("code",null,"二叉搜索树",-1),Kc=t("code",null,"数组",-1),Oc=t("code",null,"2+",-1),jc={style:{"text-align":"left"}},Bc=t("td",{style:{"text-align":"center"}},"面试题 10.09",-1),Cc={style:{"text-align":"left"}},Lc={href:"https://leetcode.cn/problems/sorted-matrix-search-lcci",target:"_blank",rel:"noopener noreferrer"},Nc=t("td",{style:{"text-align":"center"}},null,-1),Vc={style:{"text-align":"left"}},Rc=t("code",null,"数组",-1),Tc=t("code",null,"二分查找",-1),Wc=t("code",null,"分治",-1),Ac=t("code",null,"1+",-1),Sc={style:{"text-align":"left"}},Xc=t("td",{style:{"text-align":"center"}},"面试题 16.17",-1),Dc={style:{"text-align":"left"}},Fc={href:"https://leetcode.cn/problems/contiguous-sequence-lcci",target:"_blank",rel:"noopener noreferrer"},Gc=t("td",{style:{"text-align":"center"}},null,-1),Jc={style:{"text-align":"left"}},Pc=t("code",null,"数组",-1),Qc=t("code",null,"分治",-1),Uc=t("code",null,"动态规划",-1),Yc={style:{"text-align":"left"}},Zc=t("td",{style:{"text-align":"center"}},"面试题 17.14",-1),$c={style:{"text-align":"left"}},th={href:"https://leetcode.cn/problems/smallest-k-lcci",target:"_blank",rel:"noopener noreferrer"},eh=t("td",{style:{"text-align":"center"}},null,-1),oh={style:{"text-align":"left"}},lh=t("code",null,"数组",-1),nh=t("code",null,"分治",-1),sh=t("code",null,"快速选择",-1),dh=t("code",null,"2+",-1),_h={style:{"text-align":"left"}};function ih(ah,rh){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return a(),r("div",null,[u,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/outline/tag/matrix.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/outline/tag/queue.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[K]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:l(()=>[j]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[B]),_:1}),o(),e(n,{to:"/outline/tag/ordered-set.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/outline/tag/topological-sort.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/outline/tag/shortest-path.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/outline/tag/union-find.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[A]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/outline/tag/suffix-array.html"},{default:l(()=>[D]),_:1})]),F,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:l(()=>[G]),_:1}),o(),e(n,{to:"/outline/tag/recursion.html"},{default:l(()=>[J]),_:1}),o(),P,o(),e(n,{to:"/outline/tag/backtracking.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/outline/tag/greedy.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Y]),_:1}),o(),e(n,{to:"/outline/tag/sorting.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/outline/tag/counting-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/outline/tag/radix-sort.html"},{default:l(()=>[et]),_:1}),o(),e(n,{to:"/outline/tag/merge-sort.html"},{default:l(()=>[ot]),_:1}),o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:l(()=>[rt]),_:1}),o(),e(n,{to:"/outline/tag/counting.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/outline/tag/sliding-window.html"},{default:l(()=>[ht]),_:1}),o(),e(n,{to:"/outline/tag/bitmask.html"},{default:l(()=>[ut]),_:1}),o(),e(n,{to:"/outline/tag/hash-function.html"},{default:l(()=>[ft]),_:1}),o(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:l(()=>[gt]),_:1}),o(),e(n,{to:"/outline/tag/line-sweep.html"},{default:l(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/outline/tag/number-theory.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/outline/tag/geometry.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/outline/tag/game-theory.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/outline/tag/simulation.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/outline/tag/combinatorics.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/outline/tag/randomized.html"},{default:l(()=>[Mt]),_:1}),o(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:l(()=>[Ht]),_:1}),o(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/outline/tag/database.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[Et]),_:1}),o(),e(n,{to:"/outline/tag/data-stream.html"},{default:l(()=>[Kt]),_:1}),o(),e(n,{to:"/outline/tag/brainteaser.html"},{default:l(()=>[Ot]),_:1}),o(),e(n,{to:"/outline/tag/interactive.html"},{default:l(()=>[jt]),_:1}),o(),e(n,{to:"/outline/tag/iterator.html"},{default:l(()=>[Bt]),_:1}),o(),e(n,{to:"/outline/tag/concurrency.html"},{default:l(()=>[Ct]),_:1})])]),Lt,c(" prettier-ignore "),t("table",null,[Nt,t("tbody",null,[t("tr",null,[Vt,t("td",Rt,[t("a",Tt,[o("寻找两个正序数组的中位数"),e(s)])]),t("td",Wt,[t("a",At,[o("[✓]"),e(s)])]),t("td",St,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Xt]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[Dt]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Ft]),_:1})]),t("td",Gt,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Jt,t("td",Pt,[t("a",Qt,[o("合并 K 个升序链表"),e(s)])]),t("td",Ut,[t("a",Yt,[o("[✓]"),e(s)])]),t("td",Zt,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[$t]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[te]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[ee]),_:1}),o(),oe]),t("td",le,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ne,t("td",se,[t("a",de,[o("最大子数组和"),e(s)])]),t("td",_e,[t("a",ie,[o("[✓]"),e(s)])]),t("td",ae,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[re]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[ce]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[he]),_:1})]),t("td",ue,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[fe,t("td",ge,[t("a",me,[o("从前序与中序遍历序列构造二叉树"),e(s)])]),t("td",ye,[t("a",xe,[o("[✓]"),e(s)])]),t("td",be,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[pe]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ke]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[qe]),_:1}),o(),ve]),t("td",Me,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ze,t("td",He,[t("a",we,[o("从中序与后序遍历序列构造二叉树"),e(s)])]),t("td",Ie,[t("a",Ee,[o("[✓]"),e(s)])]),t("td",Ke,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Oe]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[je]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Be]),_:1}),o(),Ce]),t("td",Le,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ne,t("td",Ve,[t("a",Re,[o("将有序数组转换为二叉搜索树"),e(s)])]),t("td",Te,[t("a",We,[o("[✓]"),e(s)])]),t("td",Ae,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Se]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Xe]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[De]),_:1}),o(),Fe]),t("td",Ge,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Je,t("td",Pe,[t("a",Qe,[o("有序链表转换二叉搜索树"),e(s)])]),t("td",Ue,[t("a",Ye,[o("[✓]"),e(s)])]),t("td",Ze,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[$e]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[to]),_:1}),o(),e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[eo]),_:1}),o(),oo]),t("td",lo,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[no,t("td",so,[t("a",_o,[o("排序链表"),e(s)])]),t("td",io,[t("a",ao,[o("[✓]"),e(s)])]),t("td",ro,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[co]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[ho]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[uo]),_:1}),o(),fo]),t("td",go,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[mo,t("td",yo,[t("a",xo,[o("多数元素"),e(s)])]),t("td",bo,[t("a",po,[o("[✓]"),e(s)])]),t("td",ko,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[qo]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[vo]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Mo]),_:1}),o(),zo]),t("td",Ho,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[wo,t("td",Io,[t("a",Eo,[o("颠倒二进制位"),e(s)])]),t("td",Ko,[t("a",Oo,[o("[✓]"),e(s)])]),t("td",jo,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Bo]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Co]),_:1})]),t("td",Lo,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[No,t("td",Vo,[t("a",Ro,[o("位1的个数"),e(s)])]),t("td",To,[t("a",Wo,[o("[✓]"),e(s)])]),t("td",Ao,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[So]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Xo]),_:1})]),t("td",Do,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Fo,t("td",Go,[t("a",Jo,[o("数组中的第K个最大元素"),e(s)])]),t("td",Po,[t("a",Qo,[o("[✓]"),e(s)])]),t("td",Uo,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Yo]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Zo]),_:1}),o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[$o]),_:1}),o(),tl]),t("td",el,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ol,t("td",ll,[t("a",nl,[o("天际线问题"),e(s)])]),sl,t("td",dl,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[_l]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[il]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[al]),_:1}),o(),rl]),t("td",cl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[hl,t("td",ul,[t("a",fl,[o("搜索二维矩阵 II"),e(s)])]),t("td",gl,[t("a",ml,[o("[✓]"),e(s)])]),t("td",yl,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[xl]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[bl]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[pl]),_:1}),o(),kl]),t("td",ql,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[vl,t("td",Ml,[t("a",zl,[o("计算右侧小于当前元素的个数"),e(s)])]),Hl,t("td",wl,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Il]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[El]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Kl]),_:1}),o(),Ol]),t("td",jl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Bl,t("td",Cl,[t("a",Ll,[o("摆动排序 II"),e(s)])]),Nl,t("td",Vl,[e(n,{to:"/outline/tag/greedy.html"},{default:l(()=>[Rl]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Tl]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Wl]),_:1}),o(),Al]),t("td",Sl,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Xl,t("td",Dl,[t("a",Fl,[o("区间和的个数"),e(s)])]),Gl,t("td",Jl,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Pl]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Ql]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ul]),_:1}),o(),Yl]),t("td",Zl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[$l,t("td",tn,[t("a",en,[o("前 K 个高频元素"),e(s)])]),t("td",on,[t("a",ln,[o("[✓]"),e(s)])]),t("td",nn,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[sn]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[dn]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[_n]),_:1}),o(),an]),t("td",rn,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[cn,t("td",hn,[t("a",un,[o("超级次方"),e(s)])]),fn,t("td",gn,[e(n,{to:"/outline/tag/math.html"},{default:l(()=>[mn]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[yn]),_:1})]),t("td",xn,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[bn,t("td",pn,[t("a",kn,[o("至少有 K 个重复字符的最长子串"),e(s)])]),qn,t("td",vn,[e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Mn]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[zn]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Hn]),_:1}),o(),wn]),t("td",In,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[En,t("td",Kn,[t("a",On,[o("建立四叉树"),e(s)])]),t("td",jn,[t("a",Bn,[o("[✓]"),e(s)])]),t("td",Cn,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ln]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Nn]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Vn]),_:1}),o(),Rn]),t("td",Tn,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Wn,t("td",An,[t("a",Sn,[o("翻转对"),e(s)])]),Xn,t("td",Dn,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Fn]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Gn]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Jn]),_:1}),o(),Pn]),t("td",Qn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Un,t("td",Yn,[t("a",Zn,[o("四叉树交集"),e(s)])]),$n,t("td",ts,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[es]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[os]),_:1})]),t("td",ls,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ns,t("td",ss,[t("a",ds,[o("最大二叉树"),e(s)])]),t("td",_s,[t("a",is,[o("[✓]"),e(s)])]),t("td",as,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[rs]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[cs]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[hs]),_:1}),o(),us]),t("td",fs,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[gs,t("td",ms,[t("a",ys,[o("根据前序和后序遍历构造二叉树"),e(s)])]),t("td",xs,[t("a",bs,[o("[✓]"),e(s)])]),t("td",ps,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[ks]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[qs]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[vs]),_:1}),o(),Ms]),t("td",zs,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Hs,t("td",ws,[t("a",Is,[o("排序数组"),e(s)])]),Es,t("td",Ks,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Os]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[js]),_:1}),o(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:l(()=>[Bs]),_:1}),o(),Cs]),t("td",Ls,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ns,t("td",Vs,[t("a",Rs,[o("环形子数组的最大和"),e(s)])]),t("td",Ts,[t("a",Ws,[o("[✓]"),e(s)])]),t("td",As,[e(n,{to:"/outline/tag/queue.html"},{default:l(()=>[Ss]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Xs]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Ds]),_:1}),o(),Fs]),t("td",Gs,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Js,t("td",Ps,[t("a",Qs,[o("漂亮数组"),e(s)])]),Us,t("td",Ys,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Zs]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[$s]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[td]),_:1})]),t("td",ed,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[od,t("td",ld,[t("a",nd,[o("最接近原点的 K 个点"),e(s)])]),t("td",sd,[t("a",dd,[o("[✓]"),e(s)])]),t("td",_d,[e(n,{to:"/outline/tag/geometry.html"},{default:l(()=>[id]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ad]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[rd]),_:1}),o(),cd]),t("td",hd,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ud,t("td",fd,[t("a",gd,[o("矩形内船只的数目"),e(s)])]),md,t("td",yd,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[xd]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[bd]),_:1}),o(),e(n,{to:"/outline/tag/interactive.html"},{default:l(()=>[pd]),_:1})]),t("td",kd,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[qd,t("td",vd,[t("a",Md,[o("将二叉搜索树变平衡"),e(s)])]),zd,t("td",Hd,[e(n,{to:"/outline/tag/greedy.html"},{default:l(()=>[wd]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Id]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Ed]),_:1}),o(),Kd]),t("td",Od,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[jd,t("td",Bd,[t("a",Cd,[o("将子数组重新排序得到同一个二叉搜索树的方案数"),e(s)])]),Ld,t("td",Nd,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Vd]),_:1}),o(),e(n,{to:"/outline/tag/union-find.html"},{default:l(()=>[Rd]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Td]),_:1}),o(),Wd]),t("td",Ad,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Sd,t("td",Xd,[t("a",Dd,[o("通过指令创建有序数组"),e(s)])]),Fd,t("td",Gd,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Jd]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Pd]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Qd]),_:1}),o(),Ud]),t("td",Yd,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Zd,t("td",$d,[t("a",t_,[o("找出第 K 大的异或坐标值"),e(s)])]),e_,t("td",o_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[l_]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[n_]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[s_]),_:1}),o(),d_]),t("td",__,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[i_,t("td",a_,[t("a",r_,[o("最长的美好子字符串"),e(s)])]),c_,t("td",h_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[u_]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[f_]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[g_]),_:1}),o(),m_]),t("td",y_,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[x_,t("td",b_,[t("a",p_,[o("从子集的和还原数组"),e(s)])]),k_,t("td",q_,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[v_]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[M_]),_:1})]),t("td",z_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[H_,t("td",w_,[t("a",I_,[o("找出数组中的第 K 大整数"),e(s)])]),E_,t("td",K_,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[O_]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[j_]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[B_]),_:1}),o(),C_]),t("td",L_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[N_,t("td",V_,[t("a",R_,[o("1 比 0 多的子数组个数"),e(s)])]),T_,t("td",W_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[A_]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[S_]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[X_]),_:1}),o(),D_]),t("td",F_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[G_,t("td",J_,[t("a",P_,[o("统计数组中好三元组数目"),e(s)])]),Q_,t("td",U_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Y_]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Z_]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[$_]),_:1}),o(),ti]),t("td",ei,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[oi,t("td",li,[t("a",ni,[o("裁剪数字后查询第 K 小的数字"),e(s)])]),si,t("td",di,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[_i]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[ii]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[ai]),_:1}),o(),ri]),t("td",ci,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[hi,t("td",ui,[t("a",fi,[o("最长递增子序列 II"),e(s)])]),gi,t("td",mi,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[yi]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[xi]),_:1}),o(),e(n,{to:"/outline/tag/queue.html"},{default:l(()=>[bi]),_:1}),o(),pi]),t("td",ki,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[qi,t("td",vi,[t("a",Mi,[o("满足不等式的数对数目"),e(s)])]),zi,t("td",Hi,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[wi]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Ii]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ei]),_:1}),o(),Ki]),t("td",Oi,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ji,t("td",Bi,[t("a",Ci,[o("统计 K-Big 索引的数量"),e(s)])]),Li,t("td",Ni,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Vi]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Ri]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ti]),_:1}),o(),Wi]),t("td",Ai,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Si,t("td",Xi,[t("a",Di,[o("美数对"),e(s)])]),Fi,t("td",Gi,[e(n,{to:"/outline/tag/geometry.html"},{default:l(()=>[Ji]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Pi]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[Qi]),_:1}),o(),Ui]),t("td",Yi,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Zi,t("td",$i,[t("a",ta,[o("计算足够大的节点数"),e(s)])]),ea,t("td",oa,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[la]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[na]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[sa]),_:1}),o(),da]),t("td",_a,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ia,t("td",aa,[t("a",ra,[o("查找排列的下标"),e(s)])]),ca,t("td",ha,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[ua]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[fa]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ga]),_:1}),o(),ma]),t("td",ya,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[xa,t("td",ba,[t("a",pa,[o("不包含相邻元素的子序列的最大和"),e(s)])]),ka,t("td",qa,[e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[va]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ma]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[za]),_:1}),o(),Ha]),t("td",wa,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ia,t("td",Ea,[t("a",Ka,[o("二维数组中的查找"),e(s)])]),t("td",Oa,[t("a",ja,[o("[✓]"),e(s)])]),t("td",Ba,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ca]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[La]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Na]),_:1}),o(),Va]),t("td",Ra,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ta,t("td",Wa,[t("a",Aa,[o("重建二叉树"),e(s)])]),t("td",Sa,[t("a",Xa,[o("[✓]"),e(s)])]),t("td",Da,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Fa]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ga]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Ja]),_:1}),o(),Pa]),t("td",Qa,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ua,t("td",Ya,[t("a",Za,[o("数组中出现次数超过一半的数字"),e(s)])]),t("td",$a,[t("a",tr,[o("[✓]"),e(s)])]),t("td",er,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[or]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[lr]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[nr]),_:1}),o(),sr]),t("td",dr,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[_r,t("td",ir,[t("a",ar,[o("最小的k个数"),e(s)])]),rr,t("td",cr,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[hr]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[ur]),_:1}),o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[fr]),_:1}),o(),gr]),t("td",mr,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[yr,t("td",xr,[t("a",br,[o("连续子数组的最大和"),e(s)])]),t("td",pr,[t("a",kr,[o("[✓]"),e(s)])]),t("td",qr,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[vr]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Mr]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[zr]),_:1})]),t("td",Hr,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[wr,t("td",Ir,[t("a",Er,[o("数组中的逆序对"),e(s)])]),Kr,t("td",Or,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[jr]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Br]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Cr]),_:1}),o(),Lr]),t("td",Nr,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Vr,t("td",Rr,[t("a",Tr,[o("出现频率最高的 k 个数字"),e(s)])]),Wr,t("td",Ar,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Sr]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Xr]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Dr]),_:1}),o(),Fr]),t("td",Gr,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Jr,t("td",Pr,[t("a",Qr,[o("数组中的第 k 大的数字"),e(s)])]),Ur,t("td",Yr,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Zr]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[$r]),_:1}),o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[tc]),_:1}),o(),ec]),t("td",oc,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[lc,t("td",nc,[t("a",sc,[o("链表排序"),e(s)])]),dc,t("td",_c,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[ic]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[ac]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[rc]),_:1}),o(),cc]),t("td",hc,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[uc,t("td",fc,[t("a",gc,[o("合并排序链表"),e(s)])]),mc,t("td",yc,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[xc]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[bc]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[pc]),_:1}),o(),kc]),t("td",qc,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[vc,t("td",Mc,[t("a",zc,[o("最小高度树"),e(s)])]),Hc,t("td",wc,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ic]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ec]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Kc]),_:1}),o(),Oc]),t("td",jc,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Bc,t("td",Cc,[t("a",Lc,[o("排序矩阵查找"),e(s)])]),Nc,t("td",Vc,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Rc]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[Tc]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Wc]),_:1}),o(),Ac]),t("td",Sc,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Xc,t("td",Dc,[t("a",Fc,[o("连续数列"),e(s)])]),Gc,t("td",Jc,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Pc]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Qc]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Uc]),_:1})]),t("td",Yc,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Zc,t("td",$c,[t("a",th,[o("最小K个数"),e(s)])]),eh,t("td",oh,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[lh]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[nh]),_:1}),o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[sh]),_:1}),o(),dh]),t("td",_h,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])])])])])}const hh=i(h,[["render",ih],["__file","divide-and-conquer.html.vue"]]);export{hh as default};
