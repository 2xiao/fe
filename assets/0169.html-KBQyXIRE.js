import{_ as d,r as c,o as i,c as r,a as t,b as n,d as e,w as s,f as p,e as u}from"./app-JOMdB8bl.js";const _={},h={id:"_169-多数元素",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_169-多数元素","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"数组",-1),g=t("code",null,"哈希表",-1),y=t("code",null,"分治",-1),b=t("code",null,"计数",-1),v=t("code",null,"排序",-1),x={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},j=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p><p>The majority element is the element that appears more than <code>⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [3,2,3]</p><p>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,2,1,1,1,2,2]</p><p>Output: 2</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5 * 10^4</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><p><strong>Follow-up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个大小为 <code>n</code> 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ <code>n/2</code> ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在众数。要求线性时间复杂度和 <code>O(1)</code> 空间复杂度。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题如果用一个哈希表作为计数器，记录每个元素出现的次数，然后寻找出现次数最多的那个元素，时间和空间复杂度都是 <code>O(N)</code>。</p><p>想要空间复杂度为 <code>O(1)</code> ,可以用栈的思路：遍历数组，如果栈为空，或者当前元素与栈顶元素相同，则入栈；否则将栈顶元素弹出。</p><p>由于数组中的众数出现次数大于 <code>n/2</code> ，所以经过不断地入栈出栈，互相消除，最终栈内留下的肯定是我们要找的众数。证明如下：</p><ul><li>当数组内只有两种元素时，由于众数的数量过半，所以不管顺序如何，经过两两对比，不一样的互相消除，最后栈内留下的都是众数；</li><li>当数组内有两种以上的元素时，除众数以外的其他元素还会互相对比消除，所以用于消耗众数的元素数量更少，所以栈内留下的元素就是众数。</li></ul><p>实际上我们并不需要真的实现一个栈，只需要记录栈顶元素 <code>major</code> （栈内所有元素一定相同，遇到不相同的不会入栈），以及元素的个数 <code>count</code> ，因此只需要两个变量就够了。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中<code>n</code> 表示 <code>nums</code> 的长度，需要遍历数组一遍。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，用了常数个变量存储中间状态。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">majorityElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> major<span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> item <span class="token operator">===</span> major<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span>
			major <span class="token operator">=</span> item<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			count<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> major<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),E=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),O=t("td",{style:{"text-align":"center"}},"229",-1),I={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/majority-element-ii",target:"_blank",rel:"noopener noreferrer"},C=t("td",{style:{"text-align":"center"}},null,-1),N={style:{"text-align":"left"}},L=t("code",null,"数组",-1),V=t("code",null,"哈希表",-1),B=t("code",null,"计数",-1),M=t("code",null,"1+",-1),R={style:{"text-align":"left"}},T=t("td",{style:{"text-align":"center"}},"1150",-1),z={style:{"text-align":"left"}},F={href:"https://leetcode.com/problems/check-if-a-number-is-majority-element-in-a-sorted-array",target:"_blank",rel:"noopener noreferrer"},G=t("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),A=t("code",null,"二分查找",-1),D={style:{"text-align":"left"}},H=t("td",{style:{"text-align":"center"}},"2404",-1),J={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/most-frequent-even-element",target:"_blank",rel:"noopener noreferrer"},P=t("td",{style:{"text-align":"center"}},null,-1),Q={style:{"text-align":"left"}},U=t("code",null,"数组",-1),W=t("code",null,"哈希表",-1),X=t("code",null,"计数",-1),Z={style:{"text-align":"left"}},$=t("td",{style:{"text-align":"center"}},"2780",-1),tt={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/minimum-index-of-a-valid-split",target:"_blank",rel:"noopener noreferrer"},nt=t("td",{style:{"text-align":"center"}},null,-1),st={style:{"text-align":"left"}},at=t("code",null,"数组",-1),ot=t("code",null,"哈希表",-1),lt=t("code",null,"排序",-1),ct={style:{"text-align":"left"}},dt=t("td",{style:{"text-align":"center"}},"3065",-1),it={style:{"text-align":"left"}},rt={href:"https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-i",target:"_blank",rel:"noopener noreferrer"},pt=t("td",{style:{"text-align":"center"}},null,-1),ut={style:{"text-align":"left"}},_t=t("code",null,"数组",-1),ht={style:{"text-align":"left"}};function mt(ft,kt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[t("h1",h,[m,n(),t("a",f,[n("169. 多数元素"),e(o)])]),t("p",null,[n("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[k]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[y]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[b]),_:1}),n(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[v]),_:1}),n("  🔗 "),t("a",x,[j,e(o)])]),w,p(" prettier-ignore "),t("table",null,[E,t("tbody",null,[t("tr",null,[O,t("td",I,[t("a",q,[n("多数元素 II"),e(o)])]),C,t("td",N,[e(a,{to:"/tag/array.html"},{default:s(()=>[L]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[V]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[B]),_:1}),n(),M]),t("td",R,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[T,t("td",z,[t("a",F,[n("检查一个数是否在数组中占绝大多数"),e(o)])]),G,t("td",S,[e(a,{to:"/tag/array.html"},{default:s(()=>[Y]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[A]),_:1})]),t("td",D,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[H,t("td",J,[t("a",K,[n("出现最频繁的偶数元素"),e(o)])]),P,t("td",Q,[e(a,{to:"/tag/array.html"},{default:s(()=>[U]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[W]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[X]),_:1})]),t("td",Z,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[$,t("td",tt,[t("a",et,[n("合法分割的最小下标"),e(o)])]),nt,t("td",st,[e(a,{to:"/tag/array.html"},{default:s(()=>[at]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[ot]),_:1}),n(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[lt]),_:1})]),t("td",ct,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[dt,t("td",it,[t("a",rt,[n("超过阈值的最少操作数 I"),e(o)])]),pt,t("td",ut,[e(a,{to:"/tag/array.html"},{default:s(()=>[_t]),_:1})]),t("td",ht,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const yt=d(_,[["render",mt],["__file","0169.html.vue"]]);export{yt as default};
