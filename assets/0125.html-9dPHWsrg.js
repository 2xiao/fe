import{_ as i,r as c,o as p,c as r,a as n,b as s,d as t,w as e,f as d,e as u}from"./app-mXo2sCT-.js";const h={},_={id:"_125-验证回文串",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_125-验证回文串","aria-hidden":"true"},"#",-1),m={href:"https://2xiao.github.io/leetcode-js/problem/0125.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"双指针",-1),f=n("code",null,"字符串",-1),b={href:"https://leetcode.cn/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"力扣",-1),y={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A phrase is a <strong>palindrome</strong> if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.</p><p>Given a string <code>s</code>, return <code>true</code> if it is a <strong>palindrome</strong> , or <code>false</code> <em>otherwise</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;A man, a plan, a canal: Panama&quot;</p><p>Output: true</p><p>Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;race a car&quot;</p><p>Output: false</p><p>Explanation: &quot;raceacar&quot; is not a palindrome.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot; &quot;</p><p>Output: true</p><p>Explanation: s is an empty string &quot;&quot; after removing non-alphanumeric characters.</p><p>Since an empty string reads the same forward and backward, it is a palindrome.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 2 * 105</code></li><li><code>s</code> consists only of printable ASCII characters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 <strong>回文串</strong> 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong> ，返回 <code>true</code>；否则，返回 <code>false</code>。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><strong>字符串预处理</strong>： <ul><li>首先将字符串 <code>s</code> 转换为小写，忽略大小写敏感性。</li></ul></li><li><strong>双指针法</strong>： <ul><li>定义两个指针 <code>left</code> 和 <code>right</code>，分别指向字符串的头部和尾部。通过这两个指针向中间靠拢，同时进行判断。</li></ul></li><li><strong>跳过非字母和数字字符</strong>： <ul><li>如果 <code>left</code> 指向的字符不是字母或数字，左指针 <code>left</code> 右移一位。</li><li>如果 <code>right</code> 指向的字符不是字母或数字，右指针 <code>right</code> 左移一位。</li></ul></li><li><strong>比较字符</strong>： <ul><li>如果当前 <code>left</code> 和 <code>right</code> 指向的字符不相等，则字符串不是回文，返回 <code>false</code>。</li><li>如果字符相等，继续移动指针，<code>left</code> 向右移动，<code>right</code> 向左移动。</li></ul></li><li><strong>结束条件</strong>： <ul><li>当 <code>left</code> 大于 <code>right</code> 时，说明所有字符已经被成功比较且相等，字符串是回文，返回 <code>true</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是字符串的长度。 <ul><li>将字符串 <code>s</code> 转换为小写的操作（<code>s.toLowerCase()</code>）需要遍历整个字符串，时间复杂度为 <code>O(n)</code>；</li><li>双指针遍历，每个字符最多被访问两次（一次由左指针，一次由右指针），遍历的总时间复杂度为 <code>O(n)</code>；</li></ul></li><li><strong>空间复杂度</strong>：<code>O(1)</code>，因为只使用了常数空间的指针和变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 将字符串转换为小写，忽略大小写</span>
	s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token comment">// 使用双指针法</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果左指针指向的不是字母或数字，则跳过</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChar</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果右指针指向的不是字母或数字，则跳过</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isChar</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果左右字符不相等，则不是回文</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果相等，继续比较下一个字符</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 所有字符比较相等，是回文</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 辅助函数：判断是否是字母或数字</span>
<span class="token keyword">var</span> <span class="token function-variable function">isChar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,22),q=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),E=n("td",{style:{"text-align":"center"}},"234",-1),C={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},O={style:{"text-align":"left"}},V=n("code",null,"栈",-1),N=n("code",null,"递归",-1),j=n("code",null,"链表",-1),A=n("code",null,"1+",-1),B={style:{"text-align":"left"}},M=n("td",{style:{"text-align":"center"}},"680",-1),S={style:{"text-align":"left"}},P={href:"https://leetcode.com/problems/valid-palindrome-ii",target:"_blank",rel:"noopener noreferrer"},R=n("td",{style:{"text-align":"center"}},null,-1),z={style:{"text-align":"left"}},G=n("code",null,"贪心",-1),T=n("code",null,"双指针",-1),D=n("code",null,"字符串",-1),F={style:{"text-align":"left"}},H=n("td",{style:{"text-align":"center"}},"2002",-1),J={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"center"}},null,-1),U={style:{"text-align":"left"}},W=n("code",null,"位运算",-1),X=n("code",null,"字符串",-1),Y=n("code",null,"动态规划",-1),Z=n("code",null,"2+",-1),$={style:{"text-align":"left"}},nn=n("td",{style:{"text-align":"center"}},"2108",-1),tn={style:{"text-align":"left"}},sn={href:"https://leetcode.com/problems/find-first-palindromic-string-in-the-array",target:"_blank",rel:"noopener noreferrer"},en=n("td",{style:{"text-align":"center"}},null,-1),an={style:{"text-align":"left"}},on=n("code",null,"数组",-1),ln=n("code",null,"双指针",-1),cn=n("code",null,"字符串",-1),pn={style:{"text-align":"left"}},rn=n("td",{style:{"text-align":"center"}},"2330",-1),dn={style:{"text-align":"left"}},un={href:"https://leetcode.com/problems/valid-palindrome-iv",target:"_blank",rel:"noopener noreferrer"},hn=n("td",{style:{"text-align":"center"}},null,-1),_n={style:{"text-align":"left"}},kn=n("code",null,"双指针",-1),mn=n("code",null,"字符串",-1),gn={style:{"text-align":"left"}},fn=n("td",{style:{"text-align":"center"}},"3035",-1),bn={style:{"text-align":"left"}},vn={href:"https://leetcode.com/problems/maximum-palindromes-after-operations",target:"_blank",rel:"noopener noreferrer"},yn=n("td",{style:{"text-align":"center"}},null,-1),xn={style:{"text-align":"left"}},wn=n("code",null,"贪心",-1),qn=n("code",null,"数组",-1),En=n("code",null,"哈希表",-1),Cn=n("code",null,"3+",-1),In={style:{"text-align":"left"}};function Ln(On,Vn){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return p(),r("div",null,[n("h1",_,[k,s(),n("a",m,[s("125. 验证回文串"),t(o)])]),n("p",null,[s("🟢 "),t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1}),s("  🔖  "),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[f]),_:1}),s("  🔗 "),n("a",b,[v,t(o)]),s(),n("a",y,[x,t(o)])]),w,d(" prettier-ignore "),n("table",null,[q,n("tbody",null,[n("tr",null,[E,n("td",C,[n("a",I,[s("回文链表"),t(o)])]),n("td",L,[t(a,{to:"/problem/0234.html"},{default:e(()=>[s("[✓]")]),_:1})]),n("td",O,[t(a,{to:"/tag/stack.html"},{default:e(()=>[V]),_:1}),s(),t(a,{to:"/tag/recursion.html"},{default:e(()=>[N]),_:1}),s(),t(a,{to:"/tag/linked-list.html"},{default:e(()=>[j]),_:1}),s(),A]),n("td",B,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[M,n("td",S,[n("a",P,[s("验证回文串 II"),t(o)])]),R,n("td",z,[t(a,{to:"/tag/greedy.html"},{default:e(()=>[G]),_:1}),s(),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[T]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[D]),_:1})]),n("td",F,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[H,n("td",J,[n("a",K,[s("两个回文子序列长度的最大乘积"),t(o)])]),Q,n("td",U,[t(a,{to:"/tag/bit-manipulation.html"},{default:e(()=>[W]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[X]),_:1}),s(),t(a,{to:"/tag/dynamic-programming.html"},{default:e(()=>[Y]),_:1}),s(),Z]),n("td",$,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[nn,n("td",tn,[n("a",sn,[s("找出数组中的第一个回文字符串"),t(o)])]),en,n("td",an,[t(a,{to:"/tag/array.html"},{default:e(()=>[on]),_:1}),s(),t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[ln]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[cn]),_:1})]),n("td",pn,[t(l,{color:"#15bd66"},{default:e(()=>[s("Easy")]),_:1})])]),n("tr",null,[rn,n("td",dn,[n("a",un,[s("验证回文串 IV 🔒"),t(o)])]),hn,n("td",_n,[t(a,{to:"/tag/two-pointers.html"},{default:e(()=>[kn]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[mn]),_:1})]),n("td",gn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[fn,n("td",bn,[n("a",vn,[s("回文字符串的最大数量"),t(o)])]),yn,n("td",xn,[t(a,{to:"/tag/greedy.html"},{default:e(()=>[wn]),_:1}),s(),t(a,{to:"/tag/array.html"},{default:e(()=>[qn]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[En]),_:1}),s(),Cn]),n("td",In,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const jn=i(h,[["render",Ln],["__file","0125.html.vue"]]);export{jn as default};
