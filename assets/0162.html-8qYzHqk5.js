import{_ as i,r as c,o as r,c as d,a as t,b as n,d as e,w as s,f as p,e as u}from"./app-ZVJfwurD.js";const h={},m={id:"_162-寻找峰值",tabindex:"-1"},_=t("a",{class:"header-anchor",href:"#_162-寻找峰值","aria-hidden":"true"},"#",-1),k={href:"https://2xiao.github.io/leetcode-js/problem/0162.html",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"数组",-1),g=t("code",null,"二分查找",-1),b={href:"https://leetcode.cn/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>A peak element is an element that is strictly greater than its neighbors.</p><p>Given a <strong>0-indexed</strong> integer array <code>nums</code>, find a peak element, and return its index. If the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p><p>You may imagine that <code>nums[-1] = nums[n] = -∞</code>. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.</p><p>You must write an algorithm that runs in <code>O(log n)</code> time.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,1]</p><p>Output: 2</p><p>Explanation: 3 is a peak element and your function should return the index number 2.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,2,1,3,5,6,4]</p><p>Output: 5</p><p>Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li><li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 <strong>任何一个峰值</strong> 所在位置即可。</p><p>你可以假设 <code>nums[-1] = nums[n] = -∞</code> 。</p><p>你必须实现时间复杂度为 <code>O(log n)</code> 的算法来解决此问题。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>要求算法在 <code>O(log n)</code> 的时间内完成，可以使用二分查找来解决。</p><p>在每一步二分查找中，可以找到中间元素 <code>mid</code>，然后与其相邻的元素 <code>mid-1</code> 和 <code>mid+1</code> 进行比较。如果 <code>nums[mid] &gt; nums[mid-1]</code> 且 <code>nums[mid] &gt; nums[mid+1]</code>，则 <code>mid</code> 即为峰值元素的位置。如果 <code>nums[mid-1] &gt; nums[mid]</code>，则峰值元素必然在 <code>mid</code> 的左侧；如果 <code>nums[mid+1] &gt; nums[mid]</code>，则峰值元素必然在 <code>mid</code> 的右侧。</p><p>通过不断缩小搜索范围，最终可以找到一个峰值元素的位置。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findPeakElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right <span class="token operator">=</span> mid<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),E=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),I=t("td",{style:{"text-align":"center"}},"852",-1),q={style:{"text-align":"left"}},C={href:"https://leetcode.com/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},L=t("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},N=t("code",null,"数组",-1),O=t("code",null,"二分查找",-1),V={style:{"text-align":"left"}},j=t("td",{style:{"text-align":"center"}},"1901",-1),B={style:{"text-align":"left"}},Y={href:"https://leetcode.com/problems/find-a-peak-element-ii",target:"_blank",rel:"noopener noreferrer"},R=t("td",{style:{"text-align":"center"}},null,-1),A={style:{"text-align":"left"}},G=t("code",null,"数组",-1),P=t("code",null,"二分查找",-1),S=t("code",null,"矩阵",-1),T={style:{"text-align":"left"}},z=t("td",{style:{"text-align":"center"}},"2137",-1),D={style:{"text-align":"left"}},F={href:"https://leetcode.com/problems/pour-water-between-buckets-to-make-water-levels-equal",target:"_blank",rel:"noopener noreferrer"},H=t("td",{style:{"text-align":"center"}},null,-1),J={style:{"text-align":"left"}},K=t("code",null,"数组",-1),Q=t("code",null,"二分查找",-1),U={style:{"text-align":"left"}},W=t("td",{style:{"text-align":"center"}},"2210",-1),X={style:{"text-align":"left"}},Z={href:"https://leetcode.com/problems/count-hills-and-valleys-in-an-array",target:"_blank",rel:"noopener noreferrer"},$=t("td",{style:{"text-align":"center"}},null,-1),tt={style:{"text-align":"left"}},et=t("code",null,"数组",-1),nt={style:{"text-align":"left"}},st=t("td",{style:{"text-align":"center"}},"2951",-1),at={style:{"text-align":"left"}},ot={href:"https://leetcode.com/problems/find-the-peaks",target:"_blank",rel:"noopener noreferrer"},lt=t("td",{style:{"text-align":"center"}},null,-1),ct={style:{"text-align":"left"}},it=t("code",null,"数组",-1),rt=t("code",null,"枚举",-1),dt={style:{"text-align":"left"}};function pt(ut,ht){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return r(),d("div",null,[t("h1",m,[_,n(),t("a",k,[n("162. 寻找峰值"),e(o)])]),t("p",null,[n("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[f]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[g]),_:1}),n("  🔗 "),t("a",b,[y,e(o)]),n(),t("a",x,[v,e(o)])]),w,p(" prettier-ignore "),t("table",null,[E,t("tbody",null,[t("tr",null,[I,t("td",q,[t("a",C,[n("山脉数组的峰顶索引"),e(o)])]),L,t("td",M,[e(a,{to:"/tag/array.html"},{default:s(()=>[N]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[O]),_:1})]),t("td",V,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[j,t("td",B,[t("a",Y,[n("寻找峰值 II"),e(o)])]),R,t("td",A,[e(a,{to:"/tag/array.html"},{default:s(()=>[G]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[P]),_:1}),n(),e(a,{to:"/tag/matrix.html"},{default:s(()=>[S]),_:1})]),t("td",T,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[z,t("td",D,[t("a",F,[n("通过倒水操作让所有的水桶所含水量相等 🔒"),e(o)])]),H,t("td",J,[e(a,{to:"/tag/array.html"},{default:s(()=>[K]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[Q]),_:1})]),t("td",U,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[W,t("td",X,[t("a",Z,[n("统计数组中峰和谷的数量"),e(o)])]),$,t("td",tt,[e(a,{to:"/tag/array.html"},{default:s(()=>[et]),_:1})]),t("td",nt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[st,t("td",at,[t("a",ot,[n("找出峰值"),e(o)])]),lt,t("td",ct,[e(a,{to:"/tag/array.html"},{default:s(()=>[it]),_:1}),n(),e(a,{to:"/tag/enumeration.html"},{default:s(()=>[rt]),_:1})]),t("td",dt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const _t=i(h,[["render",pt],["__file","0162.html.vue"]]);export{_t as default};
