import{_ as c,r as p,o as i,c as r,a as n,b as t,d as s,w as a,f as d,e as u}from"./app-ZVJfwurD.js";const k={},m={id:"_43-字符串相乘",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_43-字符串相乘","aria-hidden":"true"},"#",-1),h={href:"https://2xiao.github.io/leetcode-js/problem/0043.html",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"数学",-1),b=n("code",null,"字符串",-1),f=n("code",null,"模拟",-1),v={href:"https://leetcode.cn/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),q=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p><p><strong>Note:</strong> You must not use any built-in BigInteger library or convert the inputs to integer directly.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: num1 = &quot;2&quot;, num2 = &quot;3&quot;</p><p>Output: &quot;6&quot;</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: num1 = &quot;123&quot;, num2 = &quot;456&quot;</p><p>Output: &quot;56088&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li><li><code>num1</code> and <code>num2</code> consist of digits only.</li><li>Both <code>num1</code> and <code>num2</code> do not contain any leading zero, except the number <code>0</code> itself.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。</p><p>注意：不能使用任何内置的 <code>BigInteger</code> 库或直接将输入转换为整数。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>需要逐步模拟乘法过程，确保处理大数字时不会溢出。</p><ul><li>创建一个大小为 <code>m + n</code> 的数组 <code>res</code>，其中 <code>m</code> 和 <code>n</code> 分别是两个输入字符串的长度。这个大小足够存储乘法结果的最大可能位数。</li><li>从两个字符串的末尾开始反向遍历（从最低位到最高位）。对于每一对数字，将它们转换为整数进行相乘，并将结果放置在 <code>res</code> 数组的相应位置。</li><li>在将结果放入 <code>res</code> 数组时，需跟踪进位。由于乘积可能超过 <code>10</code>，因此需要计算进位并相应地调整 <code>res</code> 数组中的当前位。</li><li>填充完 <code>res</code> 数组后，将其转换为字符串。在此过程中，跳过前导零，构建最终的乘积字符串。</li><li>处理边界情况，若字符串为空，乘积应直接返回 <code>&quot;0&quot;</code>。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m * n)</code>，其中 <code>m</code> 和 <code>n</code> 分别是两个字符串的长度，因为需要遍历每一个数字。</li><li><strong>空间复杂度</strong>：<code>O(m + n)</code>，用于存储中间结果的 <code>res</code> 数组。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">num1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">num2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
		n <span class="token operator">=</span> num2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 模拟乘法过程</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">const</span> product <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> sum <span class="token operator">=</span> product <span class="token operator">+</span> res<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

			res<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
			res<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 跳过前导零</span>
	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		i<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">const</span> str <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 处理边界条件</span>
	<span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">:</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,20),j=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),E=n("td",{style:{"text-align":"center"}},"2",-1),B={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=n("code",null,"递归",-1),V=n("code",null,"链表",-1),O=n("code",null,"数学",-1),M={style:{"text-align":"left"}},R=n("td",{style:{"text-align":"center"}},"66",-1),z={style:{"text-align":"left"}},A={href:"https://leetcode.com/problems/plus-one",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"center"}},S={style:{"text-align":"left"}},T=n("code",null,"数组",-1),Y=n("code",null,"数学",-1),D={style:{"text-align":"left"}},F=n("td",{style:{"text-align":"center"}},"67",-1),H={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},K={style:{"text-align":"center"}},P={style:{"text-align":"left"}},Q=n("code",null,"位运算",-1),U=n("code",null,"数学",-1),W=n("code",null,"字符串",-1),X=n("code",null,"1+",-1),Z={style:{"text-align":"left"}},$=n("td",{style:{"text-align":"center"}},"415",-1),nn={style:{"text-align":"left"}},sn={href:"https://leetcode.com/problems/add-strings",target:"_blank",rel:"noopener noreferrer"},tn={style:{"text-align":"center"}},an={style:{"text-align":"left"}},en=n("code",null,"数学",-1),on=n("code",null,"字符串",-1),ln=n("code",null,"模拟",-1),pn={style:{"text-align":"left"}},cn=n("td",{style:{"text-align":"center"}},"2288",-1),rn={style:{"text-align":"left"}},dn={href:"https://leetcode.com/problems/apply-discount-to-prices",target:"_blank",rel:"noopener noreferrer"},un=n("td",{style:{"text-align":"center"}},null,-1),kn={style:{"text-align":"left"}},mn=n("code",null,"字符串",-1),_n={style:{"text-align":"left"}};function hn(gn,bn){const o=p("ExternalLinkIcon"),l=p("font"),e=p("RouterLink");return i(),r("div",null,[n("h1",m,[_,t(),n("a",h,[t("43. 字符串相乘"),s(o)])]),n("p",null,[t("🟠 "),s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1}),t("  🔖  "),s(e,{to:"/tag/math.html"},{default:a(()=>[g]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[b]),_:1}),t(),s(e,{to:"/tag/simulation.html"},{default:a(()=>[f]),_:1}),t("  🔗 "),n("a",v,[y,s(o)]),t(),n("a",x,[w,s(o)])]),q,d(" prettier-ignore "),n("table",null,[j,n("tbody",null,[n("tr",null,[E,n("td",B,[n("a",I,[t("两数相加"),s(o)])]),n("td",N,[s(e,{to:"/problem/0002.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",C,[s(e,{to:"/tag/recursion.html"},{default:a(()=>[L]),_:1}),t(),s(e,{to:"/tag/linked-list.html"},{default:a(()=>[V]),_:1}),t(),s(e,{to:"/tag/math.html"},{default:a(()=>[O]),_:1})]),n("td",M,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[R,n("td",z,[n("a",A,[t("加一"),s(o)])]),n("td",G,[s(e,{to:"/problem/0066.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",S,[s(e,{to:"/tag/array.html"},{default:a(()=>[T]),_:1}),t(),s(e,{to:"/tag/math.html"},{default:a(()=>[Y]),_:1})]),n("td",D,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[F,n("td",H,[n("a",J,[t("二进制求和"),s(o)])]),n("td",K,[s(e,{to:"/problem/0067.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",P,[s(e,{to:"/tag/bit-manipulation.html"},{default:a(()=>[Q]),_:1}),t(),s(e,{to:"/tag/math.html"},{default:a(()=>[U]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[W]),_:1}),t(),X]),n("td",Z,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[$,n("td",nn,[n("a",sn,[t("字符串相加"),s(o)])]),n("td",tn,[s(e,{to:"/problem/0415.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",an,[s(e,{to:"/tag/math.html"},{default:a(()=>[en]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[on]),_:1}),t(),s(e,{to:"/tag/simulation.html"},{default:a(()=>[ln]),_:1})]),n("td",pn,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[cn,n("td",rn,[n("a",dn,[t("价格减免"),s(o)])]),un,n("td",kn,[s(e,{to:"/tag/string.html"},{default:a(()=>[mn]),_:1})]),n("td",_n,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])])])])])}const vn=c(k,[["render",hn],["__file","0043.html.vue"]]);export{vn as default};
