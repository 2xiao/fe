import{_ as r,r as c,o as i,c as d,a as t,b as e,d as n,w as s,f as p,e as u}from"./app-JOMdB8bl.js";const h={},_={id:"_173-二叉搜索树迭代器",tabindex:"-1"},f=t("a",{class:"header-anchor",href:"#_173-二叉搜索树迭代器","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},m=t("code",null,"栈",-1),k=t("code",null,"树",-1),b=t("code",null,"设计",-1),x=t("code",null,"二叉搜索树",-1),y=t("code",null,"二叉树",-1),v=t("code",null,"迭代器",-1),T={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"LeetCode",-1),w=t("h2",{id:"题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),e(" 题目")],-1),N=t("code",null,"BSTIterator",-1),I={href:"https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)",target:"_blank",rel:"noopener noreferrer"},S=u(`<ul><li><code>BSTIterator(TreeNode root)</code> Initializes an object of the <code>BSTIterator</code> class. The <code>root</code> of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li><li><code>boolean hasNext()</code> Returns <code>true</code> if there exists a number in the traversal to the right of the pointer, otherwise returns <code>false</code>.</li><li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li></ul><p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p><p>You may assume that <code>next()</code> calls will always be valid. That is, there will be at least a next number in the in-order traversal when <code>next()</code> is called.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>Input</strong></p><p>[&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]</p><p>[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]</p><p><strong>Output</strong></p><p>[null, 3, 7, true, 9, true, 15, true, 20, false]</p><p><strong>Explanation</strong></p><p>BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);</p><p>bSTIterator.next(); // return 3</p><p>bSTIterator.next(); // return 7</p><p>bSTIterator.hasNext(); // return True</p><p>bSTIterator.next(); // return 9</p><p>bSTIterator.hasNext(); // return True</p><p>bSTIterator.next(); // return 15</p><p>bSTIterator.hasNext(); // return True</p><p>bSTIterator.next(); // return 20</p><p>bSTIterator.hasNext(); // return False</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[1, 10^5]</code>.</li><li><code>0 &lt;= Node.val &lt;= 10^6</code></li><li>At most <code>105</code> calls will be made to <code>hasNext</code>, and <code>next</code>.</li></ul><p><strong>Follow up:</strong></p><ul><li>Could you implement <code>next()</code> and <code>hasNext()</code> to run in average <code>O(1)</code> time and use <code>O(h)</code> memory, where <code>h</code> is the height of the tree?</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器，调用 <code>next()</code> 将返回二叉搜索树中的下一个最小的数，调用 <code>hasNext()</code> 将返回二叉搜索树中是否存在下一个数。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以采用中序遍历的方式，通过队列来模拟递归过程。</p><p>因为题目要求调用 <code>next()</code> 返回下一个最小的数，即按照从小到大的顺序返回元素，这正好符合二叉搜索树中序遍历的特性，二叉搜索树（BST）的中序遍历能够按照升序顺序输出树中的所有节点值。</p><ol><li>在构造函数中，调用 <code>_inorder()</code> 方法对整个树进行中序遍历，将遍历结果按顺序存入 <code>queue</code>。</li><li><code>next()</code> 方法：返回并移除队列中的第一个元素。</li><li><code>hasNext()</code> 方法：判断队列是否还有剩余元素。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：</p><ul><li><strong>初始化 (<code>constructor</code>)</strong>: <code>O(n)</code>，其中 <code>n</code> 是树中节点的数量。因为 <code>_inorder()</code> 方法会遍历树中的每一个节点，并将它们按中序顺序存入队列，整体是线性时间复杂度。</li><li><strong><code>next()</code> 操作</strong>: <code>O(1)</code>，因为只需要从队列中移除并返回第一个元素。</li><li><strong><code>hasNext()</code> 操作</strong>: <code>O(1)</code>，仅仅检查队列的长度是否大于 0。</li></ul></li><li><p><strong>空间复杂度</strong>：</p><ul><li><strong>初始化 (<code>constructor</code>)</strong>: <code>O(n)</code>，队列需要存储树中的所有节点，因此空间复杂度与节点数 <code>n</code> 成正比。</li><li><strong><code>next()</code> 和 <code>hasNext()</code> 操作</strong>：<code>O(1)</code>，因为这些操作只需要访问或修改队列，不需要额外的空间。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">BSTIterator</span> <span class="token punctuation">{</span>
	<span class="token comment">// @param {TreeNode} root</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 中序遍历</span>
	<span class="token function">_inorder</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// @return {number}</span>
	<span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// @return {boolean}</span>
	<span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),B=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),O=t("td",{style:{"text-align":"center"}},"94",-1),M={style:{"text-align":"left"}},z={href:"https://leetcode.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"center"}},E={style:{"text-align":"left"}},L=t("code",null,"栈",-1),V=t("code",null,"树",-1),j=t("code",null,"深度优先搜索",-1),R=t("code",null,"1+",-1),F={style:{"text-align":"left"}},A=t("td",{style:{"text-align":"center"}},"251",-1),Y={style:{"text-align":"left"}},D={href:"https://leetcode.com/problems/flatten-2d-vector",target:"_blank",rel:"noopener noreferrer"},G=t("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},J=t("code",null,"设计",-1),K=t("code",null,"数组",-1),P=t("code",null,"双指针",-1),Q=t("code",null,"1+",-1),U={style:{"text-align":"left"}},W=t("td",{style:{"text-align":"center"}},"281",-1),X={style:{"text-align":"left"}},Z={href:"https://leetcode.com/problems/zigzag-iterator",target:"_blank",rel:"noopener noreferrer"},$=t("td",{style:{"text-align":"center"}},null,-1),tt={style:{"text-align":"left"}},et=t("code",null,"设计",-1),nt=t("code",null,"队列",-1),st=t("code",null,"数组",-1),ot=t("code",null,"1+",-1),at={style:{"text-align":"left"}},lt=t("td",{style:{"text-align":"center"}},"284",-1),ct={style:{"text-align":"left"}},rt={href:"https://leetcode.com/problems/peeking-iterator",target:"_blank",rel:"noopener noreferrer"},it=t("td",{style:{"text-align":"center"}},null,-1),dt={style:{"text-align":"left"}},pt=t("code",null,"设计",-1),ut=t("code",null,"数组",-1),ht=t("code",null,"迭代器",-1),_t={style:{"text-align":"left"}},ft=t("td",{style:{"text-align":"center"}},"285",-1),gt={style:{"text-align":"left"}},mt={href:"https://leetcode.com/problems/inorder-successor-in-bst",target:"_blank",rel:"noopener noreferrer"},kt=t("td",{style:{"text-align":"center"}},null,-1),bt={style:{"text-align":"left"}},xt=t("code",null,"树",-1),yt=t("code",null,"深度优先搜索",-1),vt=t("code",null,"二叉搜索树",-1),Tt=t("code",null,"1+",-1),qt={style:{"text-align":"left"}},wt=t("td",{style:{"text-align":"center"}},"1586",-1),Nt={style:{"text-align":"left"}},It={href:"https://leetcode.com/problems/binary-search-tree-iterator-ii",target:"_blank",rel:"noopener noreferrer"},St=t("td",{style:{"text-align":"center"}},null,-1),Bt={style:{"text-align":"left"}},Ot=t("code",null,"栈",-1),Mt=t("code",null,"树",-1),zt=t("code",null,"设计",-1),Ct=t("code",null,"3+",-1),Et={style:{"text-align":"left"}};function Lt(Vt,jt){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink");return i(),d("div",null,[t("h1",_,[f,e(),t("a",g,[e("173. 二叉搜索树迭代器"),n(a)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(o,{to:"/tag/stack.html"},{default:s(()=>[m]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[k]),_:1}),e(),n(o,{to:"/tag/design.html"},{default:s(()=>[b]),_:1}),e(),n(o,{to:"/tag/binary-search-tree.html"},{default:s(()=>[x]),_:1}),e(),n(o,{to:"/tag/binary-tree.html"},{default:s(()=>[y]),_:1}),e(),n(o,{to:"/tag/iterator.html"},{default:s(()=>[v]),_:1}),e("  🔗 "),t("a",T,[q,n(a)])]),w,t("p",null,[e("Implement the "),N,e(" class that represents an iterator over the "),t("strong",null,[t("a",I,[e("in-order traversal"),n(a)])]),e(" of a binary search tree (BST):")]),S,p(" prettier-ignore "),t("table",null,[B,t("tbody",null,[t("tr",null,[O,t("td",M,[t("a",z,[e("二叉树的中序遍历"),n(a)])]),t("td",C,[n(o,{to:"/problem/0094.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",E,[n(o,{to:"/tag/stack.html"},{default:s(()=>[L]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[V]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[j]),_:1}),e(),R]),t("td",F,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[A,t("td",Y,[t("a",D,[e("展开二维向量"),n(a)])]),G,t("td",H,[n(o,{to:"/tag/design.html"},{default:s(()=>[J]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[K]),_:1}),e(),n(o,{to:"/tag/two-pointers.html"},{default:s(()=>[P]),_:1}),e(),Q]),t("td",U,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[W,t("td",X,[t("a",Z,[e("锯齿迭代器"),n(a)])]),$,t("td",tt,[n(o,{to:"/tag/design.html"},{default:s(()=>[et]),_:1}),e(),n(o,{to:"/tag/queue.html"},{default:s(()=>[nt]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[st]),_:1}),e(),ot]),t("td",at,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[lt,t("td",ct,[t("a",rt,[e("窥视迭代器"),n(a)])]),it,t("td",dt,[n(o,{to:"/tag/design.html"},{default:s(()=>[pt]),_:1}),e(),n(o,{to:"/tag/array.html"},{default:s(()=>[ut]),_:1}),e(),n(o,{to:"/tag/iterator.html"},{default:s(()=>[ht]),_:1})]),t("td",_t,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ft,t("td",gt,[t("a",mt,[e("二叉搜索树中的中序后继"),n(a)])]),kt,t("td",bt,[n(o,{to:"/tag/tree.html"},{default:s(()=>[xt]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[yt]),_:1}),e(),n(o,{to:"/tag/binary-search-tree.html"},{default:s(()=>[vt]),_:1}),e(),Tt]),t("td",qt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[wt,t("td",Nt,[t("a",It,[e("二叉搜索树迭代器 II"),n(a)])]),St,t("td",Bt,[n(o,{to:"/tag/stack.html"},{default:s(()=>[Ot]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[Mt]),_:1}),e(),n(o,{to:"/tag/design.html"},{default:s(()=>[zt]),_:1}),e(),Ct]),t("td",Et,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const Ft=r(h,[["render",Lt],["__file","0173.html.vue"]]);export{Ft as default};
