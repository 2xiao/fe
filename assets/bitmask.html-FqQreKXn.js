import{_,r as i,o as a,c,a as t,b as e,w as l,d as o,f as r}from"./app-ynO5B_DP.js";const u={},h=t("h1",{id:"状态压缩",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#状态压缩","aria-hidden":"true"},"#"),o(" 状态压缩")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),p=t("code",null,"矩阵",-1),x=t("code",null,"链表",-1),b=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),H=t("code",null,"单调栈",-1),w=t("code",null,"队列",-1),M=t("code",null,"单调队列",-1),v=t("code",null,"堆（优先队列）",-1),q=t("code",null,"哈希表",-1),z=t("code",null,"字符串",-1),L=t("code",null,"字符串匹配",-1),C=t("code",null,"树",-1),I=t("code",null,"二叉树",-1),N=t("code",null,"二叉搜索树",-1),E=t("code",null,"最小生成树",-1),P=t("code",null,"图",-1),V=t("code",null,"有序集合",-1),B=t("code",null,"拓扑排序",-1),R=t("code",null,"最短路",-1),j=t("code",null,"强连通分量",-1),J=t("code",null,"欧拉回路",-1),K=t("code",null,"双连通分量",-1),T=t("code",null,"并查集",-1),W=t("code",null,"字典树",-1),A=t("code",null,"线段树",-1),D=t("code",null,"树状数组",-1),F=t("code",null,"后缀数组",-1),G=t("p",null,[t("strong",null,"算法")],-1),O=t("code",null,"枚举",-1),Q=t("code",null,"递归",-1),S=t("code",null,"分治",-1),U=t("code",null,"回溯",-1),X=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),ot=t("code",null,"归并排序",-1),lt=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),it=t("code",null,"广度优先搜索",-1),_t=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),rt=t("code",null,"计数",-1),ut=t("code",null,"滑动窗口",-1),ht=t("span",{class:"blue"},"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),pt=t("code",null,"数学",-1),xt=t("code",null,"数论",-1),bt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Ht=t("code",null,"模拟",-1),wt=t("code",null,"组合数学",-1),Mt=t("code",null,"随机化",-1),vt=t("code",null,"概率与统计",-1),qt=t("code",null,"水塘抽样",-1),zt=t("code",null,"拒绝采样",-1),Lt=t("code",null,"数据库",-1),Ct=t("code",null,"设计",-1),It=t("code",null,"数据流",-1),Nt=t("code",null,"脑筋急转弯",-1),Et=t("code",null,"交互",-1),Pt=t("code",null,"迭代器",-1),Vt=t("code",null,"多线程",-1),Bt=t("hr",null,null,-1),Rt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),jt=t("td",{style:{"text-align":"center"}},"351",-1),Jt={style:{"text-align":"left"}},Kt={href:"https://leetcode.com/problems/android-unlock-patterns",target:"_blank",rel:"noopener noreferrer"},Tt=t("td",{style:{"text-align":"center"}},null,-1),Wt={style:{"text-align":"left"}},At=t("code",null,"位运算",-1),Dt=t("code",null,"动态规划",-1),Ft=t("code",null,"回溯",-1),Gt=t("code",null,"1+",-1),Ot={style:{"text-align":"left"}},Qt=t("td",{style:{"text-align":"center"}},"464",-1),St={style:{"text-align":"left"}},Ut={href:"https://leetcode.com/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},Xt=t("td",{style:{"text-align":"center"}},null,-1),Yt={style:{"text-align":"left"}},Zt=t("code",null,"位运算",-1),$t=t("code",null,"记忆化搜索",-1),te=t("code",null,"数学",-1),ee=t("code",null,"3+",-1),oe={style:{"text-align":"left"}},le=t("td",{style:{"text-align":"center"}},"465",-1),ne={style:{"text-align":"left"}},se={href:"https://leetcode.com/problems/optimal-account-balancing",target:"_blank",rel:"noopener noreferrer"},de=t("td",{style:{"text-align":"center"}},null,-1),ie={style:{"text-align":"left"}},_e=t("code",null,"位运算",-1),ae=t("code",null,"数组",-1),ce=t("code",null,"动态规划",-1),re=t("code",null,"2+",-1),ue={style:{"text-align":"left"}},he=t("td",{style:{"text-align":"center"}},"473",-1),fe={style:{"text-align":"left"}},ge={href:"https://leetcode.com/problems/matchsticks-to-square",target:"_blank",rel:"noopener noreferrer"},me=t("td",{style:{"text-align":"center"}},null,-1),ye={style:{"text-align":"left"}},pe=t("code",null,"位运算",-1),xe=t("code",null,"数组",-1),be=t("code",null,"动态规划",-1),ke=t("code",null,"2+",-1),He={style:{"text-align":"left"}},we=t("td",{style:{"text-align":"center"}},"526",-1),Me={style:{"text-align":"left"}},ve={href:"https://leetcode.com/problems/beautiful-arrangement",target:"_blank",rel:"noopener noreferrer"},qe=t("td",{style:{"text-align":"center"}},null,-1),ze={style:{"text-align":"left"}},Le=t("code",null,"位运算",-1),Ce=t("code",null,"数组",-1),Ie=t("code",null,"动态规划",-1),Ne=t("code",null,"2+",-1),Ee={style:{"text-align":"left"}},Pe=t("td",{style:{"text-align":"center"}},"638",-1),Ve={style:{"text-align":"left"}},Be={href:"https://leetcode.com/problems/shopping-offers",target:"_blank",rel:"noopener noreferrer"},Re=t("td",{style:{"text-align":"center"}},null,-1),je={style:{"text-align":"left"}},Je=t("code",null,"位运算",-1),Ke=t("code",null,"记忆化搜索",-1),Te=t("code",null,"数组",-1),We=t("code",null,"3+",-1),Ae={style:{"text-align":"left"}},De=t("td",{style:{"text-align":"center"}},"691",-1),Fe={style:{"text-align":"left"}},Ge={href:"https://leetcode.com/problems/stickers-to-spell-word",target:"_blank",rel:"noopener noreferrer"},Oe=t("td",{style:{"text-align":"center"}},null,-1),Qe={style:{"text-align":"left"}},Se=t("code",null,"位运算",-1),Ue=t("code",null,"数组",-1),Xe=t("code",null,"字符串",-1),Ye=t("code",null,"3+",-1),Ze={style:{"text-align":"left"}},$e=t("td",{style:{"text-align":"center"}},"698",-1),to={style:{"text-align":"left"}},eo={href:"https://leetcode.com/problems/partition-to-k-equal-sum-subsets",target:"_blank",rel:"noopener noreferrer"},oo=t("td",{style:{"text-align":"center"}},null,-1),lo={style:{"text-align":"left"}},no=t("code",null,"位运算",-1),so=t("code",null,"记忆化搜索",-1),io=t("code",null,"数组",-1),_o=t("code",null,"3+",-1),ao={style:{"text-align":"left"}},co=t("td",{style:{"text-align":"center"}},"805",-1),ro={style:{"text-align":"left"}},uo={href:"https://leetcode.com/problems/split-array-with-same-average",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},null,-1),fo={style:{"text-align":"left"}},go=t("code",null,"位运算",-1),mo=t("code",null,"数组",-1),yo=t("code",null,"数学",-1),po=t("code",null,"2+",-1),xo={style:{"text-align":"left"}},bo=t("td",{style:{"text-align":"center"}},"847",-1),ko={style:{"text-align":"left"}},Ho={href:"https://leetcode.com/problems/shortest-path-visiting-all-nodes",target:"_blank",rel:"noopener noreferrer"},wo=t("td",{style:{"text-align":"center"}},null,-1),Mo={style:{"text-align":"left"}},vo=t("code",null,"位运算",-1),qo=t("code",null,"广度优先搜索",-1),zo=t("code",null,"图",-1),Lo=t("code",null,"2+",-1),Co={style:{"text-align":"left"}},Io=t("td",{style:{"text-align":"center"}},"943",-1),No={style:{"text-align":"left"}},Eo={href:"https://leetcode.com/problems/find-the-shortest-superstring",target:"_blank",rel:"noopener noreferrer"},Po=t("td",{style:{"text-align":"center"}},null,-1),Vo={style:{"text-align":"left"}},Bo=t("code",null,"位运算",-1),Ro=t("code",null,"数组",-1),jo=t("code",null,"字符串",-1),Jo=t("code",null,"2+",-1),Ko={style:{"text-align":"left"}},To=t("td",{style:{"text-align":"center"}},"996",-1),Wo={style:{"text-align":"left"}},Ao={href:"https://leetcode.com/problems/number-of-squareful-arrays",target:"_blank",rel:"noopener noreferrer"},Do=t("td",{style:{"text-align":"center"}},null,-1),Fo={style:{"text-align":"left"}},Go=t("code",null,"位运算",-1),Oo=t("code",null,"数组",-1),Qo=t("code",null,"哈希表",-1),So=t("code",null,"4+",-1),Uo={style:{"text-align":"left"}},Xo=t("td",{style:{"text-align":"center"}},"1066",-1),Yo={style:{"text-align":"left"}},Zo={href:"https://leetcode.com/problems/campus-bikes-ii",target:"_blank",rel:"noopener noreferrer"},$o=t("td",{style:{"text-align":"center"}},null,-1),tl={style:{"text-align":"left"}},el=t("code",null,"位运算",-1),ol=t("code",null,"数组",-1),ll=t("code",null,"动态规划",-1),nl=t("code",null,"2+",-1),sl={style:{"text-align":"left"}},dl=t("td",{style:{"text-align":"center"}},"1125",-1),il={style:{"text-align":"left"}},_l={href:"https://leetcode.com/problems/smallest-sufficient-team",target:"_blank",rel:"noopener noreferrer"},al=t("td",{style:{"text-align":"center"}},null,-1),cl={style:{"text-align":"left"}},rl=t("code",null,"位运算",-1),ul=t("code",null,"数组",-1),hl=t("code",null,"动态规划",-1),fl=t("code",null,"1+",-1),gl={style:{"text-align":"left"}},ml=t("td",{style:{"text-align":"center"}},"1255",-1),yl={style:{"text-align":"left"}},pl={href:"https://leetcode.com/problems/maximum-score-words-formed-by-letters",target:"_blank",rel:"noopener noreferrer"},xl=t("td",{style:{"text-align":"center"}},null,-1),bl={style:{"text-align":"left"}},kl=t("code",null,"位运算",-1),Hl=t("code",null,"数组",-1),wl=t("code",null,"字符串",-1),Ml=t("code",null,"3+",-1),vl={style:{"text-align":"left"}},ql=t("td",{style:{"text-align":"center"}},"1349",-1),zl={style:{"text-align":"left"}},Ll={href:"https://leetcode.com/problems/maximum-students-taking-exam",target:"_blank",rel:"noopener noreferrer"},Cl=t("td",{style:{"text-align":"center"}},null,-1),Il={style:{"text-align":"left"}},Nl=t("code",null,"位运算",-1),El=t("code",null,"数组",-1),Pl=t("code",null,"动态规划",-1),Vl=t("code",null,"2+",-1),Bl={style:{"text-align":"left"}},Rl=t("td",{style:{"text-align":"center"}},"1434",-1),jl={style:{"text-align":"left"}},Jl={href:"https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other",target:"_blank",rel:"noopener noreferrer"},Kl=t("td",{style:{"text-align":"center"}},null,-1),Tl={style:{"text-align":"left"}},Wl=t("code",null,"位运算",-1),Al=t("code",null,"数组",-1),Dl=t("code",null,"动态规划",-1),Fl=t("code",null,"1+",-1),Gl={style:{"text-align":"left"}},Ol=t("td",{style:{"text-align":"center"}},"1494",-1),Ql={style:{"text-align":"left"}},Sl={href:"https://leetcode.com/problems/parallel-courses-ii",target:"_blank",rel:"noopener noreferrer"},Ul=t("td",{style:{"text-align":"center"}},null,-1),Xl={style:{"text-align":"left"}},Yl=t("code",null,"位运算",-1),Zl=t("code",null,"图",-1),$l=t("code",null,"动态规划",-1),tn=t("code",null,"1+",-1),en={style:{"text-align":"left"}},on=t("td",{style:{"text-align":"center"}},"1595",-1),ln={style:{"text-align":"left"}},nn={href:"https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points",target:"_blank",rel:"noopener noreferrer"},sn=t("td",{style:{"text-align":"center"}},null,-1),dn={style:{"text-align":"left"}},_n=t("code",null,"位运算",-1),an=t("code",null,"数组",-1),cn=t("code",null,"动态规划",-1),rn=t("code",null,"2+",-1),un={style:{"text-align":"left"}},hn=t("td",{style:{"text-align":"center"}},"1617",-1),fn={style:{"text-align":"left"}},gn={href:"https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities",target:"_blank",rel:"noopener noreferrer"},mn=t("td",{style:{"text-align":"center"}},null,-1),yn={style:{"text-align":"left"}},pn=t("code",null,"位运算",-1),xn=t("code",null,"树",-1),bn=t("code",null,"动态规划",-1),kn=t("code",null,"2+",-1),Hn={style:{"text-align":"left"}},wn=t("td",{style:{"text-align":"center"}},"1655",-1),Mn={style:{"text-align":"left"}},vn={href:"https://leetcode.com/problems/distribute-repeating-integers",target:"_blank",rel:"noopener noreferrer"},qn=t("td",{style:{"text-align":"center"}},null,-1),zn={style:{"text-align":"left"}},Ln=t("code",null,"位运算",-1),Cn=t("code",null,"数组",-1),In=t("code",null,"动态规划",-1),Nn=t("code",null,"2+",-1),En={style:{"text-align":"left"}},Pn=t("td",{style:{"text-align":"center"}},"1659",-1),Vn={style:{"text-align":"left"}},Bn={href:"https://leetcode.com/problems/maximize-grid-happiness",target:"_blank",rel:"noopener noreferrer"},Rn=t("td",{style:{"text-align":"center"}},null,-1),jn={style:{"text-align":"left"}},Jn=t("code",null,"位运算",-1),Kn=t("code",null,"记忆化搜索",-1),Tn=t("code",null,"动态规划",-1),Wn=t("code",null,"1+",-1),An={style:{"text-align":"left"}},Dn=t("td",{style:{"text-align":"center"}},"1681",-1),Fn={style:{"text-align":"left"}},Gn={href:"https://leetcode.com/problems/minimum-incompatibility",target:"_blank",rel:"noopener noreferrer"},On=t("td",{style:{"text-align":"center"}},null,-1),Qn={style:{"text-align":"left"}},Sn=t("code",null,"位运算",-1),Un=t("code",null,"数组",-1),Xn=t("code",null,"动态规划",-1),Yn=t("code",null,"1+",-1),Zn={style:{"text-align":"left"}},$n=t("td",{style:{"text-align":"center"}},"1723",-1),ts={style:{"text-align":"left"}},es={href:"https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs",target:"_blank",rel:"noopener noreferrer"},os=t("td",{style:{"text-align":"center"}},null,-1),ls={style:{"text-align":"left"}},ns=t("code",null,"位运算",-1),ss=t("code",null,"数组",-1),ds=t("code",null,"动态规划",-1),is=t("code",null,"2+",-1),_s={style:{"text-align":"left"}},as=t("td",{style:{"text-align":"center"}},"1755",-1),cs={style:{"text-align":"left"}},rs={href:"https://leetcode.com/problems/closest-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},us=t("td",{style:{"text-align":"center"}},null,-1),hs={style:{"text-align":"left"}},fs=t("code",null,"位运算",-1),gs=t("code",null,"数组",-1),ms=t("code",null,"双指针",-1),ys=t("code",null,"2+",-1),ps={style:{"text-align":"left"}},xs=t("td",{style:{"text-align":"center"}},"1799",-1),bs={style:{"text-align":"left"}},ks={href:"https://leetcode.com/problems/maximize-score-after-n-operations",target:"_blank",rel:"noopener noreferrer"},Hs=t("td",{style:{"text-align":"center"}},null,-1),ws={style:{"text-align":"left"}},Ms=t("code",null,"位运算",-1),vs=t("code",null,"数组",-1),qs=t("code",null,"数学",-1),zs=t("code",null,"4+",-1),Ls={style:{"text-align":"left"}},Cs=t("td",{style:{"text-align":"center"}},"1815",-1),Is={style:{"text-align":"left"}},Ns={href:"https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts",target:"_blank",rel:"noopener noreferrer"},Es=t("td",{style:{"text-align":"center"}},null,-1),Ps={style:{"text-align":"left"}},Vs=t("code",null,"位运算",-1),Bs=t("code",null,"记忆化搜索",-1),Rs=t("code",null,"数组",-1),js=t("code",null,"2+",-1),Js={style:{"text-align":"left"}},Ks=t("td",{style:{"text-align":"center"}},"1879",-1),Ts={style:{"text-align":"left"}},Ws={href:"https://leetcode.com/problems/minimum-xor-sum-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},As=t("td",{style:{"text-align":"center"}},null,-1),Ds={style:{"text-align":"left"}},Fs=t("code",null,"位运算",-1),Gs=t("code",null,"数组",-1),Os=t("code",null,"动态规划",-1),Qs=t("code",null,"1+",-1),Ss={style:{"text-align":"left"}},Us=t("td",{style:{"text-align":"center"}},"1947",-1),Xs={style:{"text-align":"left"}},Ys={href:"https://leetcode.com/problems/maximum-compatibility-score-sum",target:"_blank",rel:"noopener noreferrer"},Zs=t("td",{style:{"text-align":"center"}},null,-1),$s={style:{"text-align":"left"}},td=t("code",null,"位运算",-1),ed=t("code",null,"数组",-1),od=t("code",null,"动态规划",-1),ld=t("code",null,"2+",-1),nd={style:{"text-align":"left"}},sd=t("td",{style:{"text-align":"center"}},"1986",-1),dd={style:{"text-align":"left"}},id={href:"https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks",target:"_blank",rel:"noopener noreferrer"},_d=t("td",{style:{"text-align":"center"}},null,-1),ad={style:{"text-align":"left"}},cd=t("code",null,"位运算",-1),rd=t("code",null,"数组",-1),ud=t("code",null,"动态规划",-1),hd=t("code",null,"2+",-1),fd={style:{"text-align":"left"}},gd=t("td",{style:{"text-align":"center"}},"1994",-1),md={style:{"text-align":"left"}},yd={href:"https://leetcode.com/problems/the-number-of-good-subsets",target:"_blank",rel:"noopener noreferrer"},pd=t("td",{style:{"text-align":"center"}},null,-1),xd={style:{"text-align":"left"}},bd=t("code",null,"位运算",-1),kd=t("code",null,"数组",-1),Hd=t("code",null,"数学",-1),wd=t("code",null,"2+",-1),Md={style:{"text-align":"left"}},vd=t("td",{style:{"text-align":"center"}},"2002",-1),qd={style:{"text-align":"left"}},zd={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},Ld=t("td",{style:{"text-align":"center"}},null,-1),Cd={style:{"text-align":"left"}},Id=t("code",null,"位运算",-1),Nd=t("code",null,"字符串",-1),Ed=t("code",null,"动态规划",-1),Pd=t("code",null,"2+",-1),Vd={style:{"text-align":"left"}},Bd=t("td",{style:{"text-align":"center"}},"2035",-1),Rd={style:{"text-align":"left"}},jd={href:"https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference",target:"_blank",rel:"noopener noreferrer"},Jd=t("td",{style:{"text-align":"center"}},null,-1),Kd={style:{"text-align":"left"}},Td=t("code",null,"位运算",-1),Wd=t("code",null,"数组",-1),Ad=t("code",null,"双指针",-1),Dd=t("code",null,"4+",-1),Fd={style:{"text-align":"left"}},Gd=t("td",{style:{"text-align":"center"}},"2152",-1),Od={style:{"text-align":"left"}},Qd={href:"https://leetcode.com/problems/minimum-number-of-lines-to-cover-points",target:"_blank",rel:"noopener noreferrer"},Sd=t("td",{style:{"text-align":"center"}},null,-1),Ud={style:{"text-align":"left"}},Xd=t("code",null,"位运算",-1),Yd=t("code",null,"几何",-1),Zd=t("code",null,"数组",-1),$d=t("code",null,"5+",-1),ti={style:{"text-align":"left"}},ei=t("td",{style:{"text-align":"center"}},"2172",-1),oi={style:{"text-align":"left"}},li={href:"https://leetcode.com/problems/maximum-and-sum-of-array",target:"_blank",rel:"noopener noreferrer"},ni=t("td",{style:{"text-align":"center"}},null,-1),si={style:{"text-align":"left"}},di=t("code",null,"位运算",-1),ii=t("code",null,"数组",-1),_i=t("code",null,"动态规划",-1),ai=t("code",null,"1+",-1),ci={style:{"text-align":"left"}},ri=t("td",{style:{"text-align":"center"}},"2184",-1),ui={style:{"text-align":"left"}},hi={href:"https://leetcode.com/problems/number-of-ways-to-build-sturdy-brick-wall",target:"_blank",rel:"noopener noreferrer"},fi=t("td",{style:{"text-align":"center"}},null,-1),gi={style:{"text-align":"left"}},mi=t("code",null,"位运算",-1),yi=t("code",null,"数组",-1),pi=t("code",null,"动态规划",-1),xi=t("code",null,"1+",-1),bi={style:{"text-align":"left"}},ki=t("td",{style:{"text-align":"center"}},"2247",-1),Hi={style:{"text-align":"left"}},wi={href:"https://leetcode.com/problems/maximum-cost-of-trip-with-k-highways",target:"_blank",rel:"noopener noreferrer"},Mi=t("td",{style:{"text-align":"center"}},null,-1),vi={style:{"text-align":"left"}},qi=t("code",null,"位运算",-1),zi=t("code",null,"图",-1),Li=t("code",null,"动态规划",-1),Ci=t("code",null,"1+",-1),Ii={style:{"text-align":"left"}},Ni=t("td",{style:{"text-align":"center"}},"2305",-1),Ei={style:{"text-align":"left"}},Pi={href:"https://leetcode.com/problems/fair-distribution-of-cookies",target:"_blank",rel:"noopener noreferrer"},Vi=t("td",{style:{"text-align":"center"}},null,-1),Bi={style:{"text-align":"left"}},Ri=t("code",null,"位运算",-1),ji=t("code",null,"数组",-1),Ji=t("code",null,"动态规划",-1),Ki=t("code",null,"2+",-1),Ti={style:{"text-align":"left"}},Wi=t("td",{style:{"text-align":"center"}},"2403",-1),Ai={style:{"text-align":"left"}},Di={href:"https://leetcode.com/problems/minimum-time-to-kill-all-monsters",target:"_blank",rel:"noopener noreferrer"},Fi=t("td",{style:{"text-align":"center"}},null,-1),Gi={style:{"text-align":"left"}},Oi=t("code",null,"位运算",-1),Qi=t("code",null,"数组",-1),Si=t("code",null,"动态规划",-1),Ui=t("code",null,"1+",-1),Xi={style:{"text-align":"left"}},Yi=t("td",{style:{"text-align":"center"}},"2572",-1),Zi={style:{"text-align":"left"}},$i={href:"https://leetcode.com/problems/count-the-number-of-square-free-subsets",target:"_blank",rel:"noopener noreferrer"},t_=t("td",{style:{"text-align":"center"}},null,-1),e_={style:{"text-align":"left"}},o_=t("code",null,"位运算",-1),l_=t("code",null,"数组",-1),n_=t("code",null,"数学",-1),s_=t("code",null,"2+",-1),d_={style:{"text-align":"left"}},i_=t("td",{style:{"text-align":"center"}},"2741",-1),__={style:{"text-align":"left"}},a_={href:"https://leetcode.com/problems/special-permutations",target:"_blank",rel:"noopener noreferrer"},c_=t("td",{style:{"text-align":"center"}},null,-1),r_={style:{"text-align":"left"}},u_=t("code",null,"位运算",-1),h_=t("code",null,"数组",-1),f_=t("code",null,"动态规划",-1),g_=t("code",null,"1+",-1),m_={style:{"text-align":"left"}},y_=t("td",{style:{"text-align":"center"}},"2791",-1),p_={style:{"text-align":"left"}},x_={href:"https://leetcode.com/problems/count-paths-that-can-form-a-palindrome-in-a-tree",target:"_blank",rel:"noopener noreferrer"},b_=t("td",{style:{"text-align":"center"}},null,-1),k_={style:{"text-align":"left"}},H_=t("code",null,"位运算",-1),w_=t("code",null,"树",-1),M_=t("code",null,"深度优先搜索",-1),v_=t("code",null,"2+",-1),q_={style:{"text-align":"left"}},z_=t("td",{style:{"text-align":"center"}},"2992",-1),L_={style:{"text-align":"left"}},C_={href:"https://leetcode.com/problems/number-of-self-divisible-permutations",target:"_blank",rel:"noopener noreferrer"},I_=t("td",{style:{"text-align":"center"}},null,-1),N_={style:{"text-align":"left"}},E_=t("code",null,"位运算",-1),P_=t("code",null,"数组",-1),V_=t("code",null,"动态规划",-1),B_=t("code",null,"2+",-1),R_={style:{"text-align":"left"}},j_=t("td",{style:{"text-align":"center"}},"3003",-1),J_={style:{"text-align":"left"}},K_={href:"https://leetcode.com/problems/maximize-the-number-of-partitions-after-operations",target:"_blank",rel:"noopener noreferrer"},T_=t("td",{style:{"text-align":"center"}},null,-1),W_={style:{"text-align":"left"}},A_=t("code",null,"位运算",-1),D_=t("code",null,"字符串",-1),F_=t("code",null,"动态规划",-1),G_=t("code",null,"1+",-1),O_={style:{"text-align":"left"}},Q_=t("td",{style:{"text-align":"center"}},"3149",-1),S_={style:{"text-align":"left"}},U_={href:"https://leetcode.com/problems/find-the-minimum-cost-array-permutation",target:"_blank",rel:"noopener noreferrer"},X_=t("td",{style:{"text-align":"center"}},null,-1),Y_={style:{"text-align":"left"}},Z_=t("code",null,"位运算",-1),$_=t("code",null,"数组",-1),ta=t("code",null,"动态规划",-1),ea=t("code",null,"1+",-1),oa={style:{"text-align":"left"}},la=t("td",{style:{"text-align":"center"}},"3276",-1),na={style:{"text-align":"left"}},sa={href:"https://leetcode.com/problems/select-cells-in-grid-with-maximum-score",target:"_blank",rel:"noopener noreferrer"},da=t("td",{style:{"text-align":"center"}},null,-1),ia={style:{"text-align":"left"}},_a=t("code",null,"位运算",-1),aa=t("code",null,"数组",-1),ca=t("code",null,"动态规划",-1),ra=t("code",null,"2+",-1),ua={style:{"text-align":"left"}},ha=t("td",{style:{"text-align":"center"}},"3283",-1),fa={style:{"text-align":"left"}},ga={href:"https://leetcode.com/problems/maximum-number-of-moves-to-kill-all-pawns",target:"_blank",rel:"noopener noreferrer"},ma=t("td",{style:{"text-align":"center"}},null,-1),ya={style:{"text-align":"left"}},pa=t("code",null,"位运算",-1),xa=t("code",null,"广度优先搜索",-1),ba=t("code",null,"数组",-1),ka=t("code",null,"3+",-1),Ha={style:{"text-align":"left"}},wa=t("td",{style:{"text-align":"center"}},"LCP 04",-1),Ma={style:{"text-align":"left"}},va={href:"https://leetcode.cn/problems/broken-board-dominoes",target:"_blank",rel:"noopener noreferrer"},qa=t("td",{style:{"text-align":"center"}},null,-1),za={style:{"text-align":"left"}},La=t("code",null,"位运算",-1),Ca=t("code",null,"图",-1),Ia=t("code",null,"数组",-1),Na=t("code",null,"2+",-1),Ea={style:{"text-align":"left"}},Pa=t("td",{style:{"text-align":"center"}},"LCP 13",-1),Va={style:{"text-align":"left"}},Ba={href:"https://leetcode.cn/problems/xun-bao",target:"_blank",rel:"noopener noreferrer"},Ra=t("td",{style:{"text-align":"center"}},null,-1),ja={style:{"text-align":"left"}},Ja=t("code",null,"位运算",-1),Ka=t("code",null,"广度优先搜索",-1),Ta=t("code",null,"数组",-1),Wa=t("code",null,"3+",-1),Aa={style:{"text-align":"left"}},Da=t("td",{style:{"text-align":"center"}},"LCP 53",-1),Fa={style:{"text-align":"left"}},Ga={href:"https://leetcode.cn/problems/EJvmW4",target:"_blank",rel:"noopener noreferrer"},Oa=t("td",{style:{"text-align":"center"}},null,-1),Qa={style:{"text-align":"left"}},Sa=t("code",null,"位运算",-1),Ua=t("code",null,"数组",-1),Xa=t("code",null,"动态规划",-1),Ya=t("code",null,"1+",-1),Za={style:{"text-align":"left"}},$a=t("td",{style:{"text-align":"center"}},"LCP 69",-1),tc={style:{"text-align":"left"}},ec={href:"https://leetcode.cn/problems/rMeRt2",target:"_blank",rel:"noopener noreferrer"},oc=t("td",{style:{"text-align":"center"}},null,-1),lc={style:{"text-align":"left"}},nc=t("code",null,"位运算",-1),sc=t("code",null,"数组",-1),dc=t("code",null,"字符串",-1),ic=t("code",null,"2+",-1),_c={style:{"text-align":"left"}};function ac(cc,rc){const n=i("RouterLink"),s=i("ExternalLinkIcon"),d=i("font");return a(),c("div",null,[h,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/outline/tag/matrix.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/outline/tag/queue.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[P]),_:1}),o(),e(n,{to:"/outline/tag/ordered-set.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/outline/tag/topological-sort.html"},{default:l(()=>[B]),_:1}),o(),e(n,{to:"/outline/tag/shortest-path.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:l(()=>[j]),_:1}),o(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:l(()=>[J]),_:1}),o(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:l(()=>[K]),_:1}),o(),e(n,{to:"/outline/tag/union-find.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[A]),_:1}),o(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[D]),_:1}),o(),e(n,{to:"/outline/tag/suffix-array.html"},{default:l(()=>[F]),_:1})]),G,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/outline/tag/recursion.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/outline/tag/backtracking.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/outline/tag/greedy.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Y]),_:1}),o(),e(n,{to:"/outline/tag/sorting.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/outline/tag/counting-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/outline/tag/radix-sort.html"},{default:l(()=>[et]),_:1}),o(),e(n,{to:"/outline/tag/merge-sort.html"},{default:l(()=>[ot]),_:1}),o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/outline/tag/counting.html"},{default:l(()=>[rt]),_:1}),o(),e(n,{to:"/outline/tag/sliding-window.html"},{default:l(()=>[ut]),_:1}),o(),ht,o(),e(n,{to:"/outline/tag/hash-function.html"},{default:l(()=>[ft]),_:1}),o(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:l(()=>[gt]),_:1}),o(),e(n,{to:"/outline/tag/line-sweep.html"},{default:l(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/outline/tag/number-theory.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/outline/tag/geometry.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/outline/tag/game-theory.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/outline/tag/simulation.html"},{default:l(()=>[Ht]),_:1}),o(),e(n,{to:"/outline/tag/combinatorics.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/outline/tag/randomized.html"},{default:l(()=>[Mt]),_:1}),o(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/outline/tag/database.html"},{default:l(()=>[Lt]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[Ct]),_:1}),o(),e(n,{to:"/outline/tag/data-stream.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/outline/tag/brainteaser.html"},{default:l(()=>[Nt]),_:1}),o(),e(n,{to:"/outline/tag/interactive.html"},{default:l(()=>[Et]),_:1}),o(),e(n,{to:"/outline/tag/iterator.html"},{default:l(()=>[Pt]),_:1}),o(),e(n,{to:"/outline/tag/concurrency.html"},{default:l(()=>[Vt]),_:1})])]),Bt,r(" prettier-ignore "),t("table",null,[Rt,t("tbody",null,[t("tr",null,[jt,t("td",Jt,[t("a",Kt,[o("安卓系统手势解锁"),e(s)])]),Tt,t("td",Wt,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[At]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Dt]),_:1}),o(),e(n,{to:"/outline/tag/backtracking.html"},{default:l(()=>[Ft]),_:1}),o(),Gt]),t("td",Ot,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Qt,t("td",St,[t("a",Ut,[o("我能赢吗"),e(s)])]),Xt,t("td",Yt,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Zt]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[$t]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[te]),_:1}),o(),ee]),t("td",oe,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[le,t("td",ne,[t("a",se,[o("最优账单平衡"),e(s)])]),de,t("td",ie,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[_e]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ae]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[ce]),_:1}),o(),re]),t("td",ue,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[he,t("td",fe,[t("a",ge,[o("火柴拼正方形"),e(s)])]),me,t("td",ye,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[pe]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[xe]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[be]),_:1}),o(),ke]),t("td",He,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[we,t("td",Me,[t("a",ve,[o("优美的排列"),e(s)])]),qe,t("td",ze,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Le]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ce]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Ie]),_:1}),o(),Ne]),t("td",Ee,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Pe,t("td",Ve,[t("a",Be,[o("大礼包"),e(s)])]),Re,t("td",je,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Je]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[Ke]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Te]),_:1}),o(),We]),t("td",Ae,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[De,t("td",Fe,[t("a",Ge,[o("贴纸拼词"),e(s)])]),Oe,t("td",Qe,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Se]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ue]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Xe]),_:1}),o(),Ye]),t("td",Ze,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[$e,t("td",to,[t("a",eo,[o("划分为k个相等的子集"),e(s)])]),oo,t("td",lo,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[no]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[so]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[io]),_:1}),o(),_o]),t("td",ao,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[co,t("td",ro,[t("a",uo,[o("数组的均值分割"),e(s)])]),ho,t("td",fo,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[go]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[mo]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[yo]),_:1}),o(),po]),t("td",xo,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[bo,t("td",ko,[t("a",Ho,[o("访问所有节点的最短路径"),e(s)])]),wo,t("td",Mo,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[vo]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[qo]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[zo]),_:1}),o(),Lo]),t("td",Co,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Io,t("td",No,[t("a",Eo,[o("最短超级串"),e(s)])]),Po,t("td",Vo,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Bo]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ro]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[jo]),_:1}),o(),Jo]),t("td",Ko,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[To,t("td",Wo,[t("a",Ao,[o("平方数组的数目"),e(s)])]),Do,t("td",Fo,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Go]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Oo]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Qo]),_:1}),o(),So]),t("td",Uo,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Xo,t("td",Yo,[t("a",Zo,[o("校园自行车分配 II"),e(s)])]),$o,t("td",tl,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[el]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ol]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[ll]),_:1}),o(),nl]),t("td",sl,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[dl,t("td",il,[t("a",_l,[o("最小的必要团队"),e(s)])]),al,t("td",cl,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[rl]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ul]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[hl]),_:1}),o(),fl]),t("td",gl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ml,t("td",yl,[t("a",pl,[o("得分最高的单词集合"),e(s)])]),xl,t("td",bl,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[kl]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Hl]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[wl]),_:1}),o(),Ml]),t("td",vl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ql,t("td",zl,[t("a",Ll,[o("参加考试的最大学生数"),e(s)])]),Cl,t("td",Il,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Nl]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[El]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Pl]),_:1}),o(),Vl]),t("td",Bl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Rl,t("td",jl,[t("a",Jl,[o("每个人戴不同帽子的方案数"),e(s)])]),Kl,t("td",Tl,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Wl]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Al]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Dl]),_:1}),o(),Fl]),t("td",Gl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ol,t("td",Ql,[t("a",Sl,[o("并行课程 II"),e(s)])]),Ul,t("td",Xl,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Yl]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[Zl]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[$l]),_:1}),o(),tn]),t("td",en,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[on,t("td",ln,[t("a",nn,[o("连通两组点的最小成本"),e(s)])]),sn,t("td",dn,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[_n]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[an]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[cn]),_:1}),o(),rn]),t("td",un,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[hn,t("td",fn,[t("a",gn,[o("统计子树中城市之间最大距离"),e(s)])]),mn,t("td",yn,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[pn]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[xn]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[bn]),_:1}),o(),kn]),t("td",Hn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[wn,t("td",Mn,[t("a",vn,[o("分配重复整数"),e(s)])]),qn,t("td",zn,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Ln]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Cn]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[In]),_:1}),o(),Nn]),t("td",En,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Pn,t("td",Vn,[t("a",Bn,[o("最大化网格幸福感"),e(s)])]),Rn,t("td",jn,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Jn]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[Kn]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Tn]),_:1}),o(),Wn]),t("td",An,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Dn,t("td",Fn,[t("a",Gn,[o("最小不兼容性"),e(s)])]),On,t("td",Qn,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Sn]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Un]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Xn]),_:1}),o(),Yn]),t("td",Zn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[$n,t("td",ts,[t("a",es,[o("完成所有工作的最短时间"),e(s)])]),os,t("td",ls,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[ns]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ss]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[ds]),_:1}),o(),is]),t("td",_s,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[as,t("td",cs,[t("a",rs,[o("最接近目标值的子序列和"),e(s)])]),us,t("td",hs,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[fs]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[gs]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[ms]),_:1}),o(),ys]),t("td",ps,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[xs,t("td",bs,[t("a",ks,[o("N 次操作后的最大分数和"),e(s)])]),Hs,t("td",ws,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Ms]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[vs]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[qs]),_:1}),o(),zs]),t("td",Ls,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Cs,t("td",Is,[t("a",Ns,[o("得到新鲜甜甜圈的最多组数"),e(s)])]),Es,t("td",Ps,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Vs]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[Bs]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Rs]),_:1}),o(),js]),t("td",Js,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ks,t("td",Ts,[t("a",Ws,[o("两个数组最小的异或值之和"),e(s)])]),As,t("td",Ds,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Fs]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Gs]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Os]),_:1}),o(),Qs]),t("td",Ss,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Us,t("td",Xs,[t("a",Ys,[o("最大兼容性评分和"),e(s)])]),Zs,t("td",$s,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[td]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ed]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[od]),_:1}),o(),ld]),t("td",nd,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[sd,t("td",dd,[t("a",id,[o("完成任务的最少工作时间段"),e(s)])]),_d,t("td",ad,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[cd]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[rd]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[ud]),_:1}),o(),hd]),t("td",fd,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[gd,t("td",md,[t("a",yd,[o("好子集的数目"),e(s)])]),pd,t("td",xd,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[bd]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[kd]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[Hd]),_:1}),o(),wd]),t("td",Md,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[vd,t("td",qd,[t("a",zd,[o("两个回文子序列长度的最大乘积"),e(s)])]),Ld,t("td",Cd,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Id]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Nd]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Ed]),_:1}),o(),Pd]),t("td",Vd,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Bd,t("td",Rd,[t("a",jd,[o("将数组分成两个数组并最小化数组和的差"),e(s)])]),Jd,t("td",Kd,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Td]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Wd]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[Ad]),_:1}),o(),Dd]),t("td",Fd,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Gd,t("td",Od,[t("a",Qd,[o("穿过所有点的所需最少直线数量"),e(s)])]),Sd,t("td",Ud,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Xd]),_:1}),o(),e(n,{to:"/outline/tag/geometry.html"},{default:l(()=>[Yd]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Zd]),_:1}),o(),$d]),t("td",ti,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ei,t("td",oi,[t("a",li,[o("数组的最大与和"),e(s)])]),ni,t("td",si,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[di]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ii]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[_i]),_:1}),o(),ai]),t("td",ci,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ri,t("td",ui,[t("a",hi,[o("建造坚实的砖墙的方法数"),e(s)])]),fi,t("td",gi,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[mi]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[yi]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[pi]),_:1}),o(),xi]),t("td",bi,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ki,t("td",Hi,[t("a",wi,[o("K 条高速公路的最大旅行费用"),e(s)])]),Mi,t("td",vi,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[qi]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[zi]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Li]),_:1}),o(),Ci]),t("td",Ii,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ni,t("td",Ei,[t("a",Pi,[o("公平分发饼干"),e(s)])]),Vi,t("td",Bi,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Ri]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ji]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Ji]),_:1}),o(),Ki]),t("td",Ti,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Wi,t("td",Ai,[t("a",Di,[o("杀死所有怪物的最短时间"),e(s)])]),Fi,t("td",Gi,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Oi]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Qi]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Si]),_:1}),o(),Ui]),t("td",Xi,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Yi,t("td",Zi,[t("a",$i,[o("无平方子集计数"),e(s)])]),t_,t("td",e_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[o_]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[l_]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[n_]),_:1}),o(),s_]),t("td",d_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[i_,t("td",__,[t("a",a_,[o("特别的排列"),e(s)])]),c_,t("td",r_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[u_]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[h_]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[f_]),_:1}),o(),g_]),t("td",m_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[y_,t("td",p_,[t("a",x_,[o("树中可以形成回文的路径数"),e(s)])]),b_,t("td",k_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[H_]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[w_]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[M_]),_:1}),o(),v_]),t("td",q_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[z_,t("td",L_,[t("a",C_,[o("自整除排列的数量"),e(s)])]),I_,t("td",N_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[E_]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[P_]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[V_]),_:1}),o(),B_]),t("td",R_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[j_,t("td",J_,[t("a",K_,[o("执行操作后的最大分割数量"),e(s)])]),T_,t("td",W_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[A_]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[D_]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[F_]),_:1}),o(),G_]),t("td",O_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Q_,t("td",S_,[t("a",U_,[o("找出分数最低的排列"),e(s)])]),X_,t("td",Y_,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Z_]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[$_]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[ta]),_:1}),o(),ea]),t("td",oa,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[la,t("td",na,[t("a",sa,[o("选择矩阵中单元格的最大得分"),e(s)])]),da,t("td",ia,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[_a]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[aa]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[ca]),_:1}),o(),ra]),t("td",ua,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ha,t("td",fa,[t("a",ga,[o("吃掉所有兵需要的最多移动次数"),e(s)])]),ma,t("td",ya,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[pa]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[xa]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ba]),_:1}),o(),ka]),t("td",Ha,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[wa,t("td",Ma,[t("a",va,[o("覆盖"),e(s)])]),qa,t("td",za,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[La]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[Ca]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ia]),_:1}),o(),Na]),t("td",Ea,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Pa,t("td",Va,[t("a",Ba,[o("寻宝"),e(s)])]),Ra,t("td",ja,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Ja]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[Ka]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ta]),_:1}),o(),Wa]),t("td",Aa,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Da,t("td",Fa,[t("a",Ga,[o("守护太空城"),e(s)])]),Oa,t("td",Qa,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[Sa]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ua]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Xa]),_:1}),o(),Ya]),t("td",Za,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[$a,t("td",tc,[t("a",ec,[o("Hello LeetCode!"),e(s)])]),oc,t("td",lc,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[nc]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[sc]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[dc]),_:1}),o(),ic]),t("td",_c,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])])])])])}const hc=_(u,[["render",ac],["__file","bitmask.html.vue"]]);export{hc as default};
