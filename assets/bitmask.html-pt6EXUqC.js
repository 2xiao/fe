import{_ as a,r as _,o as i,c,a as t,d as e,w as l,b as o,f as r}from"./app-Byvqzvgg.js";const h={},u=t("h1",{id:"状态压缩",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#状态压缩","aria-hidden":"true"},"#"),o(" 状态压缩")],-1),f=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),m=t("code",null,"数组",-1),y=t("code",null,"矩阵",-1),p=t("code",null,"链表",-1),x=t("code",null,"双向链表",-1),b=t("code",null,"栈",-1),k=t("code",null,"单调栈",-1),H=t("code",null,"队列",-1),w=t("code",null,"单调队列",-1),M=t("code",null,"堆（优先队列）",-1),v=t("code",null,"哈希表",-1),q=t("code",null,"字符串",-1),z=t("code",null,"字符串匹配",-1),L=t("code",null,"树",-1),C=t("code",null,"二叉树",-1),I=t("code",null,"二叉搜索树",-1),N=t("code",null,"最小生成树",-1),E=t("code",null,"图",-1),P=t("code",null,"有序集合",-1),V=t("code",null,"拓扑排序",-1),B=t("code",null,"最短路",-1),R=t("code",null,"强连通分量",-1),j=t("code",null,"欧拉回路",-1),J=t("code",null,"双连通分量",-1),K=t("code",null,"并查集",-1),T=t("code",null,"字典树",-1),W=t("code",null,"线段树",-1),A=t("code",null,"树状数组",-1),D=t("code",null,"后缀数组",-1),F=t("p",null,[t("strong",null,"算法")],-1),G=t("code",null,"枚举",-1),O=t("code",null,"递归",-1),Q=t("code",null,"分治",-1),S=t("code",null,"回溯",-1),U=t("code",null,"贪心",-1),X=t("code",null,"动态规划",-1),Y=t("code",null,"排序",-1),Z=t("code",null,"桶排序",-1),$=t("code",null,"计数排序",-1),tt=t("code",null,"基数排序",-1),et=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),lt=t("code",null,"二分查找",-1),nt=t("code",null,"记忆化搜索",-1),st=t("code",null,"深度优先搜索",-1),dt=t("code",null,"广度优先搜索",-1),_t=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),it=t("code",null,"前缀和",-1),ct=t("code",null,"计数",-1),rt=t("code",null,"滑动窗口",-1),ht=t("span",{class:"blue"},"状态压缩",-1),ut=t("code",null,"哈希函数",-1),ft=t("code",null,"滚动哈希",-1),gt=t("code",null,"扫描线",-1),mt=t("p",null,[t("strong",null,"其他")],-1),yt=t("code",null,"数学",-1),pt=t("code",null,"数论",-1),xt=t("code",null,"几何",-1),bt=t("code",null,"博弈",-1),kt=t("code",null,"模拟",-1),Ht=t("code",null,"组合数学",-1),wt=t("code",null,"随机化",-1),Mt=t("code",null,"概率与统计",-1),vt=t("code",null,"水塘抽样",-1),qt=t("code",null,"拒绝采样",-1),zt=t("code",null,"数据库",-1),Lt=t("code",null,"设计",-1),Ct=t("code",null,"数据流",-1),It=t("code",null,"脑筋急转弯",-1),Nt=t("code",null,"交互",-1),Et=t("code",null,"迭代器",-1),Pt=t("code",null,"多线程",-1),Vt=t("hr",null,null,-1),Bt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Rt=t("td",{style:{"text-align":"center"}},"351",-1),jt={style:{"text-align":"left"}},Jt={href:"https://leetcode.com/problems/android-unlock-patterns",target:"_blank",rel:"noopener noreferrer"},Kt=t("td",{style:{"text-align":"center"}},null,-1),Tt={style:{"text-align":"left"}},Wt=t("code",null,"位运算",-1),At=t("code",null,"动态规划",-1),Dt=t("code",null,"回溯",-1),Ft=t("code",null,"1+",-1),Gt={style:{"text-align":"left"}},Ot=t("td",{style:{"text-align":"center"}},"464",-1),Qt={style:{"text-align":"left"}},St={href:"https://leetcode.com/problems/can-i-win",target:"_blank",rel:"noopener noreferrer"},Ut=t("td",{style:{"text-align":"center"}},null,-1),Xt={style:{"text-align":"left"}},Yt=t("code",null,"位运算",-1),Zt=t("code",null,"记忆化搜索",-1),$t=t("code",null,"数学",-1),te=t("code",null,"3+",-1),ee={style:{"text-align":"left"}},oe=t("td",{style:{"text-align":"center"}},"465",-1),le={style:{"text-align":"left"}},ne={href:"https://leetcode.com/problems/optimal-account-balancing",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"center"}},null,-1),de={style:{"text-align":"left"}},_e=t("code",null,"位运算",-1),ae=t("code",null,"数组",-1),ie=t("code",null,"动态规划",-1),ce=t("code",null,"2+",-1),re={style:{"text-align":"left"}},he=t("td",{style:{"text-align":"center"}},"473",-1),ue={style:{"text-align":"left"}},fe={href:"https://leetcode.com/problems/matchsticks-to-square",target:"_blank",rel:"noopener noreferrer"},ge=t("td",{style:{"text-align":"center"}},null,-1),me={style:{"text-align":"left"}},ye=t("code",null,"位运算",-1),pe=t("code",null,"数组",-1),xe=t("code",null,"动态规划",-1),be=t("code",null,"2+",-1),ke={style:{"text-align":"left"}},He=t("td",{style:{"text-align":"center"}},"526",-1),we={style:{"text-align":"left"}},Me={href:"https://leetcode.com/problems/beautiful-arrangement",target:"_blank",rel:"noopener noreferrer"},ve=t("td",{style:{"text-align":"center"}},null,-1),qe={style:{"text-align":"left"}},ze=t("code",null,"位运算",-1),Le=t("code",null,"数组",-1),Ce=t("code",null,"动态规划",-1),Ie=t("code",null,"2+",-1),Ne={style:{"text-align":"left"}},Ee=t("td",{style:{"text-align":"center"}},"638",-1),Pe={style:{"text-align":"left"}},Ve={href:"https://leetcode.com/problems/shopping-offers",target:"_blank",rel:"noopener noreferrer"},Be=t("td",{style:{"text-align":"center"}},null,-1),Re={style:{"text-align":"left"}},je=t("code",null,"位运算",-1),Je=t("code",null,"记忆化搜索",-1),Ke=t("code",null,"数组",-1),Te=t("code",null,"3+",-1),We={style:{"text-align":"left"}},Ae=t("td",{style:{"text-align":"center"}},"691",-1),De={style:{"text-align":"left"}},Fe={href:"https://leetcode.com/problems/stickers-to-spell-word",target:"_blank",rel:"noopener noreferrer"},Ge=t("td",{style:{"text-align":"center"}},null,-1),Oe={style:{"text-align":"left"}},Qe=t("code",null,"位运算",-1),Se=t("code",null,"数组",-1),Ue=t("code",null,"字符串",-1),Xe=t("code",null,"3+",-1),Ye={style:{"text-align":"left"}},Ze=t("td",{style:{"text-align":"center"}},"698",-1),$e={style:{"text-align":"left"}},to={href:"https://leetcode.com/problems/partition-to-k-equal-sum-subsets",target:"_blank",rel:"noopener noreferrer"},eo=t("td",{style:{"text-align":"center"}},null,-1),oo={style:{"text-align":"left"}},lo=t("code",null,"位运算",-1),no=t("code",null,"记忆化搜索",-1),so=t("code",null,"数组",-1),_o=t("code",null,"3+",-1),ao={style:{"text-align":"left"}},io=t("td",{style:{"text-align":"center"}},"805",-1),co={style:{"text-align":"left"}},ro={href:"https://leetcode.com/problems/split-array-with-same-average",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},null,-1),uo={style:{"text-align":"left"}},fo=t("code",null,"位运算",-1),go=t("code",null,"数组",-1),mo=t("code",null,"数学",-1),yo=t("code",null,"2+",-1),po={style:{"text-align":"left"}},xo=t("td",{style:{"text-align":"center"}},"847",-1),bo={style:{"text-align":"left"}},ko={href:"https://leetcode.com/problems/shortest-path-visiting-all-nodes",target:"_blank",rel:"noopener noreferrer"},Ho=t("td",{style:{"text-align":"center"}},null,-1),wo={style:{"text-align":"left"}},Mo=t("code",null,"位运算",-1),vo=t("code",null,"广度优先搜索",-1),qo=t("code",null,"图",-1),zo=t("code",null,"2+",-1),Lo={style:{"text-align":"left"}},Co=t("td",{style:{"text-align":"center"}},"943",-1),Io={style:{"text-align":"left"}},No={href:"https://leetcode.com/problems/find-the-shortest-superstring",target:"_blank",rel:"noopener noreferrer"},Eo=t("td",{style:{"text-align":"center"}},null,-1),Po={style:{"text-align":"left"}},Vo=t("code",null,"位运算",-1),Bo=t("code",null,"数组",-1),Ro=t("code",null,"字符串",-1),jo=t("code",null,"2+",-1),Jo={style:{"text-align":"left"}},Ko=t("td",{style:{"text-align":"center"}},"996",-1),To={style:{"text-align":"left"}},Wo={href:"https://leetcode.com/problems/number-of-squareful-arrays",target:"_blank",rel:"noopener noreferrer"},Ao=t("td",{style:{"text-align":"center"}},null,-1),Do={style:{"text-align":"left"}},Fo=t("code",null,"位运算",-1),Go=t("code",null,"数组",-1),Oo=t("code",null,"哈希表",-1),Qo=t("code",null,"4+",-1),So={style:{"text-align":"left"}},Uo=t("td",{style:{"text-align":"center"}},"1066",-1),Xo={style:{"text-align":"left"}},Yo={href:"https://leetcode.com/problems/campus-bikes-ii",target:"_blank",rel:"noopener noreferrer"},Zo=t("td",{style:{"text-align":"center"}},null,-1),$o={style:{"text-align":"left"}},tl=t("code",null,"位运算",-1),el=t("code",null,"数组",-1),ol=t("code",null,"动态规划",-1),ll=t("code",null,"2+",-1),nl={style:{"text-align":"left"}},sl=t("td",{style:{"text-align":"center"}},"1125",-1),dl={style:{"text-align":"left"}},_l={href:"https://leetcode.com/problems/smallest-sufficient-team",target:"_blank",rel:"noopener noreferrer"},al=t("td",{style:{"text-align":"center"}},null,-1),il={style:{"text-align":"left"}},cl=t("code",null,"位运算",-1),rl=t("code",null,"数组",-1),hl=t("code",null,"动态规划",-1),ul=t("code",null,"1+",-1),fl={style:{"text-align":"left"}},gl=t("td",{style:{"text-align":"center"}},"1255",-1),ml={style:{"text-align":"left"}},yl={href:"https://leetcode.com/problems/maximum-score-words-formed-by-letters",target:"_blank",rel:"noopener noreferrer"},pl=t("td",{style:{"text-align":"center"}},null,-1),xl={style:{"text-align":"left"}},bl=t("code",null,"位运算",-1),kl=t("code",null,"数组",-1),Hl=t("code",null,"字符串",-1),wl=t("code",null,"3+",-1),Ml={style:{"text-align":"left"}},vl=t("td",{style:{"text-align":"center"}},"1349",-1),ql={style:{"text-align":"left"}},zl={href:"https://leetcode.com/problems/maximum-students-taking-exam",target:"_blank",rel:"noopener noreferrer"},Ll=t("td",{style:{"text-align":"center"}},null,-1),Cl={style:{"text-align":"left"}},Il=t("code",null,"位运算",-1),Nl=t("code",null,"数组",-1),El=t("code",null,"动态规划",-1),Pl=t("code",null,"2+",-1),Vl={style:{"text-align":"left"}},Bl=t("td",{style:{"text-align":"center"}},"1434",-1),Rl={style:{"text-align":"left"}},jl={href:"https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other",target:"_blank",rel:"noopener noreferrer"},Jl=t("td",{style:{"text-align":"center"}},null,-1),Kl={style:{"text-align":"left"}},Tl=t("code",null,"位运算",-1),Wl=t("code",null,"数组",-1),Al=t("code",null,"动态规划",-1),Dl=t("code",null,"1+",-1),Fl={style:{"text-align":"left"}},Gl=t("td",{style:{"text-align":"center"}},"1494",-1),Ol={style:{"text-align":"left"}},Ql={href:"https://leetcode.com/problems/parallel-courses-ii",target:"_blank",rel:"noopener noreferrer"},Sl=t("td",{style:{"text-align":"center"}},null,-1),Ul={style:{"text-align":"left"}},Xl=t("code",null,"位运算",-1),Yl=t("code",null,"图",-1),Zl=t("code",null,"动态规划",-1),$l=t("code",null,"1+",-1),tn={style:{"text-align":"left"}},en=t("td",{style:{"text-align":"center"}},"1595",-1),on={style:{"text-align":"left"}},ln={href:"https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points",target:"_blank",rel:"noopener noreferrer"},nn=t("td",{style:{"text-align":"center"}},null,-1),sn={style:{"text-align":"left"}},dn=t("code",null,"位运算",-1),_n=t("code",null,"数组",-1),an=t("code",null,"动态规划",-1),cn=t("code",null,"2+",-1),rn={style:{"text-align":"left"}},hn=t("td",{style:{"text-align":"center"}},"1617",-1),un={style:{"text-align":"left"}},fn={href:"https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities",target:"_blank",rel:"noopener noreferrer"},gn=t("td",{style:{"text-align":"center"}},null,-1),mn={style:{"text-align":"left"}},yn=t("code",null,"位运算",-1),pn=t("code",null,"树",-1),xn=t("code",null,"动态规划",-1),bn=t("code",null,"2+",-1),kn={style:{"text-align":"left"}},Hn=t("td",{style:{"text-align":"center"}},"1655",-1),wn={style:{"text-align":"left"}},Mn={href:"https://leetcode.com/problems/distribute-repeating-integers",target:"_blank",rel:"noopener noreferrer"},vn=t("td",{style:{"text-align":"center"}},null,-1),qn={style:{"text-align":"left"}},zn=t("code",null,"位运算",-1),Ln=t("code",null,"数组",-1),Cn=t("code",null,"动态规划",-1),In=t("code",null,"2+",-1),Nn={style:{"text-align":"left"}},En=t("td",{style:{"text-align":"center"}},"1659",-1),Pn={style:{"text-align":"left"}},Vn={href:"https://leetcode.com/problems/maximize-grid-happiness",target:"_blank",rel:"noopener noreferrer"},Bn=t("td",{style:{"text-align":"center"}},null,-1),Rn={style:{"text-align":"left"}},jn=t("code",null,"位运算",-1),Jn=t("code",null,"记忆化搜索",-1),Kn=t("code",null,"动态规划",-1),Tn=t("code",null,"1+",-1),Wn={style:{"text-align":"left"}},An=t("td",{style:{"text-align":"center"}},"1681",-1),Dn={style:{"text-align":"left"}},Fn={href:"https://leetcode.com/problems/minimum-incompatibility",target:"_blank",rel:"noopener noreferrer"},Gn=t("td",{style:{"text-align":"center"}},null,-1),On={style:{"text-align":"left"}},Qn=t("code",null,"位运算",-1),Sn=t("code",null,"数组",-1),Un=t("code",null,"动态规划",-1),Xn=t("code",null,"1+",-1),Yn={style:{"text-align":"left"}},Zn=t("td",{style:{"text-align":"center"}},"1723",-1),$n={style:{"text-align":"left"}},ts={href:"https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs",target:"_blank",rel:"noopener noreferrer"},es=t("td",{style:{"text-align":"center"}},null,-1),os={style:{"text-align":"left"}},ls=t("code",null,"位运算",-1),ns=t("code",null,"数组",-1),ss=t("code",null,"动态规划",-1),ds=t("code",null,"2+",-1),_s={style:{"text-align":"left"}},as=t("td",{style:{"text-align":"center"}},"1755",-1),is={style:{"text-align":"left"}},cs={href:"https://leetcode.com/problems/closest-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},rs=t("td",{style:{"text-align":"center"}},null,-1),hs={style:{"text-align":"left"}},us=t("code",null,"位运算",-1),fs=t("code",null,"数组",-1),gs=t("code",null,"双指针",-1),ms=t("code",null,"2+",-1),ys={style:{"text-align":"left"}},ps=t("td",{style:{"text-align":"center"}},"1799",-1),xs={style:{"text-align":"left"}},bs={href:"https://leetcode.com/problems/maximize-score-after-n-operations",target:"_blank",rel:"noopener noreferrer"},ks=t("td",{style:{"text-align":"center"}},null,-1),Hs={style:{"text-align":"left"}},ws=t("code",null,"位运算",-1),Ms=t("code",null,"数组",-1),vs=t("code",null,"数学",-1),qs=t("code",null,"4+",-1),zs={style:{"text-align":"left"}},Ls=t("td",{style:{"text-align":"center"}},"1815",-1),Cs={style:{"text-align":"left"}},Is={href:"https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts",target:"_blank",rel:"noopener noreferrer"},Ns=t("td",{style:{"text-align":"center"}},null,-1),Es={style:{"text-align":"left"}},Ps=t("code",null,"位运算",-1),Vs=t("code",null,"记忆化搜索",-1),Bs=t("code",null,"数组",-1),Rs=t("code",null,"2+",-1),js={style:{"text-align":"left"}},Js=t("td",{style:{"text-align":"center"}},"1879",-1),Ks={style:{"text-align":"left"}},Ts={href:"https://leetcode.com/problems/minimum-xor-sum-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},Ws=t("td",{style:{"text-align":"center"}},null,-1),As={style:{"text-align":"left"}},Ds=t("code",null,"位运算",-1),Fs=t("code",null,"数组",-1),Gs=t("code",null,"动态规划",-1),Os=t("code",null,"1+",-1),Qs={style:{"text-align":"left"}},Ss=t("td",{style:{"text-align":"center"}},"1947",-1),Us={style:{"text-align":"left"}},Xs={href:"https://leetcode.com/problems/maximum-compatibility-score-sum",target:"_blank",rel:"noopener noreferrer"},Ys=t("td",{style:{"text-align":"center"}},null,-1),Zs={style:{"text-align":"left"}},$s=t("code",null,"位运算",-1),td=t("code",null,"数组",-1),ed=t("code",null,"动态规划",-1),od=t("code",null,"2+",-1),ld={style:{"text-align":"left"}},nd=t("td",{style:{"text-align":"center"}},"1986",-1),sd={style:{"text-align":"left"}},dd={href:"https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks",target:"_blank",rel:"noopener noreferrer"},_d=t("td",{style:{"text-align":"center"}},null,-1),ad={style:{"text-align":"left"}},id=t("code",null,"位运算",-1),cd=t("code",null,"数组",-1),rd=t("code",null,"动态规划",-1),hd=t("code",null,"2+",-1),ud={style:{"text-align":"left"}},fd=t("td",{style:{"text-align":"center"}},"1994",-1),gd={style:{"text-align":"left"}},md={href:"https://leetcode.com/problems/the-number-of-good-subsets",target:"_blank",rel:"noopener noreferrer"},yd=t("td",{style:{"text-align":"center"}},null,-1),pd={style:{"text-align":"left"}},xd=t("code",null,"位运算",-1),bd=t("code",null,"数组",-1),kd=t("code",null,"数学",-1),Hd=t("code",null,"2+",-1),wd={style:{"text-align":"left"}},Md=t("td",{style:{"text-align":"center"}},"2002",-1),vd={style:{"text-align":"left"}},qd={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences",target:"_blank",rel:"noopener noreferrer"},zd=t("td",{style:{"text-align":"center"}},null,-1),Ld={style:{"text-align":"left"}},Cd=t("code",null,"位运算",-1),Id=t("code",null,"字符串",-1),Nd=t("code",null,"动态规划",-1),Ed=t("code",null,"2+",-1),Pd={style:{"text-align":"left"}},Vd=t("td",{style:{"text-align":"center"}},"2035",-1),Bd={style:{"text-align":"left"}},Rd={href:"https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference",target:"_blank",rel:"noopener noreferrer"},jd=t("td",{style:{"text-align":"center"}},null,-1),Jd={style:{"text-align":"left"}},Kd=t("code",null,"位运算",-1),Td=t("code",null,"数组",-1),Wd=t("code",null,"双指针",-1),Ad=t("code",null,"4+",-1),Dd={style:{"text-align":"left"}},Fd=t("td",{style:{"text-align":"center"}},"2152",-1),Gd={style:{"text-align":"left"}},Od={href:"https://leetcode.com/problems/minimum-number-of-lines-to-cover-points",target:"_blank",rel:"noopener noreferrer"},Qd=t("td",{style:{"text-align":"center"}},null,-1),Sd={style:{"text-align":"left"}},Ud=t("code",null,"位运算",-1),Xd=t("code",null,"几何",-1),Yd=t("code",null,"数组",-1),Zd=t("code",null,"5+",-1),$d={style:{"text-align":"left"}},t_=t("td",{style:{"text-align":"center"}},"2172",-1),e_={style:{"text-align":"left"}},o_={href:"https://leetcode.com/problems/maximum-and-sum-of-array",target:"_blank",rel:"noopener noreferrer"},l_=t("td",{style:{"text-align":"center"}},null,-1),n_={style:{"text-align":"left"}},s_=t("code",null,"位运算",-1),d_=t("code",null,"数组",-1),__=t("code",null,"动态规划",-1),a_=t("code",null,"1+",-1),i_={style:{"text-align":"left"}},c_=t("td",{style:{"text-align":"center"}},"2184",-1),r_={style:{"text-align":"left"}},h_={href:"https://leetcode.com/problems/number-of-ways-to-build-sturdy-brick-wall",target:"_blank",rel:"noopener noreferrer"},u_=t("td",{style:{"text-align":"center"}},null,-1),f_={style:{"text-align":"left"}},g_=t("code",null,"位运算",-1),m_=t("code",null,"数组",-1),y_=t("code",null,"动态规划",-1),p_=t("code",null,"1+",-1),x_={style:{"text-align":"left"}},b_=t("td",{style:{"text-align":"center"}},"2247",-1),k_={style:{"text-align":"left"}},H_={href:"https://leetcode.com/problems/maximum-cost-of-trip-with-k-highways",target:"_blank",rel:"noopener noreferrer"},w_=t("td",{style:{"text-align":"center"}},null,-1),M_={style:{"text-align":"left"}},v_=t("code",null,"位运算",-1),q_=t("code",null,"图",-1),z_=t("code",null,"动态规划",-1),L_=t("code",null,"1+",-1),C_={style:{"text-align":"left"}},I_=t("td",{style:{"text-align":"center"}},"2305",-1),N_={style:{"text-align":"left"}},E_={href:"https://leetcode.com/problems/fair-distribution-of-cookies",target:"_blank",rel:"noopener noreferrer"},P_=t("td",{style:{"text-align":"center"}},null,-1),V_={style:{"text-align":"left"}},B_=t("code",null,"位运算",-1),R_=t("code",null,"数组",-1),j_=t("code",null,"动态规划",-1),J_=t("code",null,"2+",-1),K_={style:{"text-align":"left"}},T_=t("td",{style:{"text-align":"center"}},"2403",-1),W_={style:{"text-align":"left"}},A_={href:"https://leetcode.com/problems/minimum-time-to-kill-all-monsters",target:"_blank",rel:"noopener noreferrer"},D_=t("td",{style:{"text-align":"center"}},null,-1),F_={style:{"text-align":"left"}},G_=t("code",null,"位运算",-1),O_=t("code",null,"数组",-1),Q_=t("code",null,"动态规划",-1),S_=t("code",null,"1+",-1),U_={style:{"text-align":"left"}},X_=t("td",{style:{"text-align":"center"}},"2572",-1),Y_={style:{"text-align":"left"}},Z_={href:"https://leetcode.com/problems/count-the-number-of-square-free-subsets",target:"_blank",rel:"noopener noreferrer"},$_=t("td",{style:{"text-align":"center"}},null,-1),ta={style:{"text-align":"left"}},ea=t("code",null,"位运算",-1),oa=t("code",null,"数组",-1),la=t("code",null,"数学",-1),na=t("code",null,"2+",-1),sa={style:{"text-align":"left"}},da=t("td",{style:{"text-align":"center"}},"2741",-1),_a={style:{"text-align":"left"}},aa={href:"https://leetcode.com/problems/special-permutations",target:"_blank",rel:"noopener noreferrer"},ia=t("td",{style:{"text-align":"center"}},null,-1),ca={style:{"text-align":"left"}},ra=t("code",null,"位运算",-1),ha=t("code",null,"数组",-1),ua=t("code",null,"动态规划",-1),fa=t("code",null,"1+",-1),ga={style:{"text-align":"left"}},ma=t("td",{style:{"text-align":"center"}},"2791",-1),ya={style:{"text-align":"left"}},pa={href:"https://leetcode.com/problems/count-paths-that-can-form-a-palindrome-in-a-tree",target:"_blank",rel:"noopener noreferrer"},xa=t("td",{style:{"text-align":"center"}},null,-1),ba={style:{"text-align":"left"}},ka=t("code",null,"位运算",-1),Ha=t("code",null,"树",-1),wa=t("code",null,"深度优先搜索",-1),Ma=t("code",null,"2+",-1),va={style:{"text-align":"left"}},qa=t("td",{style:{"text-align":"center"}},"2992",-1),za={style:{"text-align":"left"}},La={href:"https://leetcode.com/problems/number-of-self-divisible-permutations",target:"_blank",rel:"noopener noreferrer"},Ca=t("td",{style:{"text-align":"center"}},null,-1),Ia={style:{"text-align":"left"}},Na=t("code",null,"位运算",-1),Ea=t("code",null,"数组",-1),Pa=t("code",null,"动态规划",-1),Va=t("code",null,"2+",-1),Ba={style:{"text-align":"left"}},Ra=t("td",{style:{"text-align":"center"}},"3003",-1),ja={style:{"text-align":"left"}},Ja={href:"https://leetcode.com/problems/maximize-the-number-of-partitions-after-operations",target:"_blank",rel:"noopener noreferrer"},Ka=t("td",{style:{"text-align":"center"}},null,-1),Ta={style:{"text-align":"left"}},Wa=t("code",null,"位运算",-1),Aa=t("code",null,"字符串",-1),Da=t("code",null,"动态规划",-1),Fa=t("code",null,"1+",-1),Ga={style:{"text-align":"left"}},Oa=t("td",{style:{"text-align":"center"}},"3149",-1),Qa={style:{"text-align":"left"}},Sa={href:"https://leetcode.com/problems/find-the-minimum-cost-array-permutation",target:"_blank",rel:"noopener noreferrer"},Ua=t("td",{style:{"text-align":"center"}},null,-1),Xa={style:{"text-align":"left"}},Ya=t("code",null,"位运算",-1),Za=t("code",null,"数组",-1),$a=t("code",null,"动态规划",-1),ti=t("code",null,"1+",-1),ei={style:{"text-align":"left"}},oi=t("td",{style:{"text-align":"center"}},"3276",-1),li={style:{"text-align":"left"}},ni={href:"https://leetcode.com/problems/select-cells-in-grid-with-maximum-score",target:"_blank",rel:"noopener noreferrer"},si=t("td",{style:{"text-align":"center"}},null,-1),di={style:{"text-align":"left"}},_i=t("code",null,"位运算",-1),ai=t("code",null,"数组",-1),ii=t("code",null,"动态规划",-1),ci=t("code",null,"2+",-1),ri={style:{"text-align":"left"}},hi=t("td",{style:{"text-align":"center"}},"3283",-1),ui={style:{"text-align":"left"}},fi={href:"https://leetcode.com/problems/maximum-number-of-moves-to-kill-all-pawns",target:"_blank",rel:"noopener noreferrer"},gi=t("td",{style:{"text-align":"center"}},null,-1),mi={style:{"text-align":"left"}},yi=t("code",null,"位运算",-1),pi=t("code",null,"广度优先搜索",-1),xi=t("code",null,"数组",-1),bi=t("code",null,"3+",-1),ki={style:{"text-align":"left"}},Hi=t("td",{style:{"text-align":"center"}},"LCP 04",-1),wi={style:{"text-align":"left"}},Mi={href:"https://leetcode.cn/problems/broken-board-dominoes",target:"_blank",rel:"noopener noreferrer"},vi=t("td",{style:{"text-align":"center"}},null,-1),qi={style:{"text-align":"left"}},zi=t("code",null,"位运算",-1),Li=t("code",null,"图",-1),Ci=t("code",null,"数组",-1),Ii=t("code",null,"2+",-1),Ni={style:{"text-align":"left"}},Ei=t("td",{style:{"text-align":"center"}},"LCP 13",-1),Pi={style:{"text-align":"left"}},Vi={href:"https://leetcode.cn/problems/xun-bao",target:"_blank",rel:"noopener noreferrer"},Bi=t("td",{style:{"text-align":"center"}},null,-1),Ri={style:{"text-align":"left"}},ji=t("code",null,"位运算",-1),Ji=t("code",null,"广度优先搜索",-1),Ki=t("code",null,"数组",-1),Ti=t("code",null,"3+",-1),Wi={style:{"text-align":"left"}},Ai=t("td",{style:{"text-align":"center"}},"LCP 53",-1),Di={style:{"text-align":"left"}},Fi={href:"https://leetcode.cn/problems/EJvmW4",target:"_blank",rel:"noopener noreferrer"},Gi=t("td",{style:{"text-align":"center"}},null,-1),Oi={style:{"text-align":"left"}},Qi=t("code",null,"位运算",-1),Si=t("code",null,"数组",-1),Ui=t("code",null,"动态规划",-1),Xi=t("code",null,"1+",-1),Yi={style:{"text-align":"left"}},Zi=t("td",{style:{"text-align":"center"}},"LCP 69",-1),$i={style:{"text-align":"left"}},tc={href:"https://leetcode.cn/problems/rMeRt2",target:"_blank",rel:"noopener noreferrer"},ec=t("td",{style:{"text-align":"center"}},null,-1),oc={style:{"text-align":"left"}},lc=t("code",null,"位运算",-1),nc=t("code",null,"数组",-1),sc=t("code",null,"字符串",-1),dc=t("code",null,"2+",-1),_c={style:{"text-align":"left"}};function ac(ic,cc){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return i(),c("div",null,[u,t("details",null,[f,g,t("p",null,[e(n,{to:"/tag/array.html"},{default:l(()=>[m]),_:1}),o(),e(n,{to:"/tag/matrix.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/tag/linked-list.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/tag/doubly-linked-list.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/tag/stack.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/tag/monotonic-stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/tag/queue.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/tag/monotonic-queue.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/tag/heap-priority-queue.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/tag/hash-table.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/tag/string-matching.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/tag/tree.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/tag/binary-tree.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/tag/binary-search-tree.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/tag/minimum-spanning-tree.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/tag/ordered-set.html"},{default:l(()=>[P]),_:1}),o(),e(n,{to:"/tag/topological-sort.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/tag/shortest-path.html"},{default:l(()=>[B]),_:1}),o(),e(n,{to:"/tag/strongly-connected-component.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/tag/eulerian-circuit.html"},{default:l(()=>[j]),_:1}),o(),e(n,{to:"/tag/biconnected-component.html"},{default:l(()=>[J]),_:1}),o(),e(n,{to:"/tag/union-find.html"},{default:l(()=>[K]),_:1}),o(),e(n,{to:"/tag/trie.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/tag/segment-tree.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:l(()=>[A]),_:1}),o(),e(n,{to:"/tag/suffix-array.html"},{default:l(()=>[D]),_:1})]),F,t("p",null,[e(n,{to:"/tag/enumeration.html"},{default:l(()=>[G]),_:1}),o(),e(n,{to:"/tag/recursion.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/tag/divide-and-conquer.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/tag/backtracking.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/tag/greedy.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/tag/sorting.html"},{default:l(()=>[Y]),_:1}),o(),e(n,{to:"/tag/bucket-sort.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/tag/counting-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/tag/radix-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/tag/merge-sort.html"},{default:l(()=>[et]),_:1}),o(),e(n,{to:"/tag/quickselect.html"},{default:l(()=>[ot]),_:1}),o(),e(n,{to:"/tag/binary-search.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/tag/memoization.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/tag/depth-first-search.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/tag/breadth-first-search.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/tag/two-pointers.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/tag/prefix-sum.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/tag/counting.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/tag/sliding-window.html"},{default:l(()=>[rt]),_:1}),o(),ht,o(),e(n,{to:"/tag/hash-function.html"},{default:l(()=>[ut]),_:1}),o(),e(n,{to:"/tag/rolling-hash.html"},{default:l(()=>[ft]),_:1}),o(),e(n,{to:"/tag/line-sweep.html"},{default:l(()=>[gt]),_:1})]),mt,t("p",null,[e(n,{to:"/tag/math.html"},{default:l(()=>[yt]),_:1}),o(),e(n,{to:"/tag/number-theory.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/tag/geometry.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/tag/game-theory.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/tag/simulation.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/tag/combinatorics.html"},{default:l(()=>[Ht]),_:1}),o(),e(n,{to:"/tag/randomized.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/tag/probability-and-statistics.html"},{default:l(()=>[Mt]),_:1}),o(),e(n,{to:"/tag/reservoir-sampling.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/tag/rejection-sampling.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/tag/database.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/tag/design.html"},{default:l(()=>[Lt]),_:1}),o(),e(n,{to:"/tag/data-stream.html"},{default:l(()=>[Ct]),_:1}),o(),e(n,{to:"/tag/brainteaser.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/tag/interactive.html"},{default:l(()=>[Nt]),_:1}),o(),e(n,{to:"/tag/iterator.html"},{default:l(()=>[Et]),_:1}),o(),e(n,{to:"/tag/concurrency.html"},{default:l(()=>[Pt]),_:1})])]),Vt,r(" prettier-ignore "),t("table",null,[Bt,t("tbody",null,[t("tr",null,[Rt,t("td",jt,[t("a",Jt,[o("安卓系统手势解锁"),e(s)])]),Kt,t("td",Tt,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Wt]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[At]),_:1}),o(),e(n,{to:"/tag/backtracking.html"},{default:l(()=>[Dt]),_:1}),o(),Ft]),t("td",Gt,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ot,t("td",Qt,[t("a",St,[o("我能赢吗"),e(s)])]),Ut,t("td",Xt,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Yt]),_:1}),o(),e(n,{to:"/tag/memoization.html"},{default:l(()=>[Zt]),_:1}),o(),e(n,{to:"/tag/math.html"},{default:l(()=>[$t]),_:1}),o(),te]),t("td",ee,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[oe,t("td",le,[t("a",ne,[o("最优账单平衡"),e(s)])]),se,t("td",de,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[_e]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[ae]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[ie]),_:1}),o(),ce]),t("td",re,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[he,t("td",ue,[t("a",fe,[o("火柴拼正方形"),e(s)])]),ge,t("td",me,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ye]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[pe]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[xe]),_:1}),o(),be]),t("td",ke,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[He,t("td",we,[t("a",Me,[o("优美的排列"),e(s)])]),ve,t("td",qe,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ze]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Le]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Ce]),_:1}),o(),Ie]),t("td",Ne,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ee,t("td",Pe,[t("a",Ve,[o("大礼包"),e(s)])]),Be,t("td",Re,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[je]),_:1}),o(),e(n,{to:"/tag/memoization.html"},{default:l(()=>[Je]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Ke]),_:1}),o(),Te]),t("td",We,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ae,t("td",De,[t("a",Fe,[o("贴纸拼词"),e(s)])]),Ge,t("td",Oe,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Qe]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Se]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[Ue]),_:1}),o(),Xe]),t("td",Ye,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ze,t("td",$e,[t("a",to,[o("划分为k个相等的子集"),e(s)])]),eo,t("td",oo,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[lo]),_:1}),o(),e(n,{to:"/tag/memoization.html"},{default:l(()=>[no]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[so]),_:1}),o(),_o]),t("td",ao,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[io,t("td",co,[t("a",ro,[o("数组的均值分割"),e(s)])]),ho,t("td",uo,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[fo]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[go]),_:1}),o(),e(n,{to:"/tag/math.html"},{default:l(()=>[mo]),_:1}),o(),yo]),t("td",po,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[xo,t("td",bo,[t("a",ko,[o("访问所有节点的最短路径"),e(s)])]),Ho,t("td",wo,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Mo]),_:1}),o(),e(n,{to:"/tag/breadth-first-search.html"},{default:l(()=>[vo]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[qo]),_:1}),o(),zo]),t("td",Lo,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Co,t("td",Io,[t("a",No,[o("最短超级串"),e(s)])]),Eo,t("td",Po,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Vo]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Bo]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[Ro]),_:1}),o(),jo]),t("td",Jo,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ko,t("td",To,[t("a",Wo,[o("平方数组的数目"),e(s)])]),Ao,t("td",Do,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Fo]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Go]),_:1}),o(),e(n,{to:"/tag/hash-table.html"},{default:l(()=>[Oo]),_:1}),o(),Qo]),t("td",So,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Uo,t("td",Xo,[t("a",Yo,[o("校园自行车分配 II"),e(s)])]),Zo,t("td",$o,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[tl]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[el]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[ol]),_:1}),o(),ll]),t("td",nl,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[sl,t("td",dl,[t("a",_l,[o("最小的必要团队"),e(s)])]),al,t("td",il,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[cl]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[rl]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[hl]),_:1}),o(),ul]),t("td",fl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[gl,t("td",ml,[t("a",yl,[o("得分最高的单词集合"),e(s)])]),pl,t("td",xl,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[bl]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[kl]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[Hl]),_:1}),o(),wl]),t("td",Ml,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[vl,t("td",ql,[t("a",zl,[o("参加考试的最大学生数"),e(s)])]),Ll,t("td",Cl,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Il]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Nl]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[El]),_:1}),o(),Pl]),t("td",Vl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Bl,t("td",Rl,[t("a",jl,[o("每个人戴不同帽子的方案数"),e(s)])]),Jl,t("td",Kl,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Tl]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Wl]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Al]),_:1}),o(),Dl]),t("td",Fl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Gl,t("td",Ol,[t("a",Ql,[o("并行课程 II"),e(s)])]),Sl,t("td",Ul,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Xl]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[Yl]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Zl]),_:1}),o(),$l]),t("td",tn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[en,t("td",on,[t("a",ln,[o("连通两组点的最小成本"),e(s)])]),nn,t("td",sn,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[dn]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[_n]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[an]),_:1}),o(),cn]),t("td",rn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[hn,t("td",un,[t("a",fn,[o("统计子树中城市之间最大距离"),e(s)])]),gn,t("td",mn,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[yn]),_:1}),o(),e(n,{to:"/tag/tree.html"},{default:l(()=>[pn]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[xn]),_:1}),o(),bn]),t("td",kn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Hn,t("td",wn,[t("a",Mn,[o("分配重复整数"),e(s)])]),vn,t("td",qn,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[zn]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Ln]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Cn]),_:1}),o(),In]),t("td",Nn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[En,t("td",Pn,[t("a",Vn,[o("最大化网格幸福感"),e(s)])]),Bn,t("td",Rn,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[jn]),_:1}),o(),e(n,{to:"/tag/memoization.html"},{default:l(()=>[Jn]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Kn]),_:1}),o(),Tn]),t("td",Wn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[An,t("td",Dn,[t("a",Fn,[o("最小不兼容性"),e(s)])]),Gn,t("td",On,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Qn]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Sn]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Un]),_:1}),o(),Xn]),t("td",Yn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Zn,t("td",$n,[t("a",ts,[o("完成所有工作的最短时间"),e(s)])]),es,t("td",os,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ls]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[ns]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[ss]),_:1}),o(),ds]),t("td",_s,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[as,t("td",is,[t("a",cs,[o("最接近目标值的子序列和"),e(s)])]),rs,t("td",hs,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[us]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[fs]),_:1}),o(),e(n,{to:"/tag/two-pointers.html"},{default:l(()=>[gs]),_:1}),o(),ms]),t("td",ys,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ps,t("td",xs,[t("a",bs,[o("N 次操作后的最大分数和"),e(s)])]),ks,t("td",Hs,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ws]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Ms]),_:1}),o(),e(n,{to:"/tag/math.html"},{default:l(()=>[vs]),_:1}),o(),qs]),t("td",zs,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ls,t("td",Cs,[t("a",Is,[o("得到新鲜甜甜圈的最多组数"),e(s)])]),Ns,t("td",Es,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Ps]),_:1}),o(),e(n,{to:"/tag/memoization.html"},{default:l(()=>[Vs]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Bs]),_:1}),o(),Rs]),t("td",js,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Js,t("td",Ks,[t("a",Ts,[o("两个数组最小的异或值之和"),e(s)])]),Ws,t("td",As,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Ds]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Fs]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Gs]),_:1}),o(),Os]),t("td",Qs,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ss,t("td",Us,[t("a",Xs,[o("最大兼容性评分和"),e(s)])]),Ys,t("td",Zs,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[$s]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[td]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[ed]),_:1}),o(),od]),t("td",ld,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[nd,t("td",sd,[t("a",dd,[o("完成任务的最少工作时间段"),e(s)])]),_d,t("td",ad,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[id]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[cd]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[rd]),_:1}),o(),hd]),t("td",ud,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[fd,t("td",gd,[t("a",md,[o("好子集的数目"),e(s)])]),yd,t("td",pd,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[xd]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[bd]),_:1}),o(),e(n,{to:"/tag/math.html"},{default:l(()=>[kd]),_:1}),o(),Hd]),t("td",wd,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Md,t("td",vd,[t("a",qd,[o("两个回文子序列长度的最大乘积"),e(s)])]),zd,t("td",Ld,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Cd]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[Id]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Nd]),_:1}),o(),Ed]),t("td",Pd,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Vd,t("td",Bd,[t("a",Rd,[o("将数组分成两个数组并最小化数组和的差"),e(s)])]),jd,t("td",Jd,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Kd]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Td]),_:1}),o(),e(n,{to:"/tag/two-pointers.html"},{default:l(()=>[Wd]),_:1}),o(),Ad]),t("td",Dd,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Fd,t("td",Gd,[t("a",Od,[o("穿过所有点的所需最少直线数量"),e(s)])]),Qd,t("td",Sd,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Ud]),_:1}),o(),e(n,{to:"/tag/geometry.html"},{default:l(()=>[Xd]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Yd]),_:1}),o(),Zd]),t("td",$d,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[t_,t("td",e_,[t("a",o_,[o("数组的最大与和"),e(s)])]),l_,t("td",n_,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[s_]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[d_]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[__]),_:1}),o(),a_]),t("td",i_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[c_,t("td",r_,[t("a",h_,[o("建造坚实的砖墙的方法数"),e(s)])]),u_,t("td",f_,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[g_]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[m_]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[y_]),_:1}),o(),p_]),t("td",x_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[b_,t("td",k_,[t("a",H_,[o("K 条高速公路的最大旅行费用"),e(s)])]),w_,t("td",M_,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[v_]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[q_]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[z_]),_:1}),o(),L_]),t("td",C_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[I_,t("td",N_,[t("a",E_,[o("公平分发饼干"),e(s)])]),P_,t("td",V_,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[B_]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[R_]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[j_]),_:1}),o(),J_]),t("td",K_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[T_,t("td",W_,[t("a",A_,[o("杀死所有怪物的最短时间"),e(s)])]),D_,t("td",F_,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[G_]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[O_]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Q_]),_:1}),o(),S_]),t("td",U_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[X_,t("td",Y_,[t("a",Z_,[o("无平方子集计数"),e(s)])]),$_,t("td",ta,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ea]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[oa]),_:1}),o(),e(n,{to:"/tag/math.html"},{default:l(()=>[la]),_:1}),o(),na]),t("td",sa,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[da,t("td",_a,[t("a",aa,[o("特别的排列"),e(s)])]),ia,t("td",ca,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ra]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[ha]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[ua]),_:1}),o(),fa]),t("td",ga,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ma,t("td",ya,[t("a",pa,[o("树中可以形成回文的路径数"),e(s)])]),xa,t("td",ba,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ka]),_:1}),o(),e(n,{to:"/tag/tree.html"},{default:l(()=>[Ha]),_:1}),o(),e(n,{to:"/tag/depth-first-search.html"},{default:l(()=>[wa]),_:1}),o(),Ma]),t("td",va,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[qa,t("td",za,[t("a",La,[o("自整除排列的数量"),e(s)])]),Ca,t("td",Ia,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Na]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Ea]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Pa]),_:1}),o(),Va]),t("td",Ba,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ra,t("td",ja,[t("a",Ja,[o("执行操作后的最大分割数量"),e(s)])]),Ka,t("td",Ta,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Wa]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[Aa]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Da]),_:1}),o(),Fa]),t("td",Ga,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Oa,t("td",Qa,[t("a",Sa,[o("找出分数最低的排列"),e(s)])]),Ua,t("td",Xa,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Ya]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Za]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[$a]),_:1}),o(),ti]),t("td",ei,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[oi,t("td",li,[t("a",ni,[o("选择矩阵中单元格的最大得分"),e(s)])]),si,t("td",di,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[_i]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[ai]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[ii]),_:1}),o(),ci]),t("td",ri,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[hi,t("td",ui,[t("a",fi,[o("吃掉所有兵需要的最多移动次数"),e(s)])]),gi,t("td",mi,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[yi]),_:1}),o(),e(n,{to:"/tag/breadth-first-search.html"},{default:l(()=>[pi]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[xi]),_:1}),o(),bi]),t("td",ki,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Hi,t("td",wi,[t("a",Mi,[o("覆盖"),e(s)])]),vi,t("td",qi,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[zi]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[Li]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Ci]),_:1}),o(),Ii]),t("td",Ni,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ei,t("td",Pi,[t("a",Vi,[o("寻宝"),e(s)])]),Bi,t("td",Ri,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[ji]),_:1}),o(),e(n,{to:"/tag/breadth-first-search.html"},{default:l(()=>[Ji]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Ki]),_:1}),o(),Ti]),t("td",Wi,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Ai,t("td",Di,[t("a",Fi,[o("守护太空城"),e(s)])]),Gi,t("td",Oi,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[Qi]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[Si]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[Ui]),_:1}),o(),Xi]),t("td",Yi,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Zi,t("td",$i,[t("a",tc,[o("Hello LeetCode!"),e(s)])]),ec,t("td",oc,[e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[lc]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[nc]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[sc]),_:1}),o(),dc]),t("td",_c,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])])])])])}const hc=a(h,[["render",ac],["__file","bitmask.html.vue"]]);export{hc as default};
