import{_ as i,r,o as p,c as d,f as c,a as t,d as e,b as n,w as s,e as u}from"./app-ynO5B_DP.js";const _={},h=u(`<h1 id="_3-9-二分查找" tabindex="-1"><a class="header-anchor" href="#_3-9-二分查找" aria-hidden="true">#</a> 3.9 二分查找</h1><p>二分查找（Binary Search）算法，也叫折半查找算法。二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p><p>二分查找是一种非常高效的查找算法，时间复杂度是 <code>O(log n)</code>。</p><h2 id="循环实现" tabindex="-1"><a class="header-anchor" href="#循环实现" aria-hidden="true">#</a> 循环实现</h2><p>最简单的情况就是<strong>有序数组</strong>中<strong>不存在重复元素</strong>，我们在其中用二分查找值等于给定值的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的循环实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有三个<strong>注意事项</strong>：</p><p><strong>1. 循环退出条件</strong></p><p>注意是<code>low &lt;= high</code>，而不是<code>low &lt; high</code>。</p><p><strong>2. mid 的取值</strong></p><p>实际上，<code>mid=(low+high)/2</code>这种写法是有问题的。因为如果<code>low</code>和<code>high</code>比较大的话，两者之和就有可能会溢出。改进的方法是将<code>mid</code>的计算方式写成<code>low+(high-low)/2</code>。更进一步，如果要将性能优化到极致的话，我们可以将这里的除以 2 操作转化成位运算<code>low+((high-low)&gt;&gt;1)</code>。因为相比除法运算来说，计算机处理位运算要快得多。</p><p><strong>3. low 和 high 的更新</strong></p><p><code>low=mid+1</code>，<code>high=mid-1</code>。注意这里的<code>+1</code>和<code>-1</code>，如果直接写成<code>low=mid</code>或者<code>high=mid</code>，就可能会发生死循环。比如，当<code>high=3，low=3</code>时，如果<code>a[3]</code>不等于<code>value</code>，就会导致一直循环不退出。</p><h2 id="递归实现" tabindex="-1"><a class="header-anchor" href="#递归实现" aria-hidden="true">#</a> 递归实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的递归实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景的局限性" tabindex="-1"><a class="header-anchor" href="#应用场景的局限性" aria-hidden="true">#</a> 应用场景的局限性</h2><p>二分查找的时间复杂度是 <code>O(log n)</code>，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，它的应用场景是有很大局限性的。</p><h3 id="依赖顺序表结构-数组" tabindex="-1"><a class="header-anchor" href="#依赖顺序表结构-数组" aria-hidden="true">#</a> 依赖顺序表结构（数组）</h3><p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果数据是通过其他数据结构存储的，则无法应用二分查找。</p><p>主要原因是二分查找算法需要按照下标随机访问元素。数组按照下标随机访问数据的时间复杂度是 O(1)，而链表随机访问的时间复杂度是 O(n)。所以，如果数据使用链表存储，二分查找的时间复杂就会变得很高。</p><h3 id="数据必须有序" tabindex="-1"><a class="header-anchor" href="#数据必须有序" aria-hidden="true">#</a> 数据必须有序</h3><p>二分查找要求数据必须是有序的。如果数据没有序需要先排序。排序的时间复杂度最低是 O(nlogn)。所以，如果针对的是一组静态的数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。</p><p>但是，如果数据集合有频繁的插入和删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。</p><p>所以，二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。那针对动态数据集合，如何在其中快速查找某个数据呢？别急，等到二叉树那一节我会详细讲。</p><h3 id="数据量太小不适合" tabindex="-1"><a class="header-anchor" href="#数据量太小不适合" aria-hidden="true">#</a> 数据量太小不适合</h3><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。比如在一个大小为 10 的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多。只有数据量比较大的时候，二分查找的优势才会比较明显。</p><p>不过，这里有一个例外。如果数据之间的比较操作非常耗时，不管数据量大小，都推荐使用二分查找。比如，数组中存储的都是长度超过 300 的字符串，如此长的两个字符串之间比对大小，就会非常耗时。需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。</p><h3 id="数据量太大也不适合" tabindex="-1"><a class="header-anchor" href="#数据量太大也不适合" aria-hidden="true">#</a> 数据量太大也不适合</h3><p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。比如，有 1GB 大小的数据，如果希望用数组来存储，那就需要 1GB 的连续内存空间。</p><p>注意这里的“连续”二字，也就是说，即便有 2GB 的内存空间剩余，但是如果这剩余的 2GB 内存空间都是零散的，没有连续的 1GB 大小的内存空间，那照样无法申请一个 1GB 大小的数组。而二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p><h2 id="二分查找的变种写法" tabindex="-1"><a class="header-anchor" href="#二分查找的变种写法" aria-hidden="true">#</a> 二分查找的变种写法</h2><h3 id="变种一-查找第一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种一-查找第一个值等于给定值的元素" aria-hidden="true">#</a> 变种一：查找第一个值等于给定值的元素</h3><p>如果<code>mid</code>等于 0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的；如果<code>mid</code>不等于 0，但<code>arr[mid]</code>的前一个元素<code>arr[mid-1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的第一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种二-查找最后一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种二-查找最后一个值等于给定值的元素" aria-hidden="true">#</a> 变种二：查找最后一个值等于给定值的元素</h3><p>如果<code>arr[mid]</code>这个元素已经是数组中的最后一个元素了，那它肯定是我们要找的；如果<code>arr[mid]</code>的后一个元素<code>a[mid+1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的最后一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种三-查找第一个大于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种三-查找第一个大于等于给定值的元素" aria-hidden="true">#</a> 变种三：查找第一个大于等于给定值的元素</h3><p>如果<code>arr[mid]</code>小于要查找的值<code>value</code>，那要查找的值肯定在<code>[mid+1, high]</code>之间，所以，我们更新<code>low=mid+1</code>。</p><p>对于<code>arr[mid]</code>大于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的第一个值大于等于给定值的元素。如果<code>arr[mid]</code>前面已经没有元素，或者前面一个元素小于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><p>如果<code>arr[mid - 1]</code>也大于等于要查找的值<code>value</code>，那说明要查找的元素在<code>[low, mid-1]</code>之间，所以，我们将<code>high</code>更新为<code>mid-1</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种四-查找最后一个小于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种四-查找最后一个小于等于给定值的元素" aria-hidden="true">#</a> 变种四：查找最后一个小于等于给定值的元素</h3><p>对于<code>arr[mid]</code>小于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的最后一个值小于等于给定值的元素。</p><p>如果<code>arr[mid]</code>后面已经没有元素，或者后面一个元素大于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),k=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),m=t("h4",{id:"二分下标",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分下标","aria-hidden":"true"},"#"),e(" 二分下标")],-1),f=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),g=t("td",{style:{"text-align":"center"}},"704",-1),b={style:{"text-align":"left"}},y={href:"https://leetcode.com/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},v={style:{"text-align":"center"}},x={href:"/problem/0704",target:"_blank",rel:"noopener noreferrer"},w={style:{"text-align":"left"}},M=t("code",null,"数组",-1),I=t("code",null,"二分查找",-1),E={style:{"text-align":"left"}},j=t("td",{style:{"text-align":"center"}},"374",-1),B={style:{"text-align":"left"}},T={href:"https://leetcode.com/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},O={href:"/problem/0374",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"left"}},H=t("code",null,"二分查找",-1),S=t("code",null,"交互",-1),q={style:{"text-align":"left"}},D=t("td",{style:{"text-align":"center"}},"35",-1),L={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"center"}},A={href:"/problem/0035",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"left"}},P=t("code",null,"数组",-1),z=t("code",null,"二分查找",-1),K={style:{"text-align":"left"}},U=t("td",{style:{"text-align":"center"}},"34",-1),F={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},Q={style:{"text-align":"center"}},W={href:"/problem/0034",target:"_blank",rel:"noopener noreferrer"},X={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),Z=t("code",null,"二分查找",-1),$={style:{"text-align":"left"}},tt=t("td",{style:{"text-align":"center"}},"167",-1),nt={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},st={style:{"text-align":"center"}},at={href:"/problem/0167",target:"_blank",rel:"noopener noreferrer"},ot={style:{"text-align":"left"}},lt=t("code",null,"数组",-1),ct=t("code",null,"双指针",-1),rt=t("code",null,"二分查找",-1),it={style:{"text-align":"left"}},pt=t("td",{style:{"text-align":"center"}},"153",-1),dt={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},_t={style:{"text-align":"center"}},ht={href:"/problem/0153",target:"_blank",rel:"noopener noreferrer"},kt={style:{"text-align":"left"}},mt=t("code",null,"数组",-1),ft=t("code",null,"二分查找",-1),gt={style:{"text-align":"left"}},bt=t("td",{style:{"text-align":"center"}},"154",-1),yt={style:{"text-align":"left"}},vt={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},xt={style:{"text-align":"center"}},wt={href:"/problem/0154",target:"_blank",rel:"noopener noreferrer"},Mt={style:{"text-align":"left"}},It=t("code",null,"数组",-1),Et=t("code",null,"二分查找",-1),jt={style:{"text-align":"left"}},Bt=t("td",{style:{"text-align":"center"}},"33",-1),Tt={style:{"text-align":"left"}},Nt={href:"https://leetcode.com/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Ot={style:{"text-align":"center"}},Gt={href:"/problem/0033",target:"_blank",rel:"noopener noreferrer"},Ht={style:{"text-align":"left"}},St=t("code",null,"数组",-1),qt=t("code",null,"二分查找",-1),Dt={style:{"text-align":"left"}},Lt=t("td",{style:{"text-align":"center"}},"81",-1),Rt={style:{"text-align":"left"}},Vt={href:"https://leetcode.com/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},At={style:{"text-align":"center"}},Ct={href:"/problem/0081",target:"_blank",rel:"noopener noreferrer"},Pt={style:{"text-align":"left"}},zt=t("code",null,"数组",-1),Kt=t("code",null,"二分查找",-1),Ut={style:{"text-align":"left"}},Ft=t("td",{style:{"text-align":"center"}},"278",-1),Jt={style:{"text-align":"left"}},Qt={href:"https://leetcode.com/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},Wt={style:{"text-align":"center"}},Xt={href:"/problem/0278",target:"_blank",rel:"noopener noreferrer"},Yt={style:{"text-align":"left"}},Zt=t("code",null,"二分查找",-1),$t=t("code",null,"交互",-1),tn={style:{"text-align":"left"}},nn=t("td",{style:{"text-align":"center"}},"162",-1),en={style:{"text-align":"left"}},sn={href:"https://leetcode.com/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},an={style:{"text-align":"center"}},on={href:"/problem/0162",target:"_blank",rel:"noopener noreferrer"},ln={style:{"text-align":"left"}},cn=t("code",null,"数组",-1),rn=t("code",null,"二分查找",-1),pn={style:{"text-align":"left"}},dn=t("td",{style:{"text-align":"center"}},"852",-1),un={style:{"text-align":"left"}},_n={href:"https://leetcode.com/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},hn=t("td",{style:{"text-align":"center"}},null,-1),kn={style:{"text-align":"left"}},mn=t("code",null,"数组",-1),fn=t("code",null,"二分查找",-1),gn={style:{"text-align":"left"}},bn=t("td",{style:{"text-align":"center"}},"1095",-1),yn={style:{"text-align":"left"}},vn={href:"https://leetcode.com/problems/find-in-mountain-array",target:"_blank",rel:"noopener noreferrer"},xn=t("td",{style:{"text-align":"center"}},null,-1),wn={style:{"text-align":"left"}},Mn=t("code",null,"数组",-1),In=t("code",null,"二分查找",-1),En=t("code",null,"交互",-1),jn={style:{"text-align":"left"}},Bn=t("td",{style:{"text-align":"center"}},"744",-1),Tn={style:{"text-align":"left"}},Nn={href:"https://leetcode.com/problems/find-smallest-letter-greater-than-target",target:"_blank",rel:"noopener noreferrer"},On=t("td",{style:{"text-align":"center"}},null,-1),Gn={style:{"text-align":"left"}},Hn=t("code",null,"数组",-1),Sn=t("code",null,"二分查找",-1),qn={style:{"text-align":"left"}},Dn=t("td",{style:{"text-align":"center"}},"4",-1),Ln={style:{"text-align":"left"}},Rn={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},Vn={style:{"text-align":"center"}},An={href:"/problem/0004",target:"_blank",rel:"noopener noreferrer"},Cn={style:{"text-align":"left"}},Pn=t("code",null,"数组",-1),zn=t("code",null,"二分查找",-1),Kn=t("code",null,"分治",-1),Un={style:{"text-align":"left"}},Fn=t("td",{style:{"text-align":"center"}},"74",-1),Jn={style:{"text-align":"left"}},Qn={href:"https://leetcode.com/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},Wn={style:{"text-align":"center"}},Xn={href:"/problem/0074",target:"_blank",rel:"noopener noreferrer"},Yn={style:{"text-align":"left"}},Zn=t("code",null,"数组",-1),$n=t("code",null,"二分查找",-1),te=t("code",null,"矩阵",-1),ne={style:{"text-align":"left"}},ee=t("td",{style:{"text-align":"center"}},"240",-1),se={style:{"text-align":"left"}},ae={href:"https://leetcode.com/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},oe={style:{"text-align":"center"}},le={href:"/problem/0240",target:"_blank",rel:"noopener noreferrer"},ce={style:{"text-align":"left"}},re=t("code",null,"数组",-1),ie=t("code",null,"二分查找",-1),pe=t("code",null,"分治",-1),de=t("code",null,"1+",-1),ue={style:{"text-align":"left"}},_e=t("h4",{id:"二分答案",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分答案","aria-hidden":"true"},"#"),e(" 二分答案")],-1),he=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),ke=t("td",{style:{"text-align":"center"}},"69",-1),me={style:{"text-align":"left"}},fe={href:"https://leetcode.com/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},ge={style:{"text-align":"center"}},be={href:"/problem/0069",target:"_blank",rel:"noopener noreferrer"},ye={style:{"text-align":"left"}},ve=t("code",null,"数学",-1),xe=t("code",null,"二分查找",-1),we={style:{"text-align":"left"}},Me=t("td",{style:{"text-align":"center"}},"287",-1),Ie={style:{"text-align":"left"}},Ee={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},je={style:{"text-align":"center"}},Be={href:"/problem/0287",target:"_blank",rel:"noopener noreferrer"},Te={style:{"text-align":"left"}},Ne=t("code",null,"位运算",-1),Oe=t("code",null,"数组",-1),Ge=t("code",null,"双指针",-1),He=t("code",null,"1+",-1),Se={style:{"text-align":"left"}},qe=t("td",{style:{"text-align":"center"}},"50",-1),De={style:{"text-align":"left"}},Le={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},Re={style:{"text-align":"center"}},Ve={href:"/problem/0050",target:"_blank",rel:"noopener noreferrer"},Ae={style:{"text-align":"left"}},Ce=t("code",null,"递归",-1),Pe=t("code",null,"数学",-1),ze={style:{"text-align":"left"}},Ke=t("td",{style:{"text-align":"center"}},"367",-1),Ue={style:{"text-align":"left"}},Fe={href:"https://leetcode.com/problems/valid-perfect-square",target:"_blank",rel:"noopener noreferrer"},Je=t("td",{style:{"text-align":"center"}},null,-1),Qe={style:{"text-align":"left"}},We=t("code",null,"数学",-1),Xe=t("code",null,"二分查找",-1),Ye={style:{"text-align":"left"}},Ze=t("td",{style:{"text-align":"center"}},"1300",-1),$e={style:{"text-align":"left"}},ts={href:"https://leetcode.com/problems/sum-of-mutated-array-closest-to-target",target:"_blank",rel:"noopener noreferrer"},ns=t("td",{style:{"text-align":"center"}},null,-1),es={style:{"text-align":"left"}},ss=t("code",null,"数组",-1),as=t("code",null,"二分查找",-1),os=t("code",null,"排序",-1),ls={style:{"text-align":"left"}},cs=t("td",{style:{"text-align":"center"}},"400",-1),rs={style:{"text-align":"left"}},is={href:"https://leetcode.com/problems/nth-digit",target:"_blank",rel:"noopener noreferrer"},ps=t("td",{style:{"text-align":"center"}},null,-1),ds={style:{"text-align":"left"}},us=t("code",null,"数学",-1),_s=t("code",null,"二分查找",-1),hs={style:{"text-align":"left"}},ks=t("h4",{id:"复杂的二分查找问题",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#复杂的二分查找问题","aria-hidden":"true"},"#"),e(" 复杂的二分查找问题")],-1),ms=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),fs=t("td",{style:{"text-align":"center"}},"875",-1),gs={style:{"text-align":"left"}},bs={href:"https://leetcode.com/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},ys=t("td",{style:{"text-align":"center"}},null,-1),vs={style:{"text-align":"left"}},xs=t("code",null,"数组",-1),ws=t("code",null,"二分查找",-1),Ms={style:{"text-align":"left"}},Is=t("td",{style:{"text-align":"center"}},"410",-1),Es={style:{"text-align":"left"}},js={href:"https://leetcode.com/problems/split-array-largest-sum",target:"_blank",rel:"noopener noreferrer"},Bs=t("td",{style:{"text-align":"center"}},null,-1),Ts={style:{"text-align":"left"}},Ns=t("code",null,"贪心",-1),Os=t("code",null,"数组",-1),Gs=t("code",null,"二分查找",-1),Hs=t("code",null,"2+",-1),Ss={style:{"text-align":"left"}},qs=t("td",{style:{"text-align":"center"}},"209",-1),Ds={style:{"text-align":"left"}},Ls={href:"https://leetcode.com/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},Rs={style:{"text-align":"center"}},Vs={href:"/problem/0209",target:"_blank",rel:"noopener noreferrer"},As={style:{"text-align":"left"}},Cs=t("code",null,"数组",-1),Ps=t("code",null,"二分查找",-1),zs=t("code",null,"前缀和",-1),Ks=t("code",null,"1+",-1),Us={style:{"text-align":"left"}},Fs=t("td",{style:{"text-align":"center"}},"658",-1),Js={style:{"text-align":"left"}},Qs={href:"https://leetcode.com/problems/find-k-closest-elements",target:"_blank",rel:"noopener noreferrer"},Ws=t("td",{style:{"text-align":"center"}},null,-1),Xs={style:{"text-align":"left"}},Ys=t("code",null,"数组",-1),Zs=t("code",null,"双指针",-1),$s=t("code",null,"二分查找",-1),ta=t("code",null,"3+",-1),na={style:{"text-align":"left"}},ea=t("td",{style:{"text-align":"center"}},"270",-1),sa={style:{"text-align":"left"}},aa={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},oa=t("td",{style:{"text-align":"center"}},null,-1),la={style:{"text-align":"left"}},ca=t("code",null,"树",-1),ra=t("code",null,"深度优先搜索",-1),ia=t("code",null,"二叉搜索树",-1),pa=t("code",null,"2+",-1),da={style:{"text-align":"left"}},ua=t("td",{style:{"text-align":"center"}},"702",-1),_a={style:{"text-align":"left"}},ha={href:"https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size",target:"_blank",rel:"noopener noreferrer"},ka=t("td",{style:{"text-align":"center"}},null,-1),ma={style:{"text-align":"left"}},fa=t("code",null,"数组",-1),ga=t("code",null,"二分查找",-1),ba=t("code",null,"交互",-1),ya={style:{"text-align":"left"}},va=t("td",{style:{"text-align":"center"}},"349",-1),xa={style:{"text-align":"left"}},wa={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},Ma=t("td",{style:{"text-align":"center"}},null,-1),Ia={style:{"text-align":"left"}},Ea=t("code",null,"数组",-1),ja=t("code",null,"哈希表",-1),Ba=t("code",null,"双指针",-1),Ta=t("code",null,"2+",-1),Na={style:{"text-align":"left"}},Oa=t("td",{style:{"text-align":"center"}},"350",-1),Ga={style:{"text-align":"left"}},Ha={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},Sa=t("td",{style:{"text-align":"center"}},null,-1),qa={style:{"text-align":"left"}},Da=t("code",null,"数组",-1),La=t("code",null,"哈希表",-1),Ra=t("code",null,"双指针",-1),Va=t("code",null,"2+",-1),Aa={style:{"text-align":"left"}},Ca=t("td",{style:{"text-align":"center"}},"287",-1),Pa={style:{"text-align":"left"}},za={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},Ka={style:{"text-align":"center"}},Ua={href:"/problem/0287",target:"_blank",rel:"noopener noreferrer"},Fa={style:{"text-align":"left"}},Ja=t("code",null,"位运算",-1),Qa=t("code",null,"数组",-1),Wa=t("code",null,"双指针",-1),Xa=t("code",null,"1+",-1),Ya={style:{"text-align":"left"}},Za=t("td",{style:{"text-align":"center"}},"719",-1),$a={style:{"text-align":"left"}},to={href:"https://leetcode.com/problems/find-k-th-smallest-pair-distance",target:"_blank",rel:"noopener noreferrer"},no=t("td",{style:{"text-align":"center"}},null,-1),eo={style:{"text-align":"left"}},so=t("code",null,"数组",-1),ao=t("code",null,"双指针",-1),oo=t("code",null,"二分查找",-1),lo=t("code",null,"1+",-1),co={style:{"text-align":"left"}},ro=t("td",{style:{"text-align":"center"}},"259",-1),io={style:{"text-align":"left"}},po={href:"https://leetcode.com/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},uo={style:{"text-align":"center"}},_o={href:"/problem/0259",target:"_blank",rel:"noopener noreferrer"},ho={style:{"text-align":"left"}},ko=t("code",null,"数组",-1),mo=t("code",null,"双指针",-1),fo=t("code",null,"二分查找",-1),go=t("code",null,"1+",-1),bo={style:{"text-align":"left"}},yo=t("td",{style:{"text-align":"center"}},"1011",-1),vo={style:{"text-align":"left"}},xo={href:"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days",target:"_blank",rel:"noopener noreferrer"},wo=t("td",{style:{"text-align":"center"}},null,-1),Mo={style:{"text-align":"left"}},Io=t("code",null,"数组",-1),Eo=t("code",null,"二分查找",-1),jo={style:{"text-align":"left"}},Bo=t("td",{style:{"text-align":"center"}},"1482",-1),To={style:{"text-align":"left"}},No={href:"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets",target:"_blank",rel:"noopener noreferrer"},Oo=t("td",{style:{"text-align":"center"}},null,-1),Go={style:{"text-align":"left"}},Ho=t("code",null,"数组",-1),So=t("code",null,"二分查找",-1),qo={style:{"text-align":"left"}};function Do(Lo,Ro){const o=r("ExternalLinkIcon"),a=r("RouterLink"),l=r("font");return p(),d("div",null,[h,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),k,m,c(" prettier-ignore "),t("table",null,[f,t("tbody",null,[t("tr",null,[g,t("td",b,[t("a",y,[e("二分查找"),n(o)])]),t("td",v,[t("a",x,[e("[✓]"),n(o)])]),t("td",w,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[M]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[I]),_:1})]),t("td",E,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[j,t("td",B,[t("a",T,[e("猜数字大小"),n(o)])]),t("td",N,[t("a",O,[e("[✓]"),n(o)])]),t("td",G,[n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[H]),_:1}),e(),n(a,{to:"/outline/tag/interactive.html"},{default:s(()=>[S]),_:1})]),t("td",q,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[D,t("td",L,[t("a",R,[e("搜索插入位置"),n(o)])]),t("td",V,[t("a",A,[e("[✓]"),n(o)])]),t("td",C,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[P]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[z]),_:1})]),t("td",K,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[U,t("td",F,[t("a",J,[e("在排序数组中查找元素的第一个和最后一个位置"),n(o)])]),t("td",Q,[t("a",W,[e("[✓]"),n(o)])]),t("td",X,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Y]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Z]),_:1})]),t("td",$,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[tt,t("td",nt,[t("a",et,[e("两数之和 II - 输入有序数组"),n(o)])]),t("td",st,[t("a",at,[e("[✓]"),n(o)])]),t("td",ot,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[lt]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[ct]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[rt]),_:1})]),t("td",it,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[pt,t("td",dt,[t("a",ut,[e("寻找旋转排序数组中的最小值"),n(o)])]),t("td",_t,[t("a",ht,[e("[✓]"),n(o)])]),t("td",kt,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[mt]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[ft]),_:1})]),t("td",gt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[bt,t("td",yt,[t("a",vt,[e("寻找旋转排序数组中的最小值 II"),n(o)])]),t("td",xt,[t("a",wt,[e("[✓]"),n(o)])]),t("td",Mt,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[It]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Et]),_:1})]),t("td",jt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[Bt,t("td",Tt,[t("a",Nt,[e("搜索旋转排序数组"),n(o)])]),t("td",Ot,[t("a",Gt,[e("[✓]"),n(o)])]),t("td",Ht,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[St]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[qt]),_:1})]),t("td",Dt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Lt,t("td",Rt,[t("a",Vt,[e("搜索旋转排序数组 II"),n(o)])]),t("td",At,[t("a",Ct,[e("[✓]"),n(o)])]),t("td",Pt,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[zt]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Kt]),_:1})]),t("td",Ut,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ft,t("td",Jt,[t("a",Qt,[e("第一个错误的版本"),n(o)])]),t("td",Wt,[t("a",Xt,[e("[✓]"),n(o)])]),t("td",Yt,[n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Zt]),_:1}),e(),n(a,{to:"/outline/tag/interactive.html"},{default:s(()=>[$t]),_:1})]),t("td",tn,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[nn,t("td",en,[t("a",sn,[e("寻找峰值"),n(o)])]),t("td",an,[t("a",on,[e("[✓]"),n(o)])]),t("td",ln,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[cn]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[rn]),_:1})]),t("td",pn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[dn,t("td",un,[t("a",_n,[e("山脉数组的峰顶索引"),n(o)])]),hn,t("td",kn,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[mn]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[fn]),_:1})]),t("td",gn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[bn,t("td",yn,[t("a",vn,[e("山脉数组中查找目标值"),n(o)])]),xn,t("td",wn,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Mn]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[In]),_:1}),e(),n(a,{to:"/outline/tag/interactive.html"},{default:s(()=>[En]),_:1})]),t("td",jn,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[Bn,t("td",Tn,[t("a",Nn,[e("寻找比目标字母大的最小字母"),n(o)])]),On,t("td",Gn,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Hn]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Sn]),_:1})]),t("td",qn,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Dn,t("td",Ln,[t("a",Rn,[e("寻找两个正序数组的中位数"),n(o)])]),t("td",Vn,[t("a",An,[e("[✓]"),n(o)])]),t("td",Cn,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Pn]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[zn]),_:1}),e(),n(a,{to:"/outline/tag/divide-and-conquer.html"},{default:s(()=>[Kn]),_:1})]),t("td",Un,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[Fn,t("td",Jn,[t("a",Qn,[e("搜索二维矩阵"),n(o)])]),t("td",Wn,[t("a",Xn,[e("[✓]"),n(o)])]),t("td",Yn,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Zn]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[$n]),_:1}),e(),n(a,{to:"/outline/tag/matrix.html"},{default:s(()=>[te]),_:1})]),t("td",ne,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ee,t("td",se,[t("a",ae,[e("搜索二维矩阵 II"),n(o)])]),t("td",oe,[t("a",le,[e("[✓]"),n(o)])]),t("td",ce,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[re]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[ie]),_:1}),e(),n(a,{to:"/outline/tag/divide-and-conquer.html"},{default:s(()=>[pe]),_:1}),e(),de]),t("td",ue,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])]),_e,c(" prettier-ignore "),t("table",null,[he,t("tbody",null,[t("tr",null,[ke,t("td",me,[t("a",fe,[e("x 的平方根 "),n(o)])]),t("td",ge,[t("a",be,[e("[✓]"),n(o)])]),t("td",ye,[n(a,{to:"/outline/tag/math.html"},{default:s(()=>[ve]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[xe]),_:1})]),t("td",we,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Me,t("td",Ie,[t("a",Ee,[e("寻找重复数"),n(o)])]),t("td",je,[t("a",Be,[e("[✓]"),n(o)])]),t("td",Te,[n(a,{to:"/outline/tag/bit-manipulation.html"},{default:s(()=>[Ne]),_:1}),e(),n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Oe]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[Ge]),_:1}),e(),He]),t("td",Se,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[qe,t("td",De,[t("a",Le,[e("Pow(x, n)"),n(o)])]),t("td",Re,[t("a",Ve,[e("[✓]"),n(o)])]),t("td",Ae,[n(a,{to:"/outline/tag/recursion.html"},{default:s(()=>[Ce]),_:1}),e(),n(a,{to:"/outline/tag/math.html"},{default:s(()=>[Pe]),_:1})]),t("td",ze,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ke,t("td",Ue,[t("a",Fe,[e("有效的完全平方数"),n(o)])]),Je,t("td",Qe,[n(a,{to:"/outline/tag/math.html"},{default:s(()=>[We]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Xe]),_:1})]),t("td",Ye,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Ze,t("td",$e,[t("a",ts,[e("转变数组后最接近目标值的数组和"),n(o)])]),ns,t("td",es,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[ss]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[as]),_:1}),e(),n(a,{to:"/outline/tag/sorting.html"},{default:s(()=>[os]),_:1})]),t("td",ls,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[cs,t("td",rs,[t("a",is,[e("第 N 位数字"),n(o)])]),ps,t("td",ds,[n(a,{to:"/outline/tag/math.html"},{default:s(()=>[us]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[_s]),_:1})]),t("td",hs,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])]),ks,c(" prettier-ignore "),t("table",null,[ms,t("tbody",null,[t("tr",null,[fs,t("td",gs,[t("a",bs,[e("爱吃香蕉的珂珂"),n(o)])]),ys,t("td",vs,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[xs]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[ws]),_:1})]),t("td",Ms,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Is,t("td",Es,[t("a",js,[e("分割数组的最大值"),n(o)])]),Bs,t("td",Ts,[n(a,{to:"/outline/tag/greedy.html"},{default:s(()=>[Ns]),_:1}),e(),n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Os]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Gs]),_:1}),e(),Hs]),t("td",Ss,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[qs,t("td",Ds,[t("a",Ls,[e("长度最小的子数组"),n(o)])]),t("td",Rs,[t("a",Vs,[e("[✓]"),n(o)])]),t("td",As,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Cs]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Ps]),_:1}),e(),n(a,{to:"/outline/tag/prefix-sum.html"},{default:s(()=>[zs]),_:1}),e(),Ks]),t("td",Us,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Fs,t("td",Js,[t("a",Qs,[e("找到 K 个最接近的元素"),n(o)])]),Ws,t("td",Xs,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Ys]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[Zs]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[$s]),_:1}),e(),ta]),t("td",na,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ea,t("td",sa,[t("a",aa,[e("最接近的二叉搜索树值"),n(o)])]),oa,t("td",la,[n(a,{to:"/outline/tag/tree.html"},{default:s(()=>[ca]),_:1}),e(),n(a,{to:"/outline/tag/depth-first-search.html"},{default:s(()=>[ra]),_:1}),e(),n(a,{to:"/outline/tag/binary-search-tree.html"},{default:s(()=>[ia]),_:1}),e(),pa]),t("td",da,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[ua,t("td",_a,[t("a",ha,[e("搜索长度未知的有序数组"),n(o)])]),ka,t("td",ma,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[fa]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[ga]),_:1}),e(),n(a,{to:"/outline/tag/interactive.html"},{default:s(()=>[ba]),_:1})]),t("td",ya,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[va,t("td",xa,[t("a",wa,[e("两个数组的交集"),n(o)])]),Ma,t("td",Ia,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Ea]),_:1}),e(),n(a,{to:"/outline/tag/hash-table.html"},{default:s(()=>[ja]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[Ba]),_:1}),e(),Ta]),t("td",Na,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Oa,t("td",Ga,[t("a",Ha,[e("两个数组的交集 II"),n(o)])]),Sa,t("td",qa,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Da]),_:1}),e(),n(a,{to:"/outline/tag/hash-table.html"},{default:s(()=>[La]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[Ra]),_:1}),e(),Va]),t("td",Aa,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Ca,t("td",Pa,[t("a",za,[e("寻找重复数"),n(o)])]),t("td",Ka,[t("a",Ua,[e("[✓]"),n(o)])]),t("td",Fa,[n(a,{to:"/outline/tag/bit-manipulation.html"},{default:s(()=>[Ja]),_:1}),e(),n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Qa]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[Wa]),_:1}),e(),Xa]),t("td",Ya,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Za,t("td",$a,[t("a",to,[e("找出第 K 小的数对距离"),n(o)])]),no,t("td",eo,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[so]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[ao]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[oo]),_:1}),e(),lo]),t("td",co,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[ro,t("td",io,[t("a",po,[e("较小的三数之和"),n(o)])]),t("td",uo,[t("a",_o,[e("[✓]"),n(o)])]),t("td",ho,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[ko]),_:1}),e(),n(a,{to:"/outline/tag/two-pointers.html"},{default:s(()=>[mo]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[fo]),_:1}),e(),go]),t("td",bo,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[yo,t("td",vo,[t("a",xo,[e("在 D 天内送达包裹的能力"),n(o)])]),wo,t("td",Mo,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Io]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[Eo]),_:1})]),t("td",jo,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Bo,t("td",To,[t("a",No,[e("制作 m 束花所需的最少天数"),n(o)])]),Oo,t("td",Go,[n(a,{to:"/outline/tag/array.html"},{default:s(()=>[Ho]),_:1}),e(),n(a,{to:"/outline/tag/binary-search.html"},{default:s(()=>[So]),_:1})]),t("td",qo,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const Ao=i(_,[["render",Do],["__file","binary_search.html.vue"]]);export{Ao as default};
