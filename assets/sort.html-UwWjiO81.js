import{_ as i,r as p,o as r,c as d,f as c,a as t,d as s,w as e,b as n,e as u}from"./app-JnDxddK3.js";const _="/leetcode-js/assets/3-8-1-iT-WwoJ7.png",h="/leetcode-js/assets/3-8-2-QfXJz8bw.png",k="/leetcode-js/assets/3-8-3-a_6Sr1pw.png",g="/leetcode-js/assets/3-8-4-z3t45buZ.png",f="/leetcode-js/assets/3-8-5-fdOtm4YE.png",m="/leetcode-js/assets/3-8-6-N3GEHDda.png",y="/leetcode-js/assets/3-8-7-9X6nt6Rg.png",b={},v=u('<h1 id="_3-8-排序算法" tabindex="-1"><a class="header-anchor" href="#_3-8-排序算法" aria-hidden="true">#</a> 3.8 排序算法</h1><h2 id="评价排序算法的指标" tabindex="-1"><a class="header-anchor" href="#评价排序算法的指标" aria-hidden="true">#</a> 评价排序算法的指标</h2><h4 id="_1-执行效率" tabindex="-1"><a class="header-anchor" href="#_1-执行效率" aria-hidden="true">#</a> 1. 执行效率</h4><p>在分析排序算法的时间复杂度时，要分别给出<strong>最好情况</strong>、<strong>最坏情况</strong>、<strong>平均情况下的时间复杂度</strong>。</p><h4 id="_2-内存消耗" tabindex="-1"><a class="header-anchor" href="#_2-内存消耗" aria-hidden="true">#</a> 2. 内存消耗</h4><p>算法的内存消耗可以通过<strong>空间复杂度</strong>来衡量。</p><p>空间复杂度是 O(1)的排序算法，称为<strong>原地排序（Sorted in place）</strong>。</p><h4 id="_3-稳定性" tabindex="-1"><a class="header-anchor" href="#_3-稳定性" aria-hidden="true">#</a> 3. 稳定性</h4><p><strong>稳定性</strong>是指，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p><p>很多数据结构和算法课程，在讲排序的时候，都是用整数来举例，但在真正软件开发中，我们要排序的往往不是单纯的整数，而是一组对象，我们需要按照对象的某个 key 来排序。当需要先按 key1 排序，key1 值相同的再按照 key2 排序时，就需要使用稳定的排序算法。</p><hr><p>常见排序算法的各项指标如下：</p><table style="width:100%;"><tr><th style="width:15%;">排序算法</th><th style="width:15%;">平均时间复杂度</th><th style="width:13%;">最好情况</th><th style="width:15%;">最坏情况</th><th style="width:12%;">空间复杂度</th><th style="width:15%;">排序方式</th><th style="width:15%;">稳定性</th></tr><tr><td>冒泡排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>选择排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>插入排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td><td>in-place</td><td>稳定</td></tr><tr><td>希尔排序</td><td>O(nlogn)</td><td>O(nlog^2n)</td><td>O(nlog^2n)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td><td>out-place</td><td>稳定</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(logn)</td><td>in-place</td><td>不稳定</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td><td>in-place</td><td>不稳定</td></tr><tr><td>桶排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n^2)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td></tr><tr><td>计数排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(k)</td><td>out-place</td><td>稳定</td></tr><tr><td>基数排序</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n*k)</td><td>O(n+k)</td><td>out-place</td><td>稳定</td></tr></table><h2 id="冒泡排序-bubble-sort" tabindex="-1"><a class="header-anchor" href="#冒泡排序-bubble-sort" aria-hidden="true">#</a> 冒泡排序（Bubble Sort）</h2><p>冒泡排序只会操作相邻的两个数据。每次冒泡操作都会对<strong>相邻的两个元素进行比较</strong>，看是否满足大小关系要求。如果不满足就让它俩互换。一次冒泡会让至少一个元素移动到它应该在的位置，重复 n 次，就完成了 n 个数据的排序工作。 <img src="'+_+'" alt="" loading="lazy"><img src="'+h+`" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 相邻数据比较</span>
				<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>冒泡排序的平均时间复杂度是 O(n^2)，冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</p><h2 id="选择排序-selection-sort" tabindex="-1"><a class="header-anchor" href="#选择排序-selection-sort" aria-hidden="true">#</a> 选择排序（Selection Sort）</h2><p>选择排序将数组中的数据分为两个区间，已排序区间和未排序区间。每次会从未排序区间中<strong>找到最小的元素</strong>，将其放到已排序区间的末尾，共执行 n - 1 轮。</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> temp<span class="token punctuation">,</span> minIndex<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 寻找最小值</span>
				minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 暂存最小值的索引</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将最小值和第一个未排序的数交换</span>
		arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
		arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选择排序空间复杂度为 O(1)，是一种原地排序算法。选择排序的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O(n2)。选择排序是一种不稳定的排序算法。选择排序每次都要找剩余未排序元素中的最小值，并和前面的元素交换位置，这样破坏了稳定性。</p><h2 id="插入排序-insertion-sort" tabindex="-1"><a class="header-anchor" href="#插入排序-insertion-sort" aria-hidden="true">#</a> 插入排序（Insertion Sort）</h2><p>插入排序将数组中的数据分为两个区间，已排序区间和未排序区间。初始已排序区间只有一个元素，就是数组的第一个元素。插入算法的核心思想是取未排序区间中的元素，在已排序区间中<strong>找到合适的插入位置将其插入</strong>，并保证已排序区间数据一直有序。重复这个过程，直到未排序区间中元素为空，算法结束。 <img src="`+g+`" alt="" loading="lazy"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 当前要处理的数</span>
		<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果前一个数大于后一个数,将前一个数往后移一位</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			j<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 此时的j是要处理的数排序后应该在的位置</span>
		arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入排序的平均时间复杂度是 O(n^2)，冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的空间复杂度为 O(1)，是一个原地排序算法。相同大小的数据在排序前后不会改变顺序，所以冒泡排序是稳定的排序算法。</p><h2 id="希尔排序-shell-sort" tabindex="-1"><a class="header-anchor" href="#希尔排序-shell-sort" aria-hidden="true">#</a> 希尔排序（Shell Sort）</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。</p><p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul><p>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
				j<span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希尔排序的平均时间复杂度是 O(nlogn)，空间复杂度为 O(1)，希尔排序是非稳定排序算法。</p><h2 id="归并排序-merge-sort" tabindex="-1"><a class="header-anchor" href="#归并排序-merge-sort" aria-hidden="true">#</a> 归并排序（Merge Sort）</h2><p>归并排序的核心思想是分治思想。分治，将一个大问题分解成小的子问题来解决。小的子问题解决了，大问题也就解决了。</p><p>如果要排序一个数组，先把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。</p><ul><li><p>分：把数组分成两半，递归子数组,进行分割操作，直到分成一个数</p></li><li><p>合：把两个字数组合并成一个有序数组，直到全部子数组合并完毕，合并前先准备一个空数组，存放合并之后的结果，然后不断取出两个子数组的第一个元素，比较他们的大小，小的先进入之前准备的空数组中，然后继续遍历其他元素，直到子数组中的元素都完成遍历</p></li></ul><figure><img src="`+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//采用自上而下的递归方法</span>
	<span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		left <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度 O(nlogn)，分的时间复杂度 O(logn)，合并的过程的复杂度是 O(n)。</p><p>尽管每次合并操作都需要申请额外的内存空间，但在合并完成之后，临时开辟的内存空间就被释放掉了。在任意时刻，CPU 只会有一个函数在执行，也就只会有一个临时的内存空间在使用。临时内存空间最大也不会超过 n 个数据的大小，所以空间复杂度是 O(n)。</p><p>归并排序不是原地排序算法，归并排序是一个稳定的排序算法。</p><h2 id="快速排序-quick-sort" tabindex="-1"><a class="header-anchor" href="#快速排序-quick-sort" aria-hidden="true">#</a> 快速排序（Quick Sort）</h2><p>快排利用的也是分治思想。</p><ul><li>分区：从数组中选一个基准值，比基准值小的放在它的前面，比基准值大的放在它的后面</li><li>递归：对基准值前后的子数组进行第一步的递归操作</li></ul><p>快排是一种原地、不稳定的排序算法。时间复杂度 O(nlogn)，递归复杂度是 O(logn),分区复杂度 O(n)；空间复杂度是 O(1)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
		partitionIndex<span class="token punctuation">,</span>
		left <span class="token operator">=</span> <span class="token keyword">typeof</span> left <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left<span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token keyword">typeof</span> right <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> right<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		partitionIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partitionIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partitionIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//分区操作</span>
<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 设定基准值位置 pivot</span>
	<span class="token comment">// 当然也可以选择最右边的元素为基准</span>
	<span class="token comment">// 也可以随机选择然后和最左或最右元素交换</span>
	<span class="token keyword">var</span> pivot <span class="token operator">=</span> left<span class="token punctuation">,</span>
		index <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
			index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>快排和归并用的都是分治思想，递推公式和递归代码也非常相似，它们的区别是：</p><ul><li>归并排序的处理过程是由下到上的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是由上到下的，先分区，然后再处理子问题。</li><li>归并排序虽然是稳定的、时间复杂度为 O(nlogn)的排序算法，但是它是非原地排序算法，它的合并函数无法在原地执行。快速排序通过设计巧妙的原地分区函数，可以实现原地排序，解决了归并排序占用太多内存的问题。</li></ul><h2 id="桶排序-bucket-sort" tabindex="-1"><a class="header-anchor" href="#桶排序-bucket-sort" aria-hidden="true">#</a> 桶排序（Bucket sort）</h2><p>桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>桶排序的时间复杂度是 O(n)。如果要排序的数据有 n 个，我们把它们均匀地划分到 m 个桶内，每个桶里就有 k=n/m 个元素。每个桶内部使用快速排序，时间复杂度为 O(k _ logk)。m 个桶排序的时间复杂度就是 O(m _ k * logk)，因为 k=n/m，所以整个桶排序的时间复杂度就是 O(n*log(n/m))。当桶的个数 m 接近数据个数 n 时，log(n/m)就是一个非常小的常量，这个时候桶排序的时间复杂度接近 O(n)。</p><p>桶排序对要排序数据的要求是非常苛刻的。要求数据在各个桶之间的分布是比较均匀的。如果数据经过桶的划分之后，有些桶里的数据非常多，有些非常少，很不平均，那桶内数据排序的时间复杂度就不是常量级了。在极端情况下，如果数据都被划分到一个桶里，那就退化为 O(nlogn)的排序算法了。</p><p>桶排序比较适合用在外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p><p>比如有 10GB 的订单数据，希望按订单金额（假设金额都是正整数）进行排序，但是内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。</p><p>可以先扫描一遍文件，看订单金额所处的数据范围。假设经过扫描之后得到，订单金额最小是 1 元，最大是 10 万元。将所有订单根据金额划分到 100 个桶里，第一个桶存储金额在 1 元到 1000 元之内的订单，第二桶存储金额在 1001 元到 2000 元之内的订单，以此类推。每一个桶对应一个文件，并且按照金额范围的大小顺序编号命名（00，01，02…99）。</p><p>不过，订单按照金额在 1 元到 10 万元之间并不一定是均匀分布的 ，所以 10GB 订单数据无法均匀地被划分到 100 个文件中的。有可能某个金额区间的数据特别多，划分之后对应的文件就会很大，没法一次性读入内存。这时可以继续划分，比如，订单金额在 1 元到 1000 元之间的比较多，就将这个区间继续划分为 10 个小区间，1 元到 100 元，101 元到 200 元，201 元到 300 元…901 元到 1000 元。如果划分之后，101 元到 200 元之间的订单还是太多，无法一次性读入内存，那就继续再划分，直到所有的文件都能读入内存为止。</p><ul><li>平均时间复杂度：O(n + k)，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：O(n^2)；</li><li>最佳时间复杂度：O(n + k)；</li><li>空间复杂度：O(n + k)，需要额外的计数数组和结果数组；</li><li>稳定性：桶排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><h2 id="计数排序-counting-sort" tabindex="-1"><a class="header-anchor" href="#计数排序-counting-sort" aria-hidden="true">#</a> 计数排序（Counting sort）</h2><p>计数排序是一种非比较排序算法，其核心思想是通过计数每个元素的出现次数来进行排序，适用于整数或有限范围内的非负整数排序。这个算法的特点是速度快且稳定，适用于某些特定场景。</p><p>计数排序其实是桶排序的一种特殊情况。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。每个桶内的数据值都是相同的，省掉了桶内排序的时间。</p><p>比如高考查分数系统，查分数的时候，系统会显示成绩以及所在省的排名。如果所在省有 50 万考生，如何通过成绩快速排序得出名次。</p><p>考生的满分是 900 分，最小是 0 分，这个数据的范围很小，可以分成 901 个桶，对应分数从 0 分到 900 分。根据考生的成绩，将这 50 万考生划分到这 901 个桶里。桶内的数据都是分数相同的考生，所以并不需要再进行排序。只需要依次扫描每个桶，将桶内的考生依次输出到一个数组中，就实现了 50 万考生的排序。因为只涉及扫描遍历操作，所以时间复杂度是 O(k)。</p><ul><li>平均时间复杂度：O(n + k)，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：O(n + k)；</li><li>最佳时间复杂度：O(n + k)；</li><li>空间复杂度：O(k)；</li><li>稳定性：计数排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><h2 id="基数排序-radix-sort" tabindex="-1"><a class="header-anchor" href="#基数排序-radix-sort" aria-hidden="true">#</a> 基数排序（Radix sort）</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p>它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p><ul><li>平均时间复杂度：<code>O(n * k)</code>，其中 n 是待排序数组的大小，k 是整数范围；</li><li>最坏时间复杂度：<code>O(n * k)</code>；</li><li>最佳时间复杂度：<code>O(n * k)</code>；</li><li>空间复杂度：O(n + k)，需要额外的计数数组和结果数组；</li><li>稳定性：基数排序是一种稳定的排序算法，不改变相同元素的相对顺序；</li></ul><p>上述三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><ul><li>桶排序：每个桶存储一定范围的数值；</li><li>计数排序：每个桶只存储单一键值；</li><li>基数排序：根据键值的每位数字来分配桶；</li></ul>',72),x=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),n(" 相关题目")],-1),w=t("h4",{id:"数组排序",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#数组排序","aria-hidden":"true"},"#"),n(" 数组排序")],-1),O=t("ul",null,[t("li",null,"冒泡排序")],-1),j=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),S=t("td",{style:{"text-align":"center"}},"剑指 Offer 45",-1),z=t("td",{style:{"text-align":"left"}},"把数组排成最小的数",-1),E={style:{"text-align":"center"}},I={style:{"text-align":"left"}},q=t("code",null,"贪心",-1),M=t("code",null,"字符串",-1),T=t("code",null,"排序",-1),B={style:{"text-align":"left"}},N={style:{"text-align":"center"}},R={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof",target:"_blank",rel:"noopener noreferrer"},C=t("td",{style:{"text-align":"center"}},"283",-1),D=t("td",{style:{"text-align":"left"}},"移动零",-1),H={style:{"text-align":"center"}},L={style:{"text-align":"left"}},V=t("code",null,"数组",-1),A=t("code",null,"双指针",-1),G={style:{"text-align":"left"}},P={style:{"text-align":"center"}},U={href:"https://leetcode.cn/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/move-zeroes",target:"_blank",rel:"noopener noreferrer"},K=t("ul",null,[t("li",null,"选择排序")],-1),Q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),X=t("td",{style:{"text-align":"center"}},"215",-1),W=t("td",{style:{"text-align":"left"}},"数组中的第K个最大元素",-1),Y={style:{"text-align":"center"}},Z={style:{"text-align":"left"}},F=t("code",null,"数组",-1),$=t("code",null,"分治",-1),tt=t("code",null,"快速选择",-1),nt=t("code",null,"2+",-1),st={style:{"text-align":"left"}},et={style:{"text-align":"center"}},at={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},lt=t("ul",null,[t("li",null,"插入排序")],-1),ct=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),pt=t("td",{style:{"text-align":"center"}},"75",-1),it=t("td",{style:{"text-align":"left"}},"颜色分类",-1),rt={style:{"text-align":"center"}},dt={style:{"text-align":"left"}},ut=t("code",null,"数组",-1),_t=t("code",null,"双指针",-1),ht=t("code",null,"排序",-1),kt={style:{"text-align":"left"}},gt={style:{"text-align":"center"}},ft={href:"https://leetcode.cn/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},mt={href:"https://leetcode.com/problems/sort-colors",target:"_blank",rel:"noopener noreferrer"},yt=t("ul",null,[t("li",null,"希尔排序")],-1),bt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),vt=t("td",{style:{"text-align":"center"}},"912",-1),xt=t("td",{style:{"text-align":"left"}},"排序数组",-1),wt=t("td",{style:{"text-align":"center"}},null,-1),Ot={style:{"text-align":"left"}},jt=t("code",null,"数组",-1),St=t("code",null,"分治",-1),zt=t("code",null,"桶排序",-1),Et=t("code",null,"5+",-1),It={style:{"text-align":"left"}},qt={style:{"text-align":"center"}},Mt={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Tt={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Bt=t("td",{style:{"text-align":"center"}},"506",-1),Nt=t("td",{style:{"text-align":"left"}},"相对名次",-1),Rt={style:{"text-align":"center"}},Ct={style:{"text-align":"left"}},Dt=t("code",null,"数组",-1),Ht=t("code",null,"排序",-1),Lt=t("code",null,"堆（优先队列）",-1),Vt={style:{"text-align":"left"}},At={style:{"text-align":"center"}},Gt={href:"https://leetcode.cn/problems/relative-ranks",target:"_blank",rel:"noopener noreferrer"},Pt={href:"https://leetcode.com/problems/relative-ranks",target:"_blank",rel:"noopener noreferrer"},Ut=t("ul",null,[t("li",null,"归并排序")],-1),Jt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Kt=t("td",{style:{"text-align":"center"}},"912",-1),Qt=t("td",{style:{"text-align":"left"}},"排序数组",-1),Xt=t("td",{style:{"text-align":"center"}},null,-1),Wt={style:{"text-align":"left"}},Yt=t("code",null,"数组",-1),Zt=t("code",null,"分治",-1),Ft=t("code",null,"桶排序",-1),$t=t("code",null,"5+",-1),tn={style:{"text-align":"left"}},nn={style:{"text-align":"center"}},sn={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},en={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},an=t("td",{style:{"text-align":"center"}},"88",-1),on=t("td",{style:{"text-align":"left"}},"合并两个有序数组",-1),ln={style:{"text-align":"center"}},cn={style:{"text-align":"left"}},pn=t("code",null,"数组",-1),rn=t("code",null,"双指针",-1),dn=t("code",null,"排序",-1),un={style:{"text-align":"left"}},_n={style:{"text-align":"center"}},hn={href:"https://leetcode.cn/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://leetcode.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},gn=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),fn=t("td",{style:{"text-align":"left"}},"数组中的逆序对",-1),mn={style:{"text-align":"center"}},yn={style:{"text-align":"left"}},bn=t("code",null,"树状数组",-1),vn=t("code",null,"线段树",-1),xn=t("code",null,"数组",-1),wn=t("code",null,"4+",-1),On={style:{"text-align":"left"}},jn={style:{"text-align":"center"}},Sn={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},zn=t("td",{style:{"text-align":"center"}},"315",-1),En=t("td",{style:{"text-align":"left"}},"计算右侧小于当前元素的个数",-1),In=t("td",{style:{"text-align":"center"}},null,-1),qn={style:{"text-align":"left"}},Mn=t("code",null,"树状数组",-1),Tn=t("code",null,"线段树",-1),Bn=t("code",null,"数组",-1),Nn=t("code",null,"4+",-1),Rn={style:{"text-align":"left"}},Cn={style:{"text-align":"center"}},Dn={href:"https://leetcode.cn/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Hn={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},Ln=t("ul",null,[t("li",null,"快速排序")],-1),Vn=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),An=t("td",{style:{"text-align":"center"}},"912",-1),Gn=t("td",{style:{"text-align":"left"}},"排序数组",-1),Pn=t("td",{style:{"text-align":"center"}},null,-1),Un={style:{"text-align":"left"}},Jn=t("code",null,"数组",-1),Kn=t("code",null,"分治",-1),Qn=t("code",null,"桶排序",-1),Xn=t("code",null,"5+",-1),Wn={style:{"text-align":"left"}},Yn={style:{"text-align":"center"}},Zn={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Fn={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},$n=t("td",{style:{"text-align":"center"}},"169",-1),ts=t("td",{style:{"text-align":"left"}},"多数元素",-1),ns={style:{"text-align":"center"}},ss={style:{"text-align":"left"}},es=t("code",null,"数组",-1),as=t("code",null,"哈希表",-1),os=t("code",null,"分治",-1),ls=t("code",null,"2+",-1),cs={style:{"text-align":"left"}},ps={style:{"text-align":"center"}},is={href:"https://leetcode.cn/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},rs={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},ds=t("ul",null,[t("li",null,"堆排序")],-1),us=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),_s=t("td",{style:{"text-align":"center"}},"912",-1),hs=t("td",{style:{"text-align":"left"}},"排序数组",-1),ks=t("td",{style:{"text-align":"center"}},null,-1),gs={style:{"text-align":"left"}},fs=t("code",null,"数组",-1),ms=t("code",null,"分治",-1),ys=t("code",null,"桶排序",-1),bs=t("code",null,"5+",-1),vs={style:{"text-align":"left"}},xs={style:{"text-align":"center"}},ws={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Os={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},js=t("td",{style:{"text-align":"center"}},"215",-1),Ss=t("td",{style:{"text-align":"left"}},"数组中的第K个最大元素",-1),zs={style:{"text-align":"center"}},Es={style:{"text-align":"left"}},Is=t("code",null,"数组",-1),qs=t("code",null,"分治",-1),Ms=t("code",null,"快速选择",-1),Ts=t("code",null,"2+",-1),Bs={style:{"text-align":"left"}},Ns={style:{"text-align":"center"}},Rs={href:"https://leetcode.cn/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},Cs={href:"https://leetcode.com/problems/kth-largest-element-in-an-array",target:"_blank",rel:"noopener noreferrer"},Ds=t("td",{style:{"text-align":"center"}},"剑指 Offer 40",-1),Hs=t("td",{style:{"text-align":"left"}},"最小的k个数",-1),Ls={style:{"text-align":"center"}},Vs={style:{"text-align":"left"}},As=t("code",null,"数组",-1),Gs=t("code",null,"分治",-1),Ps=t("code",null,"快速选择",-1),Us=t("code",null,"2+",-1),Js={style:{"text-align":"left"}},Ks={style:{"text-align":"center"}},Qs={href:"https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof",target:"_blank",rel:"noopener noreferrer"},Xs=t("ul",null,[t("li",null,"计数排序")],-1),Ws=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Ys=t("td",{style:{"text-align":"center"}},"912",-1),Zs=t("td",{style:{"text-align":"left"}},"排序数组",-1),Fs=t("td",{style:{"text-align":"center"}},null,-1),$s={style:{"text-align":"left"}},te=t("code",null,"数组",-1),ne=t("code",null,"分治",-1),se=t("code",null,"桶排序",-1),ee=t("code",null,"5+",-1),ae={style:{"text-align":"left"}},oe={style:{"text-align":"center"}},le={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},ce={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},pe=t("td",{style:{"text-align":"center"}},"1122",-1),ie=t("td",{style:{"text-align":"left"}},"数组的相对排序",-1),re=t("td",{style:{"text-align":"center"}},null,-1),de={style:{"text-align":"left"}},ue=t("code",null,"数组",-1),_e=t("code",null,"哈希表",-1),he=t("code",null,"计数排序",-1),ke=t("code",null,"1+",-1),ge={style:{"text-align":"left"}},fe={style:{"text-align":"center"}},me={href:"https://leetcode.cn/problems/relative-sort-array",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://leetcode.com/problems/relative-sort-array",target:"_blank",rel:"noopener noreferrer"},be=t("ul",null,[t("li",null,"桶排序")],-1),ve=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),xe=t("td",{style:{"text-align":"center"}},"912",-1),we=t("td",{style:{"text-align":"left"}},"排序数组",-1),Oe=t("td",{style:{"text-align":"center"}},null,-1),je={style:{"text-align":"left"}},Se=t("code",null,"数组",-1),ze=t("code",null,"分治",-1),Ee=t("code",null,"桶排序",-1),Ie=t("code",null,"5+",-1),qe={style:{"text-align":"left"}},Me={style:{"text-align":"center"}},Te={href:"https://leetcode.cn/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Be={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Ne=t("td",{style:{"text-align":"center"}},"220",-1),Re=t("td",{style:{"text-align":"left"}},"存在重复元素 III",-1),Ce=t("td",{style:{"text-align":"center"}},null,-1),De={style:{"text-align":"left"}},He=t("code",null,"数组",-1),Le=t("code",null,"桶排序",-1),Ve=t("code",null,"有序集合",-1),Ae=t("code",null,"2+",-1),Ge={style:{"text-align":"left"}},Pe={style:{"text-align":"center"}},Ue={href:"https://leetcode.cn/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},Je={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},Ke=t("td",{style:{"text-align":"center"}},"164",-1),Qe=t("td",{style:{"text-align":"left"}},"最大间距",-1),Xe=t("td",{style:{"text-align":"center"}},null,-1),We={style:{"text-align":"left"}},Ye=t("code",null,"数组",-1),Ze=t("code",null,"桶排序",-1),Fe=t("code",null,"基数排序",-1),$e=t("code",null,"1+",-1),ta={style:{"text-align":"left"}},na={style:{"text-align":"center"}},sa={href:"https://leetcode.cn/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},ea={href:"https://leetcode.com/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},aa=t("ul",null,[t("li",null,"基数排序")],-1),oa=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),la=t("td",{style:{"text-align":"center"}},"164",-1),ca=t("td",{style:{"text-align":"left"}},"最大间距",-1),pa=t("td",{style:{"text-align":"center"}},null,-1),ia={style:{"text-align":"left"}},ra=t("code",null,"数组",-1),da=t("code",null,"桶排序",-1),ua=t("code",null,"基数排序",-1),_a=t("code",null,"1+",-1),ha={style:{"text-align":"left"}},ka={style:{"text-align":"center"}},ga={href:"https://leetcode.cn/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},fa={href:"https://leetcode.com/problems/maximum-gap",target:"_blank",rel:"noopener noreferrer"},ma=t("td",{style:{"text-align":"center"}},"561",-1),ya=t("td",{style:{"text-align":"left"}},"数组拆分",-1),ba=t("td",{style:{"text-align":"center"}},null,-1),va={style:{"text-align":"left"}},xa=t("code",null,"贪心",-1),wa=t("code",null,"数组",-1),Oa=t("code",null,"计数排序",-1),ja=t("code",null,"1+",-1),Sa={style:{"text-align":"left"}},za={style:{"text-align":"center"}},Ea={href:"https://leetcode.cn/problems/array-partition",target:"_blank",rel:"noopener noreferrer"},Ia={href:"https://leetcode.com/problems/array-partition",target:"_blank",rel:"noopener noreferrer"},qa=t("ul",null,[t("li",null,"其他排序")],-1),Ma=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Ta=t("td",{style:{"text-align":"center"}},"217",-1),Ba=t("td",{style:{"text-align":"left"}},"存在重复元素",-1),Na={style:{"text-align":"center"}},Ra={style:{"text-align":"left"}},Ca=t("code",null,"数组",-1),Da=t("code",null,"哈希表",-1),Ha=t("code",null,"排序",-1),La={style:{"text-align":"left"}},Va={style:{"text-align":"center"}},Aa={href:"https://leetcode.cn/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Ga={href:"https://leetcode.com/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},Pa=t("td",{style:{"text-align":"center"}},"136",-1),Ua=t("td",{style:{"text-align":"left"}},"只出现一次的数字",-1),Ja={style:{"text-align":"center"}},Ka={style:{"text-align":"left"}},Qa=t("code",null,"位运算",-1),Xa=t("code",null,"数组",-1),Wa={style:{"text-align":"left"}},Ya={style:{"text-align":"center"}},Za={href:"https://leetcode.cn/problems/single-number",target:"_blank",rel:"noopener noreferrer"},Fa={href:"https://leetcode.com/problems/single-number",target:"_blank",rel:"noopener noreferrer"},$a=t("td",{style:{"text-align":"center"}},"56",-1),to=t("td",{style:{"text-align":"left"}},"合并区间",-1),no={style:{"text-align":"center"}},so={style:{"text-align":"left"}},eo=t("code",null,"数组",-1),ao=t("code",null,"排序",-1),oo={style:{"text-align":"left"}},lo={style:{"text-align":"center"}},co={href:"https://leetcode.cn/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},po={href:"https://leetcode.com/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},io=t("td",{style:{"text-align":"center"}},"179",-1),ro=t("td",{style:{"text-align":"left"}},"最大数",-1),uo=t("td",{style:{"text-align":"center"}},null,-1),_o={style:{"text-align":"left"}},ho=t("code",null,"贪心",-1),ko=t("code",null,"数组",-1),go=t("code",null,"字符串",-1),fo=t("code",null,"1+",-1),mo={style:{"text-align":"left"}},yo={style:{"text-align":"center"}},bo={href:"https://leetcode.cn/problems/largest-number",target:"_blank",rel:"noopener noreferrer"},vo={href:"https://leetcode.com/problems/largest-number",target:"_blank",rel:"noopener noreferrer"},xo=t("td",{style:{"text-align":"center"}},"384",-1),wo=t("td",{style:{"text-align":"left"}},"打乱数组",-1),Oo=t("td",{style:{"text-align":"center"}},null,-1),jo={style:{"text-align":"left"}},So=t("code",null,"数组",-1),zo=t("code",null,"数学",-1),Eo=t("code",null,"随机化",-1),Io={style:{"text-align":"left"}},qo={style:{"text-align":"center"}},Mo={href:"https://leetcode.cn/problems/shuffle-an-array",target:"_blank",rel:"noopener noreferrer"},To={href:"https://leetcode.com/problems/shuffle-an-array",target:"_blank",rel:"noopener noreferrer"},Bo=t("td",{style:{"text-align":"center"}},"剑指 Offer 45",-1),No=t("td",{style:{"text-align":"left"}},"把数组排成最小的数",-1),Ro={style:{"text-align":"center"}},Co={style:{"text-align":"left"}},Do=t("code",null,"贪心",-1),Ho=t("code",null,"字符串",-1),Lo=t("code",null,"排序",-1),Vo={style:{"text-align":"left"}},Ao={style:{"text-align":"center"}},Go={href:"https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof",target:"_blank",rel:"noopener noreferrer"};function Po(Uo,Jo){const a=p("RouterLink"),l=p("font"),o=p("ExternalLinkIcon");return r(),d("div",null,[v,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),x,w,O,c(" prettier-ignore "),t("table",null,[j,t("tbody",null,[t("tr",null,[S,z,t("td",E,[s(a,{to:"/offer/jz_offer_45_1.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",I,[s(a,{to:"/tag/greedy.html"},{default:e(()=>[q]),_:1}),n(),s(a,{to:"/tag/string.html"},{default:e(()=>[M]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[T]),_:1})]),t("td",B,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",N,[t("a",R,[n("🀄️"),s(o)])])]),t("tr",null,[C,D,t("td",H,[s(a,{to:"/problem/0283.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",L,[s(a,{to:"/tag/array.html"},{default:e(()=>[V]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[A]),_:1})]),t("td",G,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",P,[t("a",U,[n("🀄️"),s(o)]),n(),t("a",J,[n("🔗"),s(o)])])])])]),K,c(" prettier-ignore "),t("table",null,[Q,t("tbody",null,[t("tr",null,[X,W,t("td",Y,[s(a,{to:"/problem/0215.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",Z,[s(a,{to:"/tag/array.html"},{default:e(()=>[F]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[$]),_:1}),n(),s(a,{to:"/tag/quickselect.html"},{default:e(()=>[tt]),_:1}),n(),nt]),t("td",st,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",et,[t("a",at,[n("🀄️"),s(o)]),n(),t("a",ot,[n("🔗"),s(o)])])])])]),lt,c(" prettier-ignore "),t("table",null,[ct,t("tbody",null,[t("tr",null,[pt,it,t("td",rt,[s(a,{to:"/problem/0075.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",dt,[s(a,{to:"/tag/array.html"},{default:e(()=>[ut]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[_t]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[ht]),_:1})]),t("td",kt,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",gt,[t("a",ft,[n("🀄️"),s(o)]),n(),t("a",mt,[n("🔗"),s(o)])])])])]),yt,c(" prettier-ignore "),t("table",null,[bt,t("tbody",null,[t("tr",null,[vt,xt,wt,t("td",Ot,[s(a,{to:"/tag/array.html"},{default:e(()=>[jt]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[St]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[zt]),_:1}),n(),Et]),t("td",It,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",qt,[t("a",Mt,[n("🀄️"),s(o)]),n(),t("a",Tt,[n("🔗"),s(o)])])]),t("tr",null,[Bt,Nt,t("td",Rt,[s(a,{to:"/problem/0506.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",Ct,[s(a,{to:"/tag/array.html"},{default:e(()=>[Dt]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[Ht]),_:1}),n(),s(a,{to:"/tag/heap-priority-queue.html"},{default:e(()=>[Lt]),_:1})]),t("td",Vt,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",At,[t("a",Gt,[n("🀄️"),s(o)]),n(),t("a",Pt,[n("🔗"),s(o)])])])])]),Ut,c(" prettier-ignore "),t("table",null,[Jt,t("tbody",null,[t("tr",null,[Kt,Qt,Xt,t("td",Wt,[s(a,{to:"/tag/array.html"},{default:e(()=>[Yt]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[Zt]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[Ft]),_:1}),n(),$t]),t("td",tn,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",nn,[t("a",sn,[n("🀄️"),s(o)]),n(),t("a",en,[n("🔗"),s(o)])])]),t("tr",null,[an,on,t("td",ln,[s(a,{to:"/problem/0088.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",cn,[s(a,{to:"/tag/array.html"},{default:e(()=>[pn]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[rn]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[dn]),_:1})]),t("td",un,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",_n,[t("a",hn,[n("🀄️"),s(o)]),n(),t("a",kn,[n("🔗"),s(o)])])]),t("tr",null,[gn,fn,t("td",mn,[s(a,{to:"/offer/jz_offer_51_1.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",yn,[s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[bn]),_:1}),n(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[vn]),_:1}),n(),s(a,{to:"/tag/array.html"},{default:e(()=>[xn]),_:1}),n(),wn]),t("td",On,[s(l,{color:"#ff334b"},{default:e(()=>[n("Hard")]),_:1})]),t("td",jn,[t("a",Sn,[n("🀄️"),s(o)])])]),t("tr",null,[zn,En,In,t("td",qn,[s(a,{to:"/tag/binary-indexed-tree.html"},{default:e(()=>[Mn]),_:1}),n(),s(a,{to:"/tag/segment-tree.html"},{default:e(()=>[Tn]),_:1}),n(),s(a,{to:"/tag/array.html"},{default:e(()=>[Bn]),_:1}),n(),Nn]),t("td",Rn,[s(l,{color:"#ff334b"},{default:e(()=>[n("Hard")]),_:1})]),t("td",Cn,[t("a",Dn,[n("🀄️"),s(o)]),n(),t("a",Hn,[n("🔗"),s(o)])])])])]),Ln,c(" prettier-ignore "),t("table",null,[Vn,t("tbody",null,[t("tr",null,[An,Gn,Pn,t("td",Un,[s(a,{to:"/tag/array.html"},{default:e(()=>[Jn]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[Kn]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[Qn]),_:1}),n(),Xn]),t("td",Wn,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",Yn,[t("a",Zn,[n("🀄️"),s(o)]),n(),t("a",Fn,[n("🔗"),s(o)])])]),t("tr",null,[$n,ts,t("td",ns,[s(a,{to:"/problem/0169.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",ss,[s(a,{to:"/tag/array.html"},{default:e(()=>[es]),_:1}),n(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[as]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[os]),_:1}),n(),ls]),t("td",cs,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",ps,[t("a",is,[n("🀄️"),s(o)]),n(),t("a",rs,[n("🔗"),s(o)])])])])]),ds,c(" prettier-ignore "),t("table",null,[us,t("tbody",null,[t("tr",null,[_s,hs,ks,t("td",gs,[s(a,{to:"/tag/array.html"},{default:e(()=>[fs]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[ms]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[ys]),_:1}),n(),bs]),t("td",vs,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",xs,[t("a",ws,[n("🀄️"),s(o)]),n(),t("a",Os,[n("🔗"),s(o)])])]),t("tr",null,[js,Ss,t("td",zs,[s(a,{to:"/problem/0215.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",Es,[s(a,{to:"/tag/array.html"},{default:e(()=>[Is]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[qs]),_:1}),n(),s(a,{to:"/tag/quickselect.html"},{default:e(()=>[Ms]),_:1}),n(),Ts]),t("td",Bs,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",Ns,[t("a",Rs,[n("🀄️"),s(o)]),n(),t("a",Cs,[n("🔗"),s(o)])])]),t("tr",null,[Ds,Hs,t("td",Ls,[s(a,{to:"/offer/jz_offer_40_1.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",Vs,[s(a,{to:"/tag/array.html"},{default:e(()=>[As]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[Gs]),_:1}),n(),s(a,{to:"/tag/quickselect.html"},{default:e(()=>[Ps]),_:1}),n(),Us]),t("td",Js,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",Ks,[t("a",Qs,[n("🀄️"),s(o)])])])])]),Xs,c(" prettier-ignore "),t("table",null,[Ws,t("tbody",null,[t("tr",null,[Ys,Zs,Fs,t("td",$s,[s(a,{to:"/tag/array.html"},{default:e(()=>[te]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[ne]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[se]),_:1}),n(),ee]),t("td",ae,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",oe,[t("a",le,[n("🀄️"),s(o)]),n(),t("a",ce,[n("🔗"),s(o)])])]),t("tr",null,[pe,ie,re,t("td",de,[s(a,{to:"/tag/array.html"},{default:e(()=>[ue]),_:1}),n(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[_e]),_:1}),n(),s(a,{to:"/tag/counting-sort.html"},{default:e(()=>[he]),_:1}),n(),ke]),t("td",ge,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",fe,[t("a",me,[n("🀄️"),s(o)]),n(),t("a",ye,[n("🔗"),s(o)])])])])]),be,c(" prettier-ignore "),t("table",null,[ve,t("tbody",null,[t("tr",null,[xe,we,Oe,t("td",je,[s(a,{to:"/tag/array.html"},{default:e(()=>[Se]),_:1}),n(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[ze]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[Ee]),_:1}),n(),Ie]),t("td",qe,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",Me,[t("a",Te,[n("🀄️"),s(o)]),n(),t("a",Be,[n("🔗"),s(o)])])]),t("tr",null,[Ne,Re,Ce,t("td",De,[s(a,{to:"/tag/array.html"},{default:e(()=>[He]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[Le]),_:1}),n(),s(a,{to:"/tag/ordered-set.html"},{default:e(()=>[Ve]),_:1}),n(),Ae]),t("td",Ge,[s(l,{color:"#ff334b"},{default:e(()=>[n("Hard")]),_:1})]),t("td",Pe,[t("a",Ue,[n("🀄️"),s(o)]),n(),t("a",Je,[n("🔗"),s(o)])])]),t("tr",null,[Ke,Qe,Xe,t("td",We,[s(a,{to:"/tag/array.html"},{default:e(()=>[Ye]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[Ze]),_:1}),n(),s(a,{to:"/tag/radix-sort.html"},{default:e(()=>[Fe]),_:1}),n(),$e]),t("td",ta,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",na,[t("a",sa,[n("🀄️"),s(o)]),n(),t("a",ea,[n("🔗"),s(o)])])])])]),aa,c(" prettier-ignore "),t("table",null,[oa,t("tbody",null,[t("tr",null,[la,ca,pa,t("td",ia,[s(a,{to:"/tag/array.html"},{default:e(()=>[ra]),_:1}),n(),s(a,{to:"/tag/bucket-sort.html"},{default:e(()=>[da]),_:1}),n(),s(a,{to:"/tag/radix-sort.html"},{default:e(()=>[ua]),_:1}),n(),_a]),t("td",ha,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",ka,[t("a",ga,[n("🀄️"),s(o)]),n(),t("a",fa,[n("🔗"),s(o)])])]),t("tr",null,[ma,ya,ba,t("td",va,[s(a,{to:"/tag/greedy.html"},{default:e(()=>[xa]),_:1}),n(),s(a,{to:"/tag/array.html"},{default:e(()=>[wa]),_:1}),n(),s(a,{to:"/tag/counting-sort.html"},{default:e(()=>[Oa]),_:1}),n(),ja]),t("td",Sa,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",za,[t("a",Ea,[n("🀄️"),s(o)]),n(),t("a",Ia,[n("🔗"),s(o)])])])])]),qa,c(" prettier-ignore "),t("table",null,[Ma,t("tbody",null,[t("tr",null,[Ta,Ba,t("td",Na,[s(a,{to:"/problem/0217.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",Ra,[s(a,{to:"/tag/array.html"},{default:e(()=>[Ca]),_:1}),n(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[Da]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[Ha]),_:1})]),t("td",La,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",Va,[t("a",Aa,[n("🀄️"),s(o)]),n(),t("a",Ga,[n("🔗"),s(o)])])]),t("tr",null,[Pa,Ua,t("td",Ja,[s(a,{to:"/problem/0136.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",Ka,[s(a,{to:"/tag/bit-manipulation.html"},{default:e(()=>[Qa]),_:1}),n(),s(a,{to:"/tag/array.html"},{default:e(()=>[Xa]),_:1})]),t("td",Wa,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",Ya,[t("a",Za,[n("🀄️"),s(o)]),n(),t("a",Fa,[n("🔗"),s(o)])])]),t("tr",null,[$a,to,t("td",no,[s(a,{to:"/problem/0056.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",so,[s(a,{to:"/tag/array.html"},{default:e(()=>[eo]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[ao]),_:1})]),t("td",oo,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",lo,[t("a",co,[n("🀄️"),s(o)]),n(),t("a",po,[n("🔗"),s(o)])])]),t("tr",null,[io,ro,uo,t("td",_o,[s(a,{to:"/tag/greedy.html"},{default:e(()=>[ho]),_:1}),n(),s(a,{to:"/tag/array.html"},{default:e(()=>[ko]),_:1}),n(),s(a,{to:"/tag/string.html"},{default:e(()=>[go]),_:1}),n(),fo]),t("td",mo,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",yo,[t("a",bo,[n("🀄️"),s(o)]),n(),t("a",vo,[n("🔗"),s(o)])])]),t("tr",null,[xo,wo,Oo,t("td",jo,[s(a,{to:"/tag/array.html"},{default:e(()=>[So]),_:1}),n(),s(a,{to:"/tag/math.html"},{default:e(()=>[zo]),_:1}),n(),s(a,{to:"/tag/randomized.html"},{default:e(()=>[Eo]),_:1})]),t("td",Io,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",qo,[t("a",Mo,[n("🀄️"),s(o)]),n(),t("a",To,[n("🔗"),s(o)])])]),t("tr",null,[Bo,No,t("td",Ro,[s(a,{to:"/offer/jz_offer_45_1.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",Co,[s(a,{to:"/tag/greedy.html"},{default:e(()=>[Do]),_:1}),n(),s(a,{to:"/tag/string.html"},{default:e(()=>[Ho]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[Lo]),_:1})]),t("td",Vo,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",Ao,[t("a",Go,[n("🀄️"),s(o)])])])])])])}const Qo=i(b,[["render",Po],["__file","sort.html.vue"]]);export{Qo as default};
