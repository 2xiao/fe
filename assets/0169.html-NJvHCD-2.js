import{_ as d,r as c,o as i,c as r,a as t,b as n,d as e,w as s,f as p,e as u}from"./app-zLZrqgWi.js";const h={},_={id:"_169-多数元素",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_169-多数元素","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0169.html",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"数组",-1),g=t("code",null,"哈希表",-1),b=t("code",null,"分治",-1),y=t("code",null,"计数",-1),v=t("code",null,"排序",-1),x={href:"https://leetcode.cn/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},j=t("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},E=t("code",null,"LeetCode",-1),O=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array <code>nums</code> of size <code>n</code>, return <em>the majority element</em>.</p><p>The majority element is the element that appears more than <code>⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [3,2,3]</p><p>Output: 3</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,2,1,1,1,2,2]</p><p>Output: 2</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5 * 10^4</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><p><strong>Follow-up:</strong> Could you solve the problem in linear time and in <code>O(1)</code> space?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个大小为 <code>n</code> 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ <code>n/2</code> ⌋ 的元素。你可以假设数组是非空的，并且给定的数组总是存在众数。要求线性时间复杂度和 <code>O(1)</code> 空间复杂度。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题如果用一个哈希表作为计数器，记录每个元素出现的次数，然后寻找出现次数最多的那个元素，时间和空间复杂度都是 <code>O(N)</code>。</p><p>想要空间复杂度为 <code>O(1)</code> ,可以用栈的思路：遍历数组，如果栈为空，或者当前元素与栈顶元素相同，则入栈；否则将栈顶元素弹出。</p><p>由于数组中的众数出现次数大于 <code>n/2</code> ，所以经过不断地入栈出栈，互相消除，最终栈内留下的肯定是我们要找的众数。证明如下：</p><ul><li>当数组内只有两种元素时，由于众数的数量过半，所以不管顺序如何，经过两两对比，不一样的互相消除，最后栈内留下的都是众数；</li><li>当数组内有两种以上的元素时，除众数以外的其他元素还会互相对比消除，所以用于消耗众数的元素数量更少，所以栈内留下的元素就是众数。</li></ul><p>实际上我们并不需要真的实现一个栈，只需要记录栈顶元素 <code>major</code> （栈内所有元素一定相同，遇到不相同的不会入栈），以及元素的个数 <code>count</code> ，因此只需要两个变量就够了。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中<code>n</code> 表示 <code>nums</code> 的长度，需要遍历数组一遍。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，用了常数个变量存储中间状态。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">majorityElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> major<span class="token punctuation">;</span>
	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> item <span class="token operator">===</span> major<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			count<span class="token operator">++</span><span class="token punctuation">;</span>
			major <span class="token operator">=</span> item<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			count<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> major<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),I=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),q=t("td",{style:{"text-align":"center"}},"229",-1),C={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/majority-element-ii",target:"_blank",rel:"noopener noreferrer"},L=t("td",{style:{"text-align":"center"}},null,-1),V={style:{"text-align":"left"}},B=t("code",null,"数组",-1),M=t("code",null,"哈希表",-1),R=t("code",null,"计数",-1),T=t("code",null,"1+",-1),z={style:{"text-align":"left"}},F=t("td",{style:{"text-align":"center"}},"1150",-1),G={style:{"text-align":"left"}},S={href:"https://leetcode.com/problems/check-if-a-number-is-majority-element-in-a-sorted-array",target:"_blank",rel:"noopener noreferrer"},Y=t("td",{style:{"text-align":"center"}},null,-1),A={style:{"text-align":"left"}},D=t("code",null,"数组",-1),H=t("code",null,"二分查找",-1),J={style:{"text-align":"left"}},K=t("td",{style:{"text-align":"center"}},"2404",-1),P={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/most-frequent-even-element",target:"_blank",rel:"noopener noreferrer"},U=t("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},X=t("code",null,"数组",-1),Z=t("code",null,"哈希表",-1),$=t("code",null,"计数",-1),tt={style:{"text-align":"left"}},et=t("td",{style:{"text-align":"center"}},"2780",-1),nt={style:{"text-align":"left"}},st={href:"https://leetcode.com/problems/minimum-index-of-a-valid-split",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},null,-1),ot={style:{"text-align":"left"}},lt=t("code",null,"数组",-1),ct=t("code",null,"哈希表",-1),dt=t("code",null,"排序",-1),it={style:{"text-align":"left"}},rt=t("td",{style:{"text-align":"center"}},"3065",-1),pt={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-i",target:"_blank",rel:"noopener noreferrer"},ht=t("td",{style:{"text-align":"center"}},null,-1),_t={style:{"text-align":"left"}},mt=t("code",null,"数组",-1),ft={style:{"text-align":"left"}};function kt(gt,bt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[t("h1",_,[m,n(),t("a",f,[n("169. 多数元素"),e(o)])]),t("p",null,[n("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[k]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[b]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[y]),_:1}),n(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[v]),_:1}),n("  🔗 "),t("a",x,[j,e(o)]),n(),t("a",w,[E,e(o)])]),O,p(" prettier-ignore "),t("table",null,[I,t("tbody",null,[t("tr",null,[q,t("td",C,[t("a",N,[n("多数元素 II"),e(o)])]),L,t("td",V,[e(a,{to:"/tag/array.html"},{default:s(()=>[B]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[M]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[R]),_:1}),n(),T]),t("td",z,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[F,t("td",G,[t("a",S,[n("检查一个数是否在数组中占绝大多数 🔒"),e(o)])]),Y,t("td",A,[e(a,{to:"/tag/array.html"},{default:s(()=>[D]),_:1}),n(),e(a,{to:"/tag/binary-search.html"},{default:s(()=>[H]),_:1})]),t("td",J,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[K,t("td",P,[t("a",Q,[n("出现最频繁的偶数元素"),e(o)])]),U,t("td",W,[e(a,{to:"/tag/array.html"},{default:s(()=>[X]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[Z]),_:1}),n(),e(a,{to:"/tag/counting.html"},{default:s(()=>[$]),_:1})]),t("td",tt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[et,t("td",nt,[t("a",st,[n("合法分割的最小下标"),e(o)])]),at,t("td",ot,[e(a,{to:"/tag/array.html"},{default:s(()=>[lt]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[ct]),_:1}),n(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[dt]),_:1})]),t("td",it,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[rt,t("td",pt,[t("a",ut,[n("超过阈值的最少操作数 I"),e(o)])]),ht,t("td",_t,[e(a,{to:"/tag/array.html"},{default:s(()=>[mt]),_:1})]),t("td",ft,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const vt=d(h,[["render",kt],["__file","0169.html.vue"]]);export{vt as default};
