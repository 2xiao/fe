import{_ as a,r as _,o as c,c as i,a as t,d as e,w as o,b as l,f as r}from"./app-Byvqzvgg.js";const h={},u=t("h1",{id:"树状数组",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#树状数组","aria-hidden":"true"},"#"),l(" 树状数组")],-1),f=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),m=t("code",null,"数组",-1),y=t("code",null,"矩阵",-1),x=t("code",null,"链表",-1),b=t("code",null,"双向链表",-1),p=t("code",null,"栈",-1),k=t("code",null,"单调栈",-1),H=t("code",null,"队列",-1),q=t("code",null,"单调队列",-1),I=t("code",null,"堆（优先队列）",-1),w=t("code",null,"哈希表",-1),M=t("code",null,"字符串",-1),v=t("code",null,"字符串匹配",-1),L=t("code",null,"树",-1),z=t("code",null,"二叉树",-1),B=t("code",null,"二叉搜索树",-1),C=t("code",null,"最小生成树",-1),N=t("code",null,"图",-1),V=t("code",null,"有序集合",-1),j=t("code",null,"拓扑排序",-1),E=t("code",null,"最短路",-1),K=t("code",null,"强连通分量",-1),R=t("code",null,"欧拉回路",-1),T=t("code",null,"双连通分量",-1),A=t("code",null,"并查集",-1),O=t("code",null,"字典树",-1),P=t("code",null,"线段树",-1),U=t("span",{class:"blue"},"树状数组",-1),D=t("code",null,"后缀数组",-1),F=t("p",null,[t("strong",null,"算法")],-1),G=t("code",null,"枚举",-1),J=t("code",null,"递归",-1),Q=t("code",null,"分治",-1),S=t("code",null,"回溯",-1),W=t("code",null,"贪心",-1),X=t("code",null,"动态规划",-1),Y=t("code",null,"排序",-1),Z=t("code",null,"桶排序",-1),$=t("code",null,"计数排序",-1),tt=t("code",null,"基数排序",-1),et=t("code",null,"归并排序",-1),lt=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),nt=t("code",null,"记忆化搜索",-1),st=t("code",null,"深度优先搜索",-1),dt=t("code",null,"广度优先搜索",-1),_t=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),it=t("code",null,"计数",-1),rt=t("code",null,"滑动窗口",-1),ht=t("code",null,"状态压缩",-1),ut=t("code",null,"哈希函数",-1),ft=t("code",null,"滚动哈希",-1),gt=t("code",null,"扫描线",-1),mt=t("p",null,[t("strong",null,"其他")],-1),yt=t("code",null,"数学",-1),xt=t("code",null,"数论",-1),bt=t("code",null,"几何",-1),pt=t("code",null,"博弈",-1),kt=t("code",null,"模拟",-1),Ht=t("code",null,"组合数学",-1),qt=t("code",null,"随机化",-1),It=t("code",null,"概率与统计",-1),wt=t("code",null,"水塘抽样",-1),Mt=t("code",null,"拒绝采样",-1),vt=t("code",null,"数据库",-1),Lt=t("code",null,"设计",-1),zt=t("code",null,"数据流",-1),Bt=t("code",null,"脑筋急转弯",-1),Ct=t("code",null,"交互",-1),Nt=t("code",null,"迭代器",-1),Vt=t("code",null,"多线程",-1),jt=t("hr",null,null,-1),Et=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Kt=t("td",{style:{"text-align":"center"}},"218",-1),Rt={style:{"text-align":"left"}},Tt={href:"https://leetcode.com/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},At=t("td",{style:{"text-align":"center"}},null,-1),Ot={style:{"text-align":"left"}},Pt=t("code",null,"树状数组",-1),Ut=t("code",null,"线段树",-1),Dt=t("code",null,"数组",-1),Ft=t("code",null,"4+",-1),Gt={style:{"text-align":"left"}},Jt=t("td",{style:{"text-align":"center"}},"307",-1),Qt={style:{"text-align":"left"}},St={href:"https://leetcode.com/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},Wt={style:{"text-align":"center"}},Xt={style:{"text-align":"left"}},Yt=t("code",null,"设计",-1),Zt=t("code",null,"树状数组",-1),$t=t("code",null,"线段树",-1),te=t("code",null,"1+",-1),ee={style:{"text-align":"left"}},le=t("td",{style:{"text-align":"center"}},"308",-1),oe={style:{"text-align":"left"}},ne={href:"https://leetcode.com/problems/range-sum-query-2d-mutable",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"center"}},null,-1),de={style:{"text-align":"left"}},_e=t("code",null,"设计",-1),ae=t("code",null,"树状数组",-1),ce=t("code",null,"线段树",-1),ie=t("code",null,"2+",-1),re={style:{"text-align":"left"}},he=t("td",{style:{"text-align":"center"}},"315",-1),ue={style:{"text-align":"left"}},fe={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},ge=t("td",{style:{"text-align":"center"}},null,-1),me={style:{"text-align":"left"}},ye=t("code",null,"树状数组",-1),xe=t("code",null,"线段树",-1),be=t("code",null,"数组",-1),pe=t("code",null,"4+",-1),ke={style:{"text-align":"left"}},He=t("td",{style:{"text-align":"center"}},"327",-1),qe={style:{"text-align":"left"}},Ie={href:"https://leetcode.com/problems/count-of-range-sum",target:"_blank",rel:"noopener noreferrer"},we=t("td",{style:{"text-align":"center"}},null,-1),Me={style:{"text-align":"left"}},ve=t("code",null,"树状数组",-1),Le=t("code",null,"线段树",-1),ze=t("code",null,"数组",-1),Be=t("code",null,"4+",-1),Ce={style:{"text-align":"left"}},Ne=t("td",{style:{"text-align":"center"}},"406",-1),Ve={style:{"text-align":"left"}},je={href:"https://leetcode.com/problems/queue-reconstruction-by-height",target:"_blank",rel:"noopener noreferrer"},Ee=t("td",{style:{"text-align":"center"}},null,-1),Ke={style:{"text-align":"left"}},Re=t("code",null,"树状数组",-1),Te=t("code",null,"线段树",-1),Ae=t("code",null,"数组",-1),Oe=t("code",null,"1+",-1),Pe={style:{"text-align":"left"}},Ue=t("td",{style:{"text-align":"center"}},"493",-1),De={style:{"text-align":"left"}},Fe={href:"https://leetcode.com/problems/reverse-pairs",target:"_blank",rel:"noopener noreferrer"},Ge=t("td",{style:{"text-align":"center"}},null,-1),Je={style:{"text-align":"left"}},Qe=t("code",null,"树状数组",-1),Se=t("code",null,"线段树",-1),We=t("code",null,"数组",-1),Xe=t("code",null,"4+",-1),Ye={style:{"text-align":"left"}},Ze=t("td",{style:{"text-align":"center"}},"673",-1),$e={style:{"text-align":"left"}},tl={href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},el=t("td",{style:{"text-align":"center"}},null,-1),ll={style:{"text-align":"left"}},ol=t("code",null,"树状数组",-1),nl=t("code",null,"线段树",-1),sl=t("code",null,"数组",-1),dl=t("code",null,"1+",-1),_l={style:{"text-align":"left"}},al=t("td",{style:{"text-align":"center"}},"683",-1),cl={style:{"text-align":"left"}},il={href:"https://leetcode.com/problems/k-empty-slots",target:"_blank",rel:"noopener noreferrer"},rl=t("td",{style:{"text-align":"center"}},null,-1),hl={style:{"text-align":"left"}},ul=t("code",null,"树状数组",-1),fl=t("code",null,"线段树",-1),gl=t("code",null,"队列",-1),ml=t("code",null,"5+",-1),yl={style:{"text-align":"left"}},xl=t("td",{style:{"text-align":"center"}},"1157",-1),bl={style:{"text-align":"left"}},pl={href:"https://leetcode.com/problems/online-majority-element-in-subarray",target:"_blank",rel:"noopener noreferrer"},kl=t("td",{style:{"text-align":"center"}},null,-1),Hl={style:{"text-align":"left"}},ql=t("code",null,"设计",-1),Il=t("code",null,"树状数组",-1),wl=t("code",null,"线段树",-1),Ml=t("code",null,"2+",-1),vl={style:{"text-align":"left"}},Ll=t("td",{style:{"text-align":"center"}},"1395",-1),zl={style:{"text-align":"left"}},Bl={href:"https://leetcode.com/problems/count-number-of-teams",target:"_blank",rel:"noopener noreferrer"},Cl=t("td",{style:{"text-align":"center"}},null,-1),Nl={style:{"text-align":"left"}},Vl=t("code",null,"树状数组",-1),jl=t("code",null,"线段树",-1),El=t("code",null,"数组",-1),Kl=t("code",null,"1+",-1),Rl={style:{"text-align":"left"}},Tl=t("td",{style:{"text-align":"center"}},"1409",-1),Al={style:{"text-align":"left"}},Ol={href:"https://leetcode.com/problems/queries-on-a-permutation-with-key",target:"_blank",rel:"noopener noreferrer"},Pl=t("td",{style:{"text-align":"center"}},null,-1),Ul={style:{"text-align":"left"}},Dl=t("code",null,"树状数组",-1),Fl=t("code",null,"数组",-1),Gl=t("code",null,"模拟",-1),Jl={style:{"text-align":"left"}},Ql=t("td",{style:{"text-align":"center"}},"1505",-1),Sl={style:{"text-align":"left"}},Wl={href:"https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",target:"_blank",rel:"noopener noreferrer"},Xl=t("td",{style:{"text-align":"center"}},null,-1),Yl={style:{"text-align":"left"}},Zl=t("code",null,"贪心",-1),$l=t("code",null,"树状数组",-1),to=t("code",null,"线段树",-1),eo=t("code",null,"1+",-1),lo={style:{"text-align":"left"}},oo=t("td",{style:{"text-align":"center"}},"1649",-1),no={style:{"text-align":"left"}},so={href:"https://leetcode.com/problems/create-sorted-array-through-instructions",target:"_blank",rel:"noopener noreferrer"},_o=t("td",{style:{"text-align":"center"}},null,-1),ao={style:{"text-align":"left"}},co=t("code",null,"树状数组",-1),io=t("code",null,"线段树",-1),ro=t("code",null,"数组",-1),ho=t("code",null,"4+",-1),uo={style:{"text-align":"left"}},fo=t("td",{style:{"text-align":"center"}},"1756",-1),go={style:{"text-align":"left"}},mo={href:"https://leetcode.com/problems/design-most-recently-used-queue",target:"_blank",rel:"noopener noreferrer"},yo=t("td",{style:{"text-align":"center"}},null,-1),xo={style:{"text-align":"left"}},bo=t("code",null,"栈",-1),po=t("code",null,"设计",-1),ko=t("code",null,"树状数组",-1),Ho=t("code",null,"3+",-1),qo={style:{"text-align":"left"}},Io=t("td",{style:{"text-align":"center"}},"1964",-1),wo={style:{"text-align":"left"}},Mo={href:"https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position",target:"_blank",rel:"noopener noreferrer"},vo=t("td",{style:{"text-align":"center"}},null,-1),Lo={style:{"text-align":"left"}},zo=t("code",null,"树状数组",-1),Bo=t("code",null,"数组",-1),Co=t("code",null,"二分查找",-1),No={style:{"text-align":"left"}},Vo=t("td",{style:{"text-align":"center"}},"2031",-1),jo={style:{"text-align":"left"}},Eo={href:"https://leetcode.com/problems/count-subarrays-with-more-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},Ko=t("td",{style:{"text-align":"center"}},null,-1),Ro={style:{"text-align":"left"}},To=t("code",null,"树状数组",-1),Ao=t("code",null,"线段树",-1),Oo=t("code",null,"数组",-1),Po=t("code",null,"4+",-1),Uo={style:{"text-align":"left"}},Do=t("td",{style:{"text-align":"center"}},"2179",-1),Fo={style:{"text-align":"left"}},Go={href:"https://leetcode.com/problems/count-good-triplets-in-an-array",target:"_blank",rel:"noopener noreferrer"},Jo=t("td",{style:{"text-align":"center"}},null,-1),Qo={style:{"text-align":"left"}},So=t("code",null,"树状数组",-1),Wo=t("code",null,"线段树",-1),Xo=t("code",null,"数组",-1),Yo=t("code",null,"4+",-1),Zo={style:{"text-align":"left"}},$o=t("td",{style:{"text-align":"center"}},"2193",-1),tn={style:{"text-align":"left"}},en={href:"https://leetcode.com/problems/minimum-number-of-moves-to-make-palindrome",target:"_blank",rel:"noopener noreferrer"},ln=t("td",{style:{"text-align":"center"}},null,-1),on={style:{"text-align":"left"}},nn=t("code",null,"贪心",-1),sn=t("code",null,"树状数组",-1),dn=t("code",null,"双指针",-1),_n=t("code",null,"1+",-1),an={style:{"text-align":"left"}},cn=t("td",{style:{"text-align":"center"}},"2250",-1),rn={style:{"text-align":"left"}},hn={href:"https://leetcode.com/problems/count-number-of-rectangles-containing-each-point",target:"_blank",rel:"noopener noreferrer"},un=t("td",{style:{"text-align":"center"}},null,-1),fn={style:{"text-align":"left"}},gn=t("code",null,"树状数组",-1),mn=t("code",null,"数组",-1),yn=t("code",null,"二分查找",-1),xn=t("code",null,"1+",-1),bn={style:{"text-align":"left"}},pn=t("td",{style:{"text-align":"center"}},"2286",-1),kn={style:{"text-align":"left"}},Hn={href:"https://leetcode.com/problems/booking-concert-tickets-in-groups",target:"_blank",rel:"noopener noreferrer"},qn=t("td",{style:{"text-align":"center"}},null,-1),In={style:{"text-align":"left"}},wn=t("code",null,"设计",-1),Mn=t("code",null,"树状数组",-1),vn=t("code",null,"线段树",-1),Ln=t("code",null,"1+",-1),zn={style:{"text-align":"left"}},Bn=t("td",{style:{"text-align":"center"}},"2407",-1),Cn={style:{"text-align":"left"}},Nn={href:"https://leetcode.com/problems/longest-increasing-subsequence-ii",target:"_blank",rel:"noopener noreferrer"},Vn=t("td",{style:{"text-align":"center"}},null,-1),jn={style:{"text-align":"left"}},En=t("code",null,"树状数组",-1),Kn=t("code",null,"线段树",-1),Rn=t("code",null,"队列",-1),Tn=t("code",null,"4+",-1),An={style:{"text-align":"left"}},On=t("td",{style:{"text-align":"center"}},"2424",-1),Pn={style:{"text-align":"left"}},Un={href:"https://leetcode.com/problems/longest-uploaded-prefix",target:"_blank",rel:"noopener noreferrer"},Dn=t("td",{style:{"text-align":"center"}},null,-1),Fn={style:{"text-align":"left"}},Gn=t("code",null,"并查集",-1),Jn=t("code",null,"设计",-1),Qn=t("code",null,"树状数组",-1),Sn=t("code",null,"4+",-1),Wn={style:{"text-align":"left"}},Xn=t("td",{style:{"text-align":"center"}},"2426",-1),Yn={style:{"text-align":"left"}},Zn={href:"https://leetcode.com/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},$n=t("td",{style:{"text-align":"center"}},null,-1),ts={style:{"text-align":"left"}},es=t("code",null,"树状数组",-1),ls=t("code",null,"线段树",-1),os=t("code",null,"数组",-1),ns=t("code",null,"4+",-1),ss={style:{"text-align":"left"}},ds=t("td",{style:{"text-align":"center"}},"2519",-1),_s={style:{"text-align":"left"}},as={href:"https://leetcode.com/problems/count-the-number-of-k-big-indices",target:"_blank",rel:"noopener noreferrer"},cs=t("td",{style:{"text-align":"center"}},null,-1),is={style:{"text-align":"left"}},rs=t("code",null,"树状数组",-1),hs=t("code",null,"线段树",-1),us=t("code",null,"数组",-1),fs=t("code",null,"4+",-1),gs={style:{"text-align":"left"}},ms=t("td",{style:{"text-align":"center"}},"2552",-1),ys={style:{"text-align":"left"}},xs={href:"https://leetcode.com/problems/count-increasing-quadruplets",target:"_blank",rel:"noopener noreferrer"},bs=t("td",{style:{"text-align":"center"}},null,-1),ps={style:{"text-align":"left"}},ks=t("code",null,"树状数组",-1),Hs=t("code",null,"数组",-1),qs=t("code",null,"动态规划",-1),Is=t("code",null,"2+",-1),ws={style:{"text-align":"left"}},Ms=t("td",{style:{"text-align":"center"}},"2659",-1),vs={style:{"text-align":"left"}},Ls={href:"https://leetcode.com/problems/make-array-empty",target:"_blank",rel:"noopener noreferrer"},zs=t("td",{style:{"text-align":"center"}},null,-1),Bs={style:{"text-align":"left"}},Cs=t("code",null,"贪心",-1),Ns=t("code",null,"树状数组",-1),Vs=t("code",null,"线段树",-1),js=t("code",null,"4+",-1),Es={style:{"text-align":"left"}},Ks=t("td",{style:{"text-align":"center"}},"2736",-1),Rs={style:{"text-align":"left"}},Ts={href:"https://leetcode.com/problems/maximum-sum-queries",target:"_blank",rel:"noopener noreferrer"},As=t("td",{style:{"text-align":"center"}},null,-1),Os={style:{"text-align":"left"}},Ps=t("code",null,"栈",-1),Us=t("code",null,"树状数组",-1),Ds=t("code",null,"线段树",-1),Fs=t("code",null,"4+",-1),Gs={style:{"text-align":"left"}},Js=t("td",{style:{"text-align":"center"}},"2907",-1),Qs={style:{"text-align":"left"}},Ss={href:"https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-i",target:"_blank",rel:"noopener noreferrer"},Ws=t("td",{style:{"text-align":"center"}},null,-1),Xs={style:{"text-align":"left"}},Ys=t("code",null,"树状数组",-1),Zs=t("code",null,"线段树",-1),$s=t("code",null,"数组",-1),td={style:{"text-align":"left"}},ed=t("td",{style:{"text-align":"center"}},"2916",-1),ld={style:{"text-align":"left"}},od={href:"https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-ii",target:"_blank",rel:"noopener noreferrer"},nd=t("td",{style:{"text-align":"center"}},null,-1),sd={style:{"text-align":"left"}},dd=t("code",null,"树状数组",-1),_d=t("code",null,"线段树",-1),ad=t("code",null,"数组",-1),cd=t("code",null,"1+",-1),id={style:{"text-align":"left"}},rd=t("td",{style:{"text-align":"center"}},"2921",-1),hd={style:{"text-align":"left"}},ud={href:"https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-ii",target:"_blank",rel:"noopener noreferrer"},fd=t("td",{style:{"text-align":"center"}},null,-1),gd={style:{"text-align":"left"}},md=t("code",null,"树状数组",-1),yd=t("code",null,"线段树",-1),xd=t("code",null,"数组",-1),bd={style:{"text-align":"left"}},pd=t("td",{style:{"text-align":"center"}},"2926",-1),kd={style:{"text-align":"left"}},Hd={href:"https://leetcode.com/problems/maximum-balanced-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},qd=t("td",{style:{"text-align":"center"}},null,-1),Id={style:{"text-align":"left"}},wd=t("code",null,"树状数组",-1),Md=t("code",null,"线段树",-1),vd=t("code",null,"数组",-1),Ld=t("code",null,"2+",-1),zd={style:{"text-align":"left"}},Bd=t("td",{style:{"text-align":"center"}},"2940",-1),Cd={style:{"text-align":"left"}},Nd={href:"https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet",target:"_blank",rel:"noopener noreferrer"},Vd=t("td",{style:{"text-align":"center"}},null,-1),jd={style:{"text-align":"left"}},Ed=t("code",null,"栈",-1),Kd=t("code",null,"树状数组",-1),Rd=t("code",null,"线段树",-1),Td=t("code",null,"4+",-1),Ad={style:{"text-align":"left"}},Od=t("td",{style:{"text-align":"center"}},"3009",-1),Pd={style:{"text-align":"left"}},Ud={href:"https://leetcode.com/problems/maximum-number-of-intersections-on-the-chart",target:"_blank",rel:"noopener noreferrer"},Dd=t("td",{style:{"text-align":"center"}},null,-1),Fd={style:{"text-align":"left"}},Gd=t("code",null,"树状数组",-1),Jd=t("code",null,"几何",-1),Qd=t("code",null,"数组",-1),Sd=t("code",null,"1+",-1),Wd={style:{"text-align":"left"}},Xd=t("td",{style:{"text-align":"center"}},"3072",-1),Yd={style:{"text-align":"left"}},Zd={href:"https://leetcode.com/problems/distribute-elements-into-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},$d=t("td",{style:{"text-align":"center"}},null,-1),t_={style:{"text-align":"left"}},e_=t("code",null,"树状数组",-1),l_=t("code",null,"线段树",-1),o_=t("code",null,"数组",-1),n_=t("code",null,"1+",-1),s_={style:{"text-align":"left"}},d_=t("td",{style:{"text-align":"center"}},"3109",-1),__={style:{"text-align":"left"}},a_={href:"https://leetcode.com/problems/find-the-index-of-permutation",target:"_blank",rel:"noopener noreferrer"},c_=t("td",{style:{"text-align":"center"}},null,-1),i_={style:{"text-align":"left"}},r_=t("code",null,"树状数组",-1),h_=t("code",null,"线段树",-1),u_=t("code",null,"数组",-1),f_=t("code",null,"4+",-1),g_={style:{"text-align":"left"}},m_=t("td",{style:{"text-align":"center"}},"3161",-1),y_={style:{"text-align":"left"}},x_={href:"https://leetcode.com/problems/block-placement-queries",target:"_blank",rel:"noopener noreferrer"},b_=t("td",{style:{"text-align":"center"}},null,-1),p_={style:{"text-align":"left"}},k_=t("code",null,"树状数组",-1),H_=t("code",null,"线段树",-1),q_=t("code",null,"数组",-1),I_=t("code",null,"1+",-1),w_={style:{"text-align":"left"}},M_=t("td",{style:{"text-align":"center"}},"3187",-1),v_={style:{"text-align":"left"}},L_={href:"https://leetcode.com/problems/peaks-in-array",target:"_blank",rel:"noopener noreferrer"},z_=t("td",{style:{"text-align":"center"}},null,-1),B_={style:{"text-align":"left"}},C_=t("code",null,"树状数组",-1),N_=t("code",null,"线段树",-1),V_=t("code",null,"数组",-1),j_={style:{"text-align":"left"}},E_=t("td",{style:{"text-align":"center"}},"3245",-1),K_={style:{"text-align":"left"}},R_={href:"https://leetcode.com/problems/alternating-groups-iii",target:"_blank",rel:"noopener noreferrer"},T_=t("td",{style:{"text-align":"center"}},null,-1),A_={style:{"text-align":"left"}},O_=t("code",null,"树状数组",-1),P_=t("code",null,"数组",-1),U_={style:{"text-align":"left"}},D_=t("td",{style:{"text-align":"center"}},"LCP 05",-1),F_={style:{"text-align":"left"}},G_={href:"https://leetcode.cn/problems/coin-bonus",target:"_blank",rel:"noopener noreferrer"},J_=t("td",{style:{"text-align":"center"}},null,-1),Q_={style:{"text-align":"left"}},S_=t("code",null,"树状数组",-1),W_=t("code",null,"线段树",-1),X_=t("code",null,"数组",-1),Y_={style:{"text-align":"left"}},Z_=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),$_={style:{"text-align":"left"}},ta={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},ea=t("td",{style:{"text-align":"center"}},null,-1),la={style:{"text-align":"left"}},oa=t("code",null,"树状数组",-1),na=t("code",null,"线段树",-1),sa=t("code",null,"数组",-1),da=t("code",null,"4+",-1),_a={style:{"text-align":"left"}},aa=t("td",{style:{"text-align":"center"}},"面试题 10.10",-1),ca={style:{"text-align":"left"}},ia={href:"https://leetcode.cn/problems/rank-from-stream-lcci",target:"_blank",rel:"noopener noreferrer"},ra=t("td",{style:{"text-align":"center"}},null,-1),ha={style:{"text-align":"left"}},ua=t("code",null,"设计",-1),fa=t("code",null,"树状数组",-1),ga=t("code",null,"二分查找",-1),ma=t("code",null,"1+",-1),ya={style:{"text-align":"left"}};function xa(ba,pa){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return c(),i("div",null,[u,t("details",null,[f,g,t("p",null,[e(n,{to:"/tag/array.html"},{default:o(()=>[m]),_:1}),l(),e(n,{to:"/tag/matrix.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/tag/linked-list.html"},{default:o(()=>[x]),_:1}),l(),e(n,{to:"/tag/doubly-linked-list.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/tag/stack.html"},{default:o(()=>[p]),_:1}),l(),e(n,{to:"/tag/monotonic-stack.html"},{default:o(()=>[k]),_:1}),l(),e(n,{to:"/tag/queue.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/tag/monotonic-queue.html"},{default:o(()=>[q]),_:1}),l(),e(n,{to:"/tag/heap-priority-queue.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[M]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/tag/tree.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/tag/binary-tree.html"},{default:o(()=>[z]),_:1}),l(),e(n,{to:"/tag/binary-search-tree.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/tag/minimum-spanning-tree.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/tag/graph.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/tag/ordered-set.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/tag/topological-sort.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/tag/shortest-path.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/tag/strongly-connected-component.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/tag/eulerian-circuit.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/tag/biconnected-component.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/tag/union-find.html"},{default:o(()=>[A]),_:1}),l(),e(n,{to:"/tag/trie.html"},{default:o(()=>[O]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[P]),_:1}),l(),U,l(),e(n,{to:"/tag/suffix-array.html"},{default:o(()=>[D]),_:1})]),F,t("p",null,[e(n,{to:"/tag/enumeration.html"},{default:o(()=>[G]),_:1}),l(),e(n,{to:"/tag/recursion.html"},{default:o(()=>[J]),_:1}),l(),e(n,{to:"/tag/divide-and-conquer.html"},{default:o(()=>[Q]),_:1}),l(),e(n,{to:"/tag/backtracking.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/tag/greedy.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/tag/dynamic-programming.html"},{default:o(()=>[X]),_:1}),l(),e(n,{to:"/tag/sorting.html"},{default:o(()=>[Y]),_:1}),l(),e(n,{to:"/tag/bucket-sort.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/tag/counting-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/tag/radix-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/tag/merge-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/tag/quickselect.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/tag/memoization.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/tag/depth-first-search.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/tag/breadth-first-search.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/tag/two-pointers.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/tag/bit-manipulation.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/tag/prefix-sum.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/tag/counting.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/tag/sliding-window.html"},{default:o(()=>[rt]),_:1}),l(),e(n,{to:"/tag/bitmask.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[ut]),_:1}),l(),e(n,{to:"/tag/rolling-hash.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/tag/line-sweep.html"},{default:o(()=>[gt]),_:1})]),mt,t("p",null,[e(n,{to:"/tag/math.html"},{default:o(()=>[yt]),_:1}),l(),e(n,{to:"/tag/number-theory.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/tag/geometry.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/tag/game-theory.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/tag/simulation.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/tag/combinatorics.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/tag/randomized.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/tag/probability-and-statistics.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/tag/reservoir-sampling.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/tag/rejection-sampling.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/tag/database.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/tag/design.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/tag/data-stream.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/tag/brainteaser.html"},{default:o(()=>[Bt]),_:1}),l(),e(n,{to:"/tag/interactive.html"},{default:o(()=>[Ct]),_:1}),l(),e(n,{to:"/tag/iterator.html"},{default:o(()=>[Nt]),_:1}),l(),e(n,{to:"/tag/concurrency.html"},{default:o(()=>[Vt]),_:1})])]),jt,r(" prettier-ignore "),t("table",null,[Et,t("tbody",null,[t("tr",null,[Kt,t("td",Rt,[t("a",Tt,[l("天际线问题"),e(s)])]),At,t("td",Ot,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Pt]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Ut]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Dt]),_:1}),l(),Ft]),t("td",Gt,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Jt,t("td",Qt,[t("a",St,[l("区域和检索 - 数组可修改"),e(s)])]),t("td",Wt,[e(n,{to:"/problem/0307.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Xt,[e(n,{to:"/tag/design.html"},{default:o(()=>[Yt]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Zt]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[$t]),_:1}),l(),te]),t("td",ee,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[le,t("td",oe,[t("a",ne,[l("二维区域和检索 - 矩阵可修改"),e(s)])]),se,t("td",de,[e(n,{to:"/tag/design.html"},{default:o(()=>[_e]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[ae]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[ce]),_:1}),l(),ie]),t("td",re,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[he,t("td",ue,[t("a",fe,[l("计算右侧小于当前元素的个数"),e(s)])]),ge,t("td",me,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[ye]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[xe]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[be]),_:1}),l(),pe]),t("td",ke,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[He,t("td",qe,[t("a",Ie,[l("区间和的个数"),e(s)])]),we,t("td",Me,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[ve]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Le]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[ze]),_:1}),l(),Be]),t("td",Ce,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ne,t("td",Ve,[t("a",je,[l("根据身高重建队列"),e(s)])]),Ee,t("td",Ke,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Re]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Te]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Ae]),_:1}),l(),Oe]),t("td",Pe,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ue,t("td",De,[t("a",Fe,[l("翻转对"),e(s)])]),Ge,t("td",Je,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Qe]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Se]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[We]),_:1}),l(),Xe]),t("td",Ye,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ze,t("td",$e,[t("a",tl,[l("最长递增子序列的个数"),e(s)])]),el,t("td",ll,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[ol]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[nl]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[sl]),_:1}),l(),dl]),t("td",_l,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[al,t("td",cl,[t("a",il,[l("K 个关闭的灯泡"),e(s)])]),rl,t("td",hl,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[ul]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[fl]),_:1}),l(),e(n,{to:"/tag/queue.html"},{default:o(()=>[gl]),_:1}),l(),ml]),t("td",yl,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[xl,t("td",bl,[t("a",pl,[l("子数组中占绝大多数的元素"),e(s)])]),kl,t("td",Hl,[e(n,{to:"/tag/design.html"},{default:o(()=>[ql]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Il]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[wl]),_:1}),l(),Ml]),t("td",vl,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ll,t("td",zl,[t("a",Bl,[l("统计作战单位数"),e(s)])]),Cl,t("td",Nl,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Vl]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[jl]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[El]),_:1}),l(),Kl]),t("td",Rl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Tl,t("td",Al,[t("a",Ol,[l("查询带键的排列"),e(s)])]),Pl,t("td",Ul,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Dl]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Fl]),_:1}),l(),e(n,{to:"/tag/simulation.html"},{default:o(()=>[Gl]),_:1})]),t("td",Jl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ql,t("td",Sl,[t("a",Wl,[l("最多 K 次交换相邻数位后得到的最小整数"),e(s)])]),Xl,t("td",Yl,[e(n,{to:"/tag/greedy.html"},{default:o(()=>[Zl]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[$l]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[to]),_:1}),l(),eo]),t("td",lo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[oo,t("td",no,[t("a",so,[l("通过指令创建有序数组"),e(s)])]),_o,t("td",ao,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[co]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[io]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[ro]),_:1}),l(),ho]),t("td",uo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[fo,t("td",go,[t("a",mo,[l("设计最近使用（MRU）队列"),e(s)])]),yo,t("td",xo,[e(n,{to:"/tag/stack.html"},{default:o(()=>[bo]),_:1}),l(),e(n,{to:"/tag/design.html"},{default:o(()=>[po]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[ko]),_:1}),l(),Ho]),t("td",qo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Io,t("td",wo,[t("a",Mo,[l("找出到每个位置为止最长的有效障碍赛跑路线"),e(s)])]),vo,t("td",Lo,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[zo]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Bo]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[Co]),_:1})]),t("td",No,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Vo,t("td",jo,[t("a",Eo,[l("1 比 0 多的子数组个数"),e(s)])]),Ko,t("td",Ro,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[To]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Ao]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Oo]),_:1}),l(),Po]),t("td",Uo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Do,t("td",Fo,[t("a",Go,[l("统计数组中好三元组数目"),e(s)])]),Jo,t("td",Qo,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[So]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Wo]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Xo]),_:1}),l(),Yo]),t("td",Zo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[$o,t("td",tn,[t("a",en,[l("得到回文串的最少操作次数"),e(s)])]),ln,t("td",on,[e(n,{to:"/tag/greedy.html"},{default:o(()=>[nn]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[sn]),_:1}),l(),e(n,{to:"/tag/two-pointers.html"},{default:o(()=>[dn]),_:1}),l(),_n]),t("td",an,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[cn,t("td",rn,[t("a",hn,[l("统计包含每个点的矩形数目"),e(s)])]),un,t("td",fn,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[gn]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[mn]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[yn]),_:1}),l(),xn]),t("td",bn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[pn,t("td",kn,[t("a",Hn,[l("以组为单位订音乐会的门票"),e(s)])]),qn,t("td",In,[e(n,{to:"/tag/design.html"},{default:o(()=>[wn]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Mn]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[vn]),_:1}),l(),Ln]),t("td",zn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Bn,t("td",Cn,[t("a",Nn,[l("最长递增子序列 II"),e(s)])]),Vn,t("td",jn,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[En]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Kn]),_:1}),l(),e(n,{to:"/tag/queue.html"},{default:o(()=>[Rn]),_:1}),l(),Tn]),t("td",An,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[On,t("td",Pn,[t("a",Un,[l("最长上传前缀"),e(s)])]),Dn,t("td",Fn,[e(n,{to:"/tag/union-find.html"},{default:o(()=>[Gn]),_:1}),l(),e(n,{to:"/tag/design.html"},{default:o(()=>[Jn]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Qn]),_:1}),l(),Sn]),t("td",Wn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Xn,t("td",Yn,[t("a",Zn,[l("满足不等式的数对数目"),e(s)])]),$n,t("td",ts,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[es]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[ls]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[os]),_:1}),l(),ns]),t("td",ss,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ds,t("td",_s,[t("a",as,[l("统计 K-Big 索引的数量"),e(s)])]),cs,t("td",is,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[rs]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[hs]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[us]),_:1}),l(),fs]),t("td",gs,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ms,t("td",ys,[t("a",xs,[l("统计上升四元组"),e(s)])]),bs,t("td",ps,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[ks]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Hs]),_:1}),l(),e(n,{to:"/tag/dynamic-programming.html"},{default:o(()=>[qs]),_:1}),l(),Is]),t("td",ws,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ms,t("td",vs,[t("a",Ls,[l("将数组清空"),e(s)])]),zs,t("td",Bs,[e(n,{to:"/tag/greedy.html"},{default:o(()=>[Cs]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Ns]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Vs]),_:1}),l(),js]),t("td",Es,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ks,t("td",Rs,[t("a",Ts,[l("最大和查询"),e(s)])]),As,t("td",Os,[e(n,{to:"/tag/stack.html"},{default:o(()=>[Ps]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Us]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Ds]),_:1}),l(),Fs]),t("td",Gs,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Js,t("td",Qs,[t("a",Ss,[l("价格递增的最大利润三元组 I"),e(s)])]),Ws,t("td",Xs,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Ys]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Zs]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[$s]),_:1})]),t("td",td,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ed,t("td",ld,[t("a",od,[l("子数组不同元素数目的平方和 II"),e(s)])]),nd,t("td",sd,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[dd]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[_d]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[ad]),_:1}),l(),cd]),t("td",id,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[rd,t("td",hd,[t("a",ud,[l("价格递增的最大利润三元组 II"),e(s)])]),fd,t("td",gd,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[md]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[yd]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[xd]),_:1})]),t("td",bd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[pd,t("td",kd,[t("a",Hd,[l("平衡子序列的最大和"),e(s)])]),qd,t("td",Id,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[wd]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Md]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[vd]),_:1}),l(),Ld]),t("td",zd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Bd,t("td",Cd,[t("a",Nd,[l("找到 Alice 和 Bob 可以相遇的建筑"),e(s)])]),Vd,t("td",jd,[e(n,{to:"/tag/stack.html"},{default:o(()=>[Ed]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Kd]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[Rd]),_:1}),l(),Td]),t("td",Ad,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Od,t("td",Pd,[t("a",Ud,[l("折线图上的最大交点数量"),e(s)])]),Dd,t("td",Fd,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[Gd]),_:1}),l(),e(n,{to:"/tag/geometry.html"},{default:o(()=>[Jd]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Qd]),_:1}),l(),Sd]),t("td",Wd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Xd,t("td",Yd,[t("a",Zd,[l("将元素分配到两个数组中 II"),e(s)])]),$d,t("td",t_,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[e_]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[l_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[o_]),_:1}),l(),n_]),t("td",s_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[d_,t("td",__,[t("a",a_,[l("查找排列的下标"),e(s)])]),c_,t("td",i_,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[r_]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[h_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[u_]),_:1}),l(),f_]),t("td",g_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[m_,t("td",y_,[t("a",x_,[l("物块放置查询"),e(s)])]),b_,t("td",p_,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[k_]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[H_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[q_]),_:1}),l(),I_]),t("td",w_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[M_,t("td",v_,[t("a",L_,[l("数组中的峰值"),e(s)])]),z_,t("td",B_,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[C_]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[N_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[V_]),_:1})]),t("td",j_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[E_,t("td",K_,[t("a",R_,[l("交替组 III"),e(s)])]),T_,t("td",A_,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[O_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[P_]),_:1})]),t("td",U_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[D_,t("td",F_,[t("a",G_,[l("发 LeetCoin"),e(s)])]),J_,t("td",Q_,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[S_]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[W_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[X_]),_:1})]),t("td",Y_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Z_,t("td",$_,[t("a",ta,[l("数组中的逆序对"),e(s)])]),ea,t("td",la,[e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[oa]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[na]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[sa]),_:1}),l(),da]),t("td",_a,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[aa,t("td",ca,[t("a",ia,[l("数字流的秩"),e(s)])]),ra,t("td",ha,[e(n,{to:"/tag/design.html"},{default:o(()=>[ua]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[fa]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[ga]),_:1}),l(),ma]),t("td",ya,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])])])])])}const Ha=a(h,[["render",xa],["__file","binary-indexed-tree.html.vue"]]);export{Ha as default};
