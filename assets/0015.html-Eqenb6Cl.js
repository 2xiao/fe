import{_ as c,r as p,o as i,c as u,a as n,b as s,d as t,w as a,f as r,e as d}from"./app-mXo2sCT-.js";const k={},m={id:"_15-三数之和",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_15-三数之和","aria-hidden":"true"},"#",-1),h={href:"https://2xiao.github.io/leetcode-js/problem/0015.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"数组",-1),g=n("code",null,"双指针",-1),b=n("code",null,"排序",-1),v={href:"https://leetcode.cn/problems/3sum",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/3sum",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),j=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [-1,0,1,2,-1,-4]</p><p>Output: [[-1,-1,2],[-1,0,1]]</p><p>Explanation:</p><p>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.</p><p>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.</p><p>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.</p><p>The distinct triplets are [-1,0,1] and [-1,-1,2].</p><p>Notice that the order of the output and the order of the triplets does not matter.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,1,1]</p><p>Output: []</p><p>Explanation: The only possible triplet does not sum up to 0.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [0,0,0]</p><p>Output: [[0,0,0]]</p><p>Explanation: The only possible triplet sums up to 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个数组，要求在这个数组中找出 3 个数之和为 0 的所有组合。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li><p>这一题比较麻烦的一点在于，最后输出解的时候，要求输出不重复的解。</p></li><li><p>数组中同一个数字可能出现多次，同一个数字也可能使用多次，但是最后输出解的时候，不能重复。例如 <code>[-1, -1, 2]</code> 和 <code>[2, -1, -1]</code>、<code>[-1, 2, -1]</code> 这 3 个解是重复的。</p></li><li><p>这就需要排序和去重，使用对撞指针寻找三数之和为 <code>0</code> 的组合。</p></li><li><p>先对数组进行排序，<code>i</code> 从后往前扫描，这里同样需要注意数组中存在多个重复数字的问题。<code>i</code> 在循环的时候和后一个数进行比较，如果相等，<code>i</code> 继续往前移，直到移到下一个和前一个数字不同的位置。</p></li><li><p><code>j</code>，<code>k</code> 两个指针开始一前一后对撞，<code>j</code> 从数组首位开始，<code>k</code> 为 <code>i</code> 的前一个数字，由于经过排序，所以 <code>j &lt; k</code>。</p></li><li><p>对比三个数的和与 <code>target</code> 的大小，寻找三数之和为 <code>target</code> 的组合，移动指针时注意去重：</p><ul><li>小于 <code>target</code>，<code>j</code> 往后移动；</li><li>大于 <code>target</code>，<code>k</code> 往前移动；</li></ul></li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n^2)</code></p><ul><li><strong>排序</strong>：<code>nums.sort()</code> 的时间复杂度是 <code>O(n log n)</code>，其中 <code>n</code> 是数组的长度。</li><li><strong>双指针查找</strong>：对于每个固定的数 <code>nums[i]</code>，双指针查找的复杂度是 <code>O(n)</code>（即遍历剩下的数组）。</li><li><strong>循环遍历</strong>： 外层循环遍历了 <code>n</code> 个元素，每次执行双指针查找的操作，时间复杂度为 <code>O(n^2)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code>（不考虑输出结果），主要是用于存储结果和排序的空间。</p><ul><li><strong>排序操作</strong>：排序操作占用 <code>O(n)</code> 的空间。</li><li><strong>结果存储</strong>：结果数组 <code>res</code> 最多存储 <code>O(n^2)</code> 个三元组，但由于题目通常要求三元组不重复，实际存储的元素较少。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	nums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 排除 i 重复的情况</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> sum <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token comment">// 排除 j 重复的情况</span>
					<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						j<span class="token operator">++</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token comment">// 排除 k 重复的情况</span>
					<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						k<span class="token operator">--</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					j<span class="token operator">++</span><span class="token punctuation">;</span>
					k<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					j<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					k<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,20),E=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),O=n("td",{style:{"text-align":"center"}},"1",-1),I={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},q={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=n("code",null,"数组",-1),M=n("code",null,"哈希表",-1),V={style:{"text-align":"left"}},T=n("td",{style:{"text-align":"center"}},"16",-1),B={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/3sum-closest",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"center"}},G={style:{"text-align":"left"}},z=n("code",null,"数组",-1),A=n("code",null,"双指针",-1),D=n("code",null,"排序",-1),F={style:{"text-align":"left"}},H=n("td",{style:{"text-align":"center"}},"18",-1),J={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/4sum",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"center"}},Q={style:{"text-align":"left"}},U=n("code",null,"数组",-1),W=n("code",null,"双指针",-1),X=n("code",null,"排序",-1),Y={style:{"text-align":"left"}},Z=n("td",{style:{"text-align":"center"}},"259",-1),$={style:{"text-align":"left"}},nn={href:"https://leetcode.com/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},tn={style:{"text-align":"center"}},sn={style:{"text-align":"left"}},an=n("code",null,"数组",-1),en=n("code",null,"双指针",-1),on=n("code",null,"二分查找",-1),ln=n("code",null,"1+",-1),pn={style:{"text-align":"left"}},cn=n("td",{style:{"text-align":"center"}},"2367",-1),un={style:{"text-align":"left"}},rn={href:"https://leetcode.com/problems/number-of-arithmetic-triplets",target:"_blank",rel:"noopener noreferrer"},dn=n("td",{style:{"text-align":"center"}},null,-1),kn={style:{"text-align":"left"}},mn=n("code",null,"数组",-1),_n=n("code",null,"哈希表",-1),hn=n("code",null,"双指针",-1),fn=n("code",null,"1+",-1),gn={style:{"text-align":"left"}},bn=n("td",{style:{"text-align":"center"}},"2908",-1),vn={style:{"text-align":"left"}},yn={href:"https://leetcode.com/problems/minimum-sum-of-mountain-triplets-i",target:"_blank",rel:"noopener noreferrer"},xn=n("td",{style:{"text-align":"center"}},null,-1),wn={style:{"text-align":"left"}},jn=n("code",null,"数组",-1),En={style:{"text-align":"left"}},On=n("td",{style:{"text-align":"center"}},"2909",-1),In={style:{"text-align":"left"}},Nn={href:"https://leetcode.com/problems/minimum-sum-of-mountain-triplets-ii",target:"_blank",rel:"noopener noreferrer"},qn=n("td",{style:{"text-align":"center"}},null,-1),Cn={style:{"text-align":"left"}},Ln=n("code",null,"数组",-1),Mn={style:{"text-align":"left"}};function Vn(Tn,Bn){const o=p("ExternalLinkIcon"),l=p("font"),e=p("RouterLink");return i(),u("div",null,[n("h1",m,[_,s(),n("a",h,[s("15. 三数之和"),t(o)])]),n("p",null,[s("🟠 "),t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1}),s("  🔖  "),t(e,{to:"/tag/array.html"},{default:a(()=>[f]),_:1}),s(),t(e,{to:"/tag/two-pointers.html"},{default:a(()=>[g]),_:1}),s(),t(e,{to:"/tag/sorting.html"},{default:a(()=>[b]),_:1}),s("  🔗 "),n("a",v,[y,t(o)]),s(),n("a",x,[w,t(o)])]),j,r(" prettier-ignore "),n("table",null,[E,n("tbody",null,[n("tr",null,[O,n("td",I,[n("a",N,[s("两数之和"),t(o)])]),n("td",q,[t(e,{to:"/problem/0001.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",C,[t(e,{to:"/tag/array.html"},{default:a(()=>[L]),_:1}),s(),t(e,{to:"/tag/hash-table.html"},{default:a(()=>[M]),_:1})]),n("td",V,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})])]),n("tr",null,[T,n("td",B,[n("a",R,[s("最接近的三数之和"),t(o)])]),n("td",S,[t(e,{to:"/problem/0016.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",G,[t(e,{to:"/tag/array.html"},{default:a(()=>[z]),_:1}),s(),t(e,{to:"/tag/two-pointers.html"},{default:a(()=>[A]),_:1}),s(),t(e,{to:"/tag/sorting.html"},{default:a(()=>[D]),_:1})]),n("td",F,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[H,n("td",J,[n("a",K,[s("四数之和"),t(o)])]),n("td",P,[t(e,{to:"/problem/0018.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Q,[t(e,{to:"/tag/array.html"},{default:a(()=>[U]),_:1}),s(),t(e,{to:"/tag/two-pointers.html"},{default:a(()=>[W]),_:1}),s(),t(e,{to:"/tag/sorting.html"},{default:a(()=>[X]),_:1})]),n("td",Y,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[Z,n("td",$,[n("a",nn,[s("较小的三数之和 🔒"),t(o)])]),n("td",tn,[t(e,{to:"/problem/0259.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",sn,[t(e,{to:"/tag/array.html"},{default:a(()=>[an]),_:1}),s(),t(e,{to:"/tag/two-pointers.html"},{default:a(()=>[en]),_:1}),s(),t(e,{to:"/tag/binary-search.html"},{default:a(()=>[on]),_:1}),s(),ln]),n("td",pn,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])]),n("tr",null,[cn,n("td",un,[n("a",rn,[s("等差三元组的数目"),t(o)])]),dn,n("td",kn,[t(e,{to:"/tag/array.html"},{default:a(()=>[mn]),_:1}),s(),t(e,{to:"/tag/hash-table.html"},{default:a(()=>[_n]),_:1}),s(),t(e,{to:"/tag/two-pointers.html"},{default:a(()=>[hn]),_:1}),s(),fn]),n("td",gn,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})])]),n("tr",null,[bn,n("td",vn,[n("a",yn,[s("元素和最小的山形三元组 I"),t(o)])]),xn,n("td",wn,[t(e,{to:"/tag/array.html"},{default:a(()=>[jn]),_:1})]),n("td",En,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})])]),n("tr",null,[On,n("td",In,[n("a",Nn,[s("元素和最小的山形三元组 II"),t(o)])]),qn,n("td",Cn,[t(e,{to:"/tag/array.html"},{default:a(()=>[Ln]),_:1})]),n("td",Mn,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})])])])])])}const Sn=c(k,[["render",Vn],["__file","0015.html.vue"]]);export{Sn as default};
