import{_ as c,r as p,o as i,c as r,a as t,b as n,d as s,w as e,f as u,e as d}from"./app-Ob52y8QZ.js";const k={},_=t("h1",{id:"_15-三数之和",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_15-三数之和","aria-hidden":"true"},"#"),n(" 15. 三数之和")],-1),m=t("code",null,"数组",-1),h=t("code",null,"双指针",-1),f=t("code",null,"排序",-1),g={href:"https://leetcode.cn/problems/3sum",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/3sum",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [-1,0,1,2,-1,-4]</p><p>Output: [[-1,-1,2],[-1,0,1]]</p><p>Explanation:</p><p>nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.</p><p>nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.</p><p>nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.</p><p>The distinct triplets are [-1,0,1] and [-1,-1,2].</p><p>Notice that the order of the output and the order of the triplets does not matter.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,1,1]</p><p>Output: []</p><p>Explanation: The only possible triplet does not sum up to 0.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [0,0,0]</p><p>Output: [[0,0,0]]</p><p>Explanation: The only possible triplet sums up to 0.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个数组，要求在这个数组中找出 3 个数之和为 0 的所有组合。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li><p>这一题比较麻烦的一点在于，最后输出解的时候，要求输出不重复的解。</p></li><li><p>数组中同一个数字可能出现多次，同一个数字也可能使用多次，但是最后输出解的时候，不能重复。例如 <code>[-1, -1, 2]</code> 和 <code>[2, -1, -1]</code>、<code>[-1, 2, -1]</code> 这 3 个解是重复的。</p></li><li><p>这就需要排序和去重，使用对撞指针寻找三数之和为 <code>0</code> 的组合。</p></li><li><p>先对数组进行排序，<code>i</code> 从后往前扫描，这里同样需要注意数组中存在多个重复数字的问题。<code>i</code> 在循环的时候和后一个数进行比较，如果相等，<code>i</code> 继续往前移，直到移到下一个和前一个数字不同的位置。</p></li><li><p><code>j</code>，<code>k</code> 两个指针开始一前一后对撞，<code>j</code> 从数组首位开始，<code>k</code> 为 <code>i</code> 的前一个数字，由于经过排序，所以 <code>j &lt; k</code>。</p></li><li><p>对比三个数的和与 <code>target</code> 的大小，寻找三数之和为 <code>target</code> 的组合，移动指针时注意去重：</p><ul><li>小于 <code>target</code>，<code>j</code> 往后移动；</li><li>大于 <code>target</code>，<code>k</code> 往前移动；</li></ul></li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n^2)</code></p><ul><li><strong>排序</strong>：<code>nums.sort()</code> 的时间复杂度是 <code>O(n log n)</code>，其中 <code>n</code> 是数组的长度。</li><li><strong>双指针查找</strong>：对于每个固定的数 <code>nums[i]</code>，双指针查找的复杂度是 <code>O(n)</code>（即遍历剩下的数组）。</li><li><strong>循环遍历</strong>： 外层循环遍历了 <code>n</code> 个元素，每次执行双指针查找的操作，时间复杂度为 <code>O(n^2)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code>（不考虑输出结果），主要是用于存储结果和排序的空间。</p><ul><li><strong>排序操作</strong>：排序操作占用 <code>O(n)</code> 的空间。</li><li><strong>结果存储</strong>：结果数组 <code>res</code> 最多存储 <code>O(n^2)</code> 个三元组，但由于题目通常要求三元组不重复，实际存储的元素较少。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	nums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 排除 i 重复的情况</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">let</span> sum <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token comment">// 排除 j 重复的情况</span>
					<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						j<span class="token operator">++</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token comment">// 排除 k 重复的情况</span>
					<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
						k<span class="token operator">--</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					j<span class="token operator">++</span><span class="token punctuation">;</span>
					k<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					j<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
					k<span class="token operator">--</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,20),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),j=t("td",{style:{"text-align":"center"}},"1",-1),E=t("td",{style:{"text-align":"left"}},"两数之和",-1),O={style:{"text-align":"center"}},I={style:{"text-align":"left"}},N=t("code",null,"数组",-1),q=t("code",null,"哈希表",-1),C={style:{"text-align":"left"}},L={style:{"text-align":"center"}},M={href:"https://leetcode.cn/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},V={href:"https://leetcode.com/problems/two-sum",target:"_blank",rel:"noopener noreferrer"},T=t("td",{style:{"text-align":"center"}},"16",-1),B=t("td",{style:{"text-align":"left"}},"最接近的三数之和",-1),R={style:{"text-align":"center"}},S={style:{"text-align":"left"}},G=t("code",null,"数组",-1),z=t("code",null,"双指针",-1),A=t("code",null,"排序",-1),D={style:{"text-align":"left"}},F={style:{"text-align":"center"}},H={href:"https://leetcode.cn/problems/3sum-closest",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/3sum-closest",target:"_blank",rel:"noopener noreferrer"},K=t("td",{style:{"text-align":"center"}},"18",-1),P=t("td",{style:{"text-align":"left"}},"四数之和",-1),Q={style:{"text-align":"center"}},U={style:{"text-align":"left"}},W=t("code",null,"数组",-1),X=t("code",null,"双指针",-1),Y=t("code",null,"排序",-1),Z={style:{"text-align":"left"}},$={style:{"text-align":"center"}},tt={href:"https://leetcode.cn/problems/4sum",target:"_blank",rel:"noopener noreferrer"},nt={href:"https://leetcode.com/problems/4sum",target:"_blank",rel:"noopener noreferrer"},st=t("td",{style:{"text-align":"center"}},"259",-1),et=t("td",{style:{"text-align":"left"}},"较小的三数之和 🔒",-1),at={style:{"text-align":"center"}},ot={style:{"text-align":"left"}},lt=t("code",null,"数组",-1),pt=t("code",null,"双指针",-1),ct=t("code",null,"二分查找",-1),it=t("code",null,"1+",-1),rt={style:{"text-align":"left"}},ut={style:{"text-align":"center"}},dt={href:"https://leetcode.cn/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://leetcode.com/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},_t=t("td",{style:{"text-align":"center"}},"2367",-1),mt=t("td",{style:{"text-align":"left"}},"等差三元组的数目",-1),ht=t("td",{style:{"text-align":"center"}},null,-1),ft={style:{"text-align":"left"}},gt=t("code",null,"数组",-1),bt=t("code",null,"哈希表",-1),vt=t("code",null,"双指针",-1),yt=t("code",null,"1+",-1),xt={style:{"text-align":"left"}},wt={style:{"text-align":"center"}},jt={href:"https://leetcode.cn/problems/number-of-arithmetic-triplets",target:"_blank",rel:"noopener noreferrer"},Et={href:"https://leetcode.com/problems/number-of-arithmetic-triplets",target:"_blank",rel:"noopener noreferrer"},Ot=t("td",{style:{"text-align":"center"}},"2908",-1),It=t("td",{style:{"text-align":"left"}},"元素和最小的山形三元组 I",-1),Nt=t("td",{style:{"text-align":"center"}},null,-1),qt={style:{"text-align":"left"}},Ct=t("code",null,"数组",-1),Lt={style:{"text-align":"left"}},Mt={style:{"text-align":"center"}},Vt={href:"https://leetcode.cn/problems/minimum-sum-of-mountain-triplets-i",target:"_blank",rel:"noopener noreferrer"},Tt={href:"https://leetcode.com/problems/minimum-sum-of-mountain-triplets-i",target:"_blank",rel:"noopener noreferrer"},Bt=t("td",{style:{"text-align":"center"}},"2909",-1),Rt=t("td",{style:{"text-align":"left"}},"元素和最小的山形三元组 II",-1),St=t("td",{style:{"text-align":"center"}},null,-1),Gt={style:{"text-align":"left"}},zt=t("code",null,"数组",-1),At={style:{"text-align":"left"}},Dt={style:{"text-align":"center"}},Ft={href:"https://leetcode.cn/problems/minimum-sum-of-mountain-triplets-ii",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://leetcode.com/problems/minimum-sum-of-mountain-triplets-ii",target:"_blank",rel:"noopener noreferrer"};function Jt(Kt,Pt){const l=p("font"),a=p("RouterLink"),o=p("ExternalLinkIcon");return i(),r("div",null,[_,t("p",null,[n("🟠 "),s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1}),n("  🔖  "),s(a,{to:"/tag/array.html"},{default:e(()=>[m]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[h]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[f]),_:1}),n("  🔗 "),t("a",g,[b,s(o)]),n(),t("a",v,[y,s(o)])]),x,u(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[j,E,t("td",O,[s(a,{to:"/problem/0001.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",I,[s(a,{to:"/tag/array.html"},{default:e(()=>[N]),_:1}),n(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[q]),_:1})]),t("td",C,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",L,[t("a",M,[n("🀄️"),s(o)]),n(),t("a",V,[n("🔗"),s(o)])])]),t("tr",null,[T,B,t("td",R,[s(a,{to:"/problem/0016.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",S,[s(a,{to:"/tag/array.html"},{default:e(()=>[G]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[z]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[A]),_:1})]),t("td",D,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",F,[t("a",H,[n("🀄️"),s(o)]),n(),t("a",J,[n("🔗"),s(o)])])]),t("tr",null,[K,P,t("td",Q,[s(a,{to:"/problem/0018.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",U,[s(a,{to:"/tag/array.html"},{default:e(()=>[W]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[X]),_:1}),n(),s(a,{to:"/tag/sorting.html"},{default:e(()=>[Y]),_:1})]),t("td",Z,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",$,[t("a",tt,[n("🀄️"),s(o)]),n(),t("a",nt,[n("🔗"),s(o)])])]),t("tr",null,[st,et,t("td",at,[s(a,{to:"/problem/0259.html"},{default:e(()=>[n("[✓]")]),_:1})]),t("td",ot,[s(a,{to:"/tag/array.html"},{default:e(()=>[lt]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[pt]),_:1}),n(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[ct]),_:1}),n(),it]),t("td",rt,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",ut,[t("a",dt,[n("🀄️"),s(o)]),n(),t("a",kt,[n("🔗"),s(o)])])]),t("tr",null,[_t,mt,ht,t("td",ft,[s(a,{to:"/tag/array.html"},{default:e(()=>[gt]),_:1}),n(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[bt]),_:1}),n(),s(a,{to:"/tag/two-pointers.html"},{default:e(()=>[vt]),_:1}),n(),yt]),t("td",xt,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",wt,[t("a",jt,[n("🀄️"),s(o)]),n(),t("a",Et,[n("🔗"),s(o)])])]),t("tr",null,[Ot,It,Nt,t("td",qt,[s(a,{to:"/tag/array.html"},{default:e(()=>[Ct]),_:1})]),t("td",Lt,[s(l,{color:"#15bd66"},{default:e(()=>[n("Easy")]),_:1})]),t("td",Mt,[t("a",Vt,[n("🀄️"),s(o)]),n(),t("a",Tt,[n("🔗"),s(o)])])]),t("tr",null,[Bt,Rt,St,t("td",Gt,[s(a,{to:"/tag/array.html"},{default:e(()=>[zt]),_:1})]),t("td",At,[s(l,{color:"#ffb800"},{default:e(()=>[n("Medium")]),_:1})]),t("td",Dt,[t("a",Ft,[n("🀄️"),s(o)]),n(),t("a",Ht,[n("🔗"),s(o)])])])])])])}const Ut=c(k,[["render",Jt],["__file","0015.html.vue"]]);export{Ut as default};
