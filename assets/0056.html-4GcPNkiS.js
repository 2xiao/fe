import{_ as i,r as c,o as r,c as p,a as t,b as e,d as n,w as s,f as d,e as u}from"./app-ZVJfwurD.js";const _={},h={id:"_56-合并区间",tabindex:"-1"},f=t("a",{class:"header-anchor",href:"#_56-合并区间","aria-hidden":"true"},"#",-1),k={href:"https://2xiao.github.io/leetcode-js/problem/0056.html",target:"_blank",rel:"noopener noreferrer"},m=t("code",null,"数组",-1),g=t("code",null,"排序",-1),y={href:"https://leetcode.cn/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},b=t("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</p><p>Output: [[1,6],[8,10],[15,18]]</p><p>Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: intervals = [[1,4],[4,5]]</p><p>Output: [[1,5]]</p><p>Explanation: Intervals [1,4] and [4,5] are considered overlapping.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 10^4</code></li><li><code>intervals[i].length == 2</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>一个区间可以表示为 <code>[start, end]</code>，先按区间的 <code>start</code> 排序</li><li>对于几个相交区间合并后的结果区间 <code>x</code>，<code>x.start</code> 一定是这些相交区间中 <code>start</code> 最小的，<code>x.end</code> 一定是这些相交区间中 <code>end</code> 最大的</li><li>由于已经排了序，<code>x.start</code> 很好确定，<code>求 x.end</code> 也很容易，可以类比在数组中找最大值的过程。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">intervals</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">intervals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 先按区间的 \`start\` 排序</span>
	intervals <span class="token operator">=</span> intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> start <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">// 如果区间相交，求结果区间 [start, end]</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">inRange</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 判断区间是否相交</span>
<span class="token keyword">var</span> <span class="token function-variable function">inRange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">interval<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token punctuation">[</span>m<span class="token punctuation">,</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> interval<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> start <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> end <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,15),M=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),E=t("td",{style:{"text-align":"center"}},"57",-1),I={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/insert-interval",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"center"}},H={style:{"text-align":"left"}},L=t("code",null,"数组",-1),N={style:{"text-align":"left"}},R=t("td",{style:{"text-align":"center"}},"252",-1),V={style:{"text-align":"left"}},j={href:"https://leetcode.com/problems/meeting-rooms",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"center"}},null,-1),O={style:{"text-align":"left"}},S=t("code",null,"数组",-1),z=t("code",null,"排序",-1),G={style:{"text-align":"left"}},T=t("td",{style:{"text-align":"center"}},"253",-1),A={style:{"text-align":"left"}},D={href:"https://leetcode.com/problems/meeting-rooms-ii",target:"_blank",rel:"noopener noreferrer"},F=t("td",{style:{"text-align":"center"}},null,-1),J={style:{"text-align":"left"}},K=t("code",null,"贪心",-1),P=t("code",null,"数组",-1),Q=t("code",null,"双指针",-1),U=t("code",null,"3+",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"495",-1),Y={style:{"text-align":"left"}},Z={href:"https://leetcode.com/problems/teemo-attacking",target:"_blank",rel:"noopener noreferrer"},$=t("td",{style:{"text-align":"center"}},null,-1),tt={style:{"text-align":"left"}},nt=t("code",null,"数组",-1),et=t("code",null,"模拟",-1),st={style:{"text-align":"left"}},at=t("td",{style:{"text-align":"center"}},"616",-1),ot={style:{"text-align":"left"}},lt={href:"https://leetcode.com/problems/add-bold-tag-in-string",target:"_blank",rel:"noopener noreferrer"},ct=t("td",{style:{"text-align":"center"}},null,-1),it={style:{"text-align":"left"}},rt=t("code",null,"字典树",-1),pt=t("code",null,"数组",-1),dt=t("code",null,"哈希表",-1),ut=t("code",null,"2+",-1),_t={style:{"text-align":"left"}},ht=t("td",{style:{"text-align":"center"}},"715",-1),ft={style:{"text-align":"left"}},kt={href:"https://leetcode.com/problems/range-module",target:"_blank",rel:"noopener noreferrer"},mt=t("td",{style:{"text-align":"center"}},null,-1),gt={style:{"text-align":"left"}},yt=t("code",null,"设计",-1),bt=t("code",null,"线段树",-1),xt=t("code",null,"有序集合",-1),vt={style:{"text-align":"left"}},wt=t("td",{style:{"text-align":"center"}},"759",-1),Mt={style:{"text-align":"left"}},Et={href:"https://leetcode.com/problems/employee-free-time",target:"_blank",rel:"noopener noreferrer"},It=t("td",{style:{"text-align":"center"}},null,-1),qt={style:{"text-align":"left"}},Ct=t("code",null,"数组",-1),Ht=t("code",null,"排序",-1),Lt=t("code",null,"堆（优先队列）",-1),Nt={style:{"text-align":"left"}},Rt=t("td",{style:{"text-align":"center"}},"763",-1),Vt={style:{"text-align":"left"}},jt={href:"https://leetcode.com/problems/partition-labels",target:"_blank",rel:"noopener noreferrer"},Bt={style:{"text-align":"center"}},Ot={style:{"text-align":"left"}},St=t("code",null,"贪心",-1),zt=t("code",null,"哈希表",-1),Gt=t("code",null,"双指针",-1),Tt=t("code",null,"1+",-1),At={style:{"text-align":"left"}},Dt=t("td",{style:{"text-align":"center"}},"986",-1),Ft={style:{"text-align":"left"}},Jt={href:"https://leetcode.com/problems/interval-list-intersections",target:"_blank",rel:"noopener noreferrer"},Kt={style:{"text-align":"center"}},Pt={style:{"text-align":"left"}},Qt=t("code",null,"数组",-1),Ut=t("code",null,"双指针",-1),Wt={style:{"text-align":"left"}},Xt=t("td",{style:{"text-align":"center"}},"2158",-1),Yt={style:{"text-align":"left"}},Zt={href:"https://leetcode.com/problems/amount-of-new-area-painted-each-day",target:"_blank",rel:"noopener noreferrer"},$t=t("td",{style:{"text-align":"center"}},null,-1),tn={style:{"text-align":"left"}},nn=t("code",null,"线段树",-1),en=t("code",null,"数组",-1),sn=t("code",null,"有序集合",-1),an={style:{"text-align":"left"}},on=t("td",{style:{"text-align":"center"}},"2213",-1),ln={style:{"text-align":"left"}},cn={href:"https://leetcode.com/problems/longest-substring-of-one-repeating-character",target:"_blank",rel:"noopener noreferrer"},rn=t("td",{style:{"text-align":"center"}},null,-1),pn={style:{"text-align":"left"}},dn=t("code",null,"线段树",-1),un=t("code",null,"数组",-1),_n=t("code",null,"字符串",-1),hn=t("code",null,"1+",-1),fn={style:{"text-align":"left"}},kn=t("td",{style:{"text-align":"center"}},"2276",-1),mn={style:{"text-align":"left"}},gn={href:"https://leetcode.com/problems/count-integers-in-intervals",target:"_blank",rel:"noopener noreferrer"},yn=t("td",{style:{"text-align":"center"}},null,-1),bn={style:{"text-align":"left"}},xn=t("code",null,"设计",-1),vn=t("code",null,"线段树",-1),wn=t("code",null,"有序集合",-1),Mn={style:{"text-align":"left"}},En=t("td",{style:{"text-align":"center"}},"2406",-1),In={style:{"text-align":"left"}},qn={href:"https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},Cn={style:{"text-align":"center"}},Hn={style:{"text-align":"left"}},Ln=t("code",null,"贪心",-1),Nn=t("code",null,"数组",-1),Rn=t("code",null,"双指针",-1),Vn=t("code",null,"3+",-1),jn={style:{"text-align":"left"}},Bn=t("td",{style:{"text-align":"center"}},"2446",-1),On={style:{"text-align":"left"}},Sn={href:"https://leetcode.com/problems/determine-if-two-events-have-conflict",target:"_blank",rel:"noopener noreferrer"},zn=t("td",{style:{"text-align":"center"}},null,-1),Gn={style:{"text-align":"left"}},Tn=t("code",null,"数组",-1),An=t("code",null,"字符串",-1),Dn={style:{"text-align":"left"}},Fn=t("td",{style:{"text-align":"center"}},"2580",-1),Jn={style:{"text-align":"left"}},Kn={href:"https://leetcode.com/problems/count-ways-to-group-overlapping-ranges",target:"_blank",rel:"noopener noreferrer"},Pn=t("td",{style:{"text-align":"center"}},null,-1),Qn={style:{"text-align":"left"}},Un=t("code",null,"数组",-1),Wn=t("code",null,"排序",-1),Xn={style:{"text-align":"left"}},Yn=t("td",{style:{"text-align":"center"}},"2848",-1),Zn={style:{"text-align":"left"}},$n={href:"https://leetcode.com/problems/points-that-intersect-with-cars",target:"_blank",rel:"noopener noreferrer"},te=t("td",{style:{"text-align":"center"}},null,-1),ne={style:{"text-align":"left"}},ee=t("code",null,"数组",-1),se=t("code",null,"哈希表",-1),ae=t("code",null,"前缀和",-1),oe={style:{"text-align":"left"}},le=t("td",{style:{"text-align":"center"}},"3169",-1),ce={style:{"text-align":"left"}},ie={href:"https://leetcode.com/problems/count-days-without-meetings",target:"_blank",rel:"noopener noreferrer"},re=t("td",{style:{"text-align":"center"}},null,-1),pe={style:{"text-align":"left"}},de=t("code",null,"数组",-1),ue=t("code",null,"排序",-1),_e={style:{"text-align":"left"}},he=t("td",{style:{"text-align":"center"}},"3323",-1),fe={style:{"text-align":"left"}},ke={href:"https://leetcode.com/problems/minimize-connected-groups-by-inserting-interval",target:"_blank",rel:"noopener noreferrer"},me=t("td",{style:{"text-align":"center"}},null,-1),ge={style:{"text-align":"left"}},ye=t("code",null,"数组",-1),be=t("code",null,"二分查找",-1),xe=t("code",null,"排序",-1),ve=t("code",null,"1+",-1),we={style:{"text-align":"left"}};function Me(Ee,Ie){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return r(),p("div",null,[t("h1",h,[f,e(),t("a",k,[e("56. 合并区间"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/tag/array.html"},{default:s(()=>[m]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[g]),_:1}),e("  🔗 "),t("a",y,[b,n(o)]),e(),t("a",x,[v,n(o)])]),w,d(" prettier-ignore "),t("table",null,[M,t("tbody",null,[t("tr",null,[E,t("td",I,[t("a",q,[e("插入区间"),n(o)])]),t("td",C,[n(a,{to:"/problem/0057.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",H,[n(a,{to:"/tag/array.html"},{default:s(()=>[L]),_:1})]),t("td",N,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[R,t("td",V,[t("a",j,[e("会议室 🔒"),n(o)])]),B,t("td",O,[n(a,{to:"/tag/array.html"},{default:s(()=>[S]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[z]),_:1})]),t("td",G,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[T,t("td",A,[t("a",D,[e("会议室 II 🔒"),n(o)])]),F,t("td",J,[n(a,{to:"/tag/greedy.html"},{default:s(()=>[K]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[P]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Q]),_:1}),e(),U]),t("td",W,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[X,t("td",Y,[t("a",Z,[e("提莫攻击"),n(o)])]),$,t("td",tt,[n(a,{to:"/tag/array.html"},{default:s(()=>[nt]),_:1}),e(),n(a,{to:"/tag/simulation.html"},{default:s(()=>[et]),_:1})]),t("td",st,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[at,t("td",ot,[t("a",lt,[e("给字符串添加加粗标签 🔒"),n(o)])]),ct,t("td",it,[n(a,{to:"/tag/trie.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[pt]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[dt]),_:1}),e(),ut]),t("td",_t,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ht,t("td",ft,[t("a",kt,[e("Range 模块"),n(o)])]),mt,t("td",gt,[n(a,{to:"/tag/design.html"},{default:s(()=>[yt]),_:1}),e(),n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[bt]),_:1}),e(),n(a,{to:"/tag/ordered-set.html"},{default:s(()=>[xt]),_:1})]),t("td",vt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[wt,t("td",Mt,[t("a",Et,[e("员工空闲时间 🔒"),n(o)])]),It,t("td",qt,[n(a,{to:"/tag/array.html"},{default:s(()=>[Ct]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[Ht]),_:1}),e(),n(a,{to:"/tag/heap-priority-queue.html"},{default:s(()=>[Lt]),_:1})]),t("td",Nt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[Rt,t("td",Vt,[t("a",jt,[e("划分字母区间"),n(o)])]),t("td",Bt,[n(a,{to:"/problem/0763.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Ot,[n(a,{to:"/tag/greedy.html"},{default:s(()=>[St]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[zt]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Gt]),_:1}),e(),Tt]),t("td",At,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Dt,t("td",Ft,[t("a",Jt,[e("区间列表的交集"),n(o)])]),t("td",Kt,[n(a,{to:"/problem/0986.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Pt,[n(a,{to:"/tag/array.html"},{default:s(()=>[Qt]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Ut]),_:1})]),t("td",Wt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Xt,t("td",Yt,[t("a",Zt,[e("每天绘制新区域的数量 🔒"),n(o)])]),$t,t("td",tn,[n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[nn]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[en]),_:1}),e(),n(a,{to:"/tag/ordered-set.html"},{default:s(()=>[sn]),_:1})]),t("td",an,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[on,t("td",ln,[t("a",cn,[e("由单个字符重复的最长子字符串"),n(o)])]),rn,t("td",pn,[n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[dn]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[un]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[_n]),_:1}),e(),hn]),t("td",fn,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[kn,t("td",mn,[t("a",gn,[e("统计区间中的整数数目"),n(o)])]),yn,t("td",bn,[n(a,{to:"/tag/design.html"},{default:s(()=>[xn]),_:1}),e(),n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[vn]),_:1}),e(),n(a,{to:"/tag/ordered-set.html"},{default:s(()=>[wn]),_:1})]),t("td",Mn,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[En,t("td",In,[t("a",qn,[e("将区间分为最少组数"),n(o)])]),t("td",Cn,[n(a,{to:"/problem/2406.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Hn,[n(a,{to:"/tag/greedy.html"},{default:s(()=>[Ln]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[Nn]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Rn]),_:1}),e(),Vn]),t("td",jn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Bn,t("td",On,[t("a",Sn,[e("判断两个事件是否存在冲突"),n(o)])]),zn,t("td",Gn,[n(a,{to:"/tag/array.html"},{default:s(()=>[Tn]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[An]),_:1})]),t("td",Dn,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[Fn,t("td",Jn,[t("a",Kn,[e("统计将重叠区间合并成组的方案数"),n(o)])]),Pn,t("td",Qn,[n(a,{to:"/tag/array.html"},{default:s(()=>[Un]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[Wn]),_:1})]),t("td",Xn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Yn,t("td",Zn,[t("a",$n,[e("与车相交的点"),n(o)])]),te,t("td",ne,[n(a,{to:"/tag/array.html"},{default:s(()=>[ee]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[se]),_:1}),e(),n(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[ae]),_:1})]),t("td",oe,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[le,t("td",ce,[t("a",ie,[e("无需开会的工作日"),n(o)])]),re,t("td",pe,[n(a,{to:"/tag/array.html"},{default:s(()=>[de]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[ue]),_:1})]),t("td",_e,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[he,t("td",fe,[t("a",ke,[e("通过插入区间最小化连通组 🔒"),n(o)])]),me,t("td",ge,[n(a,{to:"/tag/array.html"},{default:s(()=>[ye]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[be]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[xe]),_:1}),e(),ve]),t("td",we,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const Ce=i(_,[["render",Me],["__file","0056.html.vue"]]);export{Ce as default};
