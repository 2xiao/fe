import{_ as r,r as _,o as i,c,a as t,b as e,w as o,d as l,f as a}from"./app-ynO5B_DP.js";const h={},u=t("h1",{id:"树",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#树","aria-hidden":"true"},"#"),l(" 树")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),x=t("code",null,"矩阵",-1),b=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),M=t("code",null,"单调栈",-1),v=t("code",null,"队列",-1),I=t("code",null,"单调队列",-1),E=t("code",null,"堆（优先队列）",-1),w=t("code",null,"哈希表",-1),H=t("code",null,"字符串",-1),z=t("code",null,"字符串匹配",-1),O=t("span",{class:"blue"},"树",-1),q=t("code",null,"二叉树",-1),j=t("code",null,"二叉搜索树",-1),N=t("code",null,"最小生成树",-1),L=t("code",null,"图",-1),C=t("code",null,"有序集合",-1),K=t("code",null,"拓扑排序",-1),P=t("code",null,"最短路",-1),B=t("code",null,"强连通分量",-1),V=t("code",null,"欧拉回路",-1),T=t("code",null,"双连通分量",-1),U=t("code",null,"并查集",-1),R=t("code",null,"字典树",-1),W=t("code",null,"线段树",-1),G=t("code",null,"树状数组",-1),Y=t("code",null,"后缀数组",-1),Q=t("p",null,[t("strong",null,"算法")],-1),S=t("code",null,"枚举",-1),D=t("code",null,"递归",-1),Z=t("code",null,"分治",-1),A=t("code",null,"回溯",-1),F=t("code",null,"贪心",-1),J=t("code",null,"动态规划",-1),X=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),lt=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),rt=t("code",null,"双指针",-1),it=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),at=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),ut=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),xt=t("code",null,"数学",-1),bt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Mt=t("code",null,"模拟",-1),vt=t("code",null,"组合数学",-1),It=t("code",null,"随机化",-1),Et=t("code",null,"概率与统计",-1),wt=t("code",null,"水塘抽样",-1),Ht=t("code",null,"拒绝采样",-1),zt=t("code",null,"数据库",-1),Ot=t("code",null,"设计",-1),qt=t("code",null,"数据流",-1),jt=t("code",null,"脑筋急转弯",-1),Nt=t("code",null,"交互",-1),Lt=t("code",null,"迭代器",-1),Ct=t("code",null,"多线程",-1),Kt=t("hr",null,null,-1),Pt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Bt=t("td",{style:{"text-align":"center"}},"94",-1),Vt={style:{"text-align":"left"}},Tt={href:"https://leetcode.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ut={style:{"text-align":"center"}},Rt={href:"/problem/0094",target:"_blank",rel:"noopener noreferrer"},Wt={style:{"text-align":"left"}},Gt=t("code",null,"栈",-1),Yt=t("code",null,"树",-1),Qt=t("code",null,"深度优先搜索",-1),St=t("code",null,"1+",-1),Dt={style:{"text-align":"left"}},Zt=t("td",{style:{"text-align":"center"}},"95",-1),At={style:{"text-align":"left"}},Ft={href:"https://leetcode.com/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},Jt={style:{"text-align":"center"}},Xt={href:"/problem/0095",target:"_blank",rel:"noopener noreferrer"},$t={style:{"text-align":"left"}},te=t("code",null,"树",-1),ee=t("code",null,"二叉搜索树",-1),le=t("code",null,"动态规划",-1),oe=t("code",null,"2+",-1),ne={style:{"text-align":"left"}},se=t("td",{style:{"text-align":"center"}},"96",-1),de={style:{"text-align":"left"}},_e={href:"https://leetcode.com/problems/unique-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},re={style:{"text-align":"center"}},ie={href:"/problem/0096",target:"_blank",rel:"noopener noreferrer"},ce={style:{"text-align":"left"}},ae=t("code",null,"树",-1),he=t("code",null,"二叉搜索树",-1),ue=t("code",null,"数学",-1),fe=t("code",null,"2+",-1),ge={style:{"text-align":"left"}},me=t("td",{style:{"text-align":"center"}},"98",-1),ye={style:{"text-align":"left"}},xe={href:"https://leetcode.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},be={style:{"text-align":"center"}},pe={href:"/problem/0098",target:"_blank",rel:"noopener noreferrer"},ke={style:{"text-align":"left"}},Me=t("code",null,"树",-1),ve=t("code",null,"深度优先搜索",-1),Ie=t("code",null,"二叉搜索树",-1),Ee=t("code",null,"1+",-1),we={style:{"text-align":"left"}},He=t("td",{style:{"text-align":"center"}},"99",-1),ze={style:{"text-align":"left"}},Oe={href:"https://leetcode.com/problems/recover-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},qe={style:{"text-align":"center"}},je={href:"/problem/0099",target:"_blank",rel:"noopener noreferrer"},Ne={style:{"text-align":"left"}},Le=t("code",null,"树",-1),Ce=t("code",null,"深度优先搜索",-1),Ke=t("code",null,"二叉搜索树",-1),Pe=t("code",null,"1+",-1),Be={style:{"text-align":"left"}},Ve=t("td",{style:{"text-align":"center"}},"100",-1),Te={style:{"text-align":"left"}},Ue={href:"https://leetcode.com/problems/same-tree",target:"_blank",rel:"noopener noreferrer"},Re={style:{"text-align":"center"}},We={href:"/problem/0100",target:"_blank",rel:"noopener noreferrer"},Ge={style:{"text-align":"left"}},Ye=t("code",null,"树",-1),Qe=t("code",null,"深度优先搜索",-1),Se=t("code",null,"广度优先搜索",-1),De=t("code",null,"1+",-1),Ze={style:{"text-align":"left"}},Ae=t("td",{style:{"text-align":"center"}},"101",-1),Fe={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/symmetric-tree",target:"_blank",rel:"noopener noreferrer"},Xe={style:{"text-align":"center"}},$e={href:"/problem/0101",target:"_blank",rel:"noopener noreferrer"},tl={style:{"text-align":"left"}},el=t("code",null,"树",-1),ll=t("code",null,"深度优先搜索",-1),ol=t("code",null,"广度优先搜索",-1),nl=t("code",null,"1+",-1),sl={style:{"text-align":"left"}},dl=t("td",{style:{"text-align":"center"}},"102",-1),_l={style:{"text-align":"left"}},rl={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},il={style:{"text-align":"center"}},cl={href:"/problem/0102",target:"_blank",rel:"noopener noreferrer"},al={style:{"text-align":"left"}},hl=t("code",null,"树",-1),ul=t("code",null,"广度优先搜索",-1),fl=t("code",null,"二叉树",-1),gl={style:{"text-align":"left"}},ml=t("td",{style:{"text-align":"center"}},"103",-1),yl={style:{"text-align":"left"}},xl={href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},bl={style:{"text-align":"center"}},pl={href:"/problem/0103",target:"_blank",rel:"noopener noreferrer"},kl={style:{"text-align":"left"}},Ml=t("code",null,"树",-1),vl=t("code",null,"广度优先搜索",-1),Il=t("code",null,"二叉树",-1),El={style:{"text-align":"left"}},wl=t("td",{style:{"text-align":"center"}},"104",-1),Hl={style:{"text-align":"left"}},zl={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ol={style:{"text-align":"center"}},ql={href:"/problem/0104",target:"_blank",rel:"noopener noreferrer"},jl={style:{"text-align":"left"}},Nl=t("code",null,"树",-1),Ll=t("code",null,"深度优先搜索",-1),Cl=t("code",null,"广度优先搜索",-1),Kl=t("code",null,"1+",-1),Pl={style:{"text-align":"left"}},Bl=t("td",{style:{"text-align":"center"}},"105",-1),Vl={style:{"text-align":"left"}},Tl={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ul={style:{"text-align":"center"}},Rl={href:"/problem/0105",target:"_blank",rel:"noopener noreferrer"},Wl={style:{"text-align":"left"}},Gl=t("code",null,"树",-1),Yl=t("code",null,"数组",-1),Ql=t("code",null,"哈希表",-1),Sl=t("code",null,"2+",-1),Dl={style:{"text-align":"left"}},Zl=t("td",{style:{"text-align":"center"}},"106",-1),Al={style:{"text-align":"left"}},Fl={href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Jl={style:{"text-align":"center"}},Xl={href:"/problem/0106",target:"_blank",rel:"noopener noreferrer"},$l={style:{"text-align":"left"}},to=t("code",null,"树",-1),eo=t("code",null,"数组",-1),lo=t("code",null,"哈希表",-1),oo=t("code",null,"2+",-1),no={style:{"text-align":"left"}},so=t("td",{style:{"text-align":"center"}},"107",-1),_o={style:{"text-align":"left"}},ro={href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},io={style:{"text-align":"center"}},co={href:"/problem/0107",target:"_blank",rel:"noopener noreferrer"},ao={style:{"text-align":"left"}},ho=t("code",null,"树",-1),uo=t("code",null,"广度优先搜索",-1),fo=t("code",null,"二叉树",-1),go={style:{"text-align":"left"}},mo=t("td",{style:{"text-align":"center"}},"108",-1),yo={style:{"text-align":"left"}},xo={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},bo={style:{"text-align":"center"}},po={href:"/problem/0108",target:"_blank",rel:"noopener noreferrer"},ko={style:{"text-align":"left"}},Mo=t("code",null,"树",-1),vo=t("code",null,"二叉搜索树",-1),Io=t("code",null,"数组",-1),Eo=t("code",null,"2+",-1),wo={style:{"text-align":"left"}},Ho=t("td",{style:{"text-align":"center"}},"109",-1),zo={style:{"text-align":"left"}},Oo={href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},qo={style:{"text-align":"center"}},jo={href:"/problem/0109",target:"_blank",rel:"noopener noreferrer"},No={style:{"text-align":"left"}},Lo=t("code",null,"树",-1),Co=t("code",null,"二叉搜索树",-1),Ko=t("code",null,"链表",-1),Po=t("code",null,"2+",-1),Bo={style:{"text-align":"left"}},Vo=t("td",{style:{"text-align":"center"}},"110",-1),To={style:{"text-align":"left"}},Uo={href:"https://leetcode.com/problems/balanced-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ro={style:{"text-align":"center"}},Wo={href:"/problem/0110",target:"_blank",rel:"noopener noreferrer"},Go={style:{"text-align":"left"}},Yo=t("code",null,"树",-1),Qo=t("code",null,"深度优先搜索",-1),So=t("code",null,"二叉树",-1),Do={style:{"text-align":"left"}},Zo=t("td",{style:{"text-align":"center"}},"111",-1),Ao={style:{"text-align":"left"}},Fo={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Jo={style:{"text-align":"center"}},Xo={href:"/problem/0111",target:"_blank",rel:"noopener noreferrer"},$o={style:{"text-align":"left"}},tn=t("code",null,"树",-1),en=t("code",null,"深度优先搜索",-1),ln=t("code",null,"广度优先搜索",-1),on=t("code",null,"1+",-1),nn={style:{"text-align":"left"}},sn=t("td",{style:{"text-align":"center"}},"112",-1),dn={style:{"text-align":"left"}},_n={href:"https://leetcode.com/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},rn={style:{"text-align":"center"}},cn={href:"/problem/0112",target:"_blank",rel:"noopener noreferrer"},an={style:{"text-align":"left"}},hn=t("code",null,"树",-1),un=t("code",null,"深度优先搜索",-1),fn=t("code",null,"广度优先搜索",-1),gn=t("code",null,"1+",-1),mn={style:{"text-align":"left"}},yn=t("td",{style:{"text-align":"center"}},"113",-1),xn={style:{"text-align":"left"}},bn={href:"https://leetcode.com/problems/path-sum-ii",target:"_blank",rel:"noopener noreferrer"},pn={style:{"text-align":"center"}},kn={href:"/problem/0113",target:"_blank",rel:"noopener noreferrer"},Mn={style:{"text-align":"left"}},vn=t("code",null,"树",-1),In=t("code",null,"深度优先搜索",-1),En=t("code",null,"回溯",-1),wn=t("code",null,"1+",-1),Hn={style:{"text-align":"left"}},zn=t("td",{style:{"text-align":"center"}},"114",-1),On={style:{"text-align":"left"}},qn={href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list",target:"_blank",rel:"noopener noreferrer"},jn={style:{"text-align":"center"}},Nn={href:"/problem/0114",target:"_blank",rel:"noopener noreferrer"},Ln={style:{"text-align":"left"}},Cn=t("code",null,"栈",-1),Kn=t("code",null,"树",-1),Pn=t("code",null,"深度优先搜索",-1),Bn=t("code",null,"2+",-1),Vn={style:{"text-align":"left"}},Tn=t("td",{style:{"text-align":"center"}},"116",-1),Un={style:{"text-align":"left"}},Rn={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node",target:"_blank",rel:"noopener noreferrer"},Wn={style:{"text-align":"center"}},Gn={href:"/problem/0116",target:"_blank",rel:"noopener noreferrer"},Yn={style:{"text-align":"left"}},Qn=t("code",null,"树",-1),Sn=t("code",null,"深度优先搜索",-1),Dn=t("code",null,"广度优先搜索",-1),Zn=t("code",null,"2+",-1),An={style:{"text-align":"left"}},Fn=t("td",{style:{"text-align":"center"}},"117",-1),Jn={style:{"text-align":"left"}},Xn={href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",target:"_blank",rel:"noopener noreferrer"},$n={style:{"text-align":"center"}},ts={href:"/problem/0117",target:"_blank",rel:"noopener noreferrer"},es={style:{"text-align":"left"}},ls=t("code",null,"树",-1),os=t("code",null,"深度优先搜索",-1),ns=t("code",null,"广度优先搜索",-1),ss=t("code",null,"2+",-1),ds={style:{"text-align":"left"}},_s=t("td",{style:{"text-align":"center"}},"124",-1),rs={style:{"text-align":"left"}},is={href:"https://leetcode.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},cs={style:{"text-align":"center"}},as={href:"/problem/0124",target:"_blank",rel:"noopener noreferrer"},hs={style:{"text-align":"left"}},us=t("code",null,"树",-1),fs=t("code",null,"深度优先搜索",-1),gs=t("code",null,"动态规划",-1),ms=t("code",null,"1+",-1),ys={style:{"text-align":"left"}},xs=t("td",{style:{"text-align":"center"}},"129",-1),bs={style:{"text-align":"left"}},ps={href:"https://leetcode.com/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},ks={style:{"text-align":"center"}},Ms={href:"/problem/0129",target:"_blank",rel:"noopener noreferrer"},vs={style:{"text-align":"left"}},Is=t("code",null,"树",-1),Es=t("code",null,"深度优先搜索",-1),ws=t("code",null,"二叉树",-1),Hs={style:{"text-align":"left"}},zs=t("td",{style:{"text-align":"center"}},"144",-1),Os={style:{"text-align":"left"}},qs={href:"https://leetcode.com/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},js={style:{"text-align":"center"}},Ns={href:"/problem/0144",target:"_blank",rel:"noopener noreferrer"},Ls={style:{"text-align":"left"}},Cs=t("code",null,"栈",-1),Ks=t("code",null,"树",-1),Ps=t("code",null,"深度优先搜索",-1),Bs=t("code",null,"1+",-1),Vs={style:{"text-align":"left"}},Ts=t("td",{style:{"text-align":"center"}},"145",-1),Us={style:{"text-align":"left"}},Rs={href:"https://leetcode.com/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Ws={style:{"text-align":"center"}},Gs={href:"/problem/0145",target:"_blank",rel:"noopener noreferrer"},Ys={style:{"text-align":"left"}},Qs=t("code",null,"栈",-1),Ss=t("code",null,"树",-1),Ds=t("code",null,"深度优先搜索",-1),Zs=t("code",null,"1+",-1),As={style:{"text-align":"left"}},Fs=t("td",{style:{"text-align":"center"}},"156",-1),Js={style:{"text-align":"left"}},Xs={href:"https://leetcode.com/problems/binary-tree-upside-down",target:"_blank",rel:"noopener noreferrer"},$s={style:{"text-align":"center"}},td={href:"/problem/0156",target:"_blank",rel:"noopener noreferrer"},ed={style:{"text-align":"left"}},ld=t("code",null,"树",-1),od=t("code",null,"深度优先搜索",-1),nd=t("code",null,"二叉树",-1),sd={style:{"text-align":"left"}},dd=t("td",{style:{"text-align":"center"}},"173",-1),_d={style:{"text-align":"left"}},rd={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},id={style:{"text-align":"center"}},cd={href:"/problem/0173",target:"_blank",rel:"noopener noreferrer"},ad={style:{"text-align":"left"}},hd=t("code",null,"栈",-1),ud=t("code",null,"树",-1),fd=t("code",null,"设计",-1),gd=t("code",null,"3+",-1),md={style:{"text-align":"left"}},yd=t("td",{style:{"text-align":"center"}},"199",-1),xd={style:{"text-align":"left"}},bd={href:"https://leetcode.com/problems/binary-tree-right-side-view",target:"_blank",rel:"noopener noreferrer"},pd={style:{"text-align":"center"}},kd={href:"/problem/0199",target:"_blank",rel:"noopener noreferrer"},Md={style:{"text-align":"left"}},vd=t("code",null,"树",-1),Id=t("code",null,"深度优先搜索",-1),Ed=t("code",null,"广度优先搜索",-1),wd=t("code",null,"1+",-1),Hd={style:{"text-align":"left"}},zd=t("td",{style:{"text-align":"center"}},"222",-1),Od={style:{"text-align":"left"}},qd={href:"https://leetcode.com/problems/count-complete-tree-nodes",target:"_blank",rel:"noopener noreferrer"},jd={style:{"text-align":"center"}},Nd={href:"/problem/0222",target:"_blank",rel:"noopener noreferrer"},Ld={style:{"text-align":"left"}},Cd=t("code",null,"位运算",-1),Kd=t("code",null,"树",-1),Pd=t("code",null,"二分查找",-1),Bd=t("code",null,"1+",-1),Vd={style:{"text-align":"left"}},Td=t("td",{style:{"text-align":"center"}},"226",-1),Ud={style:{"text-align":"left"}},Rd={href:"https://leetcode.com/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},Wd={style:{"text-align":"center"}},Gd={href:"/problem/0226",target:"_blank",rel:"noopener noreferrer"},Yd={style:{"text-align":"left"}},Qd=t("code",null,"树",-1),Sd=t("code",null,"深度优先搜索",-1),Dd=t("code",null,"广度优先搜索",-1),Zd=t("code",null,"1+",-1),Ad={style:{"text-align":"left"}},Fd=t("td",{style:{"text-align":"center"}},"230",-1),Jd={style:{"text-align":"left"}},Xd={href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},$d={style:{"text-align":"center"}},t_={href:"/problem/0230",target:"_blank",rel:"noopener noreferrer"},e_={style:{"text-align":"left"}},l_=t("code",null,"树",-1),o_=t("code",null,"深度优先搜索",-1),n_=t("code",null,"二叉搜索树",-1),s_=t("code",null,"1+",-1),d_={style:{"text-align":"left"}},__=t("td",{style:{"text-align":"center"}},"235",-1),r_={style:{"text-align":"left"}},i_={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},c_={style:{"text-align":"center"}},a_={href:"/problem/0235",target:"_blank",rel:"noopener noreferrer"},h_={style:{"text-align":"left"}},u_=t("code",null,"树",-1),f_=t("code",null,"深度优先搜索",-1),g_=t("code",null,"二叉搜索树",-1),m_=t("code",null,"1+",-1),y_={style:{"text-align":"left"}},x_=t("td",{style:{"text-align":"center"}},"236",-1),b_={style:{"text-align":"left"}},p_={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},k_={style:{"text-align":"center"}},M_={href:"/problem/0236",target:"_blank",rel:"noopener noreferrer"},v_={style:{"text-align":"left"}},I_=t("code",null,"树",-1),E_=t("code",null,"深度优先搜索",-1),w_=t("code",null,"二叉树",-1),H_={style:{"text-align":"left"}},z_=t("td",{style:{"text-align":"center"}},"250",-1),O_={style:{"text-align":"left"}},q_={href:"https://leetcode.com/problems/count-univalue-subtrees",target:"_blank",rel:"noopener noreferrer"},j_=t("td",{style:{"text-align":"center"}},null,-1),N_={style:{"text-align":"left"}},L_=t("code",null,"树",-1),C_=t("code",null,"深度优先搜索",-1),K_=t("code",null,"二叉树",-1),P_={style:{"text-align":"left"}},B_=t("td",{style:{"text-align":"center"}},"255",-1),V_={style:{"text-align":"left"}},T_={href:"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},U_=t("td",{style:{"text-align":"center"}},null,-1),R_={style:{"text-align":"left"}},W_=t("code",null,"栈",-1),G_=t("code",null,"树",-1),Y_=t("code",null,"二叉搜索树",-1),Q_=t("code",null,"4+",-1),S_={style:{"text-align":"left"}},D_=t("td",{style:{"text-align":"center"}},"257",-1),Z_={style:{"text-align":"left"}},A_={href:"https://leetcode.com/problems/binary-tree-paths",target:"_blank",rel:"noopener noreferrer"},F_={style:{"text-align":"center"}},J_={href:"/problem/0257",target:"_blank",rel:"noopener noreferrer"},X_={style:{"text-align":"left"}},$_=t("code",null,"树",-1),tr=t("code",null,"深度优先搜索",-1),er=t("code",null,"字符串",-1),lr=t("code",null,"2+",-1),or={style:{"text-align":"left"}},nr=t("td",{style:{"text-align":"center"}},"270",-1),sr={style:{"text-align":"left"}},dr={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},_r=t("td",{style:{"text-align":"center"}},null,-1),rr={style:{"text-align":"left"}},ir=t("code",null,"树",-1),cr=t("code",null,"深度优先搜索",-1),ar=t("code",null,"二叉搜索树",-1),hr=t("code",null,"2+",-1),ur={style:{"text-align":"left"}},fr=t("td",{style:{"text-align":"center"}},"272",-1),gr={style:{"text-align":"left"}},mr={href:"https://leetcode.com/problems/closest-binary-search-tree-value-ii",target:"_blank",rel:"noopener noreferrer"},yr=t("td",{style:{"text-align":"center"}},null,-1),xr={style:{"text-align":"left"}},br=t("code",null,"栈",-1),pr=t("code",null,"树",-1),kr=t("code",null,"深度优先搜索",-1),Mr=t("code",null,"4+",-1),vr={style:{"text-align":"left"}},Ir=t("td",{style:{"text-align":"center"}},"285",-1),Er={style:{"text-align":"left"}},wr={href:"https://leetcode.com/problems/inorder-successor-in-bst",target:"_blank",rel:"noopener noreferrer"},Hr=t("td",{style:{"text-align":"center"}},null,-1),zr={style:{"text-align":"left"}},Or=t("code",null,"树",-1),qr=t("code",null,"深度优先搜索",-1),jr=t("code",null,"二叉搜索树",-1),Nr=t("code",null,"1+",-1),Lr={style:{"text-align":"left"}},Cr=t("td",{style:{"text-align":"center"}},"297",-1),Kr={style:{"text-align":"left"}},Pr={href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},Br={style:{"text-align":"center"}},Vr={href:"/problem/0297",target:"_blank",rel:"noopener noreferrer"},Tr={style:{"text-align":"left"}},Ur=t("code",null,"树",-1),Rr=t("code",null,"深度优先搜索",-1),Wr=t("code",null,"广度优先搜索",-1),Gr=t("code",null,"3+",-1),Yr={style:{"text-align":"left"}},Qr=t("td",{style:{"text-align":"center"}},"298",-1),Sr={style:{"text-align":"left"}},Dr={href:"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence",target:"_blank",rel:"noopener noreferrer"},Zr=t("td",{style:{"text-align":"center"}},null,-1),Ar={style:{"text-align":"left"}},Fr=t("code",null,"树",-1),Jr=t("code",null,"深度优先搜索",-1),Xr=t("code",null,"二叉树",-1),$r={style:{"text-align":"left"}},ti=t("td",{style:{"text-align":"center"}},"314",-1),ei={style:{"text-align":"left"}},li={href:"https://leetcode.com/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},oi=t("td",{style:{"text-align":"center"}},null,-1),ni={style:{"text-align":"left"}},si=t("code",null,"树",-1),di=t("code",null,"深度优先搜索",-1),_i=t("code",null,"广度优先搜索",-1),ri=t("code",null,"3+",-1),ii={style:{"text-align":"left"}},ci=t("td",{style:{"text-align":"center"}},"331",-1),ai={style:{"text-align":"left"}},hi={href:"https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},ui=t("td",{style:{"text-align":"center"}},null,-1),fi={style:{"text-align":"left"}},gi=t("code",null,"栈",-1),mi=t("code",null,"树",-1),yi=t("code",null,"字符串",-1),xi=t("code",null,"1+",-1),bi={style:{"text-align":"left"}},pi=t("td",{style:{"text-align":"center"}},"333",-1),ki={style:{"text-align":"left"}},Mi={href:"https://leetcode.com/problems/largest-bst-subtree",target:"_blank",rel:"noopener noreferrer"},vi=t("td",{style:{"text-align":"center"}},null,-1),Ii={style:{"text-align":"left"}},Ei=t("code",null,"树",-1),wi=t("code",null,"深度优先搜索",-1),Hi=t("code",null,"二叉搜索树",-1),zi=t("code",null,"2+",-1),Oi={style:{"text-align":"left"}},qi=t("td",{style:{"text-align":"center"}},"337",-1),ji={style:{"text-align":"left"}},Ni={href:"https://leetcode.com/problems/house-robber-iii",target:"_blank",rel:"noopener noreferrer"},Li=t("td",{style:{"text-align":"center"}},null,-1),Ci={style:{"text-align":"left"}},Ki=t("code",null,"树",-1),Pi=t("code",null,"深度优先搜索",-1),Bi=t("code",null,"动态规划",-1),Vi=t("code",null,"1+",-1),Ti={style:{"text-align":"left"}},Ui=t("td",{style:{"text-align":"center"}},"341",-1),Ri={style:{"text-align":"left"}},Wi={href:"https://leetcode.com/problems/flatten-nested-list-iterator",target:"_blank",rel:"noopener noreferrer"},Gi=t("td",{style:{"text-align":"center"}},null,-1),Yi={style:{"text-align":"left"}},Qi=t("code",null,"栈",-1),Si=t("code",null,"树",-1),Di=t("code",null,"深度优先搜索",-1),Zi=t("code",null,"3+",-1),Ai={style:{"text-align":"left"}},Fi=t("td",{style:{"text-align":"center"}},"366",-1),Ji={style:{"text-align":"left"}},Xi={href:"https://leetcode.com/problems/find-leaves-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},$i={style:{"text-align":"center"}},tc={href:"/problem/0366",target:"_blank",rel:"noopener noreferrer"},ec={style:{"text-align":"left"}},lc=t("code",null,"树",-1),oc=t("code",null,"深度优先搜索",-1),nc=t("code",null,"二叉树",-1),sc={style:{"text-align":"left"}},dc=t("td",{style:{"text-align":"center"}},"404",-1),_c={style:{"text-align":"left"}},rc={href:"https://leetcode.com/problems/sum-of-left-leaves",target:"_blank",rel:"noopener noreferrer"},ic=t("td",{style:{"text-align":"center"}},null,-1),cc={style:{"text-align":"left"}},ac=t("code",null,"树",-1),hc=t("code",null,"深度优先搜索",-1),uc=t("code",null,"广度优先搜索",-1),fc=t("code",null,"1+",-1),gc={style:{"text-align":"left"}},mc=t("td",{style:{"text-align":"center"}},"426",-1),yc={style:{"text-align":"left"}},xc={href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},bc={style:{"text-align":"center"}},pc={href:"/problem/0426",target:"_blank",rel:"noopener noreferrer"},kc={style:{"text-align":"left"}},Mc=t("code",null,"栈",-1),vc=t("code",null,"树",-1),Ic=t("code",null,"深度优先搜索",-1),Ec=t("code",null,"4+",-1),wc={style:{"text-align":"left"}},Hc=t("td",{style:{"text-align":"center"}},"427",-1),zc={style:{"text-align":"left"}},Oc={href:"https://leetcode.com/problems/construct-quad-tree",target:"_blank",rel:"noopener noreferrer"},qc={style:{"text-align":"center"}},jc={href:"/problem/0427",target:"_blank",rel:"noopener noreferrer"},Nc={style:{"text-align":"left"}},Lc=t("code",null,"树",-1),Cc=t("code",null,"数组",-1),Kc=t("code",null,"分治",-1),Pc=t("code",null,"1+",-1),Bc={style:{"text-align":"left"}},Vc=t("td",{style:{"text-align":"center"}},"428",-1),Tc={style:{"text-align":"left"}},Uc={href:"https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},Rc=t("td",{style:{"text-align":"center"}},null,-1),Wc={style:{"text-align":"left"}},Gc=t("code",null,"树",-1),Yc=t("code",null,"深度优先搜索",-1),Qc=t("code",null,"广度优先搜索",-1),Sc=t("code",null,"1+",-1),Dc={style:{"text-align":"left"}},Zc=t("td",{style:{"text-align":"center"}},"429",-1),Ac={style:{"text-align":"left"}},Fc={href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},Jc=t("td",{style:{"text-align":"center"}},null,-1),Xc={style:{"text-align":"left"}},$c=t("code",null,"树",-1),ta=t("code",null,"广度优先搜索",-1),ea={style:{"text-align":"left"}},la=t("td",{style:{"text-align":"center"}},"431",-1),oa={style:{"text-align":"left"}},na={href:"https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree",target:"_blank",rel:"noopener noreferrer"},sa=t("td",{style:{"text-align":"center"}},null,-1),da={style:{"text-align":"left"}},_a=t("code",null,"树",-1),ra=t("code",null,"深度优先搜索",-1),ia=t("code",null,"广度优先搜索",-1),ca=t("code",null,"2+",-1),aa={style:{"text-align":"left"}},ha=t("td",{style:{"text-align":"center"}},"437",-1),ua={style:{"text-align":"left"}},fa={href:"https://leetcode.com/problems/path-sum-iii",target:"_blank",rel:"noopener noreferrer"},ga={style:{"text-align":"center"}},ma={href:"/problem/0437",target:"_blank",rel:"noopener noreferrer"},ya={style:{"text-align":"left"}},xa=t("code",null,"树",-1),ba=t("code",null,"深度优先搜索",-1),pa=t("code",null,"二叉树",-1),ka={style:{"text-align":"left"}},Ma=t("td",{style:{"text-align":"center"}},"449",-1),va={style:{"text-align":"left"}},Ia={href:"https://leetcode.com/problems/serialize-and-deserialize-bst",target:"_blank",rel:"noopener noreferrer"},Ea=t("td",{style:{"text-align":"center"}},null,-1),wa={style:{"text-align":"left"}},Ha=t("code",null,"树",-1),za=t("code",null,"深度优先搜索",-1),Oa=t("code",null,"广度优先搜索",-1),qa=t("code",null,"4+",-1),ja={style:{"text-align":"left"}},Na=t("td",{style:{"text-align":"center"}},"450",-1),La={style:{"text-align":"left"}},Ca={href:"https://leetcode.com/problems/delete-node-in-a-bst",target:"_blank",rel:"noopener noreferrer"},Ka={style:{"text-align":"center"}},Pa={href:"/problem/0450",target:"_blank",rel:"noopener noreferrer"},Ba={style:{"text-align":"left"}},Va=t("code",null,"树",-1),Ta=t("code",null,"二叉搜索树",-1),Ua=t("code",null,"二叉树",-1),Ra={style:{"text-align":"left"}},Wa=t("td",{style:{"text-align":"center"}},"501",-1),Ga={style:{"text-align":"left"}},Ya={href:"https://leetcode.com/problems/find-mode-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Qa=t("td",{style:{"text-align":"center"}},null,-1),Sa={style:{"text-align":"left"}},Da=t("code",null,"树",-1),Za=t("code",null,"深度优先搜索",-1),Aa=t("code",null,"二叉搜索树",-1),Fa=t("code",null,"1+",-1),Ja={style:{"text-align":"left"}},Xa=t("td",{style:{"text-align":"center"}},"508",-1),$a={style:{"text-align":"left"}},th={href:"https://leetcode.com/problems/most-frequent-subtree-sum",target:"_blank",rel:"noopener noreferrer"},eh=t("td",{style:{"text-align":"center"}},null,-1),lh={style:{"text-align":"left"}},oh=t("code",null,"树",-1),nh=t("code",null,"深度优先搜索",-1),sh=t("code",null,"哈希表",-1),dh=t("code",null,"1+",-1),_h={style:{"text-align":"left"}},rh=t("td",{style:{"text-align":"center"}},"510",-1),ih={style:{"text-align":"left"}},ch={href:"https://leetcode.com/problems/inorder-successor-in-bst-ii",target:"_blank",rel:"noopener noreferrer"},ah=t("td",{style:{"text-align":"center"}},null,-1),hh={style:{"text-align":"left"}},uh=t("code",null,"树",-1),fh=t("code",null,"二叉搜索树",-1),gh=t("code",null,"二叉树",-1),mh={style:{"text-align":"left"}},yh=t("td",{style:{"text-align":"center"}},"513",-1),xh={style:{"text-align":"left"}},bh={href:"https://leetcode.com/problems/find-bottom-left-tree-value",target:"_blank",rel:"noopener noreferrer"},ph=t("td",{style:{"text-align":"center"}},null,-1),kh={style:{"text-align":"left"}},Mh=t("code",null,"树",-1),vh=t("code",null,"深度优先搜索",-1),Ih=t("code",null,"广度优先搜索",-1),Eh=t("code",null,"1+",-1),wh={style:{"text-align":"left"}},Hh=t("td",{style:{"text-align":"center"}},"515",-1),zh={style:{"text-align":"left"}},Oh={href:"https://leetcode.com/problems/find-largest-value-in-each-tree-row",target:"_blank",rel:"noopener noreferrer"},qh=t("td",{style:{"text-align":"center"}},null,-1),jh={style:{"text-align":"left"}},Nh=t("code",null,"树",-1),Lh=t("code",null,"深度优先搜索",-1),Ch=t("code",null,"广度优先搜索",-1),Kh=t("code",null,"1+",-1),Ph={style:{"text-align":"left"}},Bh=t("td",{style:{"text-align":"center"}},"530",-1),Vh={style:{"text-align":"left"}},Th={href:"https://leetcode.com/problems/minimum-absolute-difference-in-bst",target:"_blank",rel:"noopener noreferrer"},Uh={style:{"text-align":"center"}},Rh={href:"/problem/0530",target:"_blank",rel:"noopener noreferrer"},Wh={style:{"text-align":"left"}},Gh=t("code",null,"树",-1),Yh=t("code",null,"深度优先搜索",-1),Qh=t("code",null,"广度优先搜索",-1),Sh=t("code",null,"2+",-1),Dh={style:{"text-align":"left"}},Zh=t("td",{style:{"text-align":"center"}},"536",-1),Ah={style:{"text-align":"left"}},Fh={href:"https://leetcode.com/problems/construct-binary-tree-from-string",target:"_blank",rel:"noopener noreferrer"},Jh=t("td",{style:{"text-align":"center"}},null,-1),Xh={style:{"text-align":"left"}},$h=t("code",null,"栈",-1),t1=t("code",null,"树",-1),e1=t("code",null,"深度优先搜索",-1),l1=t("code",null,"2+",-1),o1={style:{"text-align":"left"}},n1=t("td",{style:{"text-align":"center"}},"538",-1),s1={style:{"text-align":"left"}},d1={href:"https://leetcode.com/problems/convert-bst-to-greater-tree",target:"_blank",rel:"noopener noreferrer"},_1=t("td",{style:{"text-align":"center"}},null,-1),r1={style:{"text-align":"left"}},i1=t("code",null,"树",-1),c1=t("code",null,"深度优先搜索",-1),a1=t("code",null,"二叉搜索树",-1),h1=t("code",null,"1+",-1),u1={style:{"text-align":"left"}},f1=t("td",{style:{"text-align":"center"}},"543",-1),g1={style:{"text-align":"left"}},m1={href:"https://leetcode.com/problems/diameter-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},y1={style:{"text-align":"center"}},x1={href:"/problem/0543",target:"_blank",rel:"noopener noreferrer"},b1={style:{"text-align":"left"}},p1=t("code",null,"树",-1),k1=t("code",null,"深度优先搜索",-1),M1=t("code",null,"二叉树",-1),v1={style:{"text-align":"left"}},I1=t("td",{style:{"text-align":"center"}},"545",-1),E1={style:{"text-align":"left"}},w1={href:"https://leetcode.com/problems/boundary-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},H1=t("td",{style:{"text-align":"center"}},null,-1),z1={style:{"text-align":"left"}},O1=t("code",null,"树",-1),q1=t("code",null,"深度优先搜索",-1),j1=t("code",null,"二叉树",-1),N1={style:{"text-align":"left"}},L1=t("td",{style:{"text-align":"center"}},"549",-1),C1={style:{"text-align":"left"}},K1={href:"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii",target:"_blank",rel:"noopener noreferrer"},P1=t("td",{style:{"text-align":"center"}},null,-1),B1={style:{"text-align":"left"}},V1=t("code",null,"树",-1),T1=t("code",null,"深度优先搜索",-1),U1=t("code",null,"二叉树",-1),R1={style:{"text-align":"left"}},W1=t("td",{style:{"text-align":"center"}},"558",-1),G1={style:{"text-align":"left"}},Y1={href:"https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",target:"_blank",rel:"noopener noreferrer"},Q1=t("td",{style:{"text-align":"center"}},null,-1),S1={style:{"text-align":"left"}},D1=t("code",null,"树",-1),Z1=t("code",null,"分治",-1),A1={style:{"text-align":"left"}},F1=t("td",{style:{"text-align":"center"}},"559",-1),J1={style:{"text-align":"left"}},X1={href:"https://leetcode.com/problems/maximum-depth-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},$1={style:{"text-align":"center"}},tu={href:"/problem/0559",target:"_blank",rel:"noopener noreferrer"},eu={style:{"text-align":"left"}},lu=t("code",null,"树",-1),ou=t("code",null,"深度优先搜索",-1),nu=t("code",null,"广度优先搜索",-1),su={style:{"text-align":"left"}},du=t("td",{style:{"text-align":"center"}},"563",-1),_u={style:{"text-align":"left"}},ru={href:"https://leetcode.com/problems/binary-tree-tilt",target:"_blank",rel:"noopener noreferrer"},iu=t("td",{style:{"text-align":"center"}},null,-1),cu={style:{"text-align":"left"}},au=t("code",null,"树",-1),hu=t("code",null,"深度优先搜索",-1),uu=t("code",null,"二叉树",-1),fu={style:{"text-align":"left"}},gu=t("td",{style:{"text-align":"center"}},"572",-1),mu={style:{"text-align":"left"}},yu={href:"https://leetcode.com/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},xu={style:{"text-align":"center"}},bu={href:"/problem/0572",target:"_blank",rel:"noopener noreferrer"},pu={style:{"text-align":"left"}},ku=t("code",null,"树",-1),Mu=t("code",null,"深度优先搜索",-1),vu=t("code",null,"二叉树",-1),Iu=t("code",null,"2+",-1),Eu={style:{"text-align":"left"}},wu=t("td",{style:{"text-align":"center"}},"582",-1),Hu={style:{"text-align":"left"}},zu={href:"https://leetcode.com/problems/kill-process",target:"_blank",rel:"noopener noreferrer"},Ou=t("td",{style:{"text-align":"center"}},null,-1),qu={style:{"text-align":"left"}},ju=t("code",null,"树",-1),Nu=t("code",null,"深度优先搜索",-1),Lu=t("code",null,"广度优先搜索",-1),Cu=t("code",null,"2+",-1),Ku={style:{"text-align":"left"}},Pu=t("td",{style:{"text-align":"center"}},"589",-1),Bu={style:{"text-align":"left"}},Vu={href:"https://leetcode.com/problems/n-ary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Tu={style:{"text-align":"center"}},Uu={href:"/problem/0589",target:"_blank",rel:"noopener noreferrer"},Ru={style:{"text-align":"left"}},Wu=t("code",null,"栈",-1),Gu=t("code",null,"树",-1),Yu=t("code",null,"深度优先搜索",-1),Qu={style:{"text-align":"left"}},Su=t("td",{style:{"text-align":"center"}},"590",-1),Du={style:{"text-align":"left"}},Zu={href:"https://leetcode.com/problems/n-ary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Au={style:{"text-align":"center"}},Fu={href:"/problem/0590",target:"_blank",rel:"noopener noreferrer"},Ju={style:{"text-align":"left"}},Xu=t("code",null,"栈",-1),$u=t("code",null,"树",-1),tf=t("code",null,"深度优先搜索",-1),ef={style:{"text-align":"left"}},lf=t("td",{style:{"text-align":"center"}},"606",-1),of={style:{"text-align":"left"}},nf={href:"https://leetcode.com/problems/construct-string-from-binary-tree",target:"_blank",rel:"noopener noreferrer"},sf=t("td",{style:{"text-align":"center"}},null,-1),df={style:{"text-align":"left"}},_f=t("code",null,"树",-1),rf=t("code",null,"深度优先搜索",-1),cf=t("code",null,"字符串",-1),af=t("code",null,"1+",-1),hf={style:{"text-align":"left"}},uf=t("td",{style:{"text-align":"center"}},"617",-1),ff={style:{"text-align":"left"}},gf={href:"https://leetcode.com/problems/merge-two-binary-trees",target:"_blank",rel:"noopener noreferrer"},mf={style:{"text-align":"center"}},yf={href:"/problem/0617",target:"_blank",rel:"noopener noreferrer"},xf={style:{"text-align":"left"}},bf=t("code",null,"树",-1),pf=t("code",null,"深度优先搜索",-1),kf=t("code",null,"广度优先搜索",-1),Mf=t("code",null,"1+",-1),vf={style:{"text-align":"left"}},If=t("td",{style:{"text-align":"center"}},"623",-1),Ef={style:{"text-align":"left"}},wf={href:"https://leetcode.com/problems/add-one-row-to-tree",target:"_blank",rel:"noopener noreferrer"},Hf=t("td",{style:{"text-align":"center"}},null,-1),zf={style:{"text-align":"left"}},Of=t("code",null,"树",-1),qf=t("code",null,"深度优先搜索",-1),jf=t("code",null,"广度优先搜索",-1),Nf=t("code",null,"1+",-1),Lf={style:{"text-align":"left"}},Cf=t("td",{style:{"text-align":"center"}},"637",-1),Kf={style:{"text-align":"left"}},Pf={href:"https://leetcode.com/problems/average-of-levels-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Bf={style:{"text-align":"center"}},Vf={href:"/problem/0637",target:"_blank",rel:"noopener noreferrer"},Tf={style:{"text-align":"left"}},Uf=t("code",null,"树",-1),Rf=t("code",null,"深度优先搜索",-1),Wf=t("code",null,"广度优先搜索",-1),Gf=t("code",null,"1+",-1),Yf={style:{"text-align":"left"}},Qf=t("td",{style:{"text-align":"center"}},"652",-1),Sf={style:{"text-align":"left"}},Df={href:"https://leetcode.com/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"},Zf=t("td",{style:{"text-align":"center"}},null,-1),Af={style:{"text-align":"left"}},Ff=t("code",null,"树",-1),Jf=t("code",null,"深度优先搜索",-1),Xf=t("code",null,"哈希表",-1),$f=t("code",null,"1+",-1),tg={style:{"text-align":"left"}},eg=t("td",{style:{"text-align":"center"}},"653",-1),lg={style:{"text-align":"left"}},og={href:"https://leetcode.com/problems/two-sum-iv-input-is-a-bst",target:"_blank",rel:"noopener noreferrer"},ng=t("td",{style:{"text-align":"center"}},null,-1),sg={style:{"text-align":"left"}},dg=t("code",null,"树",-1),_g=t("code",null,"深度优先搜索",-1),rg=t("code",null,"广度优先搜索",-1),ig=t("code",null,"4+",-1),cg={style:{"text-align":"left"}},ag=t("td",{style:{"text-align":"center"}},"654",-1),hg={style:{"text-align":"left"}},ug={href:"https://leetcode.com/problems/maximum-binary-tree",target:"_blank",rel:"noopener noreferrer"},fg={style:{"text-align":"center"}},gg={href:"/problem/0654",target:"_blank",rel:"noopener noreferrer"},mg={style:{"text-align":"left"}},yg=t("code",null,"栈",-1),xg=t("code",null,"树",-1),bg=t("code",null,"数组",-1),pg=t("code",null,"3+",-1),kg={style:{"text-align":"left"}},Mg=t("td",{style:{"text-align":"center"}},"655",-1),vg={style:{"text-align":"left"}},Ig={href:"https://leetcode.com/problems/print-binary-tree",target:"_blank",rel:"noopener noreferrer"},Eg=t("td",{style:{"text-align":"center"}},null,-1),wg={style:{"text-align":"left"}},Hg=t("code",null,"树",-1),zg=t("code",null,"深度优先搜索",-1),Og=t("code",null,"广度优先搜索",-1),qg=t("code",null,"1+",-1),jg={style:{"text-align":"left"}},Ng=t("td",{style:{"text-align":"center"}},"662",-1),Lg={style:{"text-align":"left"}},Cg={href:"https://leetcode.com/problems/maximum-width-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},Kg={style:{"text-align":"center"}},Pg={href:"/problem/0662",target:"_blank",rel:"noopener noreferrer"},Bg={style:{"text-align":"left"}},Vg=t("code",null,"树",-1),Tg=t("code",null,"深度优先搜索",-1),Ug=t("code",null,"广度优先搜索",-1),Rg=t("code",null,"1+",-1),Wg={style:{"text-align":"left"}},Gg=t("td",{style:{"text-align":"center"}},"663",-1),Yg={style:{"text-align":"left"}},Qg={href:"https://leetcode.com/problems/equal-tree-partition",target:"_blank",rel:"noopener noreferrer"},Sg=t("td",{style:{"text-align":"center"}},null,-1),Dg={style:{"text-align":"left"}},Zg=t("code",null,"树",-1),Ag=t("code",null,"深度优先搜索",-1),Fg=t("code",null,"二叉树",-1),Jg={style:{"text-align":"left"}},Xg=t("td",{style:{"text-align":"center"}},"666",-1),$g={style:{"text-align":"left"}},tm={href:"https://leetcode.com/problems/path-sum-iv",target:"_blank",rel:"noopener noreferrer"},em=t("td",{style:{"text-align":"center"}},null,-1),lm={style:{"text-align":"left"}},om=t("code",null,"树",-1),nm=t("code",null,"深度优先搜索",-1),sm=t("code",null,"数组",-1),dm=t("code",null,"2+",-1),_m={style:{"text-align":"left"}},rm=t("td",{style:{"text-align":"center"}},"669",-1),im={style:{"text-align":"left"}},cm={href:"https://leetcode.com/problems/trim-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},am=t("td",{style:{"text-align":"center"}},null,-1),hm={style:{"text-align":"left"}},um=t("code",null,"树",-1),fm=t("code",null,"深度优先搜索",-1),gm=t("code",null,"二叉搜索树",-1),mm=t("code",null,"1+",-1),ym={style:{"text-align":"left"}},xm=t("td",{style:{"text-align":"center"}},"671",-1),bm={style:{"text-align":"left"}},pm={href:"https://leetcode.com/problems/second-minimum-node-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},km=t("td",{style:{"text-align":"center"}},null,-1),Mm={style:{"text-align":"left"}},vm=t("code",null,"树",-1),Im=t("code",null,"深度优先搜索",-1),Em=t("code",null,"二叉树",-1),wm={style:{"text-align":"left"}},Hm=t("td",{style:{"text-align":"center"}},"687",-1),zm={style:{"text-align":"left"}},Om={href:"https://leetcode.com/problems/longest-univalue-path",target:"_blank",rel:"noopener noreferrer"},qm=t("td",{style:{"text-align":"center"}},null,-1),jm={style:{"text-align":"left"}},Nm=t("code",null,"树",-1),Lm=t("code",null,"深度优先搜索",-1),Cm=t("code",null,"二叉树",-1),Km={style:{"text-align":"left"}},Pm=t("td",{style:{"text-align":"center"}},"690",-1),Bm={style:{"text-align":"left"}},Vm={href:"https://leetcode.com/problems/employee-importance",target:"_blank",rel:"noopener noreferrer"},Tm=t("td",{style:{"text-align":"center"}},null,-1),Um={style:{"text-align":"left"}},Rm=t("code",null,"树",-1),Wm=t("code",null,"深度优先搜索",-1),Gm=t("code",null,"广度优先搜索",-1),Ym=t("code",null,"2+",-1),Qm={style:{"text-align":"left"}},Sm=t("td",{style:{"text-align":"center"}},"700",-1),Dm={style:{"text-align":"left"}},Zm={href:"https://leetcode.com/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Am={style:{"text-align":"center"}},Fm={href:"/problem/0700",target:"_blank",rel:"noopener noreferrer"},Jm={style:{"text-align":"left"}},Xm=t("code",null,"树",-1),$m=t("code",null,"二叉搜索树",-1),t2=t("code",null,"二叉树",-1),e2={style:{"text-align":"left"}},l2=t("td",{style:{"text-align":"center"}},"701",-1),o2={style:{"text-align":"left"}},n2={href:"https://leetcode.com/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},s2={style:{"text-align":"center"}},d2={href:"/problem/0701",target:"_blank",rel:"noopener noreferrer"},_2={style:{"text-align":"left"}},r2=t("code",null,"树",-1),i2=t("code",null,"二叉搜索树",-1),c2=t("code",null,"二叉树",-1),a2={style:{"text-align":"left"}},h2=t("td",{style:{"text-align":"center"}},"703",-1),u2={style:{"text-align":"left"}},f2={href:"https://leetcode.com/problems/kth-largest-element-in-a-stream",target:"_blank",rel:"noopener noreferrer"},g2={style:{"text-align":"center"}},m2={href:"/problem/0703",target:"_blank",rel:"noopener noreferrer"},y2={style:{"text-align":"left"}},x2=t("code",null,"树",-1),b2=t("code",null,"设计",-1),p2=t("code",null,"二叉搜索树",-1),k2=t("code",null,"3+",-1),M2={style:{"text-align":"left"}},v2=t("td",{style:{"text-align":"center"}},"742",-1),I2={style:{"text-align":"left"}},E2={href:"https://leetcode.com/problems/closest-leaf-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},w2=t("td",{style:{"text-align":"center"}},null,-1),H2={style:{"text-align":"left"}},z2=t("code",null,"树",-1),O2=t("code",null,"深度优先搜索",-1),q2=t("code",null,"广度优先搜索",-1),j2=t("code",null,"1+",-1),N2={style:{"text-align":"left"}},L2=t("td",{style:{"text-align":"center"}},"776",-1),C2={style:{"text-align":"left"}},K2={href:"https://leetcode.com/problems/split-bst",target:"_blank",rel:"noopener noreferrer"},P2=t("td",{style:{"text-align":"center"}},null,-1),B2={style:{"text-align":"left"}},V2=t("code",null,"树",-1),T2=t("code",null,"二叉搜索树",-1),U2=t("code",null,"递归",-1),R2=t("code",null,"1+",-1),W2={style:{"text-align":"left"}},G2=t("td",{style:{"text-align":"center"}},"783",-1),Y2={style:{"text-align":"left"}},Q2={href:"https://leetcode.com/problems/minimum-distance-between-bst-nodes",target:"_blank",rel:"noopener noreferrer"},S2={style:{"text-align":"center"}},D2={href:"/problem/0783",target:"_blank",rel:"noopener noreferrer"},Z2={style:{"text-align":"left"}},A2=t("code",null,"树",-1),F2=t("code",null,"深度优先搜索",-1),J2=t("code",null,"广度优先搜索",-1),X2=t("code",null,"2+",-1),$2={style:{"text-align":"left"}},ty=t("td",{style:{"text-align":"center"}},"814",-1),ey={style:{"text-align":"left"}},ly={href:"https://leetcode.com/problems/binary-tree-pruning",target:"_blank",rel:"noopener noreferrer"},oy=t("td",{style:{"text-align":"center"}},null,-1),ny={style:{"text-align":"left"}},sy=t("code",null,"树",-1),dy=t("code",null,"深度优先搜索",-1),_y=t("code",null,"二叉树",-1),ry={style:{"text-align":"left"}},iy=t("td",{style:{"text-align":"center"}},"834",-1),cy={style:{"text-align":"left"}},ay={href:"https://leetcode.com/problems/sum-of-distances-in-tree",target:"_blank",rel:"noopener noreferrer"},hy=t("td",{style:{"text-align":"center"}},null,-1),uy={style:{"text-align":"left"}},fy=t("code",null,"树",-1),gy=t("code",null,"深度优先搜索",-1),my=t("code",null,"图",-1),yy=t("code",null,"1+",-1),xy={style:{"text-align":"left"}},by=t("td",{style:{"text-align":"center"}},"863",-1),py={style:{"text-align":"left"}},ky={href:"https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},My=t("td",{style:{"text-align":"center"}},null,-1),vy={style:{"text-align":"left"}},Iy=t("code",null,"树",-1),Ey=t("code",null,"深度优先搜索",-1),wy=t("code",null,"广度优先搜索",-1),Hy=t("code",null,"2+",-1),zy={style:{"text-align":"left"}},Oy=t("td",{style:{"text-align":"center"}},"865",-1),qy={style:{"text-align":"left"}},jy={href:"https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes",target:"_blank",rel:"noopener noreferrer"},Ny=t("td",{style:{"text-align":"center"}},null,-1),Ly={style:{"text-align":"left"}},Cy=t("code",null,"树",-1),Ky=t("code",null,"深度优先搜索",-1),Py=t("code",null,"广度优先搜索",-1),By=t("code",null,"2+",-1),Vy={style:{"text-align":"left"}},Ty=t("td",{style:{"text-align":"center"}},"872",-1),Uy={style:{"text-align":"left"}},Ry={href:"https://leetcode.com/problems/leaf-similar-trees",target:"_blank",rel:"noopener noreferrer"},Wy=t("td",{style:{"text-align":"center"}},null,-1),Gy={style:{"text-align":"left"}},Yy=t("code",null,"树",-1),Qy=t("code",null,"深度优先搜索",-1),Sy=t("code",null,"二叉树",-1),Dy={style:{"text-align":"left"}},Zy=t("td",{style:{"text-align":"center"}},"889",-1),Ay={style:{"text-align":"left"}},Fy={href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},Jy={style:{"text-align":"center"}},Xy={href:"/problem/0889",target:"_blank",rel:"noopener noreferrer"},$y={style:{"text-align":"left"}},tx=t("code",null,"树",-1),ex=t("code",null,"数组",-1),lx=t("code",null,"哈希表",-1),ox=t("code",null,"2+",-1),nx={style:{"text-align":"left"}},sx=t("td",{style:{"text-align":"center"}},"894",-1),dx={style:{"text-align":"left"}},_x={href:"https://leetcode.com/problems/all-possible-full-binary-trees",target:"_blank",rel:"noopener noreferrer"},rx=t("td",{style:{"text-align":"center"}},null,-1),ix={style:{"text-align":"left"}},cx=t("code",null,"树",-1),ax=t("code",null,"递归",-1),hx=t("code",null,"记忆化搜索",-1),ux=t("code",null,"2+",-1),fx={style:{"text-align":"left"}},gx=t("td",{style:{"text-align":"center"}},"897",-1),mx={style:{"text-align":"left"}},yx={href:"https://leetcode.com/problems/increasing-order-search-tree",target:"_blank",rel:"noopener noreferrer"},xx=t("td",{style:{"text-align":"center"}},null,-1),bx={style:{"text-align":"left"}},px=t("code",null,"栈",-1),kx=t("code",null,"树",-1),Mx=t("code",null,"深度优先搜索",-1),vx=t("code",null,"2+",-1),Ix={style:{"text-align":"left"}},Ex=t("td",{style:{"text-align":"center"}},"919",-1),wx={style:{"text-align":"left"}},Hx={href:"https://leetcode.com/problems/complete-binary-tree-inserter",target:"_blank",rel:"noopener noreferrer"},zx=t("td",{style:{"text-align":"center"}},null,-1),Ox={style:{"text-align":"left"}},qx=t("code",null,"树",-1),jx=t("code",null,"广度优先搜索",-1),Nx=t("code",null,"设计",-1),Lx=t("code",null,"1+",-1),Cx={style:{"text-align":"left"}},Kx=t("td",{style:{"text-align":"center"}},"938",-1),Px={style:{"text-align":"left"}},Bx={href:"https://leetcode.com/problems/range-sum-of-bst",target:"_blank",rel:"noopener noreferrer"},Vx=t("td",{style:{"text-align":"center"}},null,-1),Tx={style:{"text-align":"left"}},Ux=t("code",null,"树",-1),Rx=t("code",null,"深度优先搜索",-1),Wx=t("code",null,"二叉搜索树",-1),Gx=t("code",null,"1+",-1),Yx={style:{"text-align":"left"}},Qx=t("td",{style:{"text-align":"center"}},"951",-1),Sx={style:{"text-align":"left"}},Dx={href:"https://leetcode.com/problems/flip-equivalent-binary-trees",target:"_blank",rel:"noopener noreferrer"},Zx=t("td",{style:{"text-align":"center"}},null,-1),Ax={style:{"text-align":"left"}},Fx=t("code",null,"树",-1),Jx=t("code",null,"深度优先搜索",-1),Xx=t("code",null,"二叉树",-1),$x={style:{"text-align":"left"}},tb=t("td",{style:{"text-align":"center"}},"958",-1),eb={style:{"text-align":"left"}},lb={href:"https://leetcode.com/problems/check-completeness-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},ob={style:{"text-align":"center"}},nb={href:"/problem/0958",target:"_blank",rel:"noopener noreferrer"},sb={style:{"text-align":"left"}},db=t("code",null,"树",-1),_b=t("code",null,"广度优先搜索",-1),rb=t("code",null,"二叉树",-1),ib={style:{"text-align":"left"}},cb=t("td",{style:{"text-align":"center"}},"965",-1),ab={style:{"text-align":"left"}},hb={href:"https://leetcode.com/problems/univalued-binary-tree",target:"_blank",rel:"noopener noreferrer"},ub=t("td",{style:{"text-align":"center"}},null,-1),fb={style:{"text-align":"left"}},gb=t("code",null,"树",-1),mb=t("code",null,"深度优先搜索",-1),yb=t("code",null,"广度优先搜索",-1),xb=t("code",null,"1+",-1),bb={style:{"text-align":"left"}},pb=t("td",{style:{"text-align":"center"}},"968",-1),kb={style:{"text-align":"left"}},Mb={href:"https://leetcode.com/problems/binary-tree-cameras",target:"_blank",rel:"noopener noreferrer"},vb=t("td",{style:{"text-align":"center"}},null,-1),Ib={style:{"text-align":"left"}},Eb=t("code",null,"树",-1),wb=t("code",null,"深度优先搜索",-1),Hb=t("code",null,"动态规划",-1),zb=t("code",null,"1+",-1),Ob={style:{"text-align":"left"}},qb=t("td",{style:{"text-align":"center"}},"971",-1),jb={style:{"text-align":"left"}},Nb={href:"https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Lb=t("td",{style:{"text-align":"center"}},null,-1),Cb={style:{"text-align":"left"}},Kb=t("code",null,"树",-1),Pb=t("code",null,"深度优先搜索",-1),Bb=t("code",null,"二叉树",-1),Vb={style:{"text-align":"left"}},Tb=t("td",{style:{"text-align":"center"}},"979",-1),Ub={style:{"text-align":"left"}},Rb={href:"https://leetcode.com/problems/distribute-coins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Wb=t("td",{style:{"text-align":"center"}},null,-1),Gb={style:{"text-align":"left"}},Yb=t("code",null,"树",-1),Qb=t("code",null,"深度优先搜索",-1),Sb=t("code",null,"二叉树",-1),Db={style:{"text-align":"left"}},Zb=t("td",{style:{"text-align":"center"}},"987",-1),Ab={style:{"text-align":"left"}},Fb={href:"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},Jb=t("td",{style:{"text-align":"center"}},null,-1),Xb={style:{"text-align":"left"}},$b=t("code",null,"树",-1),tp=t("code",null,"深度优先搜索",-1),ep=t("code",null,"广度优先搜索",-1),lp=t("code",null,"3+",-1),op={style:{"text-align":"left"}},np=t("td",{style:{"text-align":"center"}},"988",-1),sp={style:{"text-align":"left"}},dp={href:"https://leetcode.com/problems/smallest-string-starting-from-leaf",target:"_blank",rel:"noopener noreferrer"},_p=t("td",{style:{"text-align":"center"}},null,-1),rp={style:{"text-align":"left"}},ip=t("code",null,"树",-1),cp=t("code",null,"深度优先搜索",-1),ap=t("code",null,"字符串",-1),hp=t("code",null,"2+",-1),up={style:{"text-align":"left"}},fp=t("td",{style:{"text-align":"center"}},"993",-1),gp={style:{"text-align":"left"}},mp={href:"https://leetcode.com/problems/cousins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},yp=t("td",{style:{"text-align":"center"}},null,-1),xp={style:{"text-align":"left"}},bp=t("code",null,"树",-1),pp=t("code",null,"深度优先搜索",-1),kp=t("code",null,"广度优先搜索",-1),Mp=t("code",null,"1+",-1),vp={style:{"text-align":"left"}},Ip=t("td",{style:{"text-align":"center"}},"998",-1),Ep={style:{"text-align":"left"}},wp={href:"https://leetcode.com/problems/maximum-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},Hp=t("td",{style:{"text-align":"center"}},null,-1),zp={style:{"text-align":"left"}},Op=t("code",null,"树",-1),qp=t("code",null,"二叉树",-1),jp={style:{"text-align":"left"}},Np=t("td",{style:{"text-align":"center"}},"1008",-1),Lp={style:{"text-align":"left"}},Cp={href:"https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},Kp={style:{"text-align":"center"}},Pp={href:"/problem/1008",target:"_blank",rel:"noopener noreferrer"},Bp={style:{"text-align":"left"}},Vp=t("code",null,"栈",-1),Tp=t("code",null,"树",-1),Up=t("code",null,"二叉搜索树",-1),Rp=t("code",null,"3+",-1),Wp={style:{"text-align":"left"}},Gp=t("td",{style:{"text-align":"center"}},"1022",-1),Yp={style:{"text-align":"left"}},Qp={href:"https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers",target:"_blank",rel:"noopener noreferrer"},Sp=t("td",{style:{"text-align":"center"}},null,-1),Dp={style:{"text-align":"left"}},Zp=t("code",null,"树",-1),Ap=t("code",null,"深度优先搜索",-1),Fp=t("code",null,"二叉树",-1),Jp={style:{"text-align":"left"}},Xp=t("td",{style:{"text-align":"center"}},"1026",-1),$p={style:{"text-align":"left"}},t0={href:"https://leetcode.com/problems/maximum-difference-between-node-and-ancestor",target:"_blank",rel:"noopener noreferrer"},e0=t("td",{style:{"text-align":"center"}},null,-1),l0={style:{"text-align":"left"}},o0=t("code",null,"树",-1),n0=t("code",null,"深度优先搜索",-1),s0=t("code",null,"二叉树",-1),d0={style:{"text-align":"left"}},_0=t("td",{style:{"text-align":"center"}},"1028",-1),r0={style:{"text-align":"left"}},i0={href:"https://leetcode.com/problems/recover-a-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},c0=t("td",{style:{"text-align":"center"}},null,-1),a0={style:{"text-align":"left"}},h0=t("code",null,"树",-1),u0=t("code",null,"深度优先搜索",-1),f0=t("code",null,"字符串",-1),g0=t("code",null,"1+",-1),m0={style:{"text-align":"left"}},y0=t("td",{style:{"text-align":"center"}},"1038",-1),x0={style:{"text-align":"left"}},b0={href:"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree",target:"_blank",rel:"noopener noreferrer"},p0=t("td",{style:{"text-align":"center"}},null,-1),k0={style:{"text-align":"left"}},M0=t("code",null,"树",-1),v0=t("code",null,"深度优先搜索",-1),I0=t("code",null,"二叉搜索树",-1),E0=t("code",null,"1+",-1),w0={style:{"text-align":"left"}},H0=t("td",{style:{"text-align":"center"}},"1080",-1),z0={style:{"text-align":"left"}},O0={href:"https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths",target:"_blank",rel:"noopener noreferrer"},q0=t("td",{style:{"text-align":"center"}},null,-1),j0={style:{"text-align":"left"}},N0=t("code",null,"树",-1),L0=t("code",null,"深度优先搜索",-1),C0=t("code",null,"二叉树",-1),K0={style:{"text-align":"left"}},P0=t("td",{style:{"text-align":"center"}},"1104",-1),B0={style:{"text-align":"left"}},V0={href:"https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree",target:"_blank",rel:"noopener noreferrer"},T0=t("td",{style:{"text-align":"center"}},null,-1),U0={style:{"text-align":"left"}},R0=t("code",null,"树",-1),W0=t("code",null,"数学",-1),G0=t("code",null,"二叉树",-1),Y0={style:{"text-align":"left"}},Q0=t("td",{style:{"text-align":"center"}},"1110",-1),S0={style:{"text-align":"left"}},D0={href:"https://leetcode.com/problems/delete-nodes-and-return-forest",target:"_blank",rel:"noopener noreferrer"},Z0=t("td",{style:{"text-align":"center"}},null,-1),A0={style:{"text-align":"left"}},F0=t("code",null,"树",-1),J0=t("code",null,"深度优先搜索",-1),X0=t("code",null,"数组",-1),$0=t("code",null,"2+",-1),t3={style:{"text-align":"left"}},e3=t("td",{style:{"text-align":"center"}},"1120",-1),l3={style:{"text-align":"left"}},o3={href:"https://leetcode.com/problems/maximum-average-subtree",target:"_blank",rel:"noopener noreferrer"},n3=t("td",{style:{"text-align":"center"}},null,-1),s3={style:{"text-align":"left"}},d3=t("code",null,"树",-1),_3=t("code",null,"深度优先搜索",-1),r3=t("code",null,"二叉树",-1),i3={style:{"text-align":"left"}},c3=t("td",{style:{"text-align":"center"}},"1123",-1),a3={style:{"text-align":"left"}},h3={href:"https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves",target:"_blank",rel:"noopener noreferrer"},u3=t("td",{style:{"text-align":"center"}},null,-1),f3={style:{"text-align":"left"}},g3=t("code",null,"树",-1),m3=t("code",null,"深度优先搜索",-1),y3=t("code",null,"广度优先搜索",-1),x3=t("code",null,"2+",-1),b3={style:{"text-align":"left"}},p3=t("td",{style:{"text-align":"center"}},"1145",-1),k3={style:{"text-align":"left"}},M3={href:"https://leetcode.com/problems/binary-tree-coloring-game",target:"_blank",rel:"noopener noreferrer"},v3=t("td",{style:{"text-align":"center"}},null,-1),I3={style:{"text-align":"left"}},E3=t("code",null,"树",-1),w3=t("code",null,"深度优先搜索",-1),H3=t("code",null,"二叉树",-1),z3={style:{"text-align":"left"}},O3=t("td",{style:{"text-align":"center"}},"1161",-1),q3={style:{"text-align":"left"}},j3={href:"https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},N3=t("td",{style:{"text-align":"center"}},null,-1),L3={style:{"text-align":"left"}},C3=t("code",null,"树",-1),K3=t("code",null,"深度优先搜索",-1),P3=t("code",null,"广度优先搜索",-1),B3=t("code",null,"1+",-1),V3={style:{"text-align":"left"}},T3=t("td",{style:{"text-align":"center"}},"1214",-1),U3={style:{"text-align":"left"}},R3={href:"https://leetcode.com/problems/two-sum-bsts",target:"_blank",rel:"noopener noreferrer"},W3=t("td",{style:{"text-align":"center"}},null,-1),G3={style:{"text-align":"left"}},Y3=t("code",null,"栈",-1),Q3=t("code",null,"树",-1),S3=t("code",null,"深度优先搜索",-1),D3=t("code",null,"4+",-1),Z3={style:{"text-align":"left"}},A3=t("td",{style:{"text-align":"center"}},"1245",-1),F3={style:{"text-align":"left"}},J3={href:"https://leetcode.com/problems/tree-diameter",target:"_blank",rel:"noopener noreferrer"},X3=t("td",{style:{"text-align":"center"}},null,-1),$3={style:{"text-align":"left"}},t6=t("code",null,"树",-1),e6=t("code",null,"深度优先搜索",-1),l6=t("code",null,"广度优先搜索",-1),o6=t("code",null,"2+",-1),n6={style:{"text-align":"left"}},s6=t("td",{style:{"text-align":"center"}},"1257",-1),d6={style:{"text-align":"left"}},_6={href:"https://leetcode.com/problems/smallest-common-region",target:"_blank",rel:"noopener noreferrer"},r6=t("td",{style:{"text-align":"center"}},null,-1),i6={style:{"text-align":"left"}},c6=t("code",null,"树",-1),a6=t("code",null,"深度优先搜索",-1),h6=t("code",null,"广度优先搜索",-1),u6=t("code",null,"3+",-1),f6={style:{"text-align":"left"}},g6=t("td",{style:{"text-align":"center"}},"1261",-1),m6={style:{"text-align":"left"}},y6={href:"https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree",target:"_blank",rel:"noopener noreferrer"},x6=t("td",{style:{"text-align":"center"}},null,-1),b6={style:{"text-align":"left"}},p6=t("code",null,"树",-1),k6=t("code",null,"深度优先搜索",-1),M6=t("code",null,"广度优先搜索",-1),v6=t("code",null,"3+",-1),I6={style:{"text-align":"left"}},E6=t("td",{style:{"text-align":"center"}},"1273",-1),w6={style:{"text-align":"left"}},H6={href:"https://leetcode.com/problems/delete-tree-nodes",target:"_blank",rel:"noopener noreferrer"},z6=t("td",{style:{"text-align":"center"}},null,-1),O6={style:{"text-align":"left"}},q6=t("code",null,"树",-1),j6=t("code",null,"深度优先搜索",-1),N6=t("code",null,"广度优先搜索",-1),L6=t("code",null,"1+",-1),C6={style:{"text-align":"left"}},K6=t("td",{style:{"text-align":"center"}},"1302",-1),P6={style:{"text-align":"left"}},B6={href:"https://leetcode.com/problems/deepest-leaves-sum",target:"_blank",rel:"noopener noreferrer"},V6=t("td",{style:{"text-align":"center"}},null,-1),T6={style:{"text-align":"left"}},U6=t("code",null,"树",-1),R6=t("code",null,"深度优先搜索",-1),W6=t("code",null,"广度优先搜索",-1),G6=t("code",null,"1+",-1),Y6={style:{"text-align":"left"}},Q6=t("td",{style:{"text-align":"center"}},"1305",-1),S6={style:{"text-align":"left"}},D6={href:"https://leetcode.com/problems/all-elements-in-two-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},Z6=t("td",{style:{"text-align":"center"}},null,-1),A6={style:{"text-align":"left"}},F6=t("code",null,"树",-1),J6=t("code",null,"深度优先搜索",-1),X6=t("code",null,"二叉搜索树",-1),$6=t("code",null,"2+",-1),t8={style:{"text-align":"left"}},e8=t("td",{style:{"text-align":"center"}},"1315",-1),l8={style:{"text-align":"left"}},o8={href:"https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent",target:"_blank",rel:"noopener noreferrer"},n8=t("td",{style:{"text-align":"center"}},null,-1),s8={style:{"text-align":"left"}},d8=t("code",null,"树",-1),_8=t("code",null,"深度优先搜索",-1),r8=t("code",null,"广度优先搜索",-1),i8=t("code",null,"1+",-1),c8={style:{"text-align":"left"}},a8=t("td",{style:{"text-align":"center"}},"1325",-1),h8={style:{"text-align":"left"}},u8={href:"https://leetcode.com/problems/delete-leaves-with-a-given-value",target:"_blank",rel:"noopener noreferrer"},f8=t("td",{style:{"text-align":"center"}},null,-1),g8={style:{"text-align":"left"}},m8=t("code",null,"树",-1),y8=t("code",null,"深度优先搜索",-1),x8=t("code",null,"二叉树",-1),b8={style:{"text-align":"left"}},p8=t("td",{style:{"text-align":"center"}},"1339",-1),k8={style:{"text-align":"left"}},M8={href:"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree",target:"_blank",rel:"noopener noreferrer"},v8=t("td",{style:{"text-align":"center"}},null,-1),I8={style:{"text-align":"left"}},E8=t("code",null,"树",-1),w8=t("code",null,"深度优先搜索",-1),H8=t("code",null,"二叉树",-1),z8={style:{"text-align":"left"}},O8=t("td",{style:{"text-align":"center"}},"1361",-1),q8={style:{"text-align":"left"}},j8={href:"https://leetcode.com/problems/validate-binary-tree-nodes",target:"_blank",rel:"noopener noreferrer"},N8=t("td",{style:{"text-align":"center"}},null,-1),L8={style:{"text-align":"left"}},C8=t("code",null,"树",-1),K8=t("code",null,"深度优先搜索",-1),P8=t("code",null,"广度优先搜索",-1),B8=t("code",null,"3+",-1),V8={style:{"text-align":"left"}},T8=t("td",{style:{"text-align":"center"}},"1367",-1),U8={style:{"text-align":"left"}},R8={href:"https://leetcode.com/problems/linked-list-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},W8=t("td",{style:{"text-align":"center"}},null,-1),G8={style:{"text-align":"left"}},Y8=t("code",null,"树",-1),Q8=t("code",null,"深度优先搜索",-1),S8=t("code",null,"链表",-1),D8=t("code",null,"1+",-1),Z8={style:{"text-align":"left"}},A8=t("td",{style:{"text-align":"center"}},"1372",-1),F8={style:{"text-align":"left"}},J8={href:"https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},X8=t("td",{style:{"text-align":"center"}},null,-1),$8={style:{"text-align":"left"}},t4=t("code",null,"树",-1),e4=t("code",null,"深度优先搜索",-1),l4=t("code",null,"动态规划",-1),o4=t("code",null,"1+",-1),n4={style:{"text-align":"left"}},s4=t("td",{style:{"text-align":"center"}},"1373",-1),d4={style:{"text-align":"left"}},_4={href:"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},r4=t("td",{style:{"text-align":"center"}},null,-1),i4={style:{"text-align":"left"}},c4=t("code",null,"树",-1),a4=t("code",null,"深度优先搜索",-1),h4=t("code",null,"二叉搜索树",-1),u4=t("code",null,"2+",-1),f4={style:{"text-align":"left"}},g4=t("td",{style:{"text-align":"center"}},"1376",-1),m4={style:{"text-align":"left"}},y4={href:"https://leetcode.com/problems/time-needed-to-inform-all-employees",target:"_blank",rel:"noopener noreferrer"},x4=t("td",{style:{"text-align":"center"}},null,-1),b4={style:{"text-align":"left"}},p4=t("code",null,"树",-1),k4=t("code",null,"深度优先搜索",-1),M4=t("code",null,"广度优先搜索",-1),v4={style:{"text-align":"left"}},I4=t("td",{style:{"text-align":"center"}},"1377",-1),E4={style:{"text-align":"left"}},w4={href:"https://leetcode.com/problems/frog-position-after-t-seconds",target:"_blank",rel:"noopener noreferrer"},H4=t("td",{style:{"text-align":"center"}},null,-1),z4={style:{"text-align":"left"}},O4=t("code",null,"树",-1),q4=t("code",null,"深度优先搜索",-1),j4=t("code",null,"广度优先搜索",-1),N4=t("code",null,"1+",-1),L4={style:{"text-align":"left"}},C4=t("td",{style:{"text-align":"center"}},"1379",-1),K4={style:{"text-align":"left"}},P4={href:"https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",target:"_blank",rel:"noopener noreferrer"},B4=t("td",{style:{"text-align":"center"}},null,-1),V4={style:{"text-align":"left"}},T4=t("code",null,"树",-1),U4=t("code",null,"深度优先搜索",-1),R4=t("code",null,"广度优先搜索",-1),W4=t("code",null,"1+",-1),G4={style:{"text-align":"left"}},Y4=t("td",{style:{"text-align":"center"}},"1382",-1),Q4={style:{"text-align":"left"}},S4={href:"https://leetcode.com/problems/balance-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},D4=t("td",{style:{"text-align":"center"}},null,-1),Z4={style:{"text-align":"left"}},A4=t("code",null,"贪心",-1),F4=t("code",null,"树",-1),J4=t("code",null,"深度优先搜索",-1),X4=t("code",null,"3+",-1),$4={style:{"text-align":"left"}},t5=t("td",{style:{"text-align":"center"}},"1430",-1),e5={style:{"text-align":"left"}},l5={href:"https://leetcode.com/problems/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},o5=t("td",{style:{"text-align":"center"}},null,-1),n5={style:{"text-align":"left"}},s5=t("code",null,"树",-1),d5=t("code",null,"深度优先搜索",-1),_5=t("code",null,"广度优先搜索",-1),r5=t("code",null,"1+",-1),i5={style:{"text-align":"left"}},c5=t("td",{style:{"text-align":"center"}},"1443",-1),a5={style:{"text-align":"left"}},h5={href:"https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree",target:"_blank",rel:"noopener noreferrer"},u5=t("td",{style:{"text-align":"center"}},null,-1),f5={style:{"text-align":"left"}},g5=t("code",null,"树",-1),m5=t("code",null,"深度优先搜索",-1),y5=t("code",null,"广度优先搜索",-1),x5=t("code",null,"1+",-1),b5={style:{"text-align":"left"}},p5=t("td",{style:{"text-align":"center"}},"1448",-1),k5={style:{"text-align":"left"}},M5={href:"https://leetcode.com/problems/count-good-nodes-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},v5=t("td",{style:{"text-align":"center"}},null,-1),I5={style:{"text-align":"left"}},E5=t("code",null,"树",-1),w5=t("code",null,"深度优先搜索",-1),H5=t("code",null,"广度优先搜索",-1),z5=t("code",null,"1+",-1),O5={style:{"text-align":"left"}},q5=t("td",{style:{"text-align":"center"}},"1457",-1),j5={style:{"text-align":"left"}},N5={href:"https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},L5=t("td",{style:{"text-align":"center"}},null,-1),C5={style:{"text-align":"left"}},K5=t("code",null,"位运算",-1),P5=t("code",null,"树",-1),B5=t("code",null,"深度优先搜索",-1),V5=t("code",null,"2+",-1),T5={style:{"text-align":"left"}},U5=t("td",{style:{"text-align":"center"}},"1469",-1),R5={style:{"text-align":"left"}},W5={href:"https://leetcode.com/problems/find-all-the-lonely-nodes",target:"_blank",rel:"noopener noreferrer"},G5=t("td",{style:{"text-align":"center"}},null,-1),Y5={style:{"text-align":"left"}},Q5=t("code",null,"树",-1),S5=t("code",null,"深度优先搜索",-1),D5=t("code",null,"广度优先搜索",-1),Z5=t("code",null,"1+",-1),A5={style:{"text-align":"left"}},F5=t("td",{style:{"text-align":"center"}},"1483",-1),J5={style:{"text-align":"left"}},X5={href:"https://leetcode.com/problems/kth-ancestor-of-a-tree-node",target:"_blank",rel:"noopener noreferrer"},$5=t("td",{style:{"text-align":"center"}},null,-1),t7={style:{"text-align":"left"}},e7=t("code",null,"树",-1),l7=t("code",null,"深度优先搜索",-1),o7=t("code",null,"广度优先搜索",-1),n7=t("code",null,"3+",-1),s7={style:{"text-align":"left"}},d7=t("td",{style:{"text-align":"center"}},"1485",-1),_7={style:{"text-align":"left"}},r7={href:"https://leetcode.com/problems/clone-binary-tree-with-random-pointer",target:"_blank",rel:"noopener noreferrer"},i7=t("td",{style:{"text-align":"center"}},null,-1),c7={style:{"text-align":"left"}},a7=t("code",null,"树",-1),h7=t("code",null,"深度优先搜索",-1),u7=t("code",null,"广度优先搜索",-1),f7=t("code",null,"2+",-1),g7={style:{"text-align":"left"}},m7=t("td",{style:{"text-align":"center"}},"1490",-1),y7={style:{"text-align":"left"}},x7={href:"https://leetcode.com/problems/clone-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},b7=t("td",{style:{"text-align":"center"}},null,-1),p7={style:{"text-align":"left"}},k7=t("code",null,"树",-1),M7=t("code",null,"深度优先搜索",-1),v7=t("code",null,"广度优先搜索",-1),I7=t("code",null,"1+",-1),E7={style:{"text-align":"left"}},w7=t("td",{style:{"text-align":"center"}},"1506",-1),H7={style:{"text-align":"left"}},z7={href:"https://leetcode.com/problems/find-root-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},O7=t("td",{style:{"text-align":"center"}},null,-1),q7={style:{"text-align":"left"}},j7=t("code",null,"位运算",-1),N7=t("code",null,"树",-1),L7=t("code",null,"深度优先搜索",-1),C7=t("code",null,"1+",-1),K7={style:{"text-align":"left"}},P7=t("td",{style:{"text-align":"center"}},"1516",-1),B7={style:{"text-align":"left"}},V7={href:"https://leetcode.com/problems/move-sub-tree-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},T7=t("td",{style:{"text-align":"center"}},null,-1),U7={style:{"text-align":"left"}},R7=t("code",null,"树",-1),W7=t("code",null,"深度优先搜索",-1),G7={style:{"text-align":"left"}},Y7=t("td",{style:{"text-align":"center"}},"1519",-1),Q7={style:{"text-align":"left"}},S7={href:"https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label",target:"_blank",rel:"noopener noreferrer"},D7=t("td",{style:{"text-align":"center"}},null,-1),Z7={style:{"text-align":"left"}},A7=t("code",null,"树",-1),F7=t("code",null,"深度优先搜索",-1),J7=t("code",null,"广度优先搜索",-1),X7=t("code",null,"2+",-1),$7={style:{"text-align":"left"}},t9=t("td",{style:{"text-align":"center"}},"1522",-1),e9={style:{"text-align":"left"}},l9={href:"https://leetcode.com/problems/diameter-of-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},o9={style:{"text-align":"center"}},n9={href:"/problem/1522",target:"_blank",rel:"noopener noreferrer"},s9={style:{"text-align":"left"}},d9=t("code",null,"树",-1),_9=t("code",null,"深度优先搜索",-1),r9={style:{"text-align":"left"}},i9=t("td",{style:{"text-align":"center"}},"1530",-1),c9={style:{"text-align":"left"}},a9={href:"https://leetcode.com/problems/number-of-good-leaf-nodes-pairs",target:"_blank",rel:"noopener noreferrer"},h9=t("td",{style:{"text-align":"center"}},null,-1),u9={style:{"text-align":"left"}},f9=t("code",null,"树",-1),g9=t("code",null,"深度优先搜索",-1),m9=t("code",null,"二叉树",-1),y9={style:{"text-align":"left"}},x9=t("td",{style:{"text-align":"center"}},"1569",-1),b9={style:{"text-align":"left"}},p9={href:"https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst",target:"_blank",rel:"noopener noreferrer"},k9=t("td",{style:{"text-align":"center"}},null,-1),M9={style:{"text-align":"left"}},v9=t("code",null,"树",-1),I9=t("code",null,"并查集",-1),E9=t("code",null,"二叉搜索树",-1),w9=t("code",null,"7+",-1),H9={style:{"text-align":"left"}},z9=t("td",{style:{"text-align":"center"}},"1586",-1),O9={style:{"text-align":"left"}},q9={href:"https://leetcode.com/problems/binary-search-tree-iterator-ii",target:"_blank",rel:"noopener noreferrer"},j9=t("td",{style:{"text-align":"center"}},null,-1),N9={style:{"text-align":"left"}},L9=t("code",null,"栈",-1),C9=t("code",null,"树",-1),K9=t("code",null,"设计",-1),P9=t("code",null,"3+",-1),B9={style:{"text-align":"left"}},V9=t("td",{style:{"text-align":"center"}},"1597",-1),T9={style:{"text-align":"left"}},U9={href:"https://leetcode.com/problems/build-binary-expression-tree-from-infix-expression",target:"_blank",rel:"noopener noreferrer"},R9=t("td",{style:{"text-align":"center"}},null,-1),W9={style:{"text-align":"left"}},G9=t("code",null,"栈",-1),Y9=t("code",null,"树",-1),Q9=t("code",null,"字符串",-1),S9=t("code",null,"1+",-1),D9={style:{"text-align":"left"}},Z9=t("td",{style:{"text-align":"center"}},"1600",-1),A9={style:{"text-align":"left"}},F9={href:"https://leetcode.com/problems/throne-inheritance",target:"_blank",rel:"noopener noreferrer"},J9=t("td",{style:{"text-align":"center"}},null,-1),X9={style:{"text-align":"left"}},$9=t("code",null,"树",-1),tk=t("code",null,"深度优先搜索",-1),ek=t("code",null,"设计",-1),lk=t("code",null,"1+",-1),ok={style:{"text-align":"left"}},nk=t("td",{style:{"text-align":"center"}},"1602",-1),sk={style:{"text-align":"left"}},dk={href:"https://leetcode.com/problems/find-nearest-right-node-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},_k=t("td",{style:{"text-align":"center"}},null,-1),rk={style:{"text-align":"left"}},ik=t("code",null,"树",-1),ck=t("code",null,"广度优先搜索",-1),ak=t("code",null,"二叉树",-1),hk={style:{"text-align":"left"}},uk=t("td",{style:{"text-align":"center"}},"1609",-1),fk={style:{"text-align":"left"}},gk={href:"https://leetcode.com/problems/even-odd-tree",target:"_blank",rel:"noopener noreferrer"},mk=t("td",{style:{"text-align":"center"}},null,-1),yk={style:{"text-align":"left"}},xk=t("code",null,"树",-1),bk=t("code",null,"广度优先搜索",-1),pk=t("code",null,"二叉树",-1),kk={style:{"text-align":"left"}},Mk=t("td",{style:{"text-align":"center"}},"1612",-1),vk={style:{"text-align":"left"}},Ik={href:"https://leetcode.com/problems/check-if-two-expression-trees-are-equivalent",target:"_blank",rel:"noopener noreferrer"},Ek=t("td",{style:{"text-align":"center"}},null,-1),wk={style:{"text-align":"left"}},Hk=t("code",null,"树",-1),zk=t("code",null,"深度优先搜索",-1),Ok=t("code",null,"哈希表",-1),qk=t("code",null,"2+",-1),jk={style:{"text-align":"left"}},Nk=t("td",{style:{"text-align":"center"}},"1617",-1),Lk={style:{"text-align":"left"}},Ck={href:"https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities",target:"_blank",rel:"noopener noreferrer"},Kk=t("td",{style:{"text-align":"center"}},null,-1),Pk={style:{"text-align":"left"}},Bk=t("code",null,"位运算",-1),Vk=t("code",null,"树",-1),Tk=t("code",null,"动态规划",-1),Uk=t("code",null,"2+",-1),Rk={style:{"text-align":"left"}},Wk=t("td",{style:{"text-align":"center"}},"1628",-1),Gk={style:{"text-align":"left"}},Yk={href:"https://leetcode.com/problems/design-an-expression-tree-with-evaluate-function",target:"_blank",rel:"noopener noreferrer"},Qk=t("td",{style:{"text-align":"center"}},null,-1),Sk={style:{"text-align":"left"}},Dk=t("code",null,"栈",-1),Zk=t("code",null,"树",-1),Ak=t("code",null,"设计",-1),Fk=t("code",null,"3+",-1),Jk={style:{"text-align":"left"}},Xk=t("td",{style:{"text-align":"center"}},"1644",-1),$k={style:{"text-align":"left"}},tM={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},eM=t("td",{style:{"text-align":"center"}},null,-1),lM={style:{"text-align":"left"}},oM=t("code",null,"树",-1),nM=t("code",null,"深度优先搜索",-1),sM=t("code",null,"二叉树",-1),dM={style:{"text-align":"left"}},_M=t("td",{style:{"text-align":"center"}},"1650",-1),rM={style:{"text-align":"left"}},iM={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii",target:"_blank",rel:"noopener noreferrer"},cM=t("td",{style:{"text-align":"center"}},null,-1),aM={style:{"text-align":"left"}},hM=t("code",null,"树",-1),uM=t("code",null,"哈希表",-1),fM=t("code",null,"双指针",-1),gM=t("code",null,"1+",-1),mM={style:{"text-align":"left"}},yM=t("td",{style:{"text-align":"center"}},"1660",-1),xM={style:{"text-align":"left"}},bM={href:"https://leetcode.com/problems/correct-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},pM=t("td",{style:{"text-align":"center"}},null,-1),kM={style:{"text-align":"left"}},MM=t("code",null,"树",-1),vM=t("code",null,"深度优先搜索",-1),IM=t("code",null,"广度优先搜索",-1),EM=t("code",null,"2+",-1),wM={style:{"text-align":"left"}},HM=t("td",{style:{"text-align":"center"}},"1666",-1),zM={style:{"text-align":"left"}},OM={href:"https://leetcode.com/problems/change-the-root-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},qM=t("td",{style:{"text-align":"center"}},null,-1),jM={style:{"text-align":"left"}},NM=t("code",null,"树",-1),LM=t("code",null,"深度优先搜索",-1),CM=t("code",null,"二叉树",-1),KM={style:{"text-align":"left"}},PM=t("td",{style:{"text-align":"center"}},"1676",-1),BM={style:{"text-align":"left"}},VM={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv",target:"_blank",rel:"noopener noreferrer"},TM=t("td",{style:{"text-align":"center"}},null,-1),UM={style:{"text-align":"left"}},RM=t("code",null,"树",-1),WM=t("code",null,"深度优先搜索",-1),GM=t("code",null,"哈希表",-1),YM=t("code",null,"1+",-1),QM={style:{"text-align":"left"}},SM=t("td",{style:{"text-align":"center"}},"1719",-1),DM={style:{"text-align":"left"}},ZM={href:"https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree",target:"_blank",rel:"noopener noreferrer"},AM=t("td",{style:{"text-align":"center"}},null,-1),FM={style:{"text-align":"left"}},JM=t("code",null,"树",-1),XM=t("code",null,"图",-1),$M={style:{"text-align":"left"}},tv=t("td",{style:{"text-align":"center"}},"1740",-1),ev={style:{"text-align":"left"}},lv={href:"https://leetcode.com/problems/find-distance-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},ov=t("td",{style:{"text-align":"center"}},null,-1),nv={style:{"text-align":"left"}},sv=t("code",null,"树",-1),dv=t("code",null,"深度优先搜索",-1),_v=t("code",null,"广度优先搜索",-1),rv=t("code",null,"2+",-1),iv={style:{"text-align":"left"}},cv=t("td",{style:{"text-align":"center"}},"1766",-1),av={style:{"text-align":"left"}},hv={href:"https://leetcode.com/problems/tree-of-coprimes",target:"_blank",rel:"noopener noreferrer"},uv=t("td",{style:{"text-align":"center"}},null,-1),fv={style:{"text-align":"left"}},gv=t("code",null,"树",-1),mv=t("code",null,"深度优先搜索",-1),yv=t("code",null,"数组",-1),xv=t("code",null,"2+",-1),bv={style:{"text-align":"left"}},pv=t("td",{style:{"text-align":"center"}},"1902",-1),kv={style:{"text-align":"left"}},Mv={href:"https://leetcode.com/problems/depth-of-bst-given-insertion-order",target:"_blank",rel:"noopener noreferrer"},vv=t("td",{style:{"text-align":"center"}},null,-1),Iv={style:{"text-align":"left"}},Ev=t("code",null,"树",-1),wv=t("code",null,"二叉搜索树",-1),Hv=t("code",null,"数组",-1),zv=t("code",null,"2+",-1),Ov={style:{"text-align":"left"}},qv=t("td",{style:{"text-align":"center"}},"1916",-1),jv={style:{"text-align":"left"}},Nv={href:"https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony",target:"_blank",rel:"noopener noreferrer"},Lv=t("td",{style:{"text-align":"center"}},null,-1),Cv={style:{"text-align":"left"}},Kv=t("code",null,"树",-1),Pv=t("code",null,"图",-1),Bv=t("code",null,"拓扑排序",-1),Vv=t("code",null,"3+",-1),Tv={style:{"text-align":"left"}},Uv=t("td",{style:{"text-align":"center"}},"1932",-1),Rv={style:{"text-align":"left"}},Wv={href:"https://leetcode.com/problems/merge-bsts-to-create-single-bst",target:"_blank",rel:"noopener noreferrer"},Gv=t("td",{style:{"text-align":"center"}},null,-1),Yv={style:{"text-align":"left"}},Qv=t("code",null,"树",-1),Sv=t("code",null,"深度优先搜索",-1),Dv=t("code",null,"哈希表",-1),Zv=t("code",null,"2+",-1),Av={style:{"text-align":"left"}},Fv=t("td",{style:{"text-align":"center"}},"1973",-1),Jv={style:{"text-align":"left"}},Xv={href:"https://leetcode.com/problems/count-nodes-equal-to-sum-of-descendants",target:"_blank",rel:"noopener noreferrer"},$v=t("td",{style:{"text-align":"center"}},null,-1),tI={style:{"text-align":"left"}},eI=t("code",null,"树",-1),lI=t("code",null,"深度优先搜索",-1),oI=t("code",null,"二叉树",-1),nI={style:{"text-align":"left"}},sI=t("td",{style:{"text-align":"center"}},"1993",-1),dI={style:{"text-align":"left"}},_I={href:"https://leetcode.com/problems/operations-on-tree",target:"_blank",rel:"noopener noreferrer"},rI=t("td",{style:{"text-align":"center"}},null,-1),iI={style:{"text-align":"left"}},cI=t("code",null,"树",-1),aI=t("code",null,"深度优先搜索",-1),hI=t("code",null,"广度优先搜索",-1),uI=t("code",null,"3+",-1),fI={style:{"text-align":"left"}},gI=t("td",{style:{"text-align":"center"}},"2003",-1),mI={style:{"text-align":"left"}},yI={href:"https://leetcode.com/problems/smallest-missing-genetic-value-in-each-subtree",target:"_blank",rel:"noopener noreferrer"},xI=t("td",{style:{"text-align":"center"}},null,-1),bI={style:{"text-align":"left"}},pI=t("code",null,"树",-1),kI=t("code",null,"深度优先搜索",-1),MI=t("code",null,"并查集",-1),vI=t("code",null,"1+",-1),II={style:{"text-align":"left"}},EI=t("td",{style:{"text-align":"center"}},"2005",-1),wI={style:{"text-align":"left"}},HI={href:"https://leetcode.com/problems/subtree-removal-game-with-fibonacci-tree",target:"_blank",rel:"noopener noreferrer"},zI=t("td",{style:{"text-align":"center"}},null,-1),OI={style:{"text-align":"left"}},qI=t("code",null,"树",-1),jI=t("code",null,"数学",-1),NI=t("code",null,"动态规划",-1),LI=t("code",null,"2+",-1),CI={style:{"text-align":"left"}},KI=t("td",{style:{"text-align":"center"}},"2049",-1),PI={style:{"text-align":"left"}},BI={href:"https://leetcode.com/problems/count-nodes-with-the-highest-score",target:"_blank",rel:"noopener noreferrer"},VI=t("td",{style:{"text-align":"center"}},null,-1),TI={style:{"text-align":"left"}},UI=t("code",null,"树",-1),RI=t("code",null,"深度优先搜索",-1),WI=t("code",null,"数组",-1),GI=t("code",null,"1+",-1),YI={style:{"text-align":"left"}},QI=t("td",{style:{"text-align":"center"}},"2096",-1),SI={style:{"text-align":"left"}},DI={href:"https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another",target:"_blank",rel:"noopener noreferrer"},ZI=t("td",{style:{"text-align":"center"}},null,-1),AI={style:{"text-align":"left"}},FI=t("code",null,"树",-1),JI=t("code",null,"深度优先搜索",-1),XI=t("code",null,"字符串",-1),$I=t("code",null,"1+",-1),tE={style:{"text-align":"left"}},eE=t("td",{style:{"text-align":"center"}},"2196",-1),lE={style:{"text-align":"left"}},oE={href:"https://leetcode.com/problems/create-binary-tree-from-descriptions",target:"_blank",rel:"noopener noreferrer"},nE={style:{"text-align":"center"}},sE={href:"/problem/2196",target:"_blank",rel:"noopener noreferrer"},dE={style:{"text-align":"left"}},_E=t("code",null,"树",-1),rE=t("code",null,"数组",-1),iE=t("code",null,"哈希表",-1),cE=t("code",null,"1+",-1),aE={style:{"text-align":"left"}},hE=t("td",{style:{"text-align":"center"}},"2236",-1),uE={style:{"text-align":"left"}},fE={href:"https://leetcode.com/problems/root-equals-sum-of-children",target:"_blank",rel:"noopener noreferrer"},gE=t("td",{style:{"text-align":"center"}},null,-1),mE={style:{"text-align":"left"}},yE=t("code",null,"树",-1),xE=t("code",null,"二叉树",-1),bE={style:{"text-align":"left"}},pE=t("td",{style:{"text-align":"center"}},"2246",-1),kE={style:{"text-align":"left"}},ME={href:"https://leetcode.com/problems/longest-path-with-different-adjacent-characters",target:"_blank",rel:"noopener noreferrer"},vE=t("td",{style:{"text-align":"center"}},null,-1),IE={style:{"text-align":"left"}},EE=t("code",null,"树",-1),wE=t("code",null,"深度优先搜索",-1),HE=t("code",null,"图",-1),zE=t("code",null,"3+",-1),OE={style:{"text-align":"left"}},qE=t("td",{style:{"text-align":"center"}},"2265",-1),jE={style:{"text-align":"left"}},NE={href:"https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree",target:"_blank",rel:"noopener noreferrer"},LE=t("td",{style:{"text-align":"center"}},null,-1),CE={style:{"text-align":"left"}},KE=t("code",null,"树",-1),PE=t("code",null,"深度优先搜索",-1),BE=t("code",null,"二叉树",-1),VE={style:{"text-align":"left"}},TE=t("td",{style:{"text-align":"center"}},"2277",-1),UE={style:{"text-align":"left"}},RE={href:"https://leetcode.com/problems/closest-node-to-path-in-tree",target:"_blank",rel:"noopener noreferrer"},WE=t("td",{style:{"text-align":"center"}},null,-1),GE={style:{"text-align":"left"}},YE=t("code",null,"树",-1),QE=t("code",null,"深度优先搜索",-1),SE=t("code",null,"广度优先搜索",-1),DE=t("code",null,"1+",-1),ZE={style:{"text-align":"left"}},AE=t("td",{style:{"text-align":"center"}},"2313",-1),FE={style:{"text-align":"left"}},JE={href:"https://leetcode.com/problems/minimum-flips-in-binary-tree-to-get-result",target:"_blank",rel:"noopener noreferrer"},XE=t("td",{style:{"text-align":"center"}},null,-1),$E={style:{"text-align":"left"}},tw=t("code",null,"树",-1),ew=t("code",null,"深度优先搜索",-1),lw=t("code",null,"动态规划",-1),ow=t("code",null,"1+",-1),nw={style:{"text-align":"left"}},sw=t("td",{style:{"text-align":"center"}},"2322",-1),dw={style:{"text-align":"left"}},_w={href:"https://leetcode.com/problems/minimum-score-after-removals-on-a-tree",target:"_blank",rel:"noopener noreferrer"},rw=t("td",{style:{"text-align":"center"}},null,-1),iw={style:{"text-align":"left"}},cw=t("code",null,"位运算",-1),aw=t("code",null,"树",-1),hw=t("code",null,"深度优先搜索",-1),uw=t("code",null,"1+",-1),fw={style:{"text-align":"left"}},gw=t("td",{style:{"text-align":"center"}},"2331",-1),mw={style:{"text-align":"left"}},yw={href:"https://leetcode.com/problems/evaluate-boolean-binary-tree",target:"_blank",rel:"noopener noreferrer"},xw=t("td",{style:{"text-align":"center"}},null,-1),bw={style:{"text-align":"left"}},pw=t("code",null,"树",-1),kw=t("code",null,"深度优先搜索",-1),Mw=t("code",null,"二叉树",-1),vw={style:{"text-align":"left"}},Iw=t("td",{style:{"text-align":"center"}},"2368",-1),Ew={style:{"text-align":"left"}},ww={href:"https://leetcode.com/problems/reachable-nodes-with-restrictions",target:"_blank",rel:"noopener noreferrer"},Hw=t("td",{style:{"text-align":"center"}},null,-1),zw={style:{"text-align":"left"}},Ow=t("code",null,"树",-1),qw=t("code",null,"深度优先搜索",-1),jw=t("code",null,"广度优先搜索",-1),Nw=t("code",null,"4+",-1),Lw={style:{"text-align":"left"}},Cw=t("td",{style:{"text-align":"center"}},"2378",-1),Kw={style:{"text-align":"left"}},Pw={href:"https://leetcode.com/problems/choose-edges-to-maximize-score-in-a-tree",target:"_blank",rel:"noopener noreferrer"},Bw=t("td",{style:{"text-align":"center"}},null,-1),Vw={style:{"text-align":"left"}},Tw=t("code",null,"树",-1),Uw=t("code",null,"深度优先搜索",-1),Rw=t("code",null,"动态规划",-1),Ww={style:{"text-align":"left"}},Gw=t("td",{style:{"text-align":"center"}},"2385",-1),Yw={style:{"text-align":"left"}},Qw={href:"https://leetcode.com/problems/amount-of-time-for-binary-tree-to-be-infected",target:"_blank",rel:"noopener noreferrer"},Sw=t("td",{style:{"text-align":"center"}},null,-1),Dw={style:{"text-align":"left"}},Zw=t("code",null,"树",-1),Aw=t("code",null,"深度优先搜索",-1),Fw=t("code",null,"广度优先搜索",-1),Jw=t("code",null,"2+",-1),Xw={style:{"text-align":"left"}},$w=t("td",{style:{"text-align":"center"}},"2415",-1),tH={style:{"text-align":"left"}},eH={href:"https://leetcode.com/problems/reverse-odd-levels-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},lH=t("td",{style:{"text-align":"center"}},null,-1),oH={style:{"text-align":"left"}},nH=t("code",null,"树",-1),sH=t("code",null,"深度优先搜索",-1),dH=t("code",null,"广度优先搜索",-1),_H=t("code",null,"1+",-1),rH={style:{"text-align":"left"}},iH=t("td",{style:{"text-align":"center"}},"2421",-1),cH={style:{"text-align":"left"}},aH={href:"https://leetcode.com/problems/number-of-good-paths",target:"_blank",rel:"noopener noreferrer"},hH=t("td",{style:{"text-align":"center"}},null,-1),uH={style:{"text-align":"left"}},fH=t("code",null,"树",-1),gH=t("code",null,"并查集",-1),mH=t("code",null,"图",-1),yH=t("code",null,"3+",-1),xH={style:{"text-align":"left"}},bH=t("td",{style:{"text-align":"center"}},"2440",-1),pH={style:{"text-align":"left"}},kH={href:"https://leetcode.com/problems/create-components-with-same-value",target:"_blank",rel:"noopener noreferrer"},MH=t("td",{style:{"text-align":"center"}},null,-1),vH={style:{"text-align":"left"}},IH=t("code",null,"树",-1),EH=t("code",null,"深度优先搜索",-1),wH=t("code",null,"数组",-1),HH=t("code",null,"2+",-1),zH={style:{"text-align":"left"}},OH=t("td",{style:{"text-align":"center"}},"2445",-1),qH={style:{"text-align":"left"}},jH={href:"https://leetcode.com/problems/number-of-nodes-with-value-one",target:"_blank",rel:"noopener noreferrer"},NH=t("td",{style:{"text-align":"center"}},null,-1),LH={style:{"text-align":"left"}},CH=t("code",null,"树",-1),KH=t("code",null,"深度优先搜索",-1),PH=t("code",null,"广度优先搜索",-1),BH=t("code",null,"1+",-1),VH={style:{"text-align":"left"}},TH=t("td",{style:{"text-align":"center"}},"2458",-1),UH={style:{"text-align":"left"}},RH={href:"https://leetcode.com/problems/height-of-binary-tree-after-subtree-removal-queries",target:"_blank",rel:"noopener noreferrer"},WH=t("td",{style:{"text-align":"center"}},null,-1),GH={style:{"text-align":"left"}},YH=t("code",null,"树",-1),QH=t("code",null,"深度优先搜索",-1),SH=t("code",null,"广度优先搜索",-1),DH=t("code",null,"2+",-1),ZH={style:{"text-align":"left"}},AH=t("td",{style:{"text-align":"center"}},"2467",-1),FH={style:{"text-align":"left"}},JH={href:"https://leetcode.com/problems/most-profitable-path-in-a-tree",target:"_blank",rel:"noopener noreferrer"},XH=t("td",{style:{"text-align":"center"}},null,-1),$H={style:{"text-align":"left"}},tz=t("code",null,"树",-1),ez=t("code",null,"深度优先搜索",-1),lz=t("code",null,"广度优先搜索",-1),oz=t("code",null,"2+",-1),nz={style:{"text-align":"left"}},sz=t("td",{style:{"text-align":"center"}},"2471",-1),dz={style:{"text-align":"left"}},_z={href:"https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level",target:"_blank",rel:"noopener noreferrer"},rz=t("td",{style:{"text-align":"center"}},null,-1),iz={style:{"text-align":"left"}},cz=t("code",null,"树",-1),az=t("code",null,"广度优先搜索",-1),hz=t("code",null,"二叉树",-1),uz={style:{"text-align":"left"}},fz=t("td",{style:{"text-align":"center"}},"2476",-1),gz={style:{"text-align":"left"}},mz={href:"https://leetcode.com/problems/closest-nodes-queries-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},yz=t("td",{style:{"text-align":"center"}},null,-1),xz={style:{"text-align":"left"}},bz=t("code",null,"树",-1),pz=t("code",null,"深度优先搜索",-1),kz=t("code",null,"二叉搜索树",-1),Mz=t("code",null,"3+",-1),vz={style:{"text-align":"left"}},Iz=t("td",{style:{"text-align":"center"}},"2477",-1),Ez={style:{"text-align":"left"}},wz={href:"https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital",target:"_blank",rel:"noopener noreferrer"},Hz=t("td",{style:{"text-align":"center"}},null,-1),zz={style:{"text-align":"left"}},Oz=t("code",null,"树",-1),qz=t("code",null,"深度优先搜索",-1),jz=t("code",null,"广度优先搜索",-1),Nz=t("code",null,"1+",-1),Lz={style:{"text-align":"left"}},Cz=t("td",{style:{"text-align":"center"}},"2479",-1),Kz={style:{"text-align":"left"}},Pz={href:"https://leetcode.com/problems/maximum-xor-of-two-non-overlapping-subtrees",target:"_blank",rel:"noopener noreferrer"},Bz=t("td",{style:{"text-align":"center"}},null,-1),Vz={style:{"text-align":"left"}},Tz=t("code",null,"树",-1),Uz=t("code",null,"深度优先搜索",-1),Rz=t("code",null,"图",-1),Wz=t("code",null,"1+",-1),Gz={style:{"text-align":"left"}},Yz=t("td",{style:{"text-align":"center"}},"2509",-1),Qz={style:{"text-align":"left"}},Sz={href:"https://leetcode.com/problems/cycle-length-queries-in-a-tree",target:"_blank",rel:"noopener noreferrer"},Dz=t("td",{style:{"text-align":"center"}},null,-1),Zz={style:{"text-align":"left"}},Az=t("code",null,"树",-1),Fz=t("code",null,"数组",-1),Jz=t("code",null,"二叉树",-1),Xz={style:{"text-align":"left"}},$z=t("td",{style:{"text-align":"center"}},"2538",-1),tO={style:{"text-align":"left"}},eO={href:"https://leetcode.com/problems/difference-between-maximum-and-minimum-price-sum",target:"_blank",rel:"noopener noreferrer"},lO=t("td",{style:{"text-align":"center"}},null,-1),oO={style:{"text-align":"left"}},nO=t("code",null,"树",-1),sO=t("code",null,"深度优先搜索",-1),dO=t("code",null,"数组",-1),_O=t("code",null,"1+",-1),rO={style:{"text-align":"left"}},iO=t("td",{style:{"text-align":"center"}},"2581",-1),cO={style:{"text-align":"left"}},aO={href:"https://leetcode.com/problems/count-number-of-possible-root-nodes",target:"_blank",rel:"noopener noreferrer"},hO=t("td",{style:{"text-align":"center"}},null,-1),uO={style:{"text-align":"left"}},fO=t("code",null,"树",-1),gO=t("code",null,"深度优先搜索",-1),mO=t("code",null,"数组",-1),yO=t("code",null,"2+",-1),xO={style:{"text-align":"left"}},bO=t("td",{style:{"text-align":"center"}},"2583",-1),pO={style:{"text-align":"left"}},kO={href:"https://leetcode.com/problems/kth-largest-sum-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},MO=t("td",{style:{"text-align":"center"}},null,-1),vO={style:{"text-align":"left"}},IO=t("code",null,"树",-1),EO=t("code",null,"广度优先搜索",-1),wO=t("code",null,"二叉树",-1),HO=t("code",null,"1+",-1),zO={style:{"text-align":"left"}},OO=t("td",{style:{"text-align":"center"}},"2603",-1),qO={style:{"text-align":"left"}},jO={href:"https://leetcode.com/problems/collect-coins-in-a-tree",target:"_blank",rel:"noopener noreferrer"},NO=t("td",{style:{"text-align":"center"}},null,-1),LO={style:{"text-align":"left"}},CO=t("code",null,"树",-1),KO=t("code",null,"图",-1),PO=t("code",null,"拓扑排序",-1),BO=t("code",null,"1+",-1),VO={style:{"text-align":"left"}},TO=t("td",{style:{"text-align":"center"}},"2641",-1),UO={style:{"text-align":"left"}},RO={href:"https://leetcode.com/problems/cousins-in-binary-tree-ii",target:"_blank",rel:"noopener noreferrer"},WO=t("td",{style:{"text-align":"center"}},null,-1),GO={style:{"text-align":"left"}},YO=t("code",null,"树",-1),QO=t("code",null,"深度优先搜索",-1),SO=t("code",null,"广度优先搜索",-1),DO=t("code",null,"2+",-1),ZO={style:{"text-align":"left"}},AO=t("td",{style:{"text-align":"center"}},"2646",-1),FO={style:{"text-align":"left"}},JO={href:"https://leetcode.com/problems/minimize-the-total-price-of-the-trips",target:"_blank",rel:"noopener noreferrer"},XO=t("td",{style:{"text-align":"center"}},null,-1),$O={style:{"text-align":"left"}},tq=t("code",null,"树",-1),eq=t("code",null,"深度优先搜索",-1),lq=t("code",null,"图",-1),oq=t("code",null,"2+",-1),nq={style:{"text-align":"left"}},sq=t("td",{style:{"text-align":"center"}},"2673",-1),dq={style:{"text-align":"left"}},_q={href:"https://leetcode.com/problems/make-costs-of-paths-equal-in-a-binary-tree",target:"_blank",rel:"noopener noreferrer"},rq=t("td",{style:{"text-align":"center"}},null,-1),iq={style:{"text-align":"left"}},cq=t("code",null,"贪心",-1),aq=t("code",null,"树",-1),hq=t("code",null,"数组",-1),uq=t("code",null,"2+",-1),fq={style:{"text-align":"left"}},gq=t("td",{style:{"text-align":"center"}},"2689",-1),mq={style:{"text-align":"left"}},yq={href:"https://leetcode.com/problems/extract-kth-character-from-the-rope-tree",target:"_blank",rel:"noopener noreferrer"},xq=t("td",{style:{"text-align":"center"}},null,-1),bq={style:{"text-align":"left"}},pq=t("code",null,"树",-1),kq=t("code",null,"深度优先搜索",-1),Mq=t("code",null,"二叉树",-1),vq={style:{"text-align":"left"}},Iq=t("td",{style:{"text-align":"center"}},"2764",-1),Eq={style:{"text-align":"left"}},wq={href:"https://leetcode.com/problems/is-array-a-preorder-of-some-binary-tree",target:"_blank",rel:"noopener noreferrer"},Hq=t("td",{style:{"text-align":"center"}},null,-1),zq={style:{"text-align":"left"}},Oq=t("code",null,"栈",-1),qq=t("code",null,"树",-1),jq=t("code",null,"深度优先搜索",-1),Nq=t("code",null,"1+",-1),Lq={style:{"text-align":"left"}},Cq=t("td",{style:{"text-align":"center"}},"2773",-1),Kq={style:{"text-align":"left"}},Pq={href:"https://leetcode.com/problems/height-of-special-binary-tree",target:"_blank",rel:"noopener noreferrer"},Bq=t("td",{style:{"text-align":"center"}},null,-1),Vq={style:{"text-align":"left"}},Tq=t("code",null,"树",-1),Uq=t("code",null,"深度优先搜索",-1),Rq=t("code",null,"广度优先搜索",-1),Wq=t("code",null,"1+",-1),Gq={style:{"text-align":"left"}},Yq=t("td",{style:{"text-align":"center"}},"2791",-1),Qq={style:{"text-align":"left"}},Sq={href:"https://leetcode.com/problems/count-paths-that-can-form-a-palindrome-in-a-tree",target:"_blank",rel:"noopener noreferrer"},Dq=t("td",{style:{"text-align":"center"}},null,-1),Zq={style:{"text-align":"left"}},Aq=t("code",null,"位运算",-1),Fq=t("code",null,"树",-1),Jq=t("code",null,"深度优先搜索",-1),Xq=t("code",null,"2+",-1),$q={style:{"text-align":"left"}},tj=t("td",{style:{"text-align":"center"}},"2792",-1),ej={style:{"text-align":"left"}},lj={href:"https://leetcode.com/problems/count-nodes-that-are-great-enough",target:"_blank",rel:"noopener noreferrer"},oj=t("td",{style:{"text-align":"center"}},null,-1),nj={style:{"text-align":"left"}},sj=t("code",null,"树",-1),dj=t("code",null,"深度优先搜索",-1),_j=t("code",null,"分治",-1),rj=t("code",null,"1+",-1),ij={style:{"text-align":"left"}},cj=t("td",{style:{"text-align":"center"}},"2846",-1),aj={style:{"text-align":"left"}},hj={href:"https://leetcode.com/problems/minimum-edge-weight-equilibrium-queries-in-a-tree",target:"_blank",rel:"noopener noreferrer"},uj=t("td",{style:{"text-align":"center"}},null,-1),fj={style:{"text-align":"left"}},gj=t("code",null,"树",-1),mj=t("code",null,"图",-1),yj=t("code",null,"数组",-1),xj=t("code",null,"1+",-1),bj={style:{"text-align":"left"}},pj=t("td",{style:{"text-align":"center"}},"2867",-1),kj={style:{"text-align":"left"}},Mj={href:"https://leetcode.com/problems/count-valid-paths-in-a-tree",target:"_blank",rel:"noopener noreferrer"},vj=t("td",{style:{"text-align":"center"}},null,-1),Ij={style:{"text-align":"left"}},Ej=t("code",null,"树",-1),wj=t("code",null,"深度优先搜索",-1),Hj=t("code",null,"数学",-1),zj=t("code",null,"2+",-1),Oj={style:{"text-align":"left"}},qj=t("td",{style:{"text-align":"center"}},"2872",-1),jj={style:{"text-align":"left"}},Nj={href:"https://leetcode.com/problems/maximum-number-of-k-divisible-components",target:"_blank",rel:"noopener noreferrer"},Lj=t("td",{style:{"text-align":"center"}},null,-1),Cj={style:{"text-align":"left"}},Kj=t("code",null,"树",-1),Pj=t("code",null,"深度优先搜索",-1),Bj={style:{"text-align":"left"}},Vj=t("td",{style:{"text-align":"center"}},"2920",-1),Tj={style:{"text-align":"left"}},Uj={href:"https://leetcode.com/problems/maximum-points-after-collecting-coins-from-all-nodes",target:"_blank",rel:"noopener noreferrer"},Rj=t("td",{style:{"text-align":"center"}},null,-1),Wj={style:{"text-align":"left"}},Gj=t("code",null,"位运算",-1),Yj=t("code",null,"树",-1),Qj=t("code",null,"深度优先搜索",-1),Sj=t("code",null,"2+",-1),Dj={style:{"text-align":"left"}},Zj=t("td",{style:{"text-align":"center"}},"2925",-1),Aj={style:{"text-align":"left"}},Fj={href:"https://leetcode.com/problems/maximum-score-after-applying-operations-on-a-tree",target:"_blank",rel:"noopener noreferrer"},Jj=t("td",{style:{"text-align":"center"}},null,-1),Xj={style:{"text-align":"left"}},$j=t("code",null,"树",-1),tN=t("code",null,"深度优先搜索",-1),eN=t("code",null,"动态规划",-1),lN={style:{"text-align":"left"}},oN=t("td",{style:{"text-align":"center"}},"2973",-1),nN={style:{"text-align":"left"}},sN={href:"https://leetcode.com/problems/find-number-of-coins-to-place-in-tree-nodes",target:"_blank",rel:"noopener noreferrer"},dN=t("td",{style:{"text-align":"center"}},null,-1),_N={style:{"text-align":"left"}},rN=t("code",null,"树",-1),iN=t("code",null,"深度优先搜索",-1),cN=t("code",null,"动态规划",-1),aN=t("code",null,"2+",-1),hN={style:{"text-align":"left"}},uN=t("td",{style:{"text-align":"center"}},"3004",-1),fN={style:{"text-align":"left"}},gN={href:"https://leetcode.com/problems/maximum-subtree-of-the-same-color",target:"_blank",rel:"noopener noreferrer"},mN=t("td",{style:{"text-align":"center"}},null,-1),yN={style:{"text-align":"left"}},xN=t("code",null,"树",-1),bN=t("code",null,"深度优先搜索",-1),pN=t("code",null,"数组",-1),kN=t("code",null,"1+",-1),MN={style:{"text-align":"left"}},vN=t("td",{style:{"text-align":"center"}},"3067",-1),IN={style:{"text-align":"left"}},EN={href:"https://leetcode.com/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network",target:"_blank",rel:"noopener noreferrer"},wN=t("td",{style:{"text-align":"center"}},null,-1),HN={style:{"text-align":"left"}},zN=t("code",null,"树",-1),ON=t("code",null,"深度优先搜索",-1),qN=t("code",null,"数组",-1),jN={style:{"text-align":"left"}},NN=t("td",{style:{"text-align":"center"}},"3068",-1),LN={style:{"text-align":"left"}},CN={href:"https://leetcode.com/problems/find-the-maximum-sum-of-node-values",target:"_blank",rel:"noopener noreferrer"},KN=t("td",{style:{"text-align":"center"}},null,-1),PN={style:{"text-align":"left"}},BN=t("code",null,"贪心",-1),VN=t("code",null,"位运算",-1),TN=t("code",null,"树",-1),UN=t("code",null,"3+",-1),RN={style:{"text-align":"left"}},WN=t("td",{style:{"text-align":"center"}},"3157",-1),GN={style:{"text-align":"left"}},YN={href:"https://leetcode.com/problems/find-the-level-of-tree-with-minimum-sum",target:"_blank",rel:"noopener noreferrer"},QN=t("td",{style:{"text-align":"center"}},null,-1),SN={style:{"text-align":"left"}},DN=t("code",null,"树",-1),ZN=t("code",null,"深度优先搜索",-1),AN=t("code",null,"广度优先搜索",-1),FN=t("code",null,"1+",-1),JN={style:{"text-align":"left"}},XN=t("td",{style:{"text-align":"center"}},"3203",-1),$N={style:{"text-align":"left"}},tL={href:"https://leetcode.com/problems/find-minimum-diameter-after-merging-two-trees",target:"_blank",rel:"noopener noreferrer"},eL=t("td",{style:{"text-align":"center"}},null,-1),lL={style:{"text-align":"left"}},oL=t("code",null,"树",-1),nL=t("code",null,"深度优先搜索",-1),sL=t("code",null,"广度优先搜索",-1),dL=t("code",null,"1+",-1),_L={style:{"text-align":"left"}},rL=t("td",{style:{"text-align":"center"}},"3241",-1),iL={style:{"text-align":"left"}},cL={href:"https://leetcode.com/problems/time-taken-to-mark-all-nodes",target:"_blank",rel:"noopener noreferrer"},aL=t("td",{style:{"text-align":"center"}},null,-1),hL={style:{"text-align":"left"}},uL=t("code",null,"树",-1),fL=t("code",null,"深度优先搜索",-1),gL=t("code",null,"图",-1),mL=t("code",null,"1+",-1),yL={style:{"text-align":"left"}},xL=t("td",{style:{"text-align":"center"}},"3249",-1),bL={style:{"text-align":"left"}},pL={href:"https://leetcode.com/problems/count-the-number-of-good-nodes",target:"_blank",rel:"noopener noreferrer"},kL=t("td",{style:{"text-align":"center"}},null,-1),ML={style:{"text-align":"left"}},vL=t("code",null,"树",-1),IL=t("code",null,"深度优先搜索",-1),EL={style:{"text-align":"left"}},wL=t("td",{style:{"text-align":"center"}},"3313",-1),HL={style:{"text-align":"left"}},zL={href:"https://leetcode.com/problems/find-the-last-marked-nodes-in-tree",target:"_blank",rel:"noopener noreferrer"},OL=t("td",{style:{"text-align":"center"}},null,-1),qL={style:{"text-align":"left"}},jL=t("code",null,"树",-1),NL=t("code",null,"深度优先搜索",-1),LL={style:{"text-align":"left"}},CL=t("td",{style:{"text-align":"center"}},"3319",-1),KL={style:{"text-align":"left"}},PL={href:"https://leetcode.com/problems/k-th-largest-perfect-subtree-size-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},BL={style:{"text-align":"center"}},VL={href:"/problem/3319",target:"_blank",rel:"noopener noreferrer"},TL={style:{"text-align":"left"}},UL=t("code",null,"树",-1),RL=t("code",null,"深度优先搜索",-1),WL=t("code",null,"二叉树",-1),GL=t("code",null,"1+",-1),YL={style:{"text-align":"left"}},QL=t("td",{style:{"text-align":"center"}},"LCP 10",-1),SL={style:{"text-align":"left"}},DL={href:"https://leetcode.cn/problems/er-cha-shu-ren-wu-diao-du",target:"_blank",rel:"noopener noreferrer"},ZL=t("td",{style:{"text-align":"center"}},null,-1),AL={style:{"text-align":"left"}},FL=t("code",null,"树",-1),JL=t("code",null,"深度优先搜索",-1),XL=t("code",null,"动态规划",-1),$L=t("code",null,"1+",-1),tC={style:{"text-align":"left"}},eC=t("td",{style:{"text-align":"center"}},"LCP 26",-1),lC={style:{"text-align":"left"}},oC={href:"https://leetcode.cn/problems/hSRGyL",target:"_blank",rel:"noopener noreferrer"},nC=t("td",{style:{"text-align":"center"}},null,-1),sC={style:{"text-align":"left"}},dC=t("code",null,"树",-1),_C=t("code",null,"动态规划",-1),rC=t("code",null,"二叉树",-1),iC={style:{"text-align":"left"}},cC=t("td",{style:{"text-align":"center"}},"LCP 34",-1),aC={style:{"text-align":"left"}},hC={href:"https://leetcode.cn/problems/er-cha-shu-ran-se-UGC",target:"_blank",rel:"noopener noreferrer"},uC=t("td",{style:{"text-align":"center"}},null,-1),fC={style:{"text-align":"left"}},gC=t("code",null,"树",-1),mC=t("code",null,"动态规划",-1),yC=t("code",null,"二叉树",-1),xC={style:{"text-align":"left"}},bC=t("td",{style:{"text-align":"center"}},"LCP 44",-1),pC={style:{"text-align":"left"}},kC={href:"https://leetcode.cn/problems/sZ59z6",target:"_blank",rel:"noopener noreferrer"},MC=t("td",{style:{"text-align":"center"}},null,-1),vC={style:{"text-align":"left"}},IC=t("code",null,"树",-1),EC=t("code",null,"深度优先搜索",-1),wC=t("code",null,"广度优先搜索",-1),HC=t("code",null,"2+",-1),zC={style:{"text-align":"left"}},OC=t("td",{style:{"text-align":"center"}},"LCP 52",-1),qC={style:{"text-align":"left"}},jC={href:"https://leetcode.cn/problems/QO5KpG",target:"_blank",rel:"noopener noreferrer"},NC=t("td",{style:{"text-align":"center"}},null,-1),LC={style:{"text-align":"left"}},CC=t("code",null,"树",-1),KC=t("code",null,"线段树",-1),PC=t("code",null,"二叉搜索树",-1),BC=t("code",null,"4+",-1),VC={style:{"text-align":"left"}},TC=t("td",{style:{"text-align":"center"}},"LCP 60",-1),UC={style:{"text-align":"left"}},RC={href:"https://leetcode.cn/problems/WInSav",target:"_blank",rel:"noopener noreferrer"},WC=t("td",{style:{"text-align":"center"}},null,-1),GC={style:{"text-align":"left"}},YC=t("code",null,"树",-1),QC=t("code",null,"动态规划",-1),SC=t("code",null,"二叉树",-1),DC={style:{"text-align":"left"}},ZC=t("td",{style:{"text-align":"center"}},"LCP 64",-1),AC={style:{"text-align":"left"}},FC={href:"https://leetcode.cn/problems/U7WvvU",target:"_blank",rel:"noopener noreferrer"},JC=t("td",{style:{"text-align":"center"}},null,-1),XC={style:{"text-align":"left"}},$C=t("code",null,"树",-1),tK=t("code",null,"深度优先搜索",-1),eK=t("code",null,"动态规划",-1),lK=t("code",null,"1+",-1),oK={style:{"text-align":"left"}},nK=t("td",{style:{"text-align":"center"}},"LCP 67",-1),sK={style:{"text-align":"left"}},dK={href:"https://leetcode.cn/problems/KnLfVT",target:"_blank",rel:"noopener noreferrer"},_K=t("td",{style:{"text-align":"center"}},null,-1),rK={style:{"text-align":"left"}},iK=t("code",null,"树",-1),cK=t("code",null,"深度优先搜索",-1),aK=t("code",null,"广度优先搜索",-1),hK=t("code",null,"1+",-1),uK={style:{"text-align":"left"}},fK=t("td",{style:{"text-align":"center"}},"剑指 Offer 07",-1),gK={style:{"text-align":"left"}},mK={href:"https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof",target:"_blank",rel:"noopener noreferrer"},yK={style:{"text-align":"center"}},xK={href:"/problem/jz_offer_07_1",target:"_blank",rel:"noopener noreferrer"},bK={style:{"text-align":"left"}},pK=t("code",null,"树",-1),kK=t("code",null,"数组",-1),MK=t("code",null,"哈希表",-1),vK=t("code",null,"2+",-1),IK={style:{"text-align":"left"}},EK=t("td",{style:{"text-align":"center"}},"剑指 Offer 26",-1),wK={style:{"text-align":"left"}},HK={href:"https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof",target:"_blank",rel:"noopener noreferrer"},zK={style:{"text-align":"center"}},OK={href:"/problem/jz_offer_26_1",target:"_blank",rel:"noopener noreferrer"},qK={style:{"text-align":"left"}},jK=t("code",null,"树",-1),NK=t("code",null,"深度优先搜索",-1),LK=t("code",null,"二叉树",-1),CK={style:{"text-align":"left"}},KK=t("td",{style:{"text-align":"center"}},"剑指 Offer 27",-1),PK={style:{"text-align":"left"}},BK={href:"https://leetcode.cn/problems/er-cha-shu-de-jing-xiang-lcof",target:"_blank",rel:"noopener noreferrer"},VK={style:{"text-align":"center"}},TK={href:"/problem/jz_offer_27_1",target:"_blank",rel:"noopener noreferrer"},UK={style:{"text-align":"left"}},RK=t("code",null,"树",-1),WK=t("code",null,"深度优先搜索",-1),GK=t("code",null,"广度优先搜索",-1),YK=t("code",null,"1+",-1),QK={style:{"text-align":"left"}},SK=t("td",{style:{"text-align":"center"}},"剑指 Offer 28",-1),DK={style:{"text-align":"left"}},ZK={href:"https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof",target:"_blank",rel:"noopener noreferrer"},AK={style:{"text-align":"center"}},FK={href:"/problem/jz_offer_28_1",target:"_blank",rel:"noopener noreferrer"},JK={style:{"text-align":"left"}},XK=t("code",null,"树",-1),$K=t("code",null,"深度优先搜索",-1),tP=t("code",null,"广度优先搜索",-1),eP=t("code",null,"1+",-1),lP={style:{"text-align":"left"}},oP=t("td",{style:{"text-align":"center"}},"剑指 Offer 32 - I",-1),nP={style:{"text-align":"left"}},sP={href:"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof",target:"_blank",rel:"noopener noreferrer"},dP={style:{"text-align":"center"}},_P={href:"/problem/jz_offer_32_1",target:"_blank",rel:"noopener noreferrer"},rP={style:{"text-align":"left"}},iP=t("code",null,"树",-1),cP=t("code",null,"广度优先搜索",-1),aP=t("code",null,"二叉树",-1),hP={style:{"text-align":"left"}},uP=t("td",{style:{"text-align":"center"}},"剑指 Offer 32 - II",-1),fP={style:{"text-align":"left"}},gP={href:"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof",target:"_blank",rel:"noopener noreferrer"},mP={style:{"text-align":"center"}},yP={href:"/problem/jz_offer_32_2",target:"_blank",rel:"noopener noreferrer"},xP={style:{"text-align":"left"}},bP=t("code",null,"树",-1),pP=t("code",null,"广度优先搜索",-1),kP=t("code",null,"二叉树",-1),MP={style:{"text-align":"left"}},vP=t("td",{style:{"text-align":"center"}},"剑指 Offer 32 - III",-1),IP={style:{"text-align":"left"}},EP={href:"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof",target:"_blank",rel:"noopener noreferrer"},wP={style:{"text-align":"center"}},HP={href:"/problem/jz_offer_32_3",target:"_blank",rel:"noopener noreferrer"},zP={style:{"text-align":"left"}},OP=t("code",null,"树",-1),qP=t("code",null,"广度优先搜索",-1),jP=t("code",null,"二叉树",-1),NP={style:{"text-align":"left"}},LP=t("td",{style:{"text-align":"center"}},"剑指 Offer 33",-1),CP={style:{"text-align":"left"}},KP={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"},PP={style:{"text-align":"center"}},BP={href:"/problem/jz_offer_33_1",target:"_blank",rel:"noopener noreferrer"},VP={style:{"text-align":"left"}},TP=t("code",null,"栈",-1),UP=t("code",null,"树",-1),RP=t("code",null,"二叉搜索树",-1),WP=t("code",null,"4+",-1),GP={style:{"text-align":"left"}},YP=t("td",{style:{"text-align":"center"}},"剑指 Offer 34",-1),QP={style:{"text-align":"left"}},SP={href:"https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof",target:"_blank",rel:"noopener noreferrer"},DP={style:{"text-align":"center"}},ZP={href:"/problem/jz_offer_34_1",target:"_blank",rel:"noopener noreferrer"},AP={style:{"text-align":"left"}},FP=t("code",null,"树",-1),JP=t("code",null,"深度优先搜索",-1),XP=t("code",null,"回溯",-1),$P=t("code",null,"1+",-1),tB={style:{"text-align":"left"}},eB=t("td",{style:{"text-align":"center"}},"剑指 Offer 36",-1),lB={style:{"text-align":"left"}},oB={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof",target:"_blank",rel:"noopener noreferrer"},nB={style:{"text-align":"center"}},sB={href:"/problem/jz_offer_36_1",target:"_blank",rel:"noopener noreferrer"},dB={style:{"text-align":"left"}},_B=t("code",null,"栈",-1),rB=t("code",null,"树",-1),iB=t("code",null,"深度优先搜索",-1),cB=t("code",null,"4+",-1),aB={style:{"text-align":"left"}},hB=t("td",{style:{"text-align":"center"}},"剑指 Offer 37",-1),uB={style:{"text-align":"left"}},fB={href:"https://leetcode.cn/problems/xu-lie-hua-er-cha-shu-lcof",target:"_blank",rel:"noopener noreferrer"},gB={style:{"text-align":"center"}},mB={href:"/problem/jz_offer_37_1",target:"_blank",rel:"noopener noreferrer"},yB={style:{"text-align":"left"}},xB=t("code",null,"树",-1),bB=t("code",null,"深度优先搜索",-1),pB=t("code",null,"广度优先搜索",-1),kB=t("code",null,"3+",-1),MB={style:{"text-align":"left"}},vB=t("td",{style:{"text-align":"center"}},"剑指 Offer 54",-1),IB={style:{"text-align":"left"}},EB={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof",target:"_blank",rel:"noopener noreferrer"},wB={style:{"text-align":"center"}},HB={href:"/problem/jz_offer_54_1",target:"_blank",rel:"noopener noreferrer"},zB={style:{"text-align":"left"}},OB=t("code",null,"树",-1),qB=t("code",null,"深度优先搜索",-1),jB=t("code",null,"二叉搜索树",-1),NB=t("code",null,"1+",-1),LB={style:{"text-align":"left"}},CB=t("td",{style:{"text-align":"center"}},"剑指 Offer 55 - I",-1),KB={style:{"text-align":"left"}},PB={href:"https://leetcode.cn/problems/er-cha-shu-de-shen-du-lcof",target:"_blank",rel:"noopener noreferrer"},BB={style:{"text-align":"center"}},VB={href:"/problem/jz_offer_55_1",target:"_blank",rel:"noopener noreferrer"},TB={style:{"text-align":"left"}},UB=t("code",null,"树",-1),RB=t("code",null,"深度优先搜索",-1),WB=t("code",null,"广度优先搜索",-1),GB=t("code",null,"1+",-1),YB={style:{"text-align":"left"}},QB=t("td",{style:{"text-align":"center"}},"剑指 Offer 55 - II",-1),SB={style:{"text-align":"left"}},DB={href:"https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof",target:"_blank",rel:"noopener noreferrer"},ZB=t("td",{style:{"text-align":"center"}},null,-1),AB={style:{"text-align":"left"}},FB=t("code",null,"树",-1),JB=t("code",null,"深度优先搜索",-1),XB=t("code",null,"二叉树",-1),$B={style:{"text-align":"left"}},tV=t("td",{style:{"text-align":"center"}},"剑指 Offer 68 - I",-1),eV={style:{"text-align":"left"}},lV={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof",target:"_blank",rel:"noopener noreferrer"},oV=t("td",{style:{"text-align":"center"}},null,-1),nV={style:{"text-align":"left"}},sV=t("code",null,"树",-1),dV=t("code",null,"深度优先搜索",-1),_V=t("code",null,"二叉搜索树",-1),rV=t("code",null,"1+",-1),iV={style:{"text-align":"left"}},cV=t("td",{style:{"text-align":"center"}},"剑指 Offer 68 - II",-1),aV={style:{"text-align":"left"}},hV={href:"https://leetcode.cn/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof",target:"_blank",rel:"noopener noreferrer"},uV=t("td",{style:{"text-align":"center"}},null,-1),fV={style:{"text-align":"left"}},gV=t("code",null,"树",-1),mV=t("code",null,"深度优先搜索",-1),yV=t("code",null,"二叉树",-1),xV={style:{"text-align":"left"}},bV=t("td",{style:{"text-align":"center"}},"剑指 Offer II 43",-1),pV={style:{"text-align":"left"}},kV={href:"https://leetcode.cn/problems/NaqhDT",target:"_blank",rel:"noopener noreferrer"},MV=t("td",{style:{"text-align":"center"}},null,-1),vV={style:{"text-align":"left"}},IV=t("code",null,"树",-1),EV=t("code",null,"广度优先搜索",-1),wV=t("code",null,"设计",-1),HV=t("code",null,"1+",-1),zV={style:{"text-align":"left"}},OV=t("td",{style:{"text-align":"center"}},"剑指 Offer II 44",-1),qV={style:{"text-align":"left"}},jV={href:"https://leetcode.cn/problems/hPov7L",target:"_blank",rel:"noopener noreferrer"},NV=t("td",{style:{"text-align":"center"}},null,-1),LV={style:{"text-align":"left"}},CV=t("code",null,"树",-1),KV=t("code",null,"深度优先搜索",-1),PV=t("code",null,"广度优先搜索",-1),BV=t("code",null,"1+",-1),VV={style:{"text-align":"left"}},TV=t("td",{style:{"text-align":"center"}},"剑指 Offer II 45",-1),UV={style:{"text-align":"left"}},RV={href:"https://leetcode.cn/problems/LwUNpT",target:"_blank",rel:"noopener noreferrer"},WV=t("td",{style:{"text-align":"center"}},null,-1),GV={style:{"text-align":"left"}},YV=t("code",null,"树",-1),QV=t("code",null,"深度优先搜索",-1),SV=t("code",null,"广度优先搜索",-1),DV=t("code",null,"1+",-1),ZV={style:{"text-align":"left"}},AV=t("td",{style:{"text-align":"center"}},"剑指 Offer II 46",-1),FV={style:{"text-align":"left"}},JV={href:"https://leetcode.cn/problems/WNC0Lk",target:"_blank",rel:"noopener noreferrer"},XV=t("td",{style:{"text-align":"center"}},null,-1),$V={style:{"text-align":"left"}},tT=t("code",null,"树",-1),eT=t("code",null,"深度优先搜索",-1),lT=t("code",null,"广度优先搜索",-1),oT=t("code",null,"1+",-1),nT={style:{"text-align":"left"}},sT=t("td",{style:{"text-align":"center"}},"剑指 Offer II 47",-1),dT={style:{"text-align":"left"}},_T={href:"https://leetcode.cn/problems/pOCWxh",target:"_blank",rel:"noopener noreferrer"},rT=t("td",{style:{"text-align":"center"}},null,-1),iT={style:{"text-align":"left"}},cT=t("code",null,"树",-1),aT=t("code",null,"深度优先搜索",-1),hT=t("code",null,"二叉树",-1),uT={style:{"text-align":"left"}},fT=t("td",{style:{"text-align":"center"}},"剑指 Offer II 48",-1),gT={style:{"text-align":"left"}},mT={href:"https://leetcode.cn/problems/h54YBf",target:"_blank",rel:"noopener noreferrer"},yT=t("td",{style:{"text-align":"center"}},null,-1),xT={style:{"text-align":"left"}},bT=t("code",null,"树",-1),pT=t("code",null,"深度优先搜索",-1),kT=t("code",null,"广度优先搜索",-1),MT=t("code",null,"3+",-1),vT={style:{"text-align":"left"}},IT=t("td",{style:{"text-align":"center"}},"剑指 Offer II 49",-1),ET={style:{"text-align":"left"}},wT={href:"https://leetcode.cn/problems/3Etpl5",target:"_blank",rel:"noopener noreferrer"},HT=t("td",{style:{"text-align":"center"}},null,-1),zT={style:{"text-align":"left"}},OT=t("code",null,"树",-1),qT=t("code",null,"深度优先搜索",-1),jT=t("code",null,"二叉树",-1),NT={style:{"text-align":"left"}},LT=t("td",{style:{"text-align":"center"}},"剑指 Offer II 50",-1),CT={style:{"text-align":"left"}},KT={href:"https://leetcode.cn/problems/6eUYwP",target:"_blank",rel:"noopener noreferrer"},PT=t("td",{style:{"text-align":"center"}},null,-1),BT={style:{"text-align":"left"}},VT=t("code",null,"树",-1),TT=t("code",null,"深度优先搜索",-1),UT=t("code",null,"二叉树",-1),RT={style:{"text-align":"left"}},WT=t("td",{style:{"text-align":"center"}},"剑指 Offer II 51",-1),GT={style:{"text-align":"left"}},YT={href:"https://leetcode.cn/problems/jC7MId",target:"_blank",rel:"noopener noreferrer"},QT=t("td",{style:{"text-align":"center"}},null,-1),ST={style:{"text-align":"left"}},DT=t("code",null,"树",-1),ZT=t("code",null,"深度优先搜索",-1),AT=t("code",null,"动态规划",-1),FT=t("code",null,"1+",-1),JT={style:{"text-align":"left"}},XT=t("td",{style:{"text-align":"center"}},"剑指 Offer II 52",-1),$T={style:{"text-align":"left"}},tU={href:"https://leetcode.cn/problems/NYBBNL",target:"_blank",rel:"noopener noreferrer"},eU=t("td",{style:{"text-align":"center"}},null,-1),lU={style:{"text-align":"left"}},oU=t("code",null,"栈",-1),nU=t("code",null,"树",-1),sU=t("code",null,"深度优先搜索",-1),dU=t("code",null,"2+",-1),_U={style:{"text-align":"left"}},rU=t("td",{style:{"text-align":"center"}},"剑指 Offer II 53",-1),iU={style:{"text-align":"left"}},cU={href:"https://leetcode.cn/problems/P5rCT8",target:"_blank",rel:"noopener noreferrer"},aU=t("td",{style:{"text-align":"center"}},null,-1),hU={style:{"text-align":"left"}},uU=t("code",null,"树",-1),fU=t("code",null,"深度优先搜索",-1),gU=t("code",null,"二叉搜索树",-1),mU=t("code",null,"1+",-1),yU={style:{"text-align":"left"}},xU=t("td",{style:{"text-align":"center"}},"剑指 Offer II 54",-1),bU={style:{"text-align":"left"}},pU={href:"https://leetcode.cn/problems/w6cpku",target:"_blank",rel:"noopener noreferrer"},kU=t("td",{style:{"text-align":"center"}},null,-1),MU={style:{"text-align":"left"}},vU=t("code",null,"树",-1),IU=t("code",null,"深度优先搜索",-1),EU=t("code",null,"二叉搜索树",-1),wU=t("code",null,"1+",-1),HU={style:{"text-align":"left"}},zU=t("td",{style:{"text-align":"center"}},"剑指 Offer II 55",-1),OU={style:{"text-align":"left"}},qU={href:"https://leetcode.cn/problems/kTOapQ",target:"_blank",rel:"noopener noreferrer"},jU=t("td",{style:{"text-align":"center"}},null,-1),NU={style:{"text-align":"left"}},LU=t("code",null,"栈",-1),CU=t("code",null,"树",-1),KU=t("code",null,"设计",-1),PU=t("code",null,"3+",-1),BU={style:{"text-align":"left"}},VU=t("td",{style:{"text-align":"center"}},"剑指 Offer II 59",-1),TU={style:{"text-align":"left"}},UU={href:"https://leetcode.cn/problems/jBjn9C",target:"_blank",rel:"noopener noreferrer"},RU=t("td",{style:{"text-align":"center"}},null,-1),WU={style:{"text-align":"left"}},GU=t("code",null,"树",-1),YU=t("code",null,"设计",-1),QU=t("code",null,"二叉搜索树",-1),SU=t("code",null,"3+",-1),DU={style:{"text-align":"left"}},ZU=t("td",{style:{"text-align":"center"}},"面试题 04.02",-1),AU={style:{"text-align":"left"}},FU={href:"https://leetcode.cn/problems/minimum-height-tree-lcci",target:"_blank",rel:"noopener noreferrer"},JU=t("td",{style:{"text-align":"center"}},null,-1),XU={style:{"text-align":"left"}},$U=t("code",null,"树",-1),tR=t("code",null,"二叉搜索树",-1),eR=t("code",null,"数组",-1),lR=t("code",null,"2+",-1),oR={style:{"text-align":"left"}},nR=t("td",{style:{"text-align":"center"}},"面试题 04.03",-1),sR={style:{"text-align":"left"}},dR={href:"https://leetcode.cn/problems/list-of-depth-lcci",target:"_blank",rel:"noopener noreferrer"},_R=t("td",{style:{"text-align":"center"}},null,-1),rR={style:{"text-align":"left"}},iR=t("code",null,"树",-1),cR=t("code",null,"广度优先搜索",-1),aR=t("code",null,"链表",-1),hR=t("code",null,"1+",-1),uR={style:{"text-align":"left"}},fR=t("td",{style:{"text-align":"center"}},"面试题 04.04",-1),gR={style:{"text-align":"left"}},mR={href:"https://leetcode.cn/problems/check-balance-lcci",target:"_blank",rel:"noopener noreferrer"},yR=t("td",{style:{"text-align":"center"}},null,-1),xR={style:{"text-align":"left"}},bR=t("code",null,"树",-1),pR=t("code",null,"深度优先搜索",-1),kR=t("code",null,"二叉树",-1),MR={style:{"text-align":"left"}},vR=t("td",{style:{"text-align":"center"}},"面试题 04.05",-1),IR={style:{"text-align":"left"}},ER={href:"https://leetcode.cn/problems/legal-binary-search-tree-lcci",target:"_blank",rel:"noopener noreferrer"},wR=t("td",{style:{"text-align":"center"}},null,-1),HR={style:{"text-align":"left"}},zR=t("code",null,"树",-1),OR=t("code",null,"深度优先搜索",-1),qR=t("code",null,"二叉搜索树",-1),jR=t("code",null,"1+",-1),NR={style:{"text-align":"left"}},LR=t("td",{style:{"text-align":"center"}},"面试题 04.06",-1),CR={style:{"text-align":"left"}},KR={href:"https://leetcode.cn/problems/successor-lcci",target:"_blank",rel:"noopener noreferrer"},PR=t("td",{style:{"text-align":"center"}},null,-1),BR={style:{"text-align":"left"}},VR=t("code",null,"树",-1),TR=t("code",null,"深度优先搜索",-1),UR=t("code",null,"二叉搜索树",-1),RR=t("code",null,"1+",-1),WR={style:{"text-align":"left"}},GR=t("td",{style:{"text-align":"center"}},"面试题 04.08",-1),YR={style:{"text-align":"left"}},QR={href:"https://leetcode.cn/problems/first-common-ancestor-lcci",target:"_blank",rel:"noopener noreferrer"},SR=t("td",{style:{"text-align":"center"}},null,-1),DR={style:{"text-align":"left"}},ZR=t("code",null,"树",-1),AR=t("code",null,"深度优先搜索",-1),FR=t("code",null,"二叉树",-1),JR={style:{"text-align":"left"}},XR=t("td",{style:{"text-align":"center"}},"面试题 04.09",-1),$R={style:{"text-align":"left"}},tW={href:"https://leetcode.cn/problems/bst-sequences-lcci",target:"_blank",rel:"noopener noreferrer"},eW=t("td",{style:{"text-align":"center"}},null,-1),lW={style:{"text-align":"left"}},oW=t("code",null,"树",-1),nW=t("code",null,"二叉搜索树",-1),sW=t("code",null,"回溯",-1),dW=t("code",null,"1+",-1),_W={style:{"text-align":"left"}},rW=t("td",{style:{"text-align":"center"}},"面试题 04.10",-1),iW={style:{"text-align":"left"}},cW={href:"https://leetcode.cn/problems/check-subtree-lcci",target:"_blank",rel:"noopener noreferrer"},aW=t("td",{style:{"text-align":"center"}},null,-1),hW={style:{"text-align":"left"}},uW=t("code",null,"树",-1),fW=t("code",null,"深度优先搜索",-1),gW=t("code",null,"二叉树",-1),mW=t("code",null,"2+",-1),yW={style:{"text-align":"left"}},xW=t("td",{style:{"text-align":"center"}},"面试题 04.12",-1),bW={style:{"text-align":"left"}},pW={href:"https://leetcode.cn/problems/paths-with-sum-lcci",target:"_blank",rel:"noopener noreferrer"},kW=t("td",{style:{"text-align":"center"}},null,-1),MW={style:{"text-align":"left"}},vW=t("code",null,"树",-1),IW=t("code",null,"深度优先搜索",-1),EW=t("code",null,"二叉树",-1),wW={style:{"text-align":"left"}},HW=t("td",{style:{"text-align":"center"}},"面试题 17.12",-1),zW={style:{"text-align":"left"}},OW={href:"https://leetcode.cn/problems/binode-lcci",target:"_blank",rel:"noopener noreferrer"},qW=t("td",{style:{"text-align":"center"}},null,-1),jW={style:{"text-align":"left"}},NW=t("code",null,"栈",-1),LW=t("code",null,"树",-1),CW=t("code",null,"深度优先搜索",-1),KW=t("code",null,"3+",-1),PW={style:{"text-align":"left"}};function BW(VW,TW){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return i(),c("div",null,[u,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/outline/tag/matrix.html"},{default:o(()=>[x]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[p]),_:1}),l(),e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[k]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[M]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/outline/tag/string-matching.html"},{default:o(()=>[z]),_:1}),l(),O,l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[q]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/outline/tag/ordered-set.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/outline/tag/topological-sort.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/outline/tag/shortest-path.html"},{default:o(()=>[P]),_:1}),l(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[U]),_:1}),l(),e(n,{to:"/outline/tag/trie.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[G]),_:1}),l(),e(n,{to:"/outline/tag/suffix-array.html"},{default:o(()=>[Y]),_:1})]),Q,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[D]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[A]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[F]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[J]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[X]),_:1}),l(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/outline/tag/counting-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/outline/tag/radix-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/outline/tag/merge-sort.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/outline/tag/quickselect.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/outline/tag/memoization.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[rt]),_:1}),l(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/outline/tag/counting.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/outline/tag/bitmask.html"},{default:o(()=>[ut]),_:1}),l(),e(n,{to:"/outline/tag/hash-function.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:o(()=>[gt]),_:1}),l(),e(n,{to:"/outline/tag/line-sweep.html"},{default:o(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/outline/tag/number-theory.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/outline/tag/geometry.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/outline/tag/game-theory.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/outline/tag/combinatorics.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/outline/tag/randomized.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:o(()=>[Et]),_:1}),l(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/outline/tag/database.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Ot]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/outline/tag/brainteaser.html"},{default:o(()=>[jt]),_:1}),l(),e(n,{to:"/outline/tag/interactive.html"},{default:o(()=>[Nt]),_:1}),l(),e(n,{to:"/outline/tag/iterator.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/outline/tag/concurrency.html"},{default:o(()=>[Ct]),_:1})])]),Kt,a(" prettier-ignore "),t("table",null,[Pt,t("tbody",null,[t("tr",null,[Bt,t("td",Vt,[t("a",Tt,[l("二叉树的中序遍历"),e(s)])]),t("td",Ut,[t("a",Rt,[l("[✓]"),e(s)])]),t("td",Wt,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Gt]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Yt]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Qt]),_:1}),l(),St]),t("td",Dt,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Zt,t("td",At,[t("a",Ft,[l("不同的二叉搜索树 II"),e(s)])]),t("td",Jt,[t("a",Xt,[l("[✓]"),e(s)])]),t("td",$t,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[te]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[ee]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[le]),_:1}),l(),oe]),t("td",ne,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[se,t("td",de,[t("a",_e,[l("不同的二叉搜索树"),e(s)])]),t("td",re,[t("a",ie,[l("[✓]"),e(s)])]),t("td",ce,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ae]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[he]),_:1}),l(),e(n,{to:"/outline/tag/math.html"},{default:o(()=>[ue]),_:1}),l(),fe]),t("td",ge,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[me,t("td",ye,[t("a",xe,[l("验证二叉搜索树"),e(s)])]),t("td",be,[t("a",pe,[l("[✓]"),e(s)])]),t("td",ke,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Me]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ve]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Ie]),_:1}),l(),Ee]),t("td",we,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[He,t("td",ze,[t("a",Oe,[l("恢复二叉搜索树"),e(s)])]),t("td",qe,[t("a",je,[l("[✓]"),e(s)])]),t("td",Ne,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Le]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ce]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Ke]),_:1}),l(),Pe]),t("td",Be,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ve,t("td",Te,[t("a",Ue,[l("相同的树"),e(s)])]),t("td",Re,[t("a",We,[l("[✓]"),e(s)])]),t("td",Ge,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ye]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Qe]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Se]),_:1}),l(),De]),t("td",Ze,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ae,t("td",Fe,[t("a",Je,[l("对称二叉树"),e(s)])]),t("td",Xe,[t("a",$e,[l("[✓]"),e(s)])]),t("td",tl,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[el]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ll]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ol]),_:1}),l(),nl]),t("td",sl,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[dl,t("td",_l,[t("a",rl,[l("二叉树的层序遍历"),e(s)])]),t("td",il,[t("a",cl,[l("[✓]"),e(s)])]),t("td",al,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[hl]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ul]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[fl]),_:1})]),t("td",gl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ml,t("td",yl,[t("a",xl,[l("二叉树的锯齿形层序遍历"),e(s)])]),t("td",bl,[t("a",pl,[l("[✓]"),e(s)])]),t("td",kl,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ml]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[vl]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Il]),_:1})]),t("td",El,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[wl,t("td",Hl,[t("a",zl,[l("二叉树的最大深度"),e(s)])]),t("td",Ol,[t("a",ql,[l("[✓]"),e(s)])]),t("td",jl,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Nl]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ll]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Cl]),_:1}),l(),Kl]),t("td",Pl,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Bl,t("td",Vl,[t("a",Tl,[l("从前序与中序遍历序列构造二叉树"),e(s)])]),t("td",Ul,[t("a",Rl,[l("[✓]"),e(s)])]),t("td",Wl,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Gl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Yl]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Ql]),_:1}),l(),Sl]),t("td",Dl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Zl,t("td",Al,[t("a",Fl,[l("从中序与后序遍历序列构造二叉树"),e(s)])]),t("td",Jl,[t("a",Xl,[l("[✓]"),e(s)])]),t("td",$l,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[to]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[eo]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[lo]),_:1}),l(),oo]),t("td",no,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[so,t("td",_o,[t("a",ro,[l("二叉树的层序遍历 II"),e(s)])]),t("td",io,[t("a",co,[l("[✓]"),e(s)])]),t("td",ao,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ho]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[uo]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[fo]),_:1})]),t("td",go,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[mo,t("td",yo,[t("a",xo,[l("将有序数组转换为二叉搜索树"),e(s)])]),t("td",bo,[t("a",po,[l("[✓]"),e(s)])]),t("td",ko,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Mo]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[vo]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Io]),_:1}),l(),Eo]),t("td",wo,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ho,t("td",zo,[t("a",Oo,[l("有序链表转换二叉搜索树"),e(s)])]),t("td",qo,[t("a",jo,[l("[✓]"),e(s)])]),t("td",No,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Lo]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Co]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[Ko]),_:1}),l(),Po]),t("td",Bo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Vo,t("td",To,[t("a",Uo,[l("平衡二叉树"),e(s)])]),t("td",Ro,[t("a",Wo,[l("[✓]"),e(s)])]),t("td",Go,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Yo]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Qo]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[So]),_:1})]),t("td",Do,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Zo,t("td",Ao,[t("a",Fo,[l("二叉树的最小深度"),e(s)])]),t("td",Jo,[t("a",Xo,[l("[✓]"),e(s)])]),t("td",$o,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[tn]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[en]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ln]),_:1}),l(),on]),t("td",nn,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[sn,t("td",dn,[t("a",_n,[l("路径总和"),e(s)])]),t("td",rn,[t("a",cn,[l("[✓]"),e(s)])]),t("td",an,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[hn]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[un]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[fn]),_:1}),l(),gn]),t("td",mn,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[yn,t("td",xn,[t("a",bn,[l("路径总和 II"),e(s)])]),t("td",pn,[t("a",kn,[l("[✓]"),e(s)])]),t("td",Mn,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[vn]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[In]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[En]),_:1}),l(),wn]),t("td",Hn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[zn,t("td",On,[t("a",qn,[l("二叉树展开为链表"),e(s)])]),t("td",jn,[t("a",Nn,[l("[✓]"),e(s)])]),t("td",Ln,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Cn]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Kn]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Pn]),_:1}),l(),Bn]),t("td",Vn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Tn,t("td",Un,[t("a",Rn,[l("填充每个节点的下一个右侧节点指针"),e(s)])]),t("td",Wn,[t("a",Gn,[l("[✓]"),e(s)])]),t("td",Yn,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Qn]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Sn]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Dn]),_:1}),l(),Zn]),t("td",An,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Fn,t("td",Jn,[t("a",Xn,[l("填充每个节点的下一个右侧节点指针 II"),e(s)])]),t("td",$n,[t("a",ts,[l("[✓]"),e(s)])]),t("td",es,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ls]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[os]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ns]),_:1}),l(),ss]),t("td",ds,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[_s,t("td",rs,[t("a",is,[l("二叉树中的最大路径和"),e(s)])]),t("td",cs,[t("a",as,[l("[✓]"),e(s)])]),t("td",hs,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[us]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[fs]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[gs]),_:1}),l(),ms]),t("td",ys,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[xs,t("td",bs,[t("a",ps,[l("求根节点到叶节点数字之和"),e(s)])]),t("td",ks,[t("a",Ms,[l("[✓]"),e(s)])]),t("td",vs,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Is]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Es]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[ws]),_:1})]),t("td",Hs,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[zs,t("td",Os,[t("a",qs,[l("二叉树的前序遍历"),e(s)])]),t("td",js,[t("a",Ns,[l("[✓]"),e(s)])]),t("td",Ls,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Cs]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ks]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ps]),_:1}),l(),Bs]),t("td",Vs,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ts,t("td",Us,[t("a",Rs,[l("二叉树的后序遍历"),e(s)])]),t("td",Ws,[t("a",Gs,[l("[✓]"),e(s)])]),t("td",Ys,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Qs]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ss]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ds]),_:1}),l(),Zs]),t("td",As,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Fs,t("td",Js,[t("a",Xs,[l("上下翻转二叉树"),e(s)])]),t("td",$s,[t("a",td,[l("[✓]"),e(s)])]),t("td",ed,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ld]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[od]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[nd]),_:1})]),t("td",sd,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[dd,t("td",_d,[t("a",rd,[l("二叉搜索树迭代器"),e(s)])]),t("td",id,[t("a",cd,[l("[✓]"),e(s)])]),t("td",ad,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[hd]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ud]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[fd]),_:1}),l(),gd]),t("td",md,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[yd,t("td",xd,[t("a",bd,[l("二叉树的右视图"),e(s)])]),t("td",pd,[t("a",kd,[l("[✓]"),e(s)])]),t("td",Md,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[vd]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Id]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Ed]),_:1}),l(),wd]),t("td",Hd,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[zd,t("td",Od,[t("a",qd,[l("完全二叉树的节点个数"),e(s)])]),t("td",jd,[t("a",Nd,[l("[✓]"),e(s)])]),t("td",Ld,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[Cd]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Kd]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[Pd]),_:1}),l(),Bd]),t("td",Vd,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Td,t("td",Ud,[t("a",Rd,[l("翻转二叉树"),e(s)])]),t("td",Wd,[t("a",Gd,[l("[✓]"),e(s)])]),t("td",Yd,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Qd]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Sd]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Dd]),_:1}),l(),Zd]),t("td",Ad,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Fd,t("td",Jd,[t("a",Xd,[l("二叉搜索树中第 K 小的元素"),e(s)])]),t("td",$d,[t("a",t_,[l("[✓]"),e(s)])]),t("td",e_,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[l_]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[o_]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[n_]),_:1}),l(),s_]),t("td",d_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[__,t("td",r_,[t("a",i_,[l("二叉搜索树的最近公共祖先"),e(s)])]),t("td",c_,[t("a",a_,[l("[✓]"),e(s)])]),t("td",h_,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[u_]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[f_]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[g_]),_:1}),l(),m_]),t("td",y_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[x_,t("td",b_,[t("a",p_,[l("二叉树的最近公共祖先"),e(s)])]),t("td",k_,[t("a",M_,[l("[✓]"),e(s)])]),t("td",v_,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[I_]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[E_]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[w_]),_:1})]),t("td",H_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[z_,t("td",O_,[t("a",q_,[l("统计同值子树"),e(s)])]),j_,t("td",N_,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[L_]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[C_]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[K_]),_:1})]),t("td",P_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[B_,t("td",V_,[t("a",T_,[l("验证二叉搜索树的前序遍历序列"),e(s)])]),U_,t("td",R_,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[W_]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[G_]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Y_]),_:1}),l(),Q_]),t("td",S_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[D_,t("td",Z_,[t("a",A_,[l("二叉树的所有路径"),e(s)])]),t("td",F_,[t("a",J_,[l("[✓]"),e(s)])]),t("td",X_,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$_]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[tr]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[er]),_:1}),l(),lr]),t("td",or,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[nr,t("td",sr,[t("a",dr,[l("最接近的二叉搜索树值"),e(s)])]),_r,t("td",rr,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ir]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[cr]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[ar]),_:1}),l(),hr]),t("td",ur,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[fr,t("td",gr,[t("a",mr,[l("最接近的二叉搜索树值 II"),e(s)])]),yr,t("td",xr,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[br]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[pr]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[kr]),_:1}),l(),Mr]),t("td",vr,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ir,t("td",Er,[t("a",wr,[l("二叉搜索树中的中序后继"),e(s)])]),Hr,t("td",zr,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Or]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[qr]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[jr]),_:1}),l(),Nr]),t("td",Lr,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Cr,t("td",Kr,[t("a",Pr,[l("二叉树的序列化与反序列化"),e(s)])]),t("td",Br,[t("a",Vr,[l("[✓]"),e(s)])]),t("td",Tr,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ur]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Rr]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Wr]),_:1}),l(),Gr]),t("td",Yr,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Qr,t("td",Sr,[t("a",Dr,[l("二叉树最长连续序列"),e(s)])]),Zr,t("td",Ar,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Fr]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Jr]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Xr]),_:1})]),t("td",$r,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ti,t("td",ei,[t("a",li,[l("二叉树的垂直遍历"),e(s)])]),oi,t("td",ni,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[si]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[di]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_i]),_:1}),l(),ri]),t("td",ii,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ci,t("td",ai,[t("a",hi,[l("验证二叉树的前序序列化"),e(s)])]),ui,t("td",fi,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[gi]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[mi]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[yi]),_:1}),l(),xi]),t("td",bi,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[pi,t("td",ki,[t("a",Mi,[l("最大二叉搜索子树"),e(s)])]),vi,t("td",Ii,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ei]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[wi]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Hi]),_:1}),l(),zi]),t("td",Oi,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[qi,t("td",ji,[t("a",Ni,[l("打家劫舍 III"),e(s)])]),Li,t("td",Ci,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ki]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Pi]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Bi]),_:1}),l(),Vi]),t("td",Ti,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ui,t("td",Ri,[t("a",Wi,[l("扁平化嵌套列表迭代器"),e(s)])]),Gi,t("td",Yi,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Qi]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Si]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Di]),_:1}),l(),Zi]),t("td",Ai,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Fi,t("td",Ji,[t("a",Xi,[l("寻找二叉树的叶子节点"),e(s)])]),t("td",$i,[t("a",tc,[l("[✓]"),e(s)])]),t("td",ec,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[lc]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[oc]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[nc]),_:1})]),t("td",sc,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[dc,t("td",_c,[t("a",rc,[l("左叶子之和"),e(s)])]),ic,t("td",cc,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ac]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[hc]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[uc]),_:1}),l(),fc]),t("td",gc,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[mc,t("td",yc,[t("a",xc,[l("将二叉搜索树转化为排序的双向链表"),e(s)])]),t("td",bc,[t("a",pc,[l("[✓]"),e(s)])]),t("td",kc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Mc]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[vc]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ic]),_:1}),l(),Ec]),t("td",wc,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Hc,t("td",zc,[t("a",Oc,[l("建立四叉树"),e(s)])]),t("td",qc,[t("a",jc,[l("[✓]"),e(s)])]),t("td",Nc,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Lc]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Cc]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[Kc]),_:1}),l(),Pc]),t("td",Bc,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Vc,t("td",Tc,[t("a",Uc,[l("序列化和反序列化 N 叉树"),e(s)])]),Rc,t("td",Wc,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Gc]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Yc]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Qc]),_:1}),l(),Sc]),t("td",Dc,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Zc,t("td",Ac,[t("a",Fc,[l("N 叉树的层序遍历"),e(s)])]),Jc,t("td",Xc,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$c]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ta]),_:1})]),t("td",ea,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[la,t("td",oa,[t("a",na,[l("将 N 叉树编码为二叉树"),e(s)])]),sa,t("td",da,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[_a]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ra]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ia]),_:1}),l(),ca]),t("td",aa,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ha,t("td",ua,[t("a",fa,[l("路径总和 III"),e(s)])]),t("td",ga,[t("a",ma,[l("[✓]"),e(s)])]),t("td",ya,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[xa]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ba]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[pa]),_:1})]),t("td",ka,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ma,t("td",va,[t("a",Ia,[l("序列化和反序列化二叉搜索树"),e(s)])]),Ea,t("td",wa,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ha]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[za]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Oa]),_:1}),l(),qa]),t("td",ja,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Na,t("td",La,[t("a",Ca,[l("删除二叉搜索树中的节点"),e(s)])]),t("td",Ka,[t("a",Pa,[l("[✓]"),e(s)])]),t("td",Ba,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Va]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Ta]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Ua]),_:1})]),t("td",Ra,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Wa,t("td",Ga,[t("a",Ya,[l("二叉搜索树中的众数"),e(s)])]),Qa,t("td",Sa,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Da]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Za]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Aa]),_:1}),l(),Fa]),t("td",Ja,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Xa,t("td",$a,[t("a",th,[l("出现次数最多的子树元素和"),e(s)])]),eh,t("td",lh,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[oh]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[nh]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[sh]),_:1}),l(),dh]),t("td",_h,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[rh,t("td",ih,[t("a",ch,[l("二叉搜索树中的中序后继 II"),e(s)])]),ah,t("td",hh,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[uh]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[fh]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[gh]),_:1})]),t("td",mh,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[yh,t("td",xh,[t("a",bh,[l("找树左下角的值"),e(s)])]),ph,t("td",kh,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Mh]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[vh]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Ih]),_:1}),l(),Eh]),t("td",wh,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Hh,t("td",zh,[t("a",Oh,[l("在每个树行中找最大值"),e(s)])]),qh,t("td",jh,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Nh]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Lh]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Ch]),_:1}),l(),Kh]),t("td",Ph,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Bh,t("td",Vh,[t("a",Th,[l("二叉搜索树的最小绝对差"),e(s)])]),t("td",Uh,[t("a",Rh,[l("[✓]"),e(s)])]),t("td",Wh,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Gh]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Yh]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Qh]),_:1}),l(),Sh]),t("td",Dh,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Zh,t("td",Ah,[t("a",Fh,[l("从字符串生成二叉树"),e(s)])]),Jh,t("td",Xh,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[$h]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[t1]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[e1]),_:1}),l(),l1]),t("td",o1,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[n1,t("td",s1,[t("a",d1,[l("把二叉搜索树转换为累加树"),e(s)])]),_1,t("td",r1,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[i1]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[c1]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[a1]),_:1}),l(),h1]),t("td",u1,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[f1,t("td",g1,[t("a",m1,[l("二叉树的直径"),e(s)])]),t("td",y1,[t("a",x1,[l("[✓]"),e(s)])]),t("td",b1,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[p1]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[k1]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[M1]),_:1})]),t("td",v1,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[I1,t("td",E1,[t("a",w1,[l("二叉树的边界"),e(s)])]),H1,t("td",z1,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[O1]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[q1]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[j1]),_:1})]),t("td",N1,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[L1,t("td",C1,[t("a",K1,[l("二叉树最长连续序列 II"),e(s)])]),P1,t("td",B1,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[V1]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[T1]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[U1]),_:1})]),t("td",R1,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[W1,t("td",G1,[t("a",Y1,[l("四叉树交集"),e(s)])]),Q1,t("td",S1,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[D1]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[Z1]),_:1})]),t("td",A1,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[F1,t("td",J1,[t("a",X1,[l("N 叉树的最大深度"),e(s)])]),t("td",$1,[t("a",tu,[l("[✓]"),e(s)])]),t("td",eu,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[lu]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ou]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[nu]),_:1})]),t("td",su,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[du,t("td",_u,[t("a",ru,[l("二叉树的坡度"),e(s)])]),iu,t("td",cu,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[au]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[hu]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[uu]),_:1})]),t("td",fu,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[gu,t("td",mu,[t("a",yu,[l("另一棵树的子树"),e(s)])]),t("td",xu,[t("a",bu,[l("[✓]"),e(s)])]),t("td",pu,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ku]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Mu]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[vu]),_:1}),l(),Iu]),t("td",Eu,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[wu,t("td",Hu,[t("a",zu,[l("杀掉进程"),e(s)])]),Ou,t("td",qu,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ju]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Nu]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Lu]),_:1}),l(),Cu]),t("td",Ku,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Pu,t("td",Bu,[t("a",Vu,[l("N 叉树的前序遍历"),e(s)])]),t("td",Tu,[t("a",Uu,[l("[✓]"),e(s)])]),t("td",Ru,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Wu]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Gu]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Yu]),_:1})]),t("td",Qu,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Su,t("td",Du,[t("a",Zu,[l("N 叉树的后序遍历"),e(s)])]),t("td",Au,[t("a",Fu,[l("[✓]"),e(s)])]),t("td",Ju,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Xu]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$u]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[tf]),_:1})]),t("td",ef,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[lf,t("td",of,[t("a",nf,[l("根据二叉树创建字符串"),e(s)])]),sf,t("td",df,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[_f]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[rf]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[cf]),_:1}),l(),af]),t("td",hf,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[uf,t("td",ff,[t("a",gf,[l("合并二叉树"),e(s)])]),t("td",mf,[t("a",yf,[l("[✓]"),e(s)])]),t("td",xf,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[bf]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[pf]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[kf]),_:1}),l(),Mf]),t("td",vf,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[If,t("td",Ef,[t("a",wf,[l("在二叉树中增加一行"),e(s)])]),Hf,t("td",zf,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Of]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[qf]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[jf]),_:1}),l(),Nf]),t("td",Lf,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Cf,t("td",Kf,[t("a",Pf,[l("二叉树的层平均值"),e(s)])]),t("td",Bf,[t("a",Vf,[l("[✓]"),e(s)])]),t("td",Tf,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Uf]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Rf]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Wf]),_:1}),l(),Gf]),t("td",Yf,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Qf,t("td",Sf,[t("a",Df,[l("寻找重复的子树"),e(s)])]),Zf,t("td",Af,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ff]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Jf]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Xf]),_:1}),l(),$f]),t("td",tg,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[eg,t("td",lg,[t("a",og,[l("两数之和 IV - 输入二叉搜索树"),e(s)])]),ng,t("td",sg,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[dg]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[_g]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[rg]),_:1}),l(),ig]),t("td",cg,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[ag,t("td",hg,[t("a",ug,[l("最大二叉树"),e(s)])]),t("td",fg,[t("a",gg,[l("[✓]"),e(s)])]),t("td",mg,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[yg]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[xg]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[bg]),_:1}),l(),pg]),t("td",kg,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Mg,t("td",vg,[t("a",Ig,[l("输出二叉树"),e(s)])]),Eg,t("td",wg,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Hg]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[zg]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Og]),_:1}),l(),qg]),t("td",jg,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ng,t("td",Lg,[t("a",Cg,[l("二叉树最大宽度"),e(s)])]),t("td",Kg,[t("a",Pg,[l("[✓]"),e(s)])]),t("td",Bg,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Vg]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Tg]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Ug]),_:1}),l(),Rg]),t("td",Wg,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Gg,t("td",Yg,[t("a",Qg,[l("均匀树划分"),e(s)])]),Sg,t("td",Dg,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Zg]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ag]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Fg]),_:1})]),t("td",Jg,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Xg,t("td",$g,[t("a",tm,[l("路径总和 IV"),e(s)])]),em,t("td",lm,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[om]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[nm]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[sm]),_:1}),l(),dm]),t("td",_m,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[rm,t("td",im,[t("a",cm,[l("修剪二叉搜索树"),e(s)])]),am,t("td",hm,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[um]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[fm]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[gm]),_:1}),l(),mm]),t("td",ym,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[xm,t("td",bm,[t("a",pm,[l("二叉树中第二小的节点"),e(s)])]),km,t("td",Mm,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[vm]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Im]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Em]),_:1})]),t("td",wm,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Hm,t("td",zm,[t("a",Om,[l("最长同值路径"),e(s)])]),qm,t("td",jm,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Nm]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Lm]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Cm]),_:1})]),t("td",Km,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Pm,t("td",Bm,[t("a",Vm,[l("员工的重要性"),e(s)])]),Tm,t("td",Um,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Rm]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Wm]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Gm]),_:1}),l(),Ym]),t("td",Qm,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Sm,t("td",Dm,[t("a",Zm,[l("二叉搜索树中的搜索"),e(s)])]),t("td",Am,[t("a",Fm,[l("[✓]"),e(s)])]),t("td",Jm,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Xm]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[$m]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[t2]),_:1})]),t("td",e2,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[l2,t("td",o2,[t("a",n2,[l("二叉搜索树中的插入操作"),e(s)])]),t("td",s2,[t("a",d2,[l("[✓]"),e(s)])]),t("td",_2,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[r2]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[i2]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[c2]),_:1})]),t("td",a2,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[h2,t("td",u2,[t("a",f2,[l("数据流中的第 K 大元素"),e(s)])]),t("td",g2,[t("a",m2,[l("[✓]"),e(s)])]),t("td",y2,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[x2]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[b2]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[p2]),_:1}),l(),k2]),t("td",M2,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[v2,t("td",I2,[t("a",E2,[l("二叉树最近的叶节点"),e(s)])]),w2,t("td",H2,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[z2]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[O2]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[q2]),_:1}),l(),j2]),t("td",N2,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[L2,t("td",C2,[t("a",K2,[l("拆分二叉搜索树"),e(s)])]),P2,t("td",B2,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[V2]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[T2]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[U2]),_:1}),l(),R2]),t("td",W2,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[G2,t("td",Y2,[t("a",Q2,[l("二叉搜索树节点最小距离"),e(s)])]),t("td",S2,[t("a",D2,[l("[✓]"),e(s)])]),t("td",Z2,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[A2]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[F2]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[J2]),_:1}),l(),X2]),t("td",$2,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[ty,t("td",ey,[t("a",ly,[l("二叉树剪枝"),e(s)])]),oy,t("td",ny,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[sy]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dy]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[_y]),_:1})]),t("td",ry,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[iy,t("td",cy,[t("a",ay,[l("树中距离之和"),e(s)])]),hy,t("td",uy,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[fy]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[gy]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[my]),_:1}),l(),yy]),t("td",xy,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[by,t("td",py,[t("a",ky,[l("二叉树中所有距离为 K 的结点"),e(s)])]),My,t("td",vy,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Iy]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ey]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[wy]),_:1}),l(),Hy]),t("td",zy,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Oy,t("td",qy,[t("a",jy,[l("具有所有最深节点的最小子树"),e(s)])]),Ny,t("td",Ly,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Cy]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ky]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Py]),_:1}),l(),By]),t("td",Vy,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ty,t("td",Uy,[t("a",Ry,[l("叶子相似的树"),e(s)])]),Wy,t("td",Gy,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Yy]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Qy]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Sy]),_:1})]),t("td",Dy,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Zy,t("td",Ay,[t("a",Fy,[l("根据前序和后序遍历构造二叉树"),e(s)])]),t("td",Jy,[t("a",Xy,[l("[✓]"),e(s)])]),t("td",$y,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[tx]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ex]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[lx]),_:1}),l(),ox]),t("td",nx,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[sx,t("td",dx,[t("a",_x,[l("所有可能的真二叉树"),e(s)])]),rx,t("td",ix,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[cx]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[ax]),_:1}),l(),e(n,{to:"/outline/tag/memoization.html"},{default:o(()=>[hx]),_:1}),l(),ux]),t("td",fx,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[gx,t("td",mx,[t("a",yx,[l("递增顺序搜索树"),e(s)])]),xx,t("td",bx,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[px]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[kx]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Mx]),_:1}),l(),vx]),t("td",Ix,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ex,t("td",wx,[t("a",Hx,[l("完全二叉树插入器"),e(s)])]),zx,t("td",Ox,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[qx]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[jx]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Nx]),_:1}),l(),Lx]),t("td",Cx,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Kx,t("td",Px,[t("a",Bx,[l("二叉搜索树的范围和"),e(s)])]),Vx,t("td",Tx,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ux]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Rx]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Wx]),_:1}),l(),Gx]),t("td",Yx,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Qx,t("td",Sx,[t("a",Dx,[l("翻转等价二叉树"),e(s)])]),Zx,t("td",Ax,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Fx]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Jx]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Xx]),_:1})]),t("td",$x,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[tb,t("td",eb,[t("a",lb,[l("二叉树的完全性检验"),e(s)])]),t("td",ob,[t("a",nb,[l("[✓]"),e(s)])]),t("td",sb,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[db]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_b]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[rb]),_:1})]),t("td",ib,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[cb,t("td",ab,[t("a",hb,[l("单值二叉树"),e(s)])]),ub,t("td",fb,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[gb]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[mb]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[yb]),_:1}),l(),xb]),t("td",bb,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[pb,t("td",kb,[t("a",Mb,[l("监控二叉树"),e(s)])]),vb,t("td",Ib,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Eb]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[wb]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Hb]),_:1}),l(),zb]),t("td",Ob,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[qb,t("td",jb,[t("a",Nb,[l("翻转二叉树以匹配先序遍历"),e(s)])]),Lb,t("td",Cb,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Kb]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Pb]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Bb]),_:1})]),t("td",Vb,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Tb,t("td",Ub,[t("a",Rb,[l("在二叉树中分配硬币"),e(s)])]),Wb,t("td",Gb,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Yb]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Qb]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Sb]),_:1})]),t("td",Db,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Zb,t("td",Ab,[t("a",Fb,[l("二叉树的垂序遍历"),e(s)])]),Jb,t("td",Xb,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$b]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[tp]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ep]),_:1}),l(),lp]),t("td",op,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[np,t("td",sp,[t("a",dp,[l("从叶结点开始的最小字符串"),e(s)])]),_p,t("td",rp,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ip]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[cp]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[ap]),_:1}),l(),hp]),t("td",up,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[fp,t("td",gp,[t("a",mp,[l("二叉树的堂兄弟节点"),e(s)])]),yp,t("td",xp,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[bp]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[pp]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[kp]),_:1}),l(),Mp]),t("td",vp,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ip,t("td",Ep,[t("a",wp,[l("最大二叉树 II"),e(s)])]),Hp,t("td",zp,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Op]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[qp]),_:1})]),t("td",jp,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Np,t("td",Lp,[t("a",Cp,[l("前序遍历构造二叉搜索树"),e(s)])]),t("td",Kp,[t("a",Pp,[l("[✓]"),e(s)])]),t("td",Bp,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Vp]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Tp]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[Up]),_:1}),l(),Rp]),t("td",Wp,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Gp,t("td",Yp,[t("a",Qp,[l("从根到叶的二进制数之和"),e(s)])]),Sp,t("td",Dp,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Zp]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ap]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Fp]),_:1})]),t("td",Jp,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Xp,t("td",$p,[t("a",t0,[l("节点与其祖先之间的最大差值"),e(s)])]),e0,t("td",l0,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[o0]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[n0]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[s0]),_:1})]),t("td",d0,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[_0,t("td",r0,[t("a",i0,[l("从先序遍历还原二叉树"),e(s)])]),c0,t("td",a0,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[h0]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[u0]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[f0]),_:1}),l(),g0]),t("td",m0,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[y0,t("td",x0,[t("a",b0,[l("从二叉搜索树到更大和树"),e(s)])]),p0,t("td",k0,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[M0]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[v0]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[I0]),_:1}),l(),E0]),t("td",w0,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[H0,t("td",z0,[t("a",O0,[l("根到叶路径上的不足节点"),e(s)])]),q0,t("td",j0,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[N0]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[L0]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[C0]),_:1})]),t("td",K0,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[P0,t("td",B0,[t("a",V0,[l("二叉树寻路"),e(s)])]),T0,t("td",U0,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[R0]),_:1}),l(),e(n,{to:"/outline/tag/math.html"},{default:o(()=>[W0]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[G0]),_:1})]),t("td",Y0,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Q0,t("td",S0,[t("a",D0,[l("删点成林"),e(s)])]),Z0,t("td",A0,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[F0]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[J0]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[X0]),_:1}),l(),$0]),t("td",t3,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[e3,t("td",l3,[t("a",o3,[l("子树的最大平均值"),e(s)])]),n3,t("td",s3,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[d3]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[_3]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[r3]),_:1})]),t("td",i3,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[c3,t("td",a3,[t("a",h3,[l("最深叶节点的最近公共祖先"),e(s)])]),u3,t("td",f3,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[g3]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[m3]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[y3]),_:1}),l(),x3]),t("td",b3,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[p3,t("td",k3,[t("a",M3,[l("二叉树着色游戏"),e(s)])]),v3,t("td",I3,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[E3]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[w3]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[H3]),_:1})]),t("td",z3,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[O3,t("td",q3,[t("a",j3,[l("最大层内元素和"),e(s)])]),N3,t("td",L3,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[C3]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[K3]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[P3]),_:1}),l(),B3]),t("td",V3,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[T3,t("td",U3,[t("a",R3,[l("查找两棵二叉搜索树之和"),e(s)])]),W3,t("td",G3,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Y3]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Q3]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[S3]),_:1}),l(),D3]),t("td",Z3,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[A3,t("td",F3,[t("a",J3,[l("树的直径"),e(s)])]),X3,t("td",$3,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[t6]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[e6]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[l6]),_:1}),l(),o6]),t("td",n6,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[s6,t("td",d6,[t("a",_6,[l("最小公共区域"),e(s)])]),r6,t("td",i6,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[c6]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[a6]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[h6]),_:1}),l(),u6]),t("td",f6,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[g6,t("td",m6,[t("a",y6,[l("在受污染的二叉树中查找元素"),e(s)])]),x6,t("td",b6,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[p6]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[k6]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[M6]),_:1}),l(),v6]),t("td",I6,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[E6,t("td",w6,[t("a",H6,[l("删除树节点"),e(s)])]),z6,t("td",O6,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[q6]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[j6]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[N6]),_:1}),l(),L6]),t("td",C6,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[K6,t("td",P6,[t("a",B6,[l("层数最深叶子节点的和"),e(s)])]),V6,t("td",T6,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[U6]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[R6]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[W6]),_:1}),l(),G6]),t("td",Y6,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Q6,t("td",S6,[t("a",D6,[l("两棵二叉搜索树中的所有元素"),e(s)])]),Z6,t("td",A6,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[F6]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[J6]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[X6]),_:1}),l(),$6]),t("td",t8,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[e8,t("td",l8,[t("a",o8,[l("祖父节点值为偶数的节点和"),e(s)])]),n8,t("td",s8,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[d8]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[_8]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[r8]),_:1}),l(),i8]),t("td",c8,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[a8,t("td",h8,[t("a",u8,[l("删除给定值的叶子节点"),e(s)])]),f8,t("td",g8,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[m8]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[y8]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[x8]),_:1})]),t("td",b8,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[p8,t("td",k8,[t("a",M8,[l("分裂二叉树的最大乘积"),e(s)])]),v8,t("td",I8,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[E8]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[w8]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[H8]),_:1})]),t("td",z8,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[O8,t("td",q8,[t("a",j8,[l("验证二叉树"),e(s)])]),N8,t("td",L8,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[C8]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[K8]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[P8]),_:1}),l(),B8]),t("td",V8,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[T8,t("td",U8,[t("a",R8,[l("二叉树中的链表"),e(s)])]),W8,t("td",G8,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Y8]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Q8]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[S8]),_:1}),l(),D8]),t("td",Z8,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[A8,t("td",F8,[t("a",J8,[l("二叉树中的最长交错路径"),e(s)])]),X8,t("td",$8,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[t4]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[e4]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[l4]),_:1}),l(),o4]),t("td",n4,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[s4,t("td",d4,[t("a",_4,[l("二叉搜索子树的最大键值和"),e(s)])]),r4,t("td",i4,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[c4]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[a4]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[h4]),_:1}),l(),u4]),t("td",f4,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[g4,t("td",m4,[t("a",y4,[l("通知所有员工所需的时间"),e(s)])]),x4,t("td",b4,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[p4]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[k4]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[M4]),_:1})]),t("td",v4,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[I4,t("td",E4,[t("a",w4,[l("T 秒后青蛙的位置"),e(s)])]),H4,t("td",z4,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[O4]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[q4]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[j4]),_:1}),l(),N4]),t("td",L4,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[C4,t("td",K4,[t("a",P4,[l("找出克隆二叉树中的相同节点"),e(s)])]),B4,t("td",V4,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[T4]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[U4]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[R4]),_:1}),l(),W4]),t("td",G4,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Y4,t("td",Q4,[t("a",S4,[l("将二叉搜索树变平衡"),e(s)])]),D4,t("td",Z4,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[A4]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[F4]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[J4]),_:1}),l(),X4]),t("td",$4,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[t5,t("td",e5,[t("a",l5,[l("判断给定的序列是否是二叉树从根到叶的路径"),e(s)])]),o5,t("td",n5,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[s5]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[d5]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_5]),_:1}),l(),r5]),t("td",i5,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[c5,t("td",a5,[t("a",h5,[l("收集树上所有苹果的最少时间"),e(s)])]),u5,t("td",f5,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[g5]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[m5]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[y5]),_:1}),l(),x5]),t("td",b5,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[p5,t("td",k5,[t("a",M5,[l("统计二叉树中好节点的数目"),e(s)])]),v5,t("td",I5,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[E5]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[w5]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[H5]),_:1}),l(),z5]),t("td",O5,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[q5,t("td",j5,[t("a",N5,[l("二叉树中的伪回文路径"),e(s)])]),L5,t("td",C5,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[K5]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[P5]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[B5]),_:1}),l(),V5]),t("td",T5,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[U5,t("td",R5,[t("a",W5,[l("寻找所有的独生节点"),e(s)])]),G5,t("td",Y5,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Q5]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[S5]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[D5]),_:1}),l(),Z5]),t("td",A5,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[F5,t("td",J5,[t("a",X5,[l("树节点的第 K 个祖先"),e(s)])]),$5,t("td",t7,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[e7]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[l7]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[o7]),_:1}),l(),n7]),t("td",s7,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[d7,t("td",_7,[t("a",r7,[l("克隆含随机指针的二叉树"),e(s)])]),i7,t("td",c7,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[a7]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[h7]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[u7]),_:1}),l(),f7]),t("td",g7,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[m7,t("td",y7,[t("a",x7,[l("克隆 N 叉树"),e(s)])]),b7,t("td",p7,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[k7]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[M7]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[v7]),_:1}),l(),I7]),t("td",E7,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[w7,t("td",H7,[t("a",z7,[l("找到 N 叉树的根节点"),e(s)])]),O7,t("td",q7,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[j7]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[N7]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[L7]),_:1}),l(),C7]),t("td",K7,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[P7,t("td",B7,[t("a",V7,[l("移动 N 叉树的子树"),e(s)])]),T7,t("td",U7,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[R7]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[W7]),_:1})]),t("td",G7,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Y7,t("td",Q7,[t("a",S7,[l("子树中标签相同的节点数"),e(s)])]),D7,t("td",Z7,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[A7]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[F7]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[J7]),_:1}),l(),X7]),t("td",$7,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[t9,t("td",e9,[t("a",l9,[l("N 叉树的直径"),e(s)])]),t("td",o9,[t("a",n9,[l("[✓]"),e(s)])]),t("td",s9,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[d9]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[_9]),_:1})]),t("td",r9,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[i9,t("td",c9,[t("a",a9,[l("好叶子节点对的数量"),e(s)])]),h9,t("td",u9,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[f9]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[g9]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[m9]),_:1})]),t("td",y9,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[x9,t("td",b9,[t("a",p9,[l("将子数组重新排序得到同一个二叉搜索树的方案数"),e(s)])]),k9,t("td",M9,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[v9]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[I9]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[E9]),_:1}),l(),w9]),t("td",H9,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[z9,t("td",O9,[t("a",q9,[l("二叉搜索树迭代器 II"),e(s)])]),j9,t("td",N9,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[L9]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[C9]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[K9]),_:1}),l(),P9]),t("td",B9,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[V9,t("td",T9,[t("a",U9,[l("根据中缀表达式构造二叉表达式树"),e(s)])]),R9,t("td",W9,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[G9]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Y9]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[Q9]),_:1}),l(),S9]),t("td",D9,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Z9,t("td",A9,[t("a",F9,[l("王位继承顺序"),e(s)])]),J9,t("td",X9,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$9]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[tk]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[ek]),_:1}),l(),lk]),t("td",ok,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[nk,t("td",sk,[t("a",dk,[l("找到二叉树中最近的右侧节点"),e(s)])]),_k,t("td",rk,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ik]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[ck]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[ak]),_:1})]),t("td",hk,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[uk,t("td",fk,[t("a",gk,[l("奇偶树"),e(s)])]),mk,t("td",yk,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[xk]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[bk]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[pk]),_:1})]),t("td",kk,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Mk,t("td",vk,[t("a",Ik,[l("检查两棵二叉表达式树是否等价"),e(s)])]),Ek,t("td",wk,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Hk]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[zk]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Ok]),_:1}),l(),qk]),t("td",jk,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Nk,t("td",Lk,[t("a",Ck,[l("统计子树中城市之间最大距离"),e(s)])]),Kk,t("td",Pk,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[Bk]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Vk]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Tk]),_:1}),l(),Uk]),t("td",Rk,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Wk,t("td",Gk,[t("a",Yk,[l("设计带解析函数的表达式树"),e(s)])]),Qk,t("td",Sk,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Dk]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Zk]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Ak]),_:1}),l(),Fk]),t("td",Jk,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Xk,t("td",$k,[t("a",tM,[l("二叉树的最近公共祖先 II"),e(s)])]),eM,t("td",lM,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[oM]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[nM]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[sM]),_:1})]),t("td",dM,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[_M,t("td",rM,[t("a",iM,[l("二叉树的最近公共祖先 III"),e(s)])]),cM,t("td",aM,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[hM]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[uM]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[fM]),_:1}),l(),gM]),t("td",mM,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[yM,t("td",xM,[t("a",bM,[l("纠正二叉树"),e(s)])]),pM,t("td",kM,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[MM]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[vM]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[IM]),_:1}),l(),EM]),t("td",wM,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[HM,t("td",zM,[t("a",OM,[l("改变二叉树的根节点"),e(s)])]),qM,t("td",jM,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[NM]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[LM]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[CM]),_:1})]),t("td",KM,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[PM,t("td",BM,[t("a",VM,[l("二叉树的最近公共祖先 IV"),e(s)])]),TM,t("td",UM,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[RM]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[WM]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[GM]),_:1}),l(),YM]),t("td",QM,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[SM,t("td",DM,[t("a",ZM,[l("重构一棵树的方案数"),e(s)])]),AM,t("td",FM,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[JM]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[XM]),_:1})]),t("td",$M,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[tv,t("td",ev,[t("a",lv,[l("找到二叉树中的距离"),e(s)])]),ov,t("td",nv,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[sv]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dv]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_v]),_:1}),l(),rv]),t("td",iv,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[cv,t("td",av,[t("a",hv,[l("互质树"),e(s)])]),uv,t("td",fv,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[gv]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[mv]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[yv]),_:1}),l(),xv]),t("td",bv,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[pv,t("td",kv,[t("a",Mv,[l("给定二叉搜索树的插入顺序求深度"),e(s)])]),vv,t("td",Iv,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ev]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[wv]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Hv]),_:1}),l(),zv]),t("td",Ov,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[qv,t("td",jv,[t("a",Nv,[l("统计为蚁群构筑房间的不同顺序"),e(s)])]),Lv,t("td",Cv,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Kv]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[Pv]),_:1}),l(),e(n,{to:"/outline/tag/topological-sort.html"},{default:o(()=>[Bv]),_:1}),l(),Vv]),t("td",Tv,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Uv,t("td",Rv,[t("a",Wv,[l("合并多棵二叉搜索树"),e(s)])]),Gv,t("td",Yv,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Qv]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Sv]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Dv]),_:1}),l(),Zv]),t("td",Av,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Fv,t("td",Jv,[t("a",Xv,[l("值等于子节点值之和的节点数量"),e(s)])]),$v,t("td",tI,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[eI]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[lI]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[oI]),_:1})]),t("td",nI,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[sI,t("td",dI,[t("a",_I,[l("树上的操作"),e(s)])]),rI,t("td",iI,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[cI]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[aI]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[hI]),_:1}),l(),uI]),t("td",fI,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[gI,t("td",mI,[t("a",yI,[l("每棵子树内缺失的最小基因值"),e(s)])]),xI,t("td",bI,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[pI]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[kI]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[MI]),_:1}),l(),vI]),t("td",II,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[EI,t("td",wI,[t("a",HI,[l("斐波那契树的移除子树游戏"),e(s)])]),zI,t("td",OI,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[qI]),_:1}),l(),e(n,{to:"/outline/tag/math.html"},{default:o(()=>[jI]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[NI]),_:1}),l(),LI]),t("td",CI,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[KI,t("td",PI,[t("a",BI,[l("统计最高分的节点数目"),e(s)])]),VI,t("td",TI,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[UI]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[RI]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[WI]),_:1}),l(),GI]),t("td",YI,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[QI,t("td",SI,[t("a",DI,[l("从二叉树一个节点到另一个节点每一步的方向"),e(s)])]),ZI,t("td",AI,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[FI]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[JI]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[XI]),_:1}),l(),$I]),t("td",tE,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[eE,t("td",lE,[t("a",oE,[l("根据描述创建二叉树"),e(s)])]),t("td",nE,[t("a",sE,[l("[✓]"),e(s)])]),t("td",dE,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[_E]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[rE]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[iE]),_:1}),l(),cE]),t("td",aE,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[hE,t("td",uE,[t("a",fE,[l("判断根结点是否等于子结点之和"),e(s)])]),gE,t("td",mE,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[yE]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[xE]),_:1})]),t("td",bE,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[pE,t("td",kE,[t("a",ME,[l("相邻字符不同的最长路径"),e(s)])]),vE,t("td",IE,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[EE]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[wE]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[HE]),_:1}),l(),zE]),t("td",OE,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[qE,t("td",jE,[t("a",NE,[l("统计值等于子树平均值的节点数"),e(s)])]),LE,t("td",CE,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[KE]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[PE]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[BE]),_:1})]),t("td",VE,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[TE,t("td",UE,[t("a",RE,[l("树中最接近路径的节点"),e(s)])]),WE,t("td",GE,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[YE]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[QE]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[SE]),_:1}),l(),DE]),t("td",ZE,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[AE,t("td",FE,[t("a",JE,[l("二叉树中得到结果所需的最少翻转次数"),e(s)])]),XE,t("td",$E,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[tw]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ew]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[lw]),_:1}),l(),ow]),t("td",nw,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[sw,t("td",dw,[t("a",_w,[l("从树中删除边的最小分数"),e(s)])]),rw,t("td",iw,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[cw]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[aw]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[hw]),_:1}),l(),uw]),t("td",fw,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[gw,t("td",mw,[t("a",yw,[l("计算布尔二叉树的值"),e(s)])]),xw,t("td",bw,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[pw]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[kw]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Mw]),_:1})]),t("td",vw,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Iw,t("td",Ew,[t("a",ww,[l("受限条件下可到达节点的数目"),e(s)])]),Hw,t("td",zw,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ow]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[qw]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[jw]),_:1}),l(),Nw]),t("td",Lw,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Cw,t("td",Kw,[t("a",Pw,[l("选择边来最大化树的得分"),e(s)])]),Bw,t("td",Vw,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Tw]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Uw]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Rw]),_:1})]),t("td",Ww,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Gw,t("td",Yw,[t("a",Qw,[l("感染二叉树需要的总时间"),e(s)])]),Sw,t("td",Dw,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Zw]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Aw]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Fw]),_:1}),l(),Jw]),t("td",Xw,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[$w,t("td",tH,[t("a",eH,[l("反转二叉树的奇数层"),e(s)])]),lH,t("td",oH,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[nH]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[sH]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[dH]),_:1}),l(),_H]),t("td",rH,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[iH,t("td",cH,[t("a",aH,[l("好路径的数目"),e(s)])]),hH,t("td",uH,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[fH]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[gH]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[mH]),_:1}),l(),yH]),t("td",xH,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[bH,t("td",pH,[t("a",kH,[l("创建价值相同的连通块"),e(s)])]),MH,t("td",vH,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[IH]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[EH]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[wH]),_:1}),l(),HH]),t("td",zH,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[OH,t("td",qH,[t("a",jH,[l("值为 1 的节点数"),e(s)])]),NH,t("td",LH,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[CH]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[KH]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[PH]),_:1}),l(),BH]),t("td",VH,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[TH,t("td",UH,[t("a",RH,[l("移除子树后的二叉树高度"),e(s)])]),WH,t("td",GH,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[YH]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[QH]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[SH]),_:1}),l(),DH]),t("td",ZH,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[AH,t("td",FH,[t("a",JH,[l("树上最大得分和路径"),e(s)])]),XH,t("td",$H,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[tz]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ez]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[lz]),_:1}),l(),oz]),t("td",nz,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[sz,t("td",dz,[t("a",_z,[l("逐层排序二叉树所需的最少操作数目"),e(s)])]),rz,t("td",iz,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[cz]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[az]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[hz]),_:1})]),t("td",uz,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[fz,t("td",gz,[t("a",mz,[l("二叉搜索树最近节点查询"),e(s)])]),yz,t("td",xz,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[bz]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[pz]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[kz]),_:1}),l(),Mz]),t("td",vz,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Iz,t("td",Ez,[t("a",wz,[l("到达首都的最少油耗"),e(s)])]),Hz,t("td",zz,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Oz]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[qz]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[jz]),_:1}),l(),Nz]),t("td",Lz,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Cz,t("td",Kz,[t("a",Pz,[l("两个不重叠子树的最大异或值"),e(s)])]),Bz,t("td",Vz,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Tz]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Uz]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[Rz]),_:1}),l(),Wz]),t("td",Gz,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Yz,t("td",Qz,[t("a",Sz,[l("查询树中环的长度"),e(s)])]),Dz,t("td",Zz,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Az]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Fz]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Jz]),_:1})]),t("td",Xz,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[$z,t("td",tO,[t("a",eO,[l("最大价值和与最小价值和的差值"),e(s)])]),lO,t("td",oO,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[nO]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[sO]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[dO]),_:1}),l(),_O]),t("td",rO,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[iO,t("td",cO,[t("a",aO,[l("统计可能的树根数目"),e(s)])]),hO,t("td",uO,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[fO]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[gO]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[mO]),_:1}),l(),yO]),t("td",xO,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[bO,t("td",pO,[t("a",kO,[l("二叉树中的第 K 大层和"),e(s)])]),MO,t("td",vO,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[IO]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[EO]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[wO]),_:1}),l(),HO]),t("td",zO,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[OO,t("td",qO,[t("a",jO,[l("收集树中金币"),e(s)])]),NO,t("td",LO,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[CO]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[KO]),_:1}),l(),e(n,{to:"/outline/tag/topological-sort.html"},{default:o(()=>[PO]),_:1}),l(),BO]),t("td",VO,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[TO,t("td",UO,[t("a",RO,[l("二叉树的堂兄弟节点 II"),e(s)])]),WO,t("td",GO,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[YO]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[QO]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[SO]),_:1}),l(),DO]),t("td",ZO,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[AO,t("td",FO,[t("a",JO,[l("最小化旅行的价格总和"),e(s)])]),XO,t("td",$O,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[tq]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[eq]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[lq]),_:1}),l(),oq]),t("td",nq,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[sq,t("td",dq,[t("a",_q,[l("使二叉树所有路径值相等的最小代价"),e(s)])]),rq,t("td",iq,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[cq]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[aq]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[hq]),_:1}),l(),uq]),t("td",fq,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[gq,t("td",mq,[t("a",yq,[l("从 Rope 树中提取第 K 个字符"),e(s)])]),xq,t("td",bq,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[pq]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[kq]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[Mq]),_:1})]),t("td",vq,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Iq,t("td",Eq,[t("a",wq,[l("数组是否表示某二叉树的前序遍历"),e(s)])]),Hq,t("td",zq,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Oq]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[qq]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[jq]),_:1}),l(),Nq]),t("td",Lq,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Cq,t("td",Kq,[t("a",Pq,[l("特殊二叉树的高度"),e(s)])]),Bq,t("td",Vq,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Tq]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Uq]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[Rq]),_:1}),l(),Wq]),t("td",Gq,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Yq,t("td",Qq,[t("a",Sq,[l("树中可以形成回文的路径数"),e(s)])]),Dq,t("td",Zq,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[Aq]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Fq]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Jq]),_:1}),l(),Xq]),t("td",$q,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[tj,t("td",ej,[t("a",lj,[l("计算足够大的节点数"),e(s)])]),oj,t("td",nj,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[sj]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dj]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[_j]),_:1}),l(),rj]),t("td",ij,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[cj,t("td",aj,[t("a",hj,[l("边权重均等查询"),e(s)])]),uj,t("td",fj,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[gj]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[mj]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[yj]),_:1}),l(),xj]),t("td",bj,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[pj,t("td",kj,[t("a",Mj,[l("统计树中的合法路径数目"),e(s)])]),vj,t("td",Ij,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Ej]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[wj]),_:1}),l(),e(n,{to:"/outline/tag/math.html"},{default:o(()=>[Hj]),_:1}),l(),zj]),t("td",Oj,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[qj,t("td",jj,[t("a",Nj,[l("可以被 K 整除连通块的最大数目"),e(s)])]),Lj,t("td",Cj,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Kj]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Pj]),_:1})]),t("td",Bj,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Vj,t("td",Tj,[t("a",Uj,[l("收集所有金币可获得的最大积分"),e(s)])]),Rj,t("td",Wj,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[Gj]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Yj]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Qj]),_:1}),l(),Sj]),t("td",Dj,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Zj,t("td",Aj,[t("a",Fj,[l("在树上执行操作以后得到的最大分数"),e(s)])]),Jj,t("td",Xj,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$j]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[tN]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[eN]),_:1})]),t("td",lN,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[oN,t("td",nN,[t("a",sN,[l("树中每个节点放置的金币数目"),e(s)])]),dN,t("td",_N,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[rN]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[iN]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[cN]),_:1}),l(),aN]),t("td",hN,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[uN,t("td",fN,[t("a",gN,[l("相同颜色的最大子树"),e(s)])]),mN,t("td",yN,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[xN]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[bN]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[pN]),_:1}),l(),kN]),t("td",MN,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[vN,t("td",IN,[t("a",EN,[l("在带权树网络中统计可连接服务器对数目"),e(s)])]),wN,t("td",HN,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[zN]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ON]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[qN]),_:1})]),t("td",jN,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[NN,t("td",LN,[t("a",CN,[l("最大节点价值之和"),e(s)])]),KN,t("td",PN,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[BN]),_:1}),l(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[VN]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[TN]),_:1}),l(),UN]),t("td",RN,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[WN,t("td",GN,[t("a",YN,[l("找到具有最小和的树的层数"),e(s)])]),QN,t("td",SN,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[DN]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ZN]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[AN]),_:1}),l(),FN]),t("td",JN,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[XN,t("td",$N,[t("a",tL,[l("合并两棵树后的最小直径"),e(s)])]),eL,t("td",lL,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[oL]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[nL]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[sL]),_:1}),l(),dL]),t("td",_L,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[rL,t("td",iL,[t("a",cL,[l("标记所有节点需要的时间"),e(s)])]),aL,t("td",hL,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[uL]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[fL]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[gL]),_:1}),l(),mL]),t("td",yL,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[xL,t("td",bL,[t("a",pL,[l("统计好节点的数目"),e(s)])]),kL,t("td",ML,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[vL]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[IL]),_:1})]),t("td",EL,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[wL,t("td",HL,[t("a",zL,[l("查找树中最后标记的节点"),e(s)])]),OL,t("td",qL,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[jL]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[NL]),_:1})]),t("td",LL,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[CL,t("td",KL,[t("a",PL,[l("第 K 大的完美二叉子树的大小"),e(s)])]),t("td",BL,[t("a",VL,[l("[✓]"),e(s)])]),t("td",TL,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[UL]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[RL]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[WL]),_:1}),l(),GL]),t("td",YL,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[QL,t("td",SL,[t("a",DL,[l("二叉树任务调度"),e(s)])]),ZL,t("td",AL,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[FL]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[JL]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[XL]),_:1}),l(),$L]),t("td",tC,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[eC,t("td",lC,[t("a",oC,[l("导航装置"),e(s)])]),nC,t("td",sC,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[dC]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[_C]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[rC]),_:1})]),t("td",iC,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[cC,t("td",aC,[t("a",hC,[l("二叉树染色"),e(s)])]),uC,t("td",fC,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[gC]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[mC]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[yC]),_:1})]),t("td",xC,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[bC,t("td",pC,[t("a",kC,[l("开幕式焰火"),e(s)])]),MC,t("td",vC,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[IC]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[EC]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[wC]),_:1}),l(),HC]),t("td",zC,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[OC,t("td",qC,[t("a",jC,[l("二叉搜索树染色"),e(s)])]),NC,t("td",LC,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[CC]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[KC]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[PC]),_:1}),l(),BC]),t("td",VC,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[TC,t("td",UC,[t("a",RC,[l("力扣泡泡龙"),e(s)])]),WC,t("td",GC,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[YC]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[QC]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[SC]),_:1})]),t("td",DC,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ZC,t("td",AC,[t("a",FC,[l("二叉树灯饰"),e(s)])]),JC,t("td",XC,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$C]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[tK]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[eK]),_:1}),l(),lK]),t("td",oK,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[nK,t("td",sK,[t("a",dK,[l("装饰树"),e(s)])]),_K,t("td",rK,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[iK]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[cK]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[aK]),_:1}),l(),hK]),t("td",uK,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[fK,t("td",gK,[t("a",mK,[l("重建二叉树"),e(s)])]),t("td",yK,[t("a",xK,[l("[✓]"),e(s)])]),t("td",bK,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[pK]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[kK]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[MK]),_:1}),l(),vK]),t("td",IK,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[EK,t("td",wK,[t("a",HK,[l("树的子结构"),e(s)])]),t("td",zK,[t("a",OK,[l("[✓]"),e(s)])]),t("td",qK,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[jK]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[NK]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[LK]),_:1})]),t("td",CK,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[KK,t("td",PK,[t("a",BK,[l("二叉树的镜像"),e(s)])]),t("td",VK,[t("a",TK,[l("[✓]"),e(s)])]),t("td",UK,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[RK]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[WK]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[GK]),_:1}),l(),YK]),t("td",QK,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[SK,t("td",DK,[t("a",ZK,[l("对称的二叉树"),e(s)])]),t("td",AK,[t("a",FK,[l("[✓]"),e(s)])]),t("td",JK,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[XK]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[$K]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[tP]),_:1}),l(),eP]),t("td",lP,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[oP,t("td",nP,[t("a",sP,[l("从上到下打印二叉树"),e(s)])]),t("td",dP,[t("a",_P,[l("[✓]"),e(s)])]),t("td",rP,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[iP]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[cP]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[aP]),_:1})]),t("td",hP,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[uP,t("td",fP,[t("a",gP,[l("从上到下打印二叉树 II"),e(s)])]),t("td",mP,[t("a",yP,[l("[✓]"),e(s)])]),t("td",xP,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[bP]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[pP]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[kP]),_:1})]),t("td",MP,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[vP,t("td",IP,[t("a",EP,[l("从上到下打印二叉树 III"),e(s)])]),t("td",wP,[t("a",HP,[l("[✓]"),e(s)])]),t("td",zP,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[OP]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[qP]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[jP]),_:1})]),t("td",NP,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[LP,t("td",CP,[t("a",KP,[l("二叉搜索树的后序遍历序列"),e(s)])]),t("td",PP,[t("a",BP,[l("[✓]"),e(s)])]),t("td",VP,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[TP]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[UP]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[RP]),_:1}),l(),WP]),t("td",GP,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[YP,t("td",QP,[t("a",SP,[l("二叉树中和为某一值的路径"),e(s)])]),t("td",DP,[t("a",ZP,[l("[✓]"),e(s)])]),t("td",AP,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[FP]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[JP]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[XP]),_:1}),l(),$P]),t("td",tB,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[eB,t("td",lB,[t("a",oB,[l("二叉搜索树与双向链表"),e(s)])]),t("td",nB,[t("a",sB,[l("[✓]"),e(s)])]),t("td",dB,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[_B]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[rB]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[iB]),_:1}),l(),cB]),t("td",aB,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[hB,t("td",uB,[t("a",fB,[l("序列化二叉树"),e(s)])]),t("td",gB,[t("a",mB,[l("[✓]"),e(s)])]),t("td",yB,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[xB]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[bB]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[pB]),_:1}),l(),kB]),t("td",MB,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[vB,t("td",IB,[t("a",EB,[l("二叉搜索树的第k大节点"),e(s)])]),t("td",wB,[t("a",HB,[l("[✓]"),e(s)])]),t("td",zB,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[OB]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[qB]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[jB]),_:1}),l(),NB]),t("td",LB,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[CB,t("td",KB,[t("a",PB,[l("二叉树的深度"),e(s)])]),t("td",BB,[t("a",VB,[l("[✓]"),e(s)])]),t("td",TB,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[UB]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[RB]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[WB]),_:1}),l(),GB]),t("td",YB,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[QB,t("td",SB,[t("a",DB,[l("平衡二叉树"),e(s)])]),ZB,t("td",AB,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[FB]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[JB]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[XB]),_:1})]),t("td",$B,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[tV,t("td",eV,[t("a",lV,[l("二叉搜索树的最近公共祖先"),e(s)])]),oV,t("td",nV,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[sV]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dV]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[_V]),_:1}),l(),rV]),t("td",iV,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[cV,t("td",aV,[t("a",hV,[l("二叉树的最近公共祖先"),e(s)])]),uV,t("td",fV,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[gV]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[mV]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[yV]),_:1})]),t("td",xV,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[bV,t("td",pV,[t("a",kV,[l("往完全二叉树添加节点"),e(s)])]),MV,t("td",vV,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[IV]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[EV]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[wV]),_:1}),l(),HV]),t("td",zV,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[OV,t("td",qV,[t("a",jV,[l("二叉树每层的最大值"),e(s)])]),NV,t("td",LV,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[CV]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[KV]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[PV]),_:1}),l(),BV]),t("td",VV,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[TV,t("td",UV,[t("a",RV,[l("二叉树最底层最左边的值"),e(s)])]),WV,t("td",GV,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[YV]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[QV]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[SV]),_:1}),l(),DV]),t("td",ZV,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[AV,t("td",FV,[t("a",JV,[l("二叉树的右侧视图"),e(s)])]),XV,t("td",$V,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[tT]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[eT]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[lT]),_:1}),l(),oT]),t("td",nT,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[sT,t("td",dT,[t("a",_T,[l("二叉树剪枝"),e(s)])]),rT,t("td",iT,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[cT]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[aT]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[hT]),_:1})]),t("td",uT,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[fT,t("td",gT,[t("a",mT,[l("序列化与反序列化二叉树"),e(s)])]),yT,t("td",xT,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[bT]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[pT]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[kT]),_:1}),l(),MT]),t("td",vT,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[IT,t("td",ET,[t("a",wT,[l("从根节点到叶节点的路径数字之和"),e(s)])]),HT,t("td",zT,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[OT]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[qT]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[jT]),_:1})]),t("td",NT,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[LT,t("td",CT,[t("a",KT,[l("向下的路径节点之和"),e(s)])]),PT,t("td",BT,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[VT]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[TT]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[UT]),_:1})]),t("td",RT,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[WT,t("td",GT,[t("a",YT,[l("节点之和最大的路径"),e(s)])]),QT,t("td",ST,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[DT]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ZT]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[AT]),_:1}),l(),FT]),t("td",JT,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[XT,t("td",$T,[t("a",tU,[l("展平二叉搜索树"),e(s)])]),eU,t("td",lU,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[oU]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[nU]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[sU]),_:1}),l(),dU]),t("td",_U,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[rU,t("td",iU,[t("a",cU,[l("二叉搜索树中的中序后继"),e(s)])]),aU,t("td",hU,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[uU]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[fU]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[gU]),_:1}),l(),mU]),t("td",yU,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[xU,t("td",bU,[t("a",pU,[l("所有大于等于节点的值之和"),e(s)])]),kU,t("td",MU,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[vU]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[IU]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[EU]),_:1}),l(),wU]),t("td",HU,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[zU,t("td",OU,[t("a",qU,[l("二叉搜索树迭代器"),e(s)])]),jU,t("td",NU,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[LU]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[CU]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[KU]),_:1}),l(),PU]),t("td",BU,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[VU,t("td",TU,[t("a",UU,[l("数据流的第 K 大数值"),e(s)])]),RU,t("td",WU,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[GU]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[YU]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[QU]),_:1}),l(),SU]),t("td",DU,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[ZU,t("td",AU,[t("a",FU,[l("最小高度树"),e(s)])]),JU,t("td",XU,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[$U]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[tR]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[eR]),_:1}),l(),lR]),t("td",oR,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[nR,t("td",sR,[t("a",dR,[l("特定深度节点链表"),e(s)])]),_R,t("td",rR,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[iR]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[cR]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[aR]),_:1}),l(),hR]),t("td",uR,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[fR,t("td",gR,[t("a",mR,[l("检查平衡性"),e(s)])]),yR,t("td",xR,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[bR]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[pR]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[kR]),_:1})]),t("td",MR,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[vR,t("td",IR,[t("a",ER,[l("合法二叉搜索树"),e(s)])]),wR,t("td",HR,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[zR]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[OR]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[qR]),_:1}),l(),jR]),t("td",NR,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[LR,t("td",CR,[t("a",KR,[l("后继者"),e(s)])]),PR,t("td",BR,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[VR]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[TR]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[UR]),_:1}),l(),RR]),t("td",WR,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[GR,t("td",YR,[t("a",QR,[l("首个共同祖先"),e(s)])]),SR,t("td",DR,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ZR]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[AR]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[FR]),_:1})]),t("td",JR,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[XR,t("td",$R,[t("a",tW,[l("二叉搜索树序列"),e(s)])]),eW,t("td",lW,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[oW]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[nW]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[sW]),_:1}),l(),dW]),t("td",_W,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[rW,t("td",iW,[t("a",cW,[l("检查子树"),e(s)])]),aW,t("td",hW,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[uW]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[fW]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[gW]),_:1}),l(),mW]),t("td",yW,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[xW,t("td",bW,[t("a",pW,[l("求和路径"),e(s)])]),kW,t("td",MW,[e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[vW]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[IW]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[EW]),_:1})]),t("td",wW,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[HW,t("td",zW,[t("a",OW,[l("BiNode"),e(s)])]),qW,t("td",jW,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[NW]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[LW]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[CW]),_:1}),l(),KW]),t("td",PW,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])])])])])}const RW=r(h,[["render",BW],["__file","tree.html.vue"]]);export{RW as default};
