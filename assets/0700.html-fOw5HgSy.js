import{_ as r,r as c,o as i,c as d,a as t,b as e,d as n,w as a,f as p,e as u}from"./app-iq3PLGvn.js";const h={},_={id:"_700-二叉搜索树中的搜索",tabindex:"-1"},f=t("a",{class:"header-anchor",href:"#_700-二叉搜索树中的搜索","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},m=t("code",null,"树",-1),g=t("code",null,"二叉搜索树",-1),b=t("code",null,"二叉树",-1),v={href:"https://leetcode.com/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given the <code>root</code> of a binary search tree (BST) and an integer <code>val</code>.</p><p>Find the node in the BST that the node&#39;s value equals <code>val</code> and return the subtree rooted with that node. If such a node does not exist, return <code>null</code>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [4,2,7,1,3], val = 2</p><p>Output: [2,1,3]</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [4,2,7,1,3], val = 5</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[1, 5000]</code>.</li><li><code>1 &lt;= Node.val &lt;= 10^7</code></li><li><code>root</code> is a binary search tree.</li><li><code>1 &lt;= val &lt;= 10^7</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定二叉搜索树（BST）的根节点和一个值，你需要在 BST 中找到节点值等于给定值的节点，返回以该节点为根的子树，如果节点不存在，则返回 <code>NULL</code>。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>利用 BST 左小右大的特性，可以避免搜索整棵二叉树去寻找元素，从而提升效率。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">val</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">searchBST</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> val <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),T=t("td",{style:{"text-align":"center"}},"270",-1),B={style:{"text-align":"left"}},N={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},S=t("td",{style:{"text-align":"center"}},null,-1),E={style:{"text-align":"left"}},L=t("code",null,"树",-1),q=t("code",null,"深度优先搜索",-1),j=t("code",null,"二叉搜索树",-1),C=t("code",null,"2+",-1),I={style:{"text-align":"left"}},V=t("td",{style:{"text-align":"center"}},"701",-1),z={style:{"text-align":"left"}},M={href:"https://leetcode.com/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},R={style:{"text-align":"left"}},F=t("code",null,"树",-1),U=t("code",null,"二叉搜索树",-1),Y=t("code",null,"二叉树",-1),A={style:{"text-align":"left"}},D=t("td",{style:{"text-align":"center"}},"2476",-1),G={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/closest-nodes-queries-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},J=t("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},P=t("code",null,"树",-1),Q=t("code",null,"深度优先搜索",-1),W=t("code",null,"二叉搜索树",-1),X=t("code",null,"3+",-1),Z={style:{"text-align":"left"}};function $(tt,et){const o=c("ExternalLinkIcon"),l=c("font"),s=c("RouterLink");return i(),d("div",null,[t("h1",_,[f,e(),t("a",k,[e("700. 二叉搜索树中的搜索"),n(o)])]),t("p",null,[e("🟢 "),n(l,{color:"#15bd66"},{default:a(()=>[e("Easy")]),_:1}),e("  🔖  "),n(s,{to:"/tag/tree.html"},{default:a(()=>[m]),_:1}),e(),n(s,{to:"/tag/binary-search-tree.html"},{default:a(()=>[g]),_:1}),e(),n(s,{to:"/tag/binary-tree.html"},{default:a(()=>[b]),_:1}),e("  🔗 "),t("a",v,[y,n(o)])]),x,p(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[T,t("td",B,[t("a",N,[e("最接近的二叉搜索树值"),n(o)])]),S,t("td",E,[n(s,{to:"/tag/tree.html"},{default:a(()=>[L]),_:1}),e(),n(s,{to:"/tag/depth-first-search.html"},{default:a(()=>[q]),_:1}),e(),n(s,{to:"/tag/binary-search-tree.html"},{default:a(()=>[j]),_:1}),e(),C]),t("td",I,[n(l,{color:"#15bd66"},{default:a(()=>[e("Easy")]),_:1})])]),t("tr",null,[V,t("td",z,[t("a",M,[e("二叉搜索树中的插入操作"),n(o)])]),t("td",O,[n(s,{to:"/problem/0701.html"},{default:a(()=>[e("[✓]")]),_:1})]),t("td",R,[n(s,{to:"/tag/tree.html"},{default:a(()=>[F]),_:1}),e(),n(s,{to:"/tag/binary-search-tree.html"},{default:a(()=>[U]),_:1}),e(),n(s,{to:"/tag/binary-tree.html"},{default:a(()=>[Y]),_:1})]),t("td",A,[n(l,{color:"#ffb800"},{default:a(()=>[e("Medium")]),_:1})])]),t("tr",null,[D,t("td",G,[t("a",H,[e("二叉搜索树最近节点查询"),n(o)])]),J,t("td",K,[n(s,{to:"/tag/tree.html"},{default:a(()=>[P]),_:1}),e(),n(s,{to:"/tag/depth-first-search.html"},{default:a(()=>[Q]),_:1}),e(),n(s,{to:"/tag/binary-search-tree.html"},{default:a(()=>[W]),_:1}),e(),X]),t("td",Z,[n(l,{color:"#ffb800"},{default:a(()=>[e("Medium")]),_:1})])])])])])}const at=r(h,[["render",$],["__file","0700.html.vue"]]);export{at as default};
