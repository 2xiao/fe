import{_ as c,r,o as i,c as d,a as n,d as e,b as t,w as s,f as u,e as p}from"./app-ynO5B_DP.js";const _={},h={id:"_7-整数反转",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_7-整数反转","aria-hidden":"true"},"#",-1),m={href:"https://leetcode.com/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"数学",-1),g={href:"https://leetcode.com/problems/reverse-integer",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"LeetCode",-1),v=p('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2^31, 2^31 - 1]</code>, then return <code>0</code>.</p><p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p><p><strong>Example 1:</strong></p><blockquote><p>Input: x = 123</p><p>Output: 321</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: x = -123</p><p>Output: -321</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: x = 120</p><p>Output: 21</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为  <code>[−2^31,  2^31 − 1]</code>。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',14),x=n("li",null,[e("这一题只需要注意一点，反转以后的数字要求在"),n("code",null," [−2^31, 2^31 − 1]"),e("范围内，超过这个范围的数字都要输出 "),n("code",null,"0 "),e("。")],-1),y=p(`<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> isNegative <span class="token operator">=</span> x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  x <span class="token operator">*=</span> isNegative<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    temp <span class="token operator">=</span> temp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> temp <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> temp <span class="token operator">*</span> isNegative<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,3),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),E=n("td",{style:{"text-align":"center"}},"8",-1),N={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/string-to-integer-atoi",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"center"}},C={href:"/problem/0008",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"left"}},V=n("code",null,"字符串",-1),M={style:{"text-align":"left"}},j=n("td",{style:{"text-align":"center"}},"190",-1),B={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/reverse-bits",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},A={href:"/problem/0190",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"left"}},S=n("code",null,"位运算",-1),T=n("code",null,"分治",-1),z={style:{"text-align":"left"}},D=n("td",{style:{"text-align":"center"}},"2119",-1),F={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/a-number-after-a-double-reversal",target:"_blank",rel:"noopener noreferrer"},J=n("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},P=n("code",null,"数学",-1),Q={style:{"text-align":"left"}},U=n("td",{style:{"text-align":"center"}},"2442",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/count-number-of-distinct-integers-after-reverse-operations",target:"_blank",rel:"noopener noreferrer"},Y=n("td",{style:{"text-align":"center"}},null,-1),Z={style:{"text-align":"left"}},$=n("code",null,"数组",-1),nn=n("code",null,"哈希表",-1),en=n("code",null,"数学",-1),tn=n("code",null,"1+",-1),sn={style:{"text-align":"left"}};function an(on,ln){const o=r("ExternalLinkIcon"),l=r("font"),a=r("RouterLink");return i(),d("div",null,[n("h1",h,[k,e(),n("a",m,[e("7. 整数反转"),t(o)])]),n("p",null,[e("🟠 "),t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),t(a,{to:"/outline/tag/math.html"},{default:s(()=>[b]),_:1}),e("  🔗 "),n("a",g,[f,t(o)])]),v,n("ul",null,[n("li",null,[e("这一题是简单题，要求反转 10 进制数。类似的题目有 "),t(a,{to:"/problem/0190.html"},{default:s(()=>[e("第 190 题")]),_:1}),e("。")]),x]),y,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[E,n("td",N,[n("a",q,[e("字符串转换整数 (atoi)"),t(o)])]),n("td",I,[n("a",C,[e("[✓]"),t(o)])]),n("td",L,[t(a,{to:"/outline/tag/string.html"},{default:s(()=>[V]),_:1})]),n("td",M,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[j,n("td",B,[n("a",O,[e("颠倒二进制位"),t(o)])]),n("td",R,[n("a",A,[e("[✓]"),t(o)])]),n("td",G,[t(a,{to:"/outline/tag/bit-manipulation.html"},{default:s(()=>[S]),_:1}),e(),t(a,{to:"/outline/tag/divide-and-conquer.html"},{default:s(()=>[T]),_:1})]),n("td",z,[t(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),n("tr",null,[D,n("td",F,[n("a",H,[e("反转两次的数字"),t(o)])]),J,n("td",K,[t(a,{to:"/outline/tag/math.html"},{default:s(()=>[P]),_:1})]),n("td",Q,[t(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),n("tr",null,[U,n("td",W,[n("a",X,[e("反转之后不同整数的数目"),t(o)])]),Y,n("td",Z,[t(a,{to:"/outline/tag/array.html"},{default:s(()=>[$]),_:1}),e(),t(a,{to:"/outline/tag/hash-table.html"},{default:s(()=>[nn]),_:1}),e(),t(a,{to:"/outline/tag/math.html"},{default:s(()=>[en]),_:1}),e(),tn]),n("td",sn,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const pn=c(_,[["render",an],["__file","0007.html.vue"]]);export{pn as default};
