import{_ as p,r as c,o as i,c as d,a as n,b as e,d as t,w as s,f as r,e as u}from"./app-mXo2sCT-.js";const _={},h={id:"_322-零钱兑换",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_322-零钱兑换","aria-hidden":"true"},"#",-1),k={href:"https://2xiao.github.io/leetcode-js/problem/0322.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"广度优先搜索",-1),g=n("code",null,"数组",-1),b=n("code",null,"动态规划",-1),y={href:"https://leetcode.cn/problems/coin-change",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/coin-change",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),E=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return <em>the fewest number of coins that you need to make up that amount</em>. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an infinite number of each kind of coin.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: coins = [1,2,5], amount = 11</p><p>Output: 3</p><p>Explanation: 11 = 5 + 5 + 1</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: coins = [2], amount = 3</p><p>Output: -1</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: coins = [1], amount = 0</p><p>Output: 0</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 2^31 - 1</code></li><li><code>0 &lt;= amount &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用动态规化，定义一个数组<code>dp</code>，其中<code>dp[i]</code>表示凑齐金额<code>i</code>所需的最少硬币数。</p><ul><li>初始化数组 <code>dp</code> 为 <code>-666</code>，便于后续取最小值。</li><li>将 base case <code>dp[0]</code> 设置为 <code>0</code>，表示凑齐金额 <code>0</code> 不需要任何硬币。</li><li>对于每个金额 <code>i</code>，遍历硬币的面额，计算凑齐金额 <code>i</code> 所需的最少硬币数。</li><li>状态转移方程为：<code>dp[i] = min(dp[i], dp[i - coin] + 1)</code>，其中 <code>coin</code> 为硬币的面额。</li><li>最终，<code>dp[amount]</code> 即为凑齐总金额所需的最少硬币数。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n * amount)</code>，其中 <code>n</code> 是硬币的数量，<code>amount</code> 是目标金额。对于每个金额尝试使用每种硬币，因此在最坏情况下，可能对 <code>amount</code> 种金额进行 <code>O(n)</code> 次递归调用。</li><li><strong>空间复杂度</strong>：<code>O(amount)</code><ul><li>使用了一个长度为 <code>amount + 1</code> 的数组 <code>dp</code>；</li><li>递归调用的深度在最坏情况下可能达到 <code>amount</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">coins</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">amount</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> coin <span class="token keyword">of</span> coins<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> sub <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>num <span class="token operator">-</span> coin<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sub <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
			res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> sub <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> res <span class="token operator">==</span> <span class="token number">Infinity</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>
		<span class="token keyword">return</span> dp<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,24),I=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),q=n("td",{style:{"text-align":"center"}},"983",-1),C={style:{"text-align":"left"}},M={href:"https://leetcode.com/problems/minimum-cost-for-tickets",target:"_blank",rel:"noopener noreferrer"},O=n("td",{style:{"text-align":"center"}},null,-1),L={style:{"text-align":"left"}},N=n("code",null,"数组",-1),V=n("code",null,"动态规划",-1),j={style:{"text-align":"left"}},B=n("td",{style:{"text-align":"center"}},"2218",-1),H={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/maximum-value-of-k-coins-from-piles",target:"_blank",rel:"noopener noreferrer"},Y=n("td",{style:{"text-align":"center"}},null,-1),A={style:{"text-align":"left"}},K=n("code",null,"数组",-1),S=n("code",null,"动态规划",-1),T=n("code",null,"前缀和",-1),z={style:{"text-align":"left"}},D=n("td",{style:{"text-align":"center"}},"2224",-1),F={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/minimum-number-of-operations-to-convert-time",target:"_blank",rel:"noopener noreferrer"},J=n("td",{style:{"text-align":"center"}},null,-1),P={style:{"text-align":"left"}},Q=n("code",null,"贪心",-1),U=n("code",null,"字符串",-1),W={style:{"text-align":"left"}},X=n("td",{style:{"text-align":"center"}},"2547",-1),Z={style:{"text-align":"left"}},$={href:"https://leetcode.com/problems/minimum-cost-to-split-an-array",target:"_blank",rel:"noopener noreferrer"},nn=n("td",{style:{"text-align":"center"}},null,-1),tn={style:{"text-align":"left"}},en=n("code",null,"数组",-1),sn=n("code",null,"哈希表",-1),an=n("code",null,"动态规划",-1),on=n("code",null,"1+",-1),ln={style:{"text-align":"left"}},cn=n("td",{style:{"text-align":"center"}},"2902",-1),pn={style:{"text-align":"left"}},dn={href:"https://leetcode.com/problems/count-of-sub-multisets-with-bounded-sum",target:"_blank",rel:"noopener noreferrer"},rn=n("td",{style:{"text-align":"center"}},null,-1),un={style:{"text-align":"left"}},_n=n("code",null,"数组",-1),hn=n("code",null,"哈希表",-1),mn=n("code",null,"动态规划",-1),kn=n("code",null,"1+",-1),fn={style:{"text-align":"left"}},gn=n("td",{style:{"text-align":"center"}},"2915",-1),bn={style:{"text-align":"left"}},yn={href:"https://leetcode.com/problems/length-of-the-longest-subsequence-that-sums-to-target",target:"_blank",rel:"noopener noreferrer"},xn=n("td",{style:{"text-align":"center"}},null,-1),vn={style:{"text-align":"left"}},wn=n("code",null,"数组",-1),En=n("code",null,"动态规划",-1),In={style:{"text-align":"left"}},qn=n("td",{style:{"text-align":"center"}},"2952",-1),Cn={style:{"text-align":"left"}},Mn={href:"https://leetcode.com/problems/minimum-number-of-coins-to-be-added",target:"_blank",rel:"noopener noreferrer"},On=n("td",{style:{"text-align":"center"}},null,-1),Ln={style:{"text-align":"left"}},Nn=n("code",null,"贪心",-1),Vn=n("code",null,"数组",-1),jn=n("code",null,"排序",-1),Bn={style:{"text-align":"left"}},Hn=n("td",{style:{"text-align":"center"}},"2979",-1),Rn={style:{"text-align":"left"}},Yn={href:"https://leetcode.com/problems/most-expensive-item-that-can-not-be-bought",target:"_blank",rel:"noopener noreferrer"},An=n("td",{style:{"text-align":"center"}},null,-1),Kn={style:{"text-align":"left"}},Sn=n("code",null,"数学",-1),Tn=n("code",null,"动态规划",-1),zn=n("code",null,"数论",-1),Dn={style:{"text-align":"left"}};function Fn(Gn,Jn){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),d("div",null,[n("h1",h,[m,e(),n("a",k,[e("322. 零钱兑换"),t(o)])]),n("p",null,[e("🟠 "),t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),t(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[f]),_:1}),e(),t(a,{to:"/tag/array.html"},{default:s(()=>[g]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[b]),_:1}),e("  🔗 "),n("a",y,[x,t(o)]),e(),n("a",v,[w,t(o)])]),E,r(" prettier-ignore "),n("table",null,[I,n("tbody",null,[n("tr",null,[q,n("td",C,[n("a",M,[e("最低票价"),t(o)])]),O,n("td",L,[t(a,{to:"/tag/array.html"},{default:s(()=>[N]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[V]),_:1})]),n("td",j,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[B,n("td",H,[n("a",R,[e("从栈中取出 K 个硬币的最大面值和"),t(o)])]),Y,n("td",A,[t(a,{to:"/tag/array.html"},{default:s(()=>[K]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[S]),_:1}),e(),t(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[T]),_:1})]),n("td",z,[t(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),n("tr",null,[D,n("td",F,[n("a",G,[e("转化时间需要的最少操作数"),t(o)])]),J,n("td",P,[t(a,{to:"/tag/greedy.html"},{default:s(()=>[Q]),_:1}),e(),t(a,{to:"/tag/string.html"},{default:s(()=>[U]),_:1})]),n("td",W,[t(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),n("tr",null,[X,n("td",Z,[n("a",$,[e("拆分数组的最小代价"),t(o)])]),nn,n("td",tn,[t(a,{to:"/tag/array.html"},{default:s(()=>[en]),_:1}),e(),t(a,{to:"/tag/hash-table.html"},{default:s(()=>[sn]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[an]),_:1}),e(),on]),n("td",ln,[t(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),n("tr",null,[cn,n("td",pn,[n("a",dn,[e("和带限制的子多重集合的数目"),t(o)])]),rn,n("td",un,[t(a,{to:"/tag/array.html"},{default:s(()=>[_n]),_:1}),e(),t(a,{to:"/tag/hash-table.html"},{default:s(()=>[hn]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[mn]),_:1}),e(),kn]),n("td",fn,[t(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),n("tr",null,[gn,n("td",bn,[n("a",yn,[e("和为目标值的最长子序列的长度"),t(o)])]),xn,n("td",vn,[t(a,{to:"/tag/array.html"},{default:s(()=>[wn]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[En]),_:1})]),n("td",In,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[qn,n("td",Cn,[n("a",Mn,[e("需要添加的硬币的最小数量"),t(o)])]),On,n("td",Ln,[t(a,{to:"/tag/greedy.html"},{default:s(()=>[Nn]),_:1}),e(),t(a,{to:"/tag/array.html"},{default:s(()=>[Vn]),_:1}),e(),t(a,{to:"/tag/sorting.html"},{default:s(()=>[jn]),_:1})]),n("td",Bn,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),n("tr",null,[Hn,n("td",Rn,[n("a",Yn,[e("最贵的无法购买的商品 🔒"),t(o)])]),An,n("td",Kn,[t(a,{to:"/tag/math.html"},{default:s(()=>[Sn]),_:1}),e(),t(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[Tn]),_:1}),e(),t(a,{to:"/tag/number-theory.html"},{default:s(()=>[zn]),_:1})]),n("td",Dn,[t(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const Qn=p(_,[["render",Fn],["__file","0322.html.vue"]]);export{Qn as default};
