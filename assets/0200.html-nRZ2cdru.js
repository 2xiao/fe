import{_ as i,r as c,o as p,c as d,a as t,b as s,d as n,w as e,f as u,e as r}from"./app-PpWft8bW.js";const _={},h={id:"_200-岛屿数量",tabindex:"-1"},f=t("a",{class:"header-anchor",href:"#_200-岛屿数量","aria-hidden":"true"},"#",-1),m={href:"https://2xiao.github.io/leetcode-js/problem/0200.html",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"深度优先搜索",-1),g=t("code",null,"广度优先搜索",-1),b=t("code",null,"并查集",-1),v=t("code",null,"数组",-1),y=t("code",null,"矩阵",-1),q={href:"https://leetcode.cn/problems/number-of-islands",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/number-of-islands",target:"_blank",rel:"noopener noreferrer"},j=t("code",null,"LeetCode",-1),M=r(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p><p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: grid = [</p><p>[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</p><p>[&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</p><p>[&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</p><p>[&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</p><p>]</p><p>Output: 1</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: grid = [</p><p>[&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</p><p>[&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</p><p>[&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</p><p>[&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</p><p>]</p><p>Output: 3</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 300</code></li><li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>遍历整个网格，并在每次找到一个陆地单元时，使用深度优先搜索（DFS）或广度优先搜索（BFS）来遍历所有相连的陆地单元，从而将整个岛屿标记为已访问。</p><ol><li>遍历网格：遍历每一个单元格，如果当前单元格是 <code>&#39;1&#39;</code>（陆地），则找到一个新的岛屿，计数器加一。</li><li>标记已访问：使用 DFS 从当前单元格开始，标记所有连通的陆地单元为 <code>&#39;0&#39;</code>（水），表示它们已被访问。</li><li>继续遍历：继续遍历剩余的单元格，直到整个网格被检查完。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m * n)</code>，其中 <code>m</code> 是网格的行数，<code>n</code> 是网格的列数，每个格子最多会被访问一次。</li><li><strong>空间复杂度</strong>：<code>O(m * n)</code>，最坏情况下，递归的深度可能达到 <code>m * n</code>，因此递归调用栈的空间复杂度为 <code>O(m * n)</code></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">grid</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numIslands</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
		n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

	<span class="token comment">// 从 (i, j) 开始，将与之相邻的陆地都变成海水</span>
	<span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// 超出索引边界</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> m <span class="token operator">||</span> j <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// (i, j) 已经是海水了</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 将 (i, j) 变成海水</span>
		grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
		<span class="token comment">// 淹没上下左右的陆地</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 遍历 grid</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 每发现一个岛屿，岛屿数量加一</span>
				res<span class="token operator">++</span><span class="token punctuation">;</span>
				<span class="token comment">// 然后使用 DFS 将岛屿淹了</span>
				<span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,21),I=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),C=t("td",{style:{"text-align":"center"}},"130",-1),E={style:{"text-align":"left"}},L={href:"https://leetcode.com/problems/surrounded-regions",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},O={style:{"text-align":"left"}},S=t("code",null,"深度优先搜索",-1),V=t("code",null,"广度优先搜索",-1),B=t("code",null,"并查集",-1),D=t("code",null,"2+",-1),F={style:{"text-align":"left"}},R=t("td",{style:{"text-align":"center"}},"286",-1),z={style:{"text-align":"left"}},A={href:"https://leetcode.com/problems/walls-and-gates",target:"_blank",rel:"noopener noreferrer"},G=t("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},T=t("code",null,"广度优先搜索",-1),Y=t("code",null,"数组",-1),J=t("code",null,"矩阵",-1),K={style:{"text-align":"left"}},P=t("td",{style:{"text-align":"center"}},"305",-1),Q={style:{"text-align":"left"}},U={href:"https://leetcode.com/problems/number-of-islands-ii",target:"_blank",rel:"noopener noreferrer"},W=t("td",{style:{"text-align":"center"}},null,-1),X={style:{"text-align":"left"}},Z=t("code",null,"并查集",-1),$=t("code",null,"数组",-1),tt=t("code",null,"哈希表",-1),nt={style:{"text-align":"left"}},st=t("td",{style:{"text-align":"center"}},"323",-1),et={style:{"text-align":"left"}},at={href:"https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph",target:"_blank",rel:"noopener noreferrer"},ot=t("td",{style:{"text-align":"center"}},null,-1),lt={style:{"text-align":"left"}},ct=t("code",null,"深度优先搜索",-1),it=t("code",null,"广度优先搜索",-1),pt=t("code",null,"并查集",-1),dt=t("code",null,"1+",-1),ut={style:{"text-align":"left"}},rt=t("td",{style:{"text-align":"center"}},"419",-1),_t={style:{"text-align":"left"}},ht={href:"https://leetcode.com/problems/battleships-in-a-board",target:"_blank",rel:"noopener noreferrer"},ft=t("td",{style:{"text-align":"center"}},null,-1),mt={style:{"text-align":"left"}},kt=t("code",null,"深度优先搜索",-1),gt=t("code",null,"数组",-1),bt=t("code",null,"矩阵",-1),vt={style:{"text-align":"left"}},yt=t("td",{style:{"text-align":"center"}},"694",-1),qt={style:{"text-align":"left"}},xt={href:"https://leetcode.com/problems/number-of-distinct-islands",target:"_blank",rel:"noopener noreferrer"},wt=t("td",{style:{"text-align":"center"}},null,-1),jt={style:{"text-align":"left"}},Mt=t("code",null,"深度优先搜索",-1),It=t("code",null,"广度优先搜索",-1),Ct=t("code",null,"并查集",-1),Et=t("code",null,"2+",-1),Lt={style:{"text-align":"left"}},Nt=t("td",{style:{"text-align":"center"}},"695",-1),Ot={style:{"text-align":"left"}},St={href:"https://leetcode.com/problems/max-area-of-island",target:"_blank",rel:"noopener noreferrer"},Vt={style:{"text-align":"center"}},Bt={style:{"text-align":"left"}},Dt=t("code",null,"深度优先搜索",-1),Ft=t("code",null,"广度优先搜索",-1),Rt=t("code",null,"并查集",-1),zt=t("code",null,"2+",-1),At={style:{"text-align":"left"}},Gt=t("td",{style:{"text-align":"center"}},"1905",-1),Ht={style:{"text-align":"left"}},Tt={href:"https://leetcode.com/problems/count-sub-islands",target:"_blank",rel:"noopener noreferrer"},Yt=t("td",{style:{"text-align":"center"}},null,-1),Jt={style:{"text-align":"left"}},Kt=t("code",null,"深度优先搜索",-1),Pt=t("code",null,"广度优先搜索",-1),Qt=t("code",null,"并查集",-1),Ut=t("code",null,"2+",-1),Wt={style:{"text-align":"left"}},Xt=t("td",{style:{"text-align":"center"}},"1992",-1),Zt={style:{"text-align":"left"}},$t={href:"https://leetcode.com/problems/find-all-groups-of-farmland",target:"_blank",rel:"noopener noreferrer"},tn=t("td",{style:{"text-align":"center"}},null,-1),nn={style:{"text-align":"left"}},sn=t("code",null,"深度优先搜索",-1),en=t("code",null,"广度优先搜索",-1),an=t("code",null,"数组",-1),on=t("code",null,"1+",-1),ln={style:{"text-align":"left"}},cn=t("td",{style:{"text-align":"center"}},"2316",-1),pn={style:{"text-align":"left"}},dn={href:"https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph",target:"_blank",rel:"noopener noreferrer"},un=t("td",{style:{"text-align":"center"}},null,-1),rn={style:{"text-align":"left"}},_n=t("code",null,"深度优先搜索",-1),hn=t("code",null,"广度优先搜索",-1),fn=t("code",null,"并查集",-1),mn=t("code",null,"1+",-1),kn={style:{"text-align":"left"}},gn=t("td",{style:{"text-align":"center"}},"2658",-1),bn={style:{"text-align":"left"}},vn={href:"https://leetcode.com/problems/maximum-number-of-fish-in-a-grid",target:"_blank",rel:"noopener noreferrer"},yn=t("td",{style:{"text-align":"center"}},null,-1),qn={style:{"text-align":"left"}},xn=t("code",null,"深度优先搜索",-1),wn=t("code",null,"广度优先搜索",-1),jn=t("code",null,"并查集",-1),Mn=t("code",null,"2+",-1),In={style:{"text-align":"left"}};function Cn(En,Ln){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return p(),d("div",null,[t("h1",h,[f,s(),t("a",m,[s("200. 岛屿数量"),n(o)])]),t("p",null,[s("🟠 "),n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[k]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[g]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[b]),_:1}),s(),n(a,{to:"/tag/array.html"},{default:e(()=>[v]),_:1}),s(),n(a,{to:"/tag/matrix.html"},{default:e(()=>[y]),_:1}),s("  🔗 "),t("a",q,[x,n(o)]),s(),t("a",w,[j,n(o)])]),M,u(" prettier-ignore "),t("table",null,[I,t("tbody",null,[t("tr",null,[C,t("td",E,[t("a",L,[s("被围绕的区域"),n(o)])]),t("td",N,[n(a,{to:"/problem/0130.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",O,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[S]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[V]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[B]),_:1}),s(),D]),t("td",F,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[R,t("td",z,[t("a",A,[s("墙与门 🔒"),n(o)])]),G,t("td",H,[n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[T]),_:1}),s(),n(a,{to:"/tag/array.html"},{default:e(()=>[Y]),_:1}),s(),n(a,{to:"/tag/matrix.html"},{default:e(()=>[J]),_:1})]),t("td",K,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[P,t("td",Q,[t("a",U,[s("岛屿数量 II 🔒"),n(o)])]),W,t("td",X,[n(a,{to:"/tag/union-find.html"},{default:e(()=>[Z]),_:1}),s(),n(a,{to:"/tag/array.html"},{default:e(()=>[$]),_:1}),s(),n(a,{to:"/tag/hash-table.html"},{default:e(()=>[tt]),_:1})]),t("td",nt,[n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),t("tr",null,[st,t("td",et,[t("a",at,[s("无向图中连通分量的数目 🔒"),n(o)])]),ot,t("td",lt,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[ct]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[it]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[pt]),_:1}),s(),dt]),t("td",ut,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[rt,t("td",_t,[t("a",ht,[s("棋盘上的战舰"),n(o)])]),ft,t("td",mt,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[kt]),_:1}),s(),n(a,{to:"/tag/array.html"},{default:e(()=>[gt]),_:1}),s(),n(a,{to:"/tag/matrix.html"},{default:e(()=>[bt]),_:1})]),t("td",vt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[yt,t("td",qt,[t("a",xt,[s("不同岛屿的数量 🔒"),n(o)])]),wt,t("td",jt,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Mt]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[It]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[Ct]),_:1}),s(),Et]),t("td",Lt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Nt,t("td",Ot,[t("a",St,[s("岛屿的最大面积"),n(o)])]),t("td",Vt,[n(a,{to:"/problem/0695.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",Bt,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Dt]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Ft]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[Rt]),_:1}),s(),zt]),t("td",At,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Gt,t("td",Ht,[t("a",Tt,[s("统计子岛屿"),n(o)])]),Yt,t("td",Jt,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[Kt]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[Pt]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[Qt]),_:1}),s(),Ut]),t("td",Wt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[Xt,t("td",Zt,[t("a",$t,[s("找到所有的农场组"),n(o)])]),tn,t("td",nn,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[sn]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[en]),_:1}),s(),n(a,{to:"/tag/array.html"},{default:e(()=>[an]),_:1}),s(),on]),t("td",ln,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[cn,t("td",pn,[t("a",dn,[s("统计无向图中无法互相到达点对数"),n(o)])]),un,t("td",rn,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[_n]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[hn]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[fn]),_:1}),s(),mn]),t("td",kn,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[gn,t("td",bn,[t("a",vn,[s("网格图中鱼的最大数目"),n(o)])]),yn,t("td",qn,[n(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[xn]),_:1}),s(),n(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[wn]),_:1}),s(),n(a,{to:"/tag/union-find.html"},{default:e(()=>[jn]),_:1}),s(),Mn]),t("td",In,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const On=i(_,[["render",Cn],["__file","0200.html.vue"]]);export{On as default};
