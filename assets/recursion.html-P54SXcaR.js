import{_ as c,r as d,o as i,c as _,f as a,a as t,d as o,w as n,b as e,e as h}from"./app-JnDxddK3.js";const f={},u=h(`<h1 id="_3-2-递归算法" tabindex="-1"><a class="header-anchor" href="#_3-2-递归算法" aria-hidden="true">#</a> 3.2 递归算法</h1><p>递归是一种应用非常广泛的算法，很多数据结构和算法的编码实现都要用到递归，比如 DFS 深度优先搜索、前中后序二叉树遍历等等。</p><h4 id="递归需要满足的三个条件" tabindex="-1"><a class="header-anchor" href="#递归需要满足的三个条件" aria-hidden="true">#</a> 递归需要满足的三个条件</h4><ol><li>一个问题的解可以分解为几个子问题的解</li><li>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</li><li>存在递归终止条件</li></ol><h4 id="写递归代码的关键" tabindex="-1"><a class="header-anchor" href="#写递归代码的关键" aria-hidden="true">#</a> 写递归代码的关键</h4><ol><li>找到将大问题分解为小问题的规律，并且基于此写出<strong>递推公式</strong>，再推敲<strong>终止条件</strong>，最后将递推公式和终止条件翻译成代码。</li><li>遇到递归，就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 终止条件</span>
	<span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 递推公式</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的递归代码都可以改写为迭代循环的非递归写法。</p><h4 id="弊端" tabindex="-1"><a class="header-anchor" href="#弊端" aria-hidden="true">#</a> 弊端</h4><ol><li>警惕栈溢出：可以声明一个全局变量来控制递归的深度，从而避免栈溢出。</li><li>警惕重复计算：通过某种数据结构来保存已经求解过的值，从而避免重复计算。</li></ol>`,10),p=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),g=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),m=t("td",{style:{"text-align":"center"}},"344",-1),y=t("td",{style:{"text-align":"left"}},"反转字符串",-1),b={style:{"text-align":"center"}},x={style:{"text-align":"left"}},k=t("code",null,"双指针",-1),v=t("code",null,"字符串",-1),E={style:{"text-align":"left"}},w={style:{"text-align":"center"}},I={href:"https://leetcode.cn/problems/reverse-string",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.com/problems/reverse-string",target:"_blank",rel:"noopener noreferrer"},N=t("td",{style:{"text-align":"center"}},"24",-1),z=t("td",{style:{"text-align":"left"}},"两两交换链表中的节点",-1),S={style:{"text-align":"center"}},D={style:{"text-align":"left"}},L=t("code",null,"递归",-1),M=t("code",null,"链表",-1),R={style:{"text-align":"left"}},V={style:{"text-align":"center"}},j={href:"https://leetcode.cn/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"center"}},"118",-1),C=t("td",{style:{"text-align":"left"}},"杨辉三角",-1),O={style:{"text-align":"center"}},q={style:{"text-align":"left"}},P=t("code",null,"数组",-1),H=t("code",null,"动态规划",-1),U={style:{"text-align":"left"}},F={style:{"text-align":"center"}},K={href:"https://leetcode.cn/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},G={href:"https://leetcode.com/problems/pascals-triangle",target:"_blank",rel:"noopener noreferrer"},J=t("td",{style:{"text-align":"center"}},"119",-1),Q=t("td",{style:{"text-align":"left"}},"杨辉三角 II",-1),W=t("td",{style:{"text-align":"center"}},null,-1),X={style:{"text-align":"left"}},Y=t("code",null,"数组",-1),Z=t("code",null,"动态规划",-1),$={style:{"text-align":"left"}},tt={style:{"text-align":"center"}},et={href:"https://leetcode.cn/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/pascals-triangle-ii",target:"_blank",rel:"noopener noreferrer"},nt=t("td",{style:{"text-align":"center"}},"206",-1),lt=t("td",{style:{"text-align":"left"}},"反转链表",-1),st={style:{"text-align":"center"}},rt={style:{"text-align":"left"}},at=t("code",null,"递归",-1),dt=t("code",null,"链表",-1),ct={style:{"text-align":"left"}},it={style:{"text-align":"center"}},_t={href:"https://leetcode.cn/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://leetcode.com/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"},ft=t("td",{style:{"text-align":"center"}},"92",-1),ut=t("td",{style:{"text-align":"left"}},"反转链表 II",-1),pt={style:{"text-align":"center"}},gt={style:{"text-align":"left"}},mt=t("code",null,"链表",-1),yt={style:{"text-align":"left"}},bt={style:{"text-align":"center"}},xt={href:"https://leetcode.cn/problems/reverse-linked-list-ii",target:"_blank",rel:"noopener noreferrer"},kt={href:"https://leetcode.com/problems/reverse-linked-list-ii",target:"_blank",rel:"noopener noreferrer"},vt=t("td",{style:{"text-align":"center"}},"21",-1),Et=t("td",{style:{"text-align":"left"}},"合并两个有序链表",-1),wt={style:{"text-align":"center"}},It={style:{"text-align":"left"}},Tt=t("code",null,"递归",-1),Nt=t("code",null,"链表",-1),zt={style:{"text-align":"left"}},St={style:{"text-align":"center"}},Dt={href:"https://leetcode.cn/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Lt={href:"https://leetcode.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},Mt=t("td",{style:{"text-align":"center"}},"509",-1),Rt=t("td",{style:{"text-align":"left"}},"斐波那契数",-1),Vt={style:{"text-align":"center"}},jt={style:{"text-align":"left"}},At=t("code",null,"递归",-1),Bt=t("code",null,"记忆化搜索",-1),Ct=t("code",null,"数学",-1),Ot=t("code",null,"1+",-1),qt={style:{"text-align":"left"}},Pt={style:{"text-align":"center"}},Ht={href:"https://leetcode.cn/problems/fibonacci-number",target:"_blank",rel:"noopener noreferrer"},Ut={href:"https://leetcode.com/problems/fibonacci-number",target:"_blank",rel:"noopener noreferrer"},Ft=t("td",{style:{"text-align":"center"}},"70",-1),Kt=t("td",{style:{"text-align":"left"}},"爬楼梯",-1),Gt={style:{"text-align":"center"}},Jt={style:{"text-align":"left"}},Qt=t("code",null,"记忆化搜索",-1),Wt=t("code",null,"数学",-1),Xt=t("code",null,"动态规划",-1),Yt={style:{"text-align":"left"}},Zt={style:{"text-align":"center"}},$t={href:"https://leetcode.cn/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},te={href:"https://leetcode.com/problems/climbing-stairs",target:"_blank",rel:"noopener noreferrer"},ee=t("td",{style:{"text-align":"center"}},"104",-1),oe=t("td",{style:{"text-align":"left"}},"二叉树的最大深度",-1),ne={style:{"text-align":"center"}},le={style:{"text-align":"left"}},se=t("code",null,"树",-1),re=t("code",null,"深度优先搜索",-1),ae=t("code",null,"广度优先搜索",-1),de=t("code",null,"1+",-1),ce={style:{"text-align":"left"}},ie={style:{"text-align":"center"}},_e={href:"https://leetcode.cn/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},he={href:"https://leetcode.com/problems/maximum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},fe=t("td",{style:{"text-align":"center"}},"124",-1),ue=t("td",{style:{"text-align":"left"}},"二叉树中的最大路径和",-1),pe={style:{"text-align":"center"}},ge={style:{"text-align":"left"}},me=t("code",null,"树",-1),ye=t("code",null,"深度优先搜索",-1),be=t("code",null,"动态规划",-1),xe=t("code",null,"1+",-1),ke={style:{"text-align":"left"}},ve={style:{"text-align":"center"}},Ee={href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},we={href:"https://leetcode.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},Ie=t("td",{style:{"text-align":"center"}},"226",-1),Te=t("td",{style:{"text-align":"left"}},"翻转二叉树",-1),Ne={style:{"text-align":"center"}},ze={style:{"text-align":"left"}},Se=t("code",null,"树",-1),De=t("code",null,"深度优先搜索",-1),Le=t("code",null,"广度优先搜索",-1),Me=t("code",null,"1+",-1),Re={style:{"text-align":"left"}},Ve={style:{"text-align":"center"}},je={href:"https://leetcode.cn/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://leetcode.com/problems/invert-binary-tree",target:"_blank",rel:"noopener noreferrer"},Be=t("td",{style:{"text-align":"center"}},"50",-1),Ce=t("td",{style:{"text-align":"left"}},"Pow(x, n)",-1),Oe={style:{"text-align":"center"}},qe={style:{"text-align":"left"}},Pe=t("code",null,"递归",-1),He=t("code",null,"数学",-1),Ue={style:{"text-align":"left"}},Fe={style:{"text-align":"center"}},Ke={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},Ge={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},Je=t("td",{style:{"text-align":"center"}},"779",-1),Qe=t("td",{style:{"text-align":"left"}},"第K个语法符号",-1),We=t("td",{style:{"text-align":"center"}},null,-1),Xe={style:{"text-align":"left"}},Ye=t("code",null,"位运算",-1),Ze=t("code",null,"递归",-1),$e=t("code",null,"数学",-1),to={style:{"text-align":"left"}},eo={style:{"text-align":"center"}},oo={href:"https://leetcode.cn/problems/k-th-symbol-in-grammar",target:"_blank",rel:"noopener noreferrer"},no={href:"https://leetcode.com/problems/k-th-symbol-in-grammar",target:"_blank",rel:"noopener noreferrer"},lo=t("td",{style:{"text-align":"center"}},"95",-1),so=t("td",{style:{"text-align":"left"}},"不同的二叉搜索树 II",-1),ro={style:{"text-align":"center"}},ao={style:{"text-align":"left"}},co=t("code",null,"树",-1),io=t("code",null,"二叉搜索树",-1),_o=t("code",null,"动态规划",-1),ho=t("code",null,"2+",-1),fo={style:{"text-align":"left"}},uo={style:{"text-align":"center"}},po={href:"https://leetcode.cn/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},go={href:"https://leetcode.com/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},mo=t("td",{style:{"text-align":"center"}},"剑指 Offer 62",-1),yo=t("td",{style:{"text-align":"left"}},"圆圈中最后剩下的数字",-1),bo={style:{"text-align":"center"}},xo={style:{"text-align":"left"}},ko=t("code",null,"递归",-1),vo=t("code",null,"数学",-1),Eo={style:{"text-align":"left"}},wo={style:{"text-align":"center"}},Io={href:"https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"};function To(No,zo){const l=d("RouterLink"),r=d("font"),s=d("ExternalLinkIcon");return i(),_("div",null,[u,a(" START TABLE "),a(" Please keep comment here to allow auto update "),a(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),p,a(" prettier-ignore "),t("table",null,[g,t("tbody",null,[t("tr",null,[m,y,t("td",b,[o(l,{to:"/problem/0344.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",x,[o(l,{to:"/tag/two-pointers.html"},{default:n(()=>[k]),_:1}),e(),o(l,{to:"/tag/string.html"},{default:n(()=>[v]),_:1})]),t("td",E,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",w,[t("a",I,[e("🀄️"),o(s)]),e(),t("a",T,[e("🔗"),o(s)])])]),t("tr",null,[N,z,t("td",S,[o(l,{to:"/problem/0024.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",D,[o(l,{to:"/tag/recursion.html"},{default:n(()=>[L]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[M]),_:1})]),t("td",R,[o(r,{color:"#ffb800"},{default:n(()=>[e("Medium")]),_:1})]),t("td",V,[t("a",j,[e("🀄️"),o(s)]),e(),t("a",A,[e("🔗"),o(s)])])]),t("tr",null,[B,C,t("td",O,[o(l,{to:"/problem/0118.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",q,[o(l,{to:"/tag/array.html"},{default:n(()=>[P]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[H]),_:1})]),t("td",U,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",F,[t("a",K,[e("🀄️"),o(s)]),e(),t("a",G,[e("🔗"),o(s)])])]),t("tr",null,[J,Q,W,t("td",X,[o(l,{to:"/tag/array.html"},{default:n(()=>[Y]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Z]),_:1})]),t("td",$,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",tt,[t("a",et,[e("🀄️"),o(s)]),e(),t("a",ot,[e("🔗"),o(s)])])]),t("tr",null,[nt,lt,t("td",st,[o(l,{to:"/problem/0206.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",rt,[o(l,{to:"/tag/recursion.html"},{default:n(()=>[at]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[dt]),_:1})]),t("td",ct,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",it,[t("a",_t,[e("🀄️"),o(s)]),e(),t("a",ht,[e("🔗"),o(s)])])]),t("tr",null,[ft,ut,t("td",pt,[o(l,{to:"/problem/0092.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",gt,[o(l,{to:"/tag/linked-list.html"},{default:n(()=>[mt]),_:1})]),t("td",yt,[o(r,{color:"#ffb800"},{default:n(()=>[e("Medium")]),_:1})]),t("td",bt,[t("a",xt,[e("🀄️"),o(s)]),e(),t("a",kt,[e("🔗"),o(s)])])]),t("tr",null,[vt,Et,t("td",wt,[o(l,{to:"/problem/0021.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",It,[o(l,{to:"/tag/recursion.html"},{default:n(()=>[Tt]),_:1}),e(),o(l,{to:"/tag/linked-list.html"},{default:n(()=>[Nt]),_:1})]),t("td",zt,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",St,[t("a",Dt,[e("🀄️"),o(s)]),e(),t("a",Lt,[e("🔗"),o(s)])])]),t("tr",null,[Mt,Rt,t("td",Vt,[o(l,{to:"/problem/0509.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",jt,[o(l,{to:"/tag/recursion.html"},{default:n(()=>[At]),_:1}),e(),o(l,{to:"/tag/memoization.html"},{default:n(()=>[Bt]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[Ct]),_:1}),e(),Ot]),t("td",qt,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",Pt,[t("a",Ht,[e("🀄️"),o(s)]),e(),t("a",Ut,[e("🔗"),o(s)])])]),t("tr",null,[Ft,Kt,t("td",Gt,[o(l,{to:"/problem/0070.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",Jt,[o(l,{to:"/tag/memoization.html"},{default:n(()=>[Qt]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[Wt]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[Xt]),_:1})]),t("td",Yt,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",Zt,[t("a",$t,[e("🀄️"),o(s)]),e(),t("a",te,[e("🔗"),o(s)])])]),t("tr",null,[ee,oe,t("td",ne,[o(l,{to:"/problem/0104.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",le,[o(l,{to:"/tag/tree.html"},{default:n(()=>[se]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[re]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[ae]),_:1}),e(),de]),t("td",ce,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",ie,[t("a",_e,[e("🀄️"),o(s)]),e(),t("a",he,[e("🔗"),o(s)])])]),t("tr",null,[fe,ue,t("td",pe,[o(l,{to:"/problem/0124.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ge,[o(l,{to:"/tag/tree.html"},{default:n(()=>[me]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[ye]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[be]),_:1}),e(),xe]),t("td",ke,[o(r,{color:"#ff334b"},{default:n(()=>[e("Hard")]),_:1})]),t("td",ve,[t("a",Ee,[e("🀄️"),o(s)]),e(),t("a",we,[e("🔗"),o(s)])])]),t("tr",null,[Ie,Te,t("td",Ne,[o(l,{to:"/problem/0226.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ze,[o(l,{to:"/tag/tree.html"},{default:n(()=>[Se]),_:1}),e(),o(l,{to:"/tag/depth-first-search.html"},{default:n(()=>[De]),_:1}),e(),o(l,{to:"/tag/breadth-first-search.html"},{default:n(()=>[Le]),_:1}),e(),Me]),t("td",Re,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",Ve,[t("a",je,[e("🀄️"),o(s)]),e(),t("a",Ae,[e("🔗"),o(s)])])]),t("tr",null,[Be,Ce,t("td",Oe,[o(l,{to:"/problem/0050.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",qe,[o(l,{to:"/tag/recursion.html"},{default:n(()=>[Pe]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[He]),_:1})]),t("td",Ue,[o(r,{color:"#ffb800"},{default:n(()=>[e("Medium")]),_:1})]),t("td",Fe,[t("a",Ke,[e("🀄️"),o(s)]),e(),t("a",Ge,[e("🔗"),o(s)])])]),t("tr",null,[Je,Qe,We,t("td",Xe,[o(l,{to:"/tag/bit-manipulation.html"},{default:n(()=>[Ye]),_:1}),e(),o(l,{to:"/tag/recursion.html"},{default:n(()=>[Ze]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[$e]),_:1})]),t("td",to,[o(r,{color:"#ffb800"},{default:n(()=>[e("Medium")]),_:1})]),t("td",eo,[t("a",oo,[e("🀄️"),o(s)]),e(),t("a",no,[e("🔗"),o(s)])])]),t("tr",null,[lo,so,t("td",ro,[o(l,{to:"/problem/0095.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",ao,[o(l,{to:"/tag/tree.html"},{default:n(()=>[co]),_:1}),e(),o(l,{to:"/tag/binary-search-tree.html"},{default:n(()=>[io]),_:1}),e(),o(l,{to:"/tag/dynamic-programming.html"},{default:n(()=>[_o]),_:1}),e(),ho]),t("td",fo,[o(r,{color:"#ffb800"},{default:n(()=>[e("Medium")]),_:1})]),t("td",uo,[t("a",po,[e("🀄️"),o(s)]),e(),t("a",go,[e("🔗"),o(s)])])]),t("tr",null,[mo,yo,t("td",bo,[o(l,{to:"/offer/jz_offer_62_1.html"},{default:n(()=>[e("[✓]")]),_:1})]),t("td",xo,[o(l,{to:"/tag/recursion.html"},{default:n(()=>[ko]),_:1}),e(),o(l,{to:"/tag/math.html"},{default:n(()=>[vo]),_:1})]),t("td",Eo,[o(r,{color:"#15bd66"},{default:n(()=>[e("Easy")]),_:1})]),t("td",wo,[t("a",Io,[e("🀄️"),o(s)])])])])])])}const Do=c(f,[["render",To],["__file","recursion.html.vue"]]);export{Do as default};
