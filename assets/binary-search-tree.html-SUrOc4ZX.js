import{_ as i,r as _,o as r,c,a as t,b as e,w as l,d as o,f as a}from"./app-ynO5B_DP.js";const h={},u=t("h1",{id:"二叉搜索树",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二叉搜索树","aria-hidden":"true"},"#"),o(" 二叉搜索树")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),b=t("code",null,"矩阵",-1),x=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),M=t("code",null,"单调栈",-1),I=t("code",null,"队列",-1),E=t("code",null,"单调队列",-1),v=t("code",null,"堆（优先队列）",-1),w=t("code",null,"哈希表",-1),O=t("code",null,"字符串",-1),q=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),j=t("code",null,"二叉树",-1),B=t("span",{class:"blue"},"二叉搜索树",-1),N=t("code",null,"最小生成树",-1),C=t("code",null,"图",-1),L=t("code",null,"有序集合",-1),V=t("code",null,"拓扑排序",-1),H=t("code",null,"最短路",-1),K=t("code",null,"强连通分量",-1),T=t("code",null,"欧拉回路",-1),P=t("code",null,"双连通分量",-1),Q=t("code",null,"并查集",-1),R=t("code",null,"字典树",-1),G=t("code",null,"线段树",-1),S=t("code",null,"树状数组",-1),Y=t("code",null,"后缀数组",-1),A=t("p",null,[t("strong",null,"算法")],-1),D=t("code",null,"枚举",-1),F=t("code",null,"递归",-1),J=t("code",null,"分治",-1),U=t("code",null,"回溯",-1),W=t("code",null,"贪心",-1),X=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),ot=t("code",null,"归并排序",-1),lt=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),it=t("code",null,"双指针",-1),rt=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),at=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),ut=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),bt=t("code",null,"数学",-1),xt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Mt=t("code",null,"模拟",-1),It=t("code",null,"组合数学",-1),Et=t("code",null,"随机化",-1),vt=t("code",null,"概率与统计",-1),wt=t("code",null,"水塘抽样",-1),Ot=t("code",null,"拒绝采样",-1),qt=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),jt=t("code",null,"数据流",-1),Bt=t("code",null,"脑筋急转弯",-1),Nt=t("code",null,"交互",-1),Ct=t("code",null,"迭代器",-1),Lt=t("code",null,"多线程",-1),Vt=t("hr",null,null,-1),Ht=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Kt=t("td",{style:{"text-align":"center"}},"95",-1),Tt={style:{"text-align":"left"}},Pt={href:"https://leetcode.com/problems/unique-binary-search-trees-ii",target:"_blank",rel:"noopener noreferrer"},Qt={style:{"text-align":"center"}},Rt={href:"/problem/0095",target:"_blank",rel:"noopener noreferrer"},Gt={style:{"text-align":"left"}},St=t("code",null,"树",-1),Yt=t("code",null,"二叉搜索树",-1),At=t("code",null,"动态规划",-1),Dt=t("code",null,"2+",-1),Ft={style:{"text-align":"left"}},Jt=t("td",{style:{"text-align":"center"}},"96",-1),Ut={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/unique-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},Xt={style:{"text-align":"center"}},Zt={href:"/problem/0096",target:"_blank",rel:"noopener noreferrer"},$t={style:{"text-align":"left"}},te=t("code",null,"树",-1),ee=t("code",null,"二叉搜索树",-1),oe=t("code",null,"数学",-1),le=t("code",null,"2+",-1),ne={style:{"text-align":"left"}},se=t("td",{style:{"text-align":"center"}},"98",-1),de={style:{"text-align":"left"}},_e={href:"https://leetcode.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ie={style:{"text-align":"center"}},re={href:"/problem/0098",target:"_blank",rel:"noopener noreferrer"},ce={style:{"text-align":"left"}},ae=t("code",null,"树",-1),he=t("code",null,"深度优先搜索",-1),ue=t("code",null,"二叉搜索树",-1),fe=t("code",null,"1+",-1),ge={style:{"text-align":"left"}},me=t("td",{style:{"text-align":"center"}},"99",-1),ye={style:{"text-align":"left"}},be={href:"https://leetcode.com/problems/recover-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},xe={style:{"text-align":"center"}},pe={href:"/problem/0099",target:"_blank",rel:"noopener noreferrer"},ke={style:{"text-align":"left"}},Me=t("code",null,"树",-1),Ie=t("code",null,"深度优先搜索",-1),Ee=t("code",null,"二叉搜索树",-1),ve=t("code",null,"1+",-1),we={style:{"text-align":"left"}},Oe=t("td",{style:{"text-align":"center"}},"108",-1),qe={style:{"text-align":"left"}},ze={href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},je={style:{"text-align":"center"}},Be={href:"/problem/0108",target:"_blank",rel:"noopener noreferrer"},Ne={style:{"text-align":"left"}},Ce=t("code",null,"树",-1),Le=t("code",null,"二叉搜索树",-1),Ve=t("code",null,"数组",-1),He=t("code",null,"2+",-1),Ke={style:{"text-align":"left"}},Te=t("td",{style:{"text-align":"center"}},"109",-1),Pe={style:{"text-align":"left"}},Qe={href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Re={style:{"text-align":"center"}},Ge={href:"/problem/0109",target:"_blank",rel:"noopener noreferrer"},Se={style:{"text-align":"left"}},Ye=t("code",null,"树",-1),Ae=t("code",null,"二叉搜索树",-1),De=t("code",null,"链表",-1),Fe=t("code",null,"2+",-1),Je={style:{"text-align":"left"}},Ue=t("td",{style:{"text-align":"center"}},"173",-1),We={style:{"text-align":"left"}},Xe={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},Ze={style:{"text-align":"center"}},$e={href:"/problem/0173",target:"_blank",rel:"noopener noreferrer"},to={style:{"text-align":"left"}},eo=t("code",null,"栈",-1),oo=t("code",null,"树",-1),lo=t("code",null,"设计",-1),no=t("code",null,"3+",-1),so={style:{"text-align":"left"}},_o=t("td",{style:{"text-align":"center"}},"230",-1),io={style:{"text-align":"left"}},ro={href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},co={style:{"text-align":"center"}},ao={href:"/problem/0230",target:"_blank",rel:"noopener noreferrer"},ho={style:{"text-align":"left"}},uo=t("code",null,"树",-1),fo=t("code",null,"深度优先搜索",-1),go=t("code",null,"二叉搜索树",-1),mo=t("code",null,"1+",-1),yo={style:{"text-align":"left"}},bo=t("td",{style:{"text-align":"center"}},"235",-1),xo={style:{"text-align":"left"}},po={href:"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ko={style:{"text-align":"center"}},Mo={href:"/problem/0235",target:"_blank",rel:"noopener noreferrer"},Io={style:{"text-align":"left"}},Eo=t("code",null,"树",-1),vo=t("code",null,"深度优先搜索",-1),wo=t("code",null,"二叉搜索树",-1),Oo=t("code",null,"1+",-1),qo={style:{"text-align":"left"}},zo=t("td",{style:{"text-align":"center"}},"255",-1),jo={style:{"text-align":"left"}},Bo={href:"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},No=t("td",{style:{"text-align":"center"}},null,-1),Co={style:{"text-align":"left"}},Lo=t("code",null,"栈",-1),Vo=t("code",null,"树",-1),Ho=t("code",null,"二叉搜索树",-1),Ko=t("code",null,"4+",-1),To={style:{"text-align":"left"}},Po=t("td",{style:{"text-align":"center"}},"270",-1),Qo={style:{"text-align":"left"}},Ro={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},Go=t("td",{style:{"text-align":"center"}},null,-1),So={style:{"text-align":"left"}},Yo=t("code",null,"树",-1),Ao=t("code",null,"深度优先搜索",-1),Do=t("code",null,"二叉搜索树",-1),Fo=t("code",null,"2+",-1),Jo={style:{"text-align":"left"}},Uo=t("td",{style:{"text-align":"center"}},"272",-1),Wo={style:{"text-align":"left"}},Xo={href:"https://leetcode.com/problems/closest-binary-search-tree-value-ii",target:"_blank",rel:"noopener noreferrer"},Zo=t("td",{style:{"text-align":"center"}},null,-1),$o={style:{"text-align":"left"}},tl=t("code",null,"栈",-1),el=t("code",null,"树",-1),ol=t("code",null,"深度优先搜索",-1),ll=t("code",null,"4+",-1),nl={style:{"text-align":"left"}},sl=t("td",{style:{"text-align":"center"}},"285",-1),dl={style:{"text-align":"left"}},_l={href:"https://leetcode.com/problems/inorder-successor-in-bst",target:"_blank",rel:"noopener noreferrer"},il=t("td",{style:{"text-align":"center"}},null,-1),rl={style:{"text-align":"left"}},cl=t("code",null,"树",-1),al=t("code",null,"深度优先搜索",-1),hl=t("code",null,"二叉搜索树",-1),ul=t("code",null,"1+",-1),fl={style:{"text-align":"left"}},gl=t("td",{style:{"text-align":"center"}},"333",-1),ml={style:{"text-align":"left"}},yl={href:"https://leetcode.com/problems/largest-bst-subtree",target:"_blank",rel:"noopener noreferrer"},bl=t("td",{style:{"text-align":"center"}},null,-1),xl={style:{"text-align":"left"}},pl=t("code",null,"树",-1),kl=t("code",null,"深度优先搜索",-1),Ml=t("code",null,"二叉搜索树",-1),Il=t("code",null,"2+",-1),El={style:{"text-align":"left"}},vl=t("td",{style:{"text-align":"center"}},"426",-1),wl={style:{"text-align":"left"}},Ol={href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},ql={style:{"text-align":"center"}},zl={href:"/problem/0426",target:"_blank",rel:"noopener noreferrer"},jl={style:{"text-align":"left"}},Bl=t("code",null,"栈",-1),Nl=t("code",null,"树",-1),Cl=t("code",null,"深度优先搜索",-1),Ll=t("code",null,"4+",-1),Vl={style:{"text-align":"left"}},Hl=t("td",{style:{"text-align":"center"}},"449",-1),Kl={style:{"text-align":"left"}},Tl={href:"https://leetcode.com/problems/serialize-and-deserialize-bst",target:"_blank",rel:"noopener noreferrer"},Pl=t("td",{style:{"text-align":"center"}},null,-1),Ql={style:{"text-align":"left"}},Rl=t("code",null,"树",-1),Gl=t("code",null,"深度优先搜索",-1),Sl=t("code",null,"广度优先搜索",-1),Yl=t("code",null,"4+",-1),Al={style:{"text-align":"left"}},Dl=t("td",{style:{"text-align":"center"}},"450",-1),Fl={style:{"text-align":"left"}},Jl={href:"https://leetcode.com/problems/delete-node-in-a-bst",target:"_blank",rel:"noopener noreferrer"},Ul={style:{"text-align":"center"}},Wl={href:"/problem/0450",target:"_blank",rel:"noopener noreferrer"},Xl={style:{"text-align":"left"}},Zl=t("code",null,"树",-1),$l=t("code",null,"二叉搜索树",-1),tn=t("code",null,"二叉树",-1),en={style:{"text-align":"left"}},on=t("td",{style:{"text-align":"center"}},"501",-1),ln={style:{"text-align":"left"}},nn={href:"https://leetcode.com/problems/find-mode-in-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},sn=t("td",{style:{"text-align":"center"}},null,-1),dn={style:{"text-align":"left"}},_n=t("code",null,"树",-1),rn=t("code",null,"深度优先搜索",-1),cn=t("code",null,"二叉搜索树",-1),an=t("code",null,"1+",-1),hn={style:{"text-align":"left"}},un=t("td",{style:{"text-align":"center"}},"510",-1),fn={style:{"text-align":"left"}},gn={href:"https://leetcode.com/problems/inorder-successor-in-bst-ii",target:"_blank",rel:"noopener noreferrer"},mn=t("td",{style:{"text-align":"center"}},null,-1),yn={style:{"text-align":"left"}},bn=t("code",null,"树",-1),xn=t("code",null,"二叉搜索树",-1),pn=t("code",null,"二叉树",-1),kn={style:{"text-align":"left"}},Mn=t("td",{style:{"text-align":"center"}},"530",-1),In={style:{"text-align":"left"}},En={href:"https://leetcode.com/problems/minimum-absolute-difference-in-bst",target:"_blank",rel:"noopener noreferrer"},vn={style:{"text-align":"center"}},wn={href:"/problem/0530",target:"_blank",rel:"noopener noreferrer"},On={style:{"text-align":"left"}},qn=t("code",null,"树",-1),zn=t("code",null,"深度优先搜索",-1),jn=t("code",null,"广度优先搜索",-1),Bn=t("code",null,"2+",-1),Nn={style:{"text-align":"left"}},Cn=t("td",{style:{"text-align":"center"}},"538",-1),Ln={style:{"text-align":"left"}},Vn={href:"https://leetcode.com/problems/convert-bst-to-greater-tree",target:"_blank",rel:"noopener noreferrer"},Hn=t("td",{style:{"text-align":"center"}},null,-1),Kn={style:{"text-align":"left"}},Tn=t("code",null,"树",-1),Pn=t("code",null,"深度优先搜索",-1),Qn=t("code",null,"二叉搜索树",-1),Rn=t("code",null,"1+",-1),Gn={style:{"text-align":"left"}},Sn=t("td",{style:{"text-align":"center"}},"653",-1),Yn={style:{"text-align":"left"}},An={href:"https://leetcode.com/problems/two-sum-iv-input-is-a-bst",target:"_blank",rel:"noopener noreferrer"},Dn=t("td",{style:{"text-align":"center"}},null,-1),Fn={style:{"text-align":"left"}},Jn=t("code",null,"树",-1),Un=t("code",null,"深度优先搜索",-1),Wn=t("code",null,"广度优先搜索",-1),Xn=t("code",null,"4+",-1),Zn={style:{"text-align":"left"}},$n=t("td",{style:{"text-align":"center"}},"669",-1),ts={style:{"text-align":"left"}},es={href:"https://leetcode.com/problems/trim-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},os=t("td",{style:{"text-align":"center"}},null,-1),ls={style:{"text-align":"left"}},ns=t("code",null,"树",-1),ss=t("code",null,"深度优先搜索",-1),ds=t("code",null,"二叉搜索树",-1),_s=t("code",null,"1+",-1),is={style:{"text-align":"left"}},rs=t("td",{style:{"text-align":"center"}},"700",-1),cs={style:{"text-align":"left"}},as={href:"https://leetcode.com/problems/search-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},hs={style:{"text-align":"center"}},us={href:"/problem/0700",target:"_blank",rel:"noopener noreferrer"},fs={style:{"text-align":"left"}},gs=t("code",null,"树",-1),ms=t("code",null,"二叉搜索树",-1),ys=t("code",null,"二叉树",-1),bs={style:{"text-align":"left"}},xs=t("td",{style:{"text-align":"center"}},"701",-1),ps={style:{"text-align":"left"}},ks={href:"https://leetcode.com/problems/insert-into-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},Ms={style:{"text-align":"center"}},Is={href:"/problem/0701",target:"_blank",rel:"noopener noreferrer"},Es={style:{"text-align":"left"}},vs=t("code",null,"树",-1),ws=t("code",null,"二叉搜索树",-1),Os=t("code",null,"二叉树",-1),qs={style:{"text-align":"left"}},zs=t("td",{style:{"text-align":"center"}},"703",-1),js={style:{"text-align":"left"}},Bs={href:"https://leetcode.com/problems/kth-largest-element-in-a-stream",target:"_blank",rel:"noopener noreferrer"},Ns={style:{"text-align":"center"}},Cs={href:"/problem/0703",target:"_blank",rel:"noopener noreferrer"},Ls={style:{"text-align":"left"}},Vs=t("code",null,"树",-1),Hs=t("code",null,"设计",-1),Ks=t("code",null,"二叉搜索树",-1),Ts=t("code",null,"3+",-1),Ps={style:{"text-align":"left"}},Qs=t("td",{style:{"text-align":"center"}},"776",-1),Rs={style:{"text-align":"left"}},Gs={href:"https://leetcode.com/problems/split-bst",target:"_blank",rel:"noopener noreferrer"},Ss=t("td",{style:{"text-align":"center"}},null,-1),Ys={style:{"text-align":"left"}},As=t("code",null,"树",-1),Ds=t("code",null,"二叉搜索树",-1),Fs=t("code",null,"递归",-1),Js=t("code",null,"1+",-1),Us={style:{"text-align":"left"}},Ws=t("td",{style:{"text-align":"center"}},"783",-1),Xs={style:{"text-align":"left"}},Zs={href:"https://leetcode.com/problems/minimum-distance-between-bst-nodes",target:"_blank",rel:"noopener noreferrer"},$s={style:{"text-align":"center"}},td={href:"/problem/0783",target:"_blank",rel:"noopener noreferrer"},ed={style:{"text-align":"left"}},od=t("code",null,"树",-1),ld=t("code",null,"深度优先搜索",-1),nd=t("code",null,"广度优先搜索",-1),sd=t("code",null,"2+",-1),dd={style:{"text-align":"left"}},_d=t("td",{style:{"text-align":"center"}},"897",-1),id={style:{"text-align":"left"}},rd={href:"https://leetcode.com/problems/increasing-order-search-tree",target:"_blank",rel:"noopener noreferrer"},cd=t("td",{style:{"text-align":"center"}},null,-1),ad={style:{"text-align":"left"}},hd=t("code",null,"栈",-1),ud=t("code",null,"树",-1),fd=t("code",null,"深度优先搜索",-1),gd=t("code",null,"2+",-1),md={style:{"text-align":"left"}},yd=t("td",{style:{"text-align":"center"}},"938",-1),bd={style:{"text-align":"left"}},xd={href:"https://leetcode.com/problems/range-sum-of-bst",target:"_blank",rel:"noopener noreferrer"},pd=t("td",{style:{"text-align":"center"}},null,-1),kd={style:{"text-align":"left"}},Md=t("code",null,"树",-1),Id=t("code",null,"深度优先搜索",-1),Ed=t("code",null,"二叉搜索树",-1),vd=t("code",null,"1+",-1),wd={style:{"text-align":"left"}},Od=t("td",{style:{"text-align":"center"}},"1008",-1),qd={style:{"text-align":"left"}},zd={href:"https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},jd={style:{"text-align":"center"}},Bd={href:"/problem/1008",target:"_blank",rel:"noopener noreferrer"},Nd={style:{"text-align":"left"}},Cd=t("code",null,"栈",-1),Ld=t("code",null,"树",-1),Vd=t("code",null,"二叉搜索树",-1),Hd=t("code",null,"3+",-1),Kd={style:{"text-align":"left"}},Td=t("td",{style:{"text-align":"center"}},"1038",-1),Pd={style:{"text-align":"left"}},Qd={href:"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree",target:"_blank",rel:"noopener noreferrer"},Rd=t("td",{style:{"text-align":"center"}},null,-1),Gd={style:{"text-align":"left"}},Sd=t("code",null,"树",-1),Yd=t("code",null,"深度优先搜索",-1),Ad=t("code",null,"二叉搜索树",-1),Dd=t("code",null,"1+",-1),Fd={style:{"text-align":"left"}},Jd=t("td",{style:{"text-align":"center"}},"1214",-1),Ud={style:{"text-align":"left"}},Wd={href:"https://leetcode.com/problems/two-sum-bsts",target:"_blank",rel:"noopener noreferrer"},Xd=t("td",{style:{"text-align":"center"}},null,-1),Zd={style:{"text-align":"left"}},$d=t("code",null,"栈",-1),t_=t("code",null,"树",-1),e_=t("code",null,"深度优先搜索",-1),o_=t("code",null,"4+",-1),l_={style:{"text-align":"left"}},n_=t("td",{style:{"text-align":"center"}},"1305",-1),s_={style:{"text-align":"left"}},d_={href:"https://leetcode.com/problems/all-elements-in-two-binary-search-trees",target:"_blank",rel:"noopener noreferrer"},__=t("td",{style:{"text-align":"center"}},null,-1),i_={style:{"text-align":"left"}},r_=t("code",null,"树",-1),c_=t("code",null,"深度优先搜索",-1),a_=t("code",null,"二叉搜索树",-1),h_=t("code",null,"2+",-1),u_={style:{"text-align":"left"}},f_=t("td",{style:{"text-align":"center"}},"1373",-1),g_={style:{"text-align":"left"}},m_={href:"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},y_=t("td",{style:{"text-align":"center"}},null,-1),b_={style:{"text-align":"left"}},x_=t("code",null,"树",-1),p_=t("code",null,"深度优先搜索",-1),k_=t("code",null,"二叉搜索树",-1),M_=t("code",null,"2+",-1),I_={style:{"text-align":"left"}},E_=t("td",{style:{"text-align":"center"}},"1382",-1),v_={style:{"text-align":"left"}},w_={href:"https://leetcode.com/problems/balance-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},O_=t("td",{style:{"text-align":"center"}},null,-1),q_={style:{"text-align":"left"}},z_=t("code",null,"贪心",-1),j_=t("code",null,"树",-1),B_=t("code",null,"深度优先搜索",-1),N_=t("code",null,"3+",-1),C_={style:{"text-align":"left"}},L_=t("td",{style:{"text-align":"center"}},"1569",-1),V_={style:{"text-align":"left"}},H_={href:"https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst",target:"_blank",rel:"noopener noreferrer"},K_=t("td",{style:{"text-align":"center"}},null,-1),T_={style:{"text-align":"left"}},P_=t("code",null,"树",-1),Q_=t("code",null,"并查集",-1),R_=t("code",null,"二叉搜索树",-1),G_=t("code",null,"7+",-1),S_={style:{"text-align":"left"}},Y_=t("td",{style:{"text-align":"center"}},"1586",-1),A_={style:{"text-align":"left"}},D_={href:"https://leetcode.com/problems/binary-search-tree-iterator-ii",target:"_blank",rel:"noopener noreferrer"},F_=t("td",{style:{"text-align":"center"}},null,-1),J_={style:{"text-align":"left"}},U_=t("code",null,"栈",-1),W_=t("code",null,"树",-1),X_=t("code",null,"设计",-1),Z_=t("code",null,"3+",-1),$_={style:{"text-align":"left"}},ti=t("td",{style:{"text-align":"center"}},"1902",-1),ei={style:{"text-align":"left"}},oi={href:"https://leetcode.com/problems/depth-of-bst-given-insertion-order",target:"_blank",rel:"noopener noreferrer"},li=t("td",{style:{"text-align":"center"}},null,-1),ni={style:{"text-align":"left"}},si=t("code",null,"树",-1),di=t("code",null,"二叉搜索树",-1),_i=t("code",null,"数组",-1),ii=t("code",null,"2+",-1),ri={style:{"text-align":"left"}},ci=t("td",{style:{"text-align":"center"}},"2476",-1),ai={style:{"text-align":"left"}},hi={href:"https://leetcode.com/problems/closest-nodes-queries-in-a-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},ui=t("td",{style:{"text-align":"center"}},null,-1),fi={style:{"text-align":"left"}},gi=t("code",null,"树",-1),mi=t("code",null,"深度优先搜索",-1),yi=t("code",null,"二叉搜索树",-1),bi=t("code",null,"3+",-1),xi={style:{"text-align":"left"}},pi=t("td",{style:{"text-align":"center"}},"LCP 52",-1),ki={style:{"text-align":"left"}},Mi={href:"https://leetcode.cn/problems/QO5KpG",target:"_blank",rel:"noopener noreferrer"},Ii=t("td",{style:{"text-align":"center"}},null,-1),Ei={style:{"text-align":"left"}},vi=t("code",null,"树",-1),wi=t("code",null,"线段树",-1),Oi=t("code",null,"二叉搜索树",-1),qi=t("code",null,"4+",-1),zi={style:{"text-align":"left"}},ji=t("td",{style:{"text-align":"center"}},"剑指 Offer 33",-1),Bi={style:{"text-align":"left"}},Ni={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"},Ci={style:{"text-align":"center"}},Li={href:"/problem/jz_offer_33_1",target:"_blank",rel:"noopener noreferrer"},Vi={style:{"text-align":"left"}},Hi=t("code",null,"栈",-1),Ki=t("code",null,"树",-1),Ti=t("code",null,"二叉搜索树",-1),Pi=t("code",null,"4+",-1),Qi={style:{"text-align":"left"}},Ri=t("td",{style:{"text-align":"center"}},"剑指 Offer 36",-1),Gi={style:{"text-align":"left"}},Si={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof",target:"_blank",rel:"noopener noreferrer"},Yi={style:{"text-align":"center"}},Ai={href:"/problem/jz_offer_36_1",target:"_blank",rel:"noopener noreferrer"},Di={style:{"text-align":"left"}},Fi=t("code",null,"栈",-1),Ji=t("code",null,"树",-1),Ui=t("code",null,"深度优先搜索",-1),Wi=t("code",null,"4+",-1),Xi={style:{"text-align":"left"}},Zi=t("td",{style:{"text-align":"center"}},"剑指 Offer 54",-1),$i={style:{"text-align":"left"}},tr={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof",target:"_blank",rel:"noopener noreferrer"},er={style:{"text-align":"center"}},or={href:"/problem/jz_offer_54_1",target:"_blank",rel:"noopener noreferrer"},lr={style:{"text-align":"left"}},nr=t("code",null,"树",-1),sr=t("code",null,"深度优先搜索",-1),dr=t("code",null,"二叉搜索树",-1),_r=t("code",null,"1+",-1),ir={style:{"text-align":"left"}},rr=t("td",{style:{"text-align":"center"}},"剑指 Offer 68 - I",-1),cr={style:{"text-align":"left"}},ar={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof",target:"_blank",rel:"noopener noreferrer"},hr=t("td",{style:{"text-align":"center"}},null,-1),ur={style:{"text-align":"left"}},fr=t("code",null,"树",-1),gr=t("code",null,"深度优先搜索",-1),mr=t("code",null,"二叉搜索树",-1),yr=t("code",null,"1+",-1),br={style:{"text-align":"left"}},xr=t("td",{style:{"text-align":"center"}},"剑指 Offer II 52",-1),pr={style:{"text-align":"left"}},kr={href:"https://leetcode.cn/problems/NYBBNL",target:"_blank",rel:"noopener noreferrer"},Mr=t("td",{style:{"text-align":"center"}},null,-1),Ir={style:{"text-align":"left"}},Er=t("code",null,"栈",-1),vr=t("code",null,"树",-1),wr=t("code",null,"深度优先搜索",-1),Or=t("code",null,"2+",-1),qr={style:{"text-align":"left"}},zr=t("td",{style:{"text-align":"center"}},"剑指 Offer II 53",-1),jr={style:{"text-align":"left"}},Br={href:"https://leetcode.cn/problems/P5rCT8",target:"_blank",rel:"noopener noreferrer"},Nr=t("td",{style:{"text-align":"center"}},null,-1),Cr={style:{"text-align":"left"}},Lr=t("code",null,"树",-1),Vr=t("code",null,"深度优先搜索",-1),Hr=t("code",null,"二叉搜索树",-1),Kr=t("code",null,"1+",-1),Tr={style:{"text-align":"left"}},Pr=t("td",{style:{"text-align":"center"}},"剑指 Offer II 54",-1),Qr={style:{"text-align":"left"}},Rr={href:"https://leetcode.cn/problems/w6cpku",target:"_blank",rel:"noopener noreferrer"},Gr=t("td",{style:{"text-align":"center"}},null,-1),Sr={style:{"text-align":"left"}},Yr=t("code",null,"树",-1),Ar=t("code",null,"深度优先搜索",-1),Dr=t("code",null,"二叉搜索树",-1),Fr=t("code",null,"1+",-1),Jr={style:{"text-align":"left"}},Ur=t("td",{style:{"text-align":"center"}},"剑指 Offer II 55",-1),Wr={style:{"text-align":"left"}},Xr={href:"https://leetcode.cn/problems/kTOapQ",target:"_blank",rel:"noopener noreferrer"},Zr=t("td",{style:{"text-align":"center"}},null,-1),$r={style:{"text-align":"left"}},tc=t("code",null,"栈",-1),ec=t("code",null,"树",-1),oc=t("code",null,"设计",-1),lc=t("code",null,"3+",-1),nc={style:{"text-align":"left"}},sc=t("td",{style:{"text-align":"center"}},"剑指 Offer II 59",-1),dc={style:{"text-align":"left"}},_c={href:"https://leetcode.cn/problems/jBjn9C",target:"_blank",rel:"noopener noreferrer"},ic=t("td",{style:{"text-align":"center"}},null,-1),rc={style:{"text-align":"left"}},cc=t("code",null,"树",-1),ac=t("code",null,"设计",-1),hc=t("code",null,"二叉搜索树",-1),uc=t("code",null,"3+",-1),fc={style:{"text-align":"left"}},gc=t("td",{style:{"text-align":"center"}},"面试题 04.02",-1),mc={style:{"text-align":"left"}},yc={href:"https://leetcode.cn/problems/minimum-height-tree-lcci",target:"_blank",rel:"noopener noreferrer"},bc=t("td",{style:{"text-align":"center"}},null,-1),xc={style:{"text-align":"left"}},pc=t("code",null,"树",-1),kc=t("code",null,"二叉搜索树",-1),Mc=t("code",null,"数组",-1),Ic=t("code",null,"2+",-1),Ec={style:{"text-align":"left"}},vc=t("td",{style:{"text-align":"center"}},"面试题 04.05",-1),wc={style:{"text-align":"left"}},Oc={href:"https://leetcode.cn/problems/legal-binary-search-tree-lcci",target:"_blank",rel:"noopener noreferrer"},qc=t("td",{style:{"text-align":"center"}},null,-1),zc={style:{"text-align":"left"}},jc=t("code",null,"树",-1),Bc=t("code",null,"深度优先搜索",-1),Nc=t("code",null,"二叉搜索树",-1),Cc=t("code",null,"1+",-1),Lc={style:{"text-align":"left"}},Vc=t("td",{style:{"text-align":"center"}},"面试题 04.06",-1),Hc={style:{"text-align":"left"}},Kc={href:"https://leetcode.cn/problems/successor-lcci",target:"_blank",rel:"noopener noreferrer"},Tc=t("td",{style:{"text-align":"center"}},null,-1),Pc={style:{"text-align":"left"}},Qc=t("code",null,"树",-1),Rc=t("code",null,"深度优先搜索",-1),Gc=t("code",null,"二叉搜索树",-1),Sc=t("code",null,"1+",-1),Yc={style:{"text-align":"left"}},Ac=t("td",{style:{"text-align":"center"}},"面试题 04.09",-1),Dc={style:{"text-align":"left"}},Fc={href:"https://leetcode.cn/problems/bst-sequences-lcci",target:"_blank",rel:"noopener noreferrer"},Jc=t("td",{style:{"text-align":"center"}},null,-1),Uc={style:{"text-align":"left"}},Wc=t("code",null,"树",-1),Xc=t("code",null,"二叉搜索树",-1),Zc=t("code",null,"回溯",-1),$c=t("code",null,"1+",-1),ta={style:{"text-align":"left"}},ea=t("td",{style:{"text-align":"center"}},"面试题 17.12",-1),oa={style:{"text-align":"left"}},la={href:"https://leetcode.cn/problems/binode-lcci",target:"_blank",rel:"noopener noreferrer"},na=t("td",{style:{"text-align":"center"}},null,-1),sa={style:{"text-align":"left"}},da=t("code",null,"栈",-1),_a=t("code",null,"树",-1),ia=t("code",null,"深度优先搜索",-1),ra=t("code",null,"3+",-1),ca={style:{"text-align":"left"}};function aa(ha,ua){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return r(),c("div",null,[u,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/outline/tag/matrix.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/outline/tag/queue.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[j]),_:1}),o(),B,o(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/outline/tag/ordered-set.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/outline/tag/topological-sort.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/outline/tag/shortest-path.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:l(()=>[K]),_:1}),o(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:l(()=>[P]),_:1}),o(),e(n,{to:"/outline/tag/union-find.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[G]),_:1}),o(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/outline/tag/suffix-array.html"},{default:l(()=>[Y]),_:1})]),A,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:l(()=>[D]),_:1}),o(),e(n,{to:"/outline/tag/recursion.html"},{default:l(()=>[F]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[J]),_:1}),o(),e(n,{to:"/outline/tag/backtracking.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/outline/tag/greedy.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/outline/tag/sorting.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/outline/tag/counting-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/outline/tag/radix-sort.html"},{default:l(()=>[et]),_:1}),o(),e(n,{to:"/outline/tag/merge-sort.html"},{default:l(()=>[ot]),_:1}),o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[rt]),_:1}),o(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/outline/tag/counting.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/outline/tag/sliding-window.html"},{default:l(()=>[ht]),_:1}),o(),e(n,{to:"/outline/tag/bitmask.html"},{default:l(()=>[ut]),_:1}),o(),e(n,{to:"/outline/tag/hash-function.html"},{default:l(()=>[ft]),_:1}),o(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:l(()=>[gt]),_:1}),o(),e(n,{to:"/outline/tag/line-sweep.html"},{default:l(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/outline/tag/number-theory.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/outline/tag/geometry.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/outline/tag/game-theory.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/outline/tag/simulation.html"},{default:l(()=>[Mt]),_:1}),o(),e(n,{to:"/outline/tag/combinatorics.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/outline/tag/randomized.html"},{default:l(()=>[Et]),_:1}),o(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:l(()=>[Ot]),_:1}),o(),e(n,{to:"/outline/tag/database.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/outline/tag/data-stream.html"},{default:l(()=>[jt]),_:1}),o(),e(n,{to:"/outline/tag/brainteaser.html"},{default:l(()=>[Bt]),_:1}),o(),e(n,{to:"/outline/tag/interactive.html"},{default:l(()=>[Nt]),_:1}),o(),e(n,{to:"/outline/tag/iterator.html"},{default:l(()=>[Ct]),_:1}),o(),e(n,{to:"/outline/tag/concurrency.html"},{default:l(()=>[Lt]),_:1})])]),Vt,a(" prettier-ignore "),t("table",null,[Ht,t("tbody",null,[t("tr",null,[Kt,t("td",Tt,[t("a",Pt,[o("不同的二叉搜索树 II"),e(s)])]),t("td",Qt,[t("a",Rt,[o("[✓]"),e(s)])]),t("td",Gt,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[St]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Yt]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[At]),_:1}),o(),Dt]),t("td",Ft,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Jt,t("td",Ut,[t("a",Wt,[o("不同的二叉搜索树"),e(s)])]),t("td",Xt,[t("a",Zt,[o("[✓]"),e(s)])]),t("td",$t,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[te]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[ee]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[oe]),_:1}),o(),le]),t("td",ne,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[se,t("td",de,[t("a",_e,[o("验证二叉搜索树"),e(s)])]),t("td",ie,[t("a",re,[o("[✓]"),e(s)])]),t("td",ce,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[ae]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[he]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[ue]),_:1}),o(),fe]),t("td",ge,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[me,t("td",ye,[t("a",be,[o("恢复二叉搜索树"),e(s)])]),t("td",xe,[t("a",pe,[o("[✓]"),e(s)])]),t("td",ke,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Me]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Ie]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ee]),_:1}),o(),ve]),t("td",we,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Oe,t("td",qe,[t("a",ze,[o("将有序数组转换为二叉搜索树"),e(s)])]),t("td",je,[t("a",Be,[o("[✓]"),e(s)])]),t("td",Ne,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ce]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Le]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ve]),_:1}),o(),He]),t("td",Ke,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Te,t("td",Pe,[t("a",Qe,[o("有序链表转换二叉搜索树"),e(s)])]),t("td",Re,[t("a",Ge,[o("[✓]"),e(s)])]),t("td",Se,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ye]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ae]),_:1}),o(),e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[De]),_:1}),o(),Fe]),t("td",Je,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ue,t("td",We,[t("a",Xe,[o("二叉搜索树迭代器"),e(s)])]),t("td",Ze,[t("a",$e,[o("[✓]"),e(s)])]),t("td",to,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[eo]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[oo]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[lo]),_:1}),o(),no]),t("td",so,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[_o,t("td",io,[t("a",ro,[o("二叉搜索树中第 K 小的元素"),e(s)])]),t("td",co,[t("a",ao,[o("[✓]"),e(s)])]),t("td",ho,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[uo]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[fo]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[go]),_:1}),o(),mo]),t("td",yo,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[bo,t("td",xo,[t("a",po,[o("二叉搜索树的最近公共祖先"),e(s)])]),t("td",ko,[t("a",Mo,[o("[✓]"),e(s)])]),t("td",Io,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Eo]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[vo]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[wo]),_:1}),o(),Oo]),t("td",qo,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[zo,t("td",jo,[t("a",Bo,[o("验证二叉搜索树的前序遍历序列"),e(s)])]),No,t("td",Co,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[Lo]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Vo]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ho]),_:1}),o(),Ko]),t("td",To,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Po,t("td",Qo,[t("a",Ro,[o("最接近的二叉搜索树值"),e(s)])]),Go,t("td",So,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Yo]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Ao]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Do]),_:1}),o(),Fo]),t("td",Jo,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Uo,t("td",Wo,[t("a",Xo,[o("最接近的二叉搜索树值 II"),e(s)])]),Zo,t("td",$o,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[tl]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[el]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[ol]),_:1}),o(),ll]),t("td",nl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[sl,t("td",dl,[t("a",_l,[o("二叉搜索树中的中序后继"),e(s)])]),il,t("td",rl,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[cl]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[al]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[hl]),_:1}),o(),ul]),t("td",fl,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[gl,t("td",ml,[t("a",yl,[o("最大二叉搜索子树"),e(s)])]),bl,t("td",xl,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[pl]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[kl]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ml]),_:1}),o(),Il]),t("td",El,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[vl,t("td",wl,[t("a",Ol,[o("将二叉搜索树转化为排序的双向链表"),e(s)])]),t("td",ql,[t("a",zl,[o("[✓]"),e(s)])]),t("td",jl,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[Bl]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Nl]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Cl]),_:1}),o(),Ll]),t("td",Vl,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Hl,t("td",Kl,[t("a",Tl,[o("序列化和反序列化二叉搜索树"),e(s)])]),Pl,t("td",Ql,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Rl]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Gl]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[Sl]),_:1}),o(),Yl]),t("td",Al,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Dl,t("td",Fl,[t("a",Jl,[o("删除二叉搜索树中的节点"),e(s)])]),t("td",Ul,[t("a",Wl,[o("[✓]"),e(s)])]),t("td",Xl,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Zl]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[$l]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[tn]),_:1})]),t("td",en,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[on,t("td",ln,[t("a",nn,[o("二叉搜索树中的众数"),e(s)])]),sn,t("td",dn,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[_n]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[rn]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[cn]),_:1}),o(),an]),t("td",hn,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[un,t("td",fn,[t("a",gn,[o("二叉搜索树中的中序后继 II"),e(s)])]),mn,t("td",yn,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[bn]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[xn]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[pn]),_:1})]),t("td",kn,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Mn,t("td",In,[t("a",En,[o("二叉搜索树的最小绝对差"),e(s)])]),t("td",vn,[t("a",wn,[o("[✓]"),e(s)])]),t("td",On,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[qn]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[zn]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[jn]),_:1}),o(),Bn]),t("td",Nn,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Cn,t("td",Ln,[t("a",Vn,[o("把二叉搜索树转换为累加树"),e(s)])]),Hn,t("td",Kn,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Tn]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Pn]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Qn]),_:1}),o(),Rn]),t("td",Gn,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Sn,t("td",Yn,[t("a",An,[o("两数之和 IV - 输入二叉搜索树"),e(s)])]),Dn,t("td",Fn,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Jn]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Un]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[Wn]),_:1}),o(),Xn]),t("td",Zn,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[$n,t("td",ts,[t("a",es,[o("修剪二叉搜索树"),e(s)])]),os,t("td",ls,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[ns]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[ss]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[ds]),_:1}),o(),_s]),t("td",is,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[rs,t("td",cs,[t("a",as,[o("二叉搜索树中的搜索"),e(s)])]),t("td",hs,[t("a",us,[o("[✓]"),e(s)])]),t("td",fs,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[gs]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[ms]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[ys]),_:1})]),t("td",bs,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[xs,t("td",ps,[t("a",ks,[o("二叉搜索树中的插入操作"),e(s)])]),t("td",Ms,[t("a",Is,[o("[✓]"),e(s)])]),t("td",Es,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[vs]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[ws]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[Os]),_:1})]),t("td",qs,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[zs,t("td",js,[t("a",Bs,[o("数据流中的第 K 大元素"),e(s)])]),t("td",Ns,[t("a",Cs,[o("[✓]"),e(s)])]),t("td",Ls,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Vs]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[Hs]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ks]),_:1}),o(),Ts]),t("td",Ps,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Qs,t("td",Rs,[t("a",Gs,[o("拆分二叉搜索树"),e(s)])]),Ss,t("td",Ys,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[As]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ds]),_:1}),o(),e(n,{to:"/outline/tag/recursion.html"},{default:l(()=>[Fs]),_:1}),o(),Js]),t("td",Us,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ws,t("td",Xs,[t("a",Zs,[o("二叉搜索树节点最小距离"),e(s)])]),t("td",$s,[t("a",td,[o("[✓]"),e(s)])]),t("td",ed,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[od]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[ld]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[nd]),_:1}),o(),sd]),t("td",dd,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[_d,t("td",id,[t("a",rd,[o("递增顺序搜索树"),e(s)])]),cd,t("td",ad,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[hd]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[ud]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[fd]),_:1}),o(),gd]),t("td",md,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[yd,t("td",bd,[t("a",xd,[o("二叉搜索树的范围和"),e(s)])]),pd,t("td",kd,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Md]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Id]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ed]),_:1}),o(),vd]),t("td",wd,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Od,t("td",qd,[t("a",zd,[o("前序遍历构造二叉搜索树"),e(s)])]),t("td",jd,[t("a",Bd,[o("[✓]"),e(s)])]),t("td",Nd,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[Cd]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ld]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Vd]),_:1}),o(),Hd]),t("td",Kd,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Td,t("td",Pd,[t("a",Qd,[o("从二叉搜索树到更大和树"),e(s)])]),Rd,t("td",Gd,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Sd]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Yd]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ad]),_:1}),o(),Dd]),t("td",Fd,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Jd,t("td",Ud,[t("a",Wd,[o("查找两棵二叉搜索树之和"),e(s)])]),Xd,t("td",Zd,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[$d]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[t_]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[e_]),_:1}),o(),o_]),t("td",l_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[n_,t("td",s_,[t("a",d_,[o("两棵二叉搜索树中的所有元素"),e(s)])]),__,t("td",i_,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[r_]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[c_]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[a_]),_:1}),o(),h_]),t("td",u_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[f_,t("td",g_,[t("a",m_,[o("二叉搜索子树的最大键值和"),e(s)])]),y_,t("td",b_,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[x_]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[p_]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[k_]),_:1}),o(),M_]),t("td",I_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[E_,t("td",v_,[t("a",w_,[o("将二叉搜索树变平衡"),e(s)])]),O_,t("td",q_,[e(n,{to:"/outline/tag/greedy.html"},{default:l(()=>[z_]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[j_]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[B_]),_:1}),o(),N_]),t("td",C_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[L_,t("td",V_,[t("a",H_,[o("将子数组重新排序得到同一个二叉搜索树的方案数"),e(s)])]),K_,t("td",T_,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[P_]),_:1}),o(),e(n,{to:"/outline/tag/union-find.html"},{default:l(()=>[Q_]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[R_]),_:1}),o(),G_]),t("td",S_,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Y_,t("td",A_,[t("a",D_,[o("二叉搜索树迭代器 II"),e(s)])]),F_,t("td",J_,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[U_]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[W_]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[X_]),_:1}),o(),Z_]),t("td",$_,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ti,t("td",ei,[t("a",oi,[o("给定二叉搜索树的插入顺序求深度"),e(s)])]),li,t("td",ni,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[si]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[di]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[_i]),_:1}),o(),ii]),t("td",ri,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ci,t("td",ai,[t("a",hi,[o("二叉搜索树最近节点查询"),e(s)])]),ui,t("td",fi,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[gi]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[mi]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[yi]),_:1}),o(),bi]),t("td",xi,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[pi,t("td",ki,[t("a",Mi,[o("二叉搜索树染色"),e(s)])]),Ii,t("td",Ei,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[vi]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[wi]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Oi]),_:1}),o(),qi]),t("td",zi,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ji,t("td",Bi,[t("a",Ni,[o("二叉搜索树的后序遍历序列"),e(s)])]),t("td",Ci,[t("a",Li,[o("[✓]"),e(s)])]),t("td",Vi,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[Hi]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ki]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Ti]),_:1}),o(),Pi]),t("td",Qi,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ri,t("td",Gi,[t("a",Si,[o("二叉搜索树与双向链表"),e(s)])]),t("td",Yi,[t("a",Ai,[o("[✓]"),e(s)])]),t("td",Di,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[Fi]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ji]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Ui]),_:1}),o(),Wi]),t("td",Xi,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Zi,t("td",$i,[t("a",tr,[o("二叉搜索树的第k大节点"),e(s)])]),t("td",er,[t("a",or,[o("[✓]"),e(s)])]),t("td",lr,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[nr]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[sr]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[dr]),_:1}),o(),_r]),t("td",ir,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[rr,t("td",cr,[t("a",ar,[o("二叉搜索树的最近公共祖先"),e(s)])]),hr,t("td",ur,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[fr]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[gr]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[mr]),_:1}),o(),yr]),t("td",br,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[xr,t("td",pr,[t("a",kr,[o("展平二叉搜索树"),e(s)])]),Mr,t("td",Ir,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[Er]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[vr]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[wr]),_:1}),o(),Or]),t("td",qr,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[zr,t("td",jr,[t("a",Br,[o("二叉搜索树中的中序后继"),e(s)])]),Nr,t("td",Cr,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Lr]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Vr]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Hr]),_:1}),o(),Kr]),t("td",Tr,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Pr,t("td",Qr,[t("a",Rr,[o("所有大于等于节点的值之和"),e(s)])]),Gr,t("td",Sr,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Yr]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Ar]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Dr]),_:1}),o(),Fr]),t("td",Jr,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ur,t("td",Wr,[t("a",Xr,[o("二叉搜索树迭代器"),e(s)])]),Zr,t("td",$r,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[tc]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[ec]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[oc]),_:1}),o(),lc]),t("td",nc,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[sc,t("td",dc,[t("a",_c,[o("数据流的第 K 大数值"),e(s)])]),ic,t("td",rc,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[cc]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[ac]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[hc]),_:1}),o(),uc]),t("td",fc,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[gc,t("td",mc,[t("a",yc,[o("最小高度树"),e(s)])]),bc,t("td",xc,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[pc]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[kc]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Mc]),_:1}),o(),Ic]),t("td",Ec,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[vc,t("td",wc,[t("a",Oc,[o("合法二叉搜索树"),e(s)])]),qc,t("td",zc,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[jc]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Bc]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Nc]),_:1}),o(),Cc]),t("td",Lc,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Vc,t("td",Hc,[t("a",Kc,[o("后继者"),e(s)])]),Tc,t("td",Pc,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Qc]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[Rc]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Gc]),_:1}),o(),Sc]),t("td",Yc,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ac,t("td",Dc,[t("a",Fc,[o("二叉搜索树序列"),e(s)])]),Jc,t("td",Uc,[e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Wc]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Xc]),_:1}),o(),e(n,{to:"/outline/tag/backtracking.html"},{default:l(()=>[Zc]),_:1}),o(),$c]),t("td",ta,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ea,t("td",oa,[t("a",la,[o("BiNode"),e(s)])]),na,t("td",sa,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[da]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[_a]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[ia]),_:1}),o(),ra]),t("td",ca,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])])])])])}const ga=i(h,[["render",aa],["__file","binary-search-tree.html.vue"]]);export{ga as default};
