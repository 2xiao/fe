import{_ as a,r as _,o as c,c as i,a as t,d as e,w as l,b as o,f as h}from"./app-ZWutqmfO.js";const u={},r=t("h1",{id:"最小生成树",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#最小生成树","aria-hidden":"true"},"#"),o(" 最小生成树")],-1),m=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),f=t("code",null,"数组",-1),p=t("code",null,"矩阵",-1),y=t("code",null,"链表",-1),x=t("code",null,"双向链表",-1),b=t("code",null,"栈",-1),k=t("code",null,"单调栈",-1),w=t("code",null,"队列",-1),v=t("code",null,"单调队列",-1),q=t("code",null,"堆（优先队列）",-1),I=t("code",null,"哈希表",-1),L=t("code",null,"字符串",-1),N=t("code",null,"字符串匹配",-1),V=t("code",null,"树",-1),z=t("code",null,"二叉树",-1),B=t("code",null,"二叉搜索树",-1),C=t("span",{class:"blue"},"最小生成树",-1),E=t("code",null,"图",-1),H=t("code",null,"有序集合",-1),M=t("code",null,"拓扑排序",-1),R=t("code",null,"最短路",-1),T=t("code",null,"强连通分量",-1),j=t("code",null,"欧拉回路",-1),S=t("code",null,"双连通分量",-1),A=t("code",null,"并查集",-1),D=t("code",null,"字典树",-1),F=t("code",null,"线段树",-1),G=t("code",null,"树状数组",-1),J=t("code",null,"后缀数组",-1),K=t("p",null,[t("strong",null,"算法")],-1),O=t("code",null,"枚举",-1),P=t("code",null,"递归",-1),Q=t("code",null,"分治",-1),U=t("code",null,"回溯",-1),W=t("code",null,"贪心",-1),X=t("code",null,"动态规划",-1),Y=t("code",null,"排序",-1),Z=t("code",null,"桶排序",-1),$=t("code",null,"计数排序",-1),tt=t("code",null,"基数排序",-1),et=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),lt=t("code",null,"二分查找",-1),nt=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),_t=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),it=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),ut=t("code",null,"状态压缩",-1),rt=t("code",null,"哈希函数",-1),mt=t("code",null,"滚动哈希",-1),gt=t("code",null,"扫描线",-1),ft=t("p",null,[t("strong",null,"其他")],-1),pt=t("code",null,"数学",-1),yt=t("code",null,"数论",-1),xt=t("code",null,"几何",-1),bt=t("code",null,"博弈",-1),kt=t("code",null,"模拟",-1),wt=t("code",null,"组合数学",-1),vt=t("code",null,"随机化",-1),qt=t("code",null,"概率与统计",-1),It=t("code",null,"水塘抽样",-1),Lt=t("code",null,"拒绝采样",-1),Nt=t("code",null,"数据库",-1),Vt=t("code",null,"设计",-1),zt=t("code",null,"数据流",-1),Bt=t("code",null,"脑筋急转弯",-1),Ct=t("code",null,"交互",-1),Et=t("code",null,"迭代器",-1),Ht=t("code",null,"多线程",-1),Mt=t("hr",null,null,-1),Rt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Tt=t("td",{style:{"text-align":"center"}},"1135",-1),jt={style:{"text-align":"left"}},St={href:"https://leetcode.com/problems/connecting-cities-with-minimum-cost",target:"_blank",rel:"noopener noreferrer"},At=t("td",{style:{"text-align":"center"}},null,-1),Dt={style:{"text-align":"left"}},Ft=t("code",null,"并查集",-1),Gt=t("code",null,"图",-1),Jt=t("code",null,"最小生成树",-1),Kt=t("code",null,"1+",-1),Ot={style:{"text-align":"left"}},Pt=t("td",{style:{"text-align":"center"}},"1168",-1),Qt={style:{"text-align":"left"}},Ut={href:"https://leetcode.com/problems/optimize-water-distribution-in-a-village",target:"_blank",rel:"noopener noreferrer"},Wt=t("td",{style:{"text-align":"center"}},null,-1),Xt={style:{"text-align":"left"}},Yt=t("code",null,"并查集",-1),Zt=t("code",null,"图",-1),$t=t("code",null,"最小生成树",-1),te=t("code",null,"1+",-1),ee={style:{"text-align":"left"}},oe=t("td",{style:{"text-align":"center"}},"1489",-1),le={style:{"text-align":"left"}},ne={href:"https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",target:"_blank",rel:"noopener noreferrer"},de=t("td",{style:{"text-align":"center"}},null,-1),se={style:{"text-align":"left"}},_e=t("code",null,"并查集",-1),ae=t("code",null,"图",-1),ce=t("code",null,"最小生成树",-1),ie=t("code",null,"2+",-1),he={style:{"text-align":"left"}},ue=t("td",{style:{"text-align":"center"}},"1584",-1),re={style:{"text-align":"left"}},me={href:"https://leetcode.com/problems/min-cost-to-connect-all-points",target:"_blank",rel:"noopener noreferrer"},ge=t("td",{style:{"text-align":"center"}},null,-1),fe={style:{"text-align":"left"}},pe=t("code",null,"并查集",-1),ye=t("code",null,"图",-1),xe=t("code",null,"数组",-1),be=t("code",null,"1+",-1),ke={style:{"text-align":"left"}},we=t("td",{style:{"text-align":"center"}},"1724",-1),ve={style:{"text-align":"left"}},qe={href:"https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths-ii",target:"_blank",rel:"noopener noreferrer"},Ie=t("td",{style:{"text-align":"center"}},null,-1),Le={style:{"text-align":"left"}},Ne=t("code",null,"并查集",-1),Ve=t("code",null,"图",-1),ze=t("code",null,"最小生成树",-1),Be={style:{"text-align":"left"}};function Ce(Ee,He){const n=_("RouterLink"),d=_("ExternalLinkIcon"),s=_("font");return c(),i("div",null,[r,t("details",null,[m,g,t("p",null,[e(n,{to:"/tag/array.html"},{default:l(()=>[f]),_:1}),o(),e(n,{to:"/tag/matrix.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/tag/linked-list.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/tag/doubly-linked-list.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/tag/stack.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/tag/monotonic-stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/tag/queue.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/tag/monotonic-queue.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/tag/heap-priority-queue.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/tag/hash-table.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/tag/string.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/tag/string-matching.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/tag/tree.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/tag/binary-tree.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/tag/binary-search-tree.html"},{default:l(()=>[B]),_:1}),o(),C,o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/tag/ordered-set.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/tag/topological-sort.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/tag/shortest-path.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/tag/strongly-connected-component.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/tag/eulerian-circuit.html"},{default:l(()=>[j]),_:1}),o(),e(n,{to:"/tag/biconnected-component.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/tag/union-find.html"},{default:l(()=>[A]),_:1}),o(),e(n,{to:"/tag/trie.html"},{default:l(()=>[D]),_:1}),o(),e(n,{to:"/tag/segment-tree.html"},{default:l(()=>[F]),_:1}),o(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:l(()=>[G]),_:1}),o(),e(n,{to:"/tag/suffix-array.html"},{default:l(()=>[J]),_:1})]),K,t("p",null,[e(n,{to:"/tag/enumeration.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/tag/recursion.html"},{default:l(()=>[P]),_:1}),o(),e(n,{to:"/tag/divide-and-conquer.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/tag/backtracking.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/tag/greedy.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/tag/dynamic-programming.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/tag/sorting.html"},{default:l(()=>[Y]),_:1}),o(),e(n,{to:"/tag/bucket-sort.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/tag/counting-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/tag/radix-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/tag/merge-sort.html"},{default:l(()=>[et]),_:1}),o(),e(n,{to:"/tag/quickselect.html"},{default:l(()=>[ot]),_:1}),o(),e(n,{to:"/tag/binary-search.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/tag/memoization.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/tag/depth-first-search.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/tag/breadth-first-search.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/tag/two-pointers.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/tag/bit-manipulation.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/tag/prefix-sum.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/tag/counting.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/tag/sliding-window.html"},{default:l(()=>[ht]),_:1}),o(),e(n,{to:"/tag/bitmask.html"},{default:l(()=>[ut]),_:1}),o(),e(n,{to:"/tag/hash-function.html"},{default:l(()=>[rt]),_:1}),o(),e(n,{to:"/tag/rolling-hash.html"},{default:l(()=>[mt]),_:1}),o(),e(n,{to:"/tag/line-sweep.html"},{default:l(()=>[gt]),_:1})]),ft,t("p",null,[e(n,{to:"/tag/math.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/tag/number-theory.html"},{default:l(()=>[yt]),_:1}),o(),e(n,{to:"/tag/geometry.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/tag/game-theory.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/tag/simulation.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/tag/combinatorics.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/tag/randomized.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/tag/probability-and-statistics.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/tag/reservoir-sampling.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/tag/rejection-sampling.html"},{default:l(()=>[Lt]),_:1}),o(),e(n,{to:"/tag/database.html"},{default:l(()=>[Nt]),_:1}),o(),e(n,{to:"/tag/design.html"},{default:l(()=>[Vt]),_:1}),o(),e(n,{to:"/tag/data-stream.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/tag/brainteaser.html"},{default:l(()=>[Bt]),_:1}),o(),e(n,{to:"/tag/interactive.html"},{default:l(()=>[Ct]),_:1}),o(),e(n,{to:"/tag/iterator.html"},{default:l(()=>[Et]),_:1}),o(),e(n,{to:"/tag/concurrency.html"},{default:l(()=>[Ht]),_:1})])]),Mt,h(" prettier-ignore "),t("table",null,[Rt,t("tbody",null,[t("tr",null,[Tt,t("td",jt,[t("a",St,[o("最低成本连通所有城市"),e(d)])]),At,t("td",Dt,[e(n,{to:"/tag/union-find.html"},{default:l(()=>[Ft]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[Gt]),_:1}),o(),e(n,{to:"/tag/minimum-spanning-tree.html"},{default:l(()=>[Jt]),_:1}),o(),Kt]),t("td",Ot,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Pt,t("td",Qt,[t("a",Ut,[o("水资源分配优化"),e(d)])]),Wt,t("td",Xt,[e(n,{to:"/tag/union-find.html"},{default:l(()=>[Yt]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[Zt]),_:1}),o(),e(n,{to:"/tag/minimum-spanning-tree.html"},{default:l(()=>[$t]),_:1}),o(),te]),t("td",ee,[e(s,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[oe,t("td",le,[t("a",ne,[o("找到最小生成树里的关键边和伪关键边"),e(d)])]),de,t("td",se,[e(n,{to:"/tag/union-find.html"},{default:l(()=>[_e]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[ae]),_:1}),o(),e(n,{to:"/tag/minimum-spanning-tree.html"},{default:l(()=>[ce]),_:1}),o(),ie]),t("td",he,[e(s,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ue,t("td",re,[t("a",me,[o("连接所有点的最小费用"),e(d)])]),ge,t("td",fe,[e(n,{to:"/tag/union-find.html"},{default:l(()=>[pe]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[ye]),_:1}),o(),e(n,{to:"/tag/array.html"},{default:l(()=>[xe]),_:1}),o(),be]),t("td",ke,[e(s,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[we,t("td",ve,[t("a",qe,[o("检查边长度限制的路径是否存在 II"),e(d)])]),Ie,t("td",Le,[e(n,{to:"/tag/union-find.html"},{default:l(()=>[Ne]),_:1}),o(),e(n,{to:"/tag/graph.html"},{default:l(()=>[Ve]),_:1}),o(),e(n,{to:"/tag/minimum-spanning-tree.html"},{default:l(()=>[ze]),_:1})]),t("td",Be,[e(s,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])])])])])}const Re=a(u,[["render",Ce],["__file","minimum-spanning-tree.html.vue"]]);export{Re as default};
