import{_ as d,r as c,o as i,c as r,a as t,b as n,d as e,w as s,f as p,e as u}from"./app-zLZrqgWi.js";const _={},h={id:"_1004-最大连续1的个数-iii",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_1004-最大连续1的个数-iii","aria-hidden":"true"},"#",-1),g={href:"https://2xiao.github.io/leetcode-js/problem/1004.html",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"数组",-1),k=t("code",null,"二分查找",-1),b=t("code",null,"前缀和",-1),y=t("code",null,"滑动窗口",-1),x={href:"https://leetcode.cn/problems/max-consecutive-ones-iii",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/max-consecutive-ones-iii",target:"_blank",rel:"noopener noreferrer"},E=t("code",null,"LeetCode",-1),C=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a binary array <code>nums</code> and an integer <code>k</code>, return <em>the maximum number of consecutive</em><code>1</code> <em>&#39; s in the array if you can flip at most</em> <code>k</code> <code>0</code>&#39;s.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2</p><p>Output: 6</p><p>Explanation: [1,1,1,0,0,<em><strong>1</strong> ,1,1,1,1,<strong>1</strong></em>]</p><p>Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3</p><p>Output: 10</p><p>Explanation: [0,0,<em>1,1,<strong>1</strong> ,<strong>1</strong> ,1,1,1,<strong>1</strong> ,1,1</em>,0,0,0,1,1,1,1]</p><p>Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li><li><code>0 &lt;= k &lt;= nums.length</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个二进制数组 <code>nums</code> 和一个整数 <code>k</code>，如果可以翻转最多 <code>k</code> 个 <code>0</code> ，则返回 <em>数组中连续<code>1</code> 的最大个数</em> 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,1,1,0,0,0,1,1,1,1,0], K = 2</p><p><strong>输出：</strong> 6</p><p><strong>解释：</strong>[1,1,1,0,0,<strong>1</strong> ,1,1,1,1,<strong>1</strong>]</p><p>粗体数字从 0 翻转到 1，最长的子数组长度为 6。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3</p><p><strong>输出：</strong> 10</p><p><strong>解释：</strong>[0,0,1,1,<strong>1</strong> ,<strong>1</strong> ,1,1,1,<strong>1</strong> ,1,1,0,0,0,1,1,1,1]</p><p>粗体数字从 0 翻转到 1，最长的子数组长度为 10。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li><li><code>0 &lt;= k &lt;= nums.length</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用 <strong>滑动窗口</strong> 来解答这道题：</p><ul><li>使用两个指针 <code>left</code> 和 <code>right</code> 来维护一个窗口，窗口内包含最多 <code>k</code> 个 <code>0</code>。</li><li><code>right</code> 指针向右移动，扩展窗口，在每次移动 <code>right</code> 时，检查当前窗口内的元素。如果 <code>nums[right]</code> 是 <code>0</code>，增加当前窗口内的 <code>0</code> 的计数。</li><li>当窗口内的 <code>0</code> 的数量超过 <code>k</code> 时，移动 <code>left</code> 指针以缩小窗口，直到 <code>0</code> 的数量不再超过 <code>k</code>。</li><li>在每次迭代中计算并更新当前的最大连续 <code>1</code> 的长度。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是数组的长度，<code>right</code> 指针遍历数组一次，<code>left</code> 指针最多也会遍历一次。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只使用常量空间来存储指针和计数。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">longestOnes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> zeroCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> right <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> right<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 当遇到 0 时，增加计数</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			zeroCount<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 当窗口内的 0 的数量超过 k 时，移动 left 指针</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>zeroCount <span class="token operator">&gt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				zeroCount<span class="token operator">--</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token comment">// 更新最大长度</span>
		maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> maxLength<span class="token punctuation">;</span> <span class="token comment">// 返回最大连续 1 的长度</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,24),I=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),L=t("td",{style:{"text-align":"center"}},"340",-1),M={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters",target:"_blank",rel:"noopener noreferrer"},z=t("td",{style:{"text-align":"center"}},null,-1),B={style:{"text-align":"left"}},K=t("code",null,"哈希表",-1),N=t("code",null,"字符串",-1),O=t("code",null,"滑动窗口",-1),V={style:{"text-align":"left"}},j=t("td",{style:{"text-align":"center"}},"424",-1),T={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/longest-repeating-character-replacement",target:"_blank",rel:"noopener noreferrer"},G=t("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},A=t("code",null,"哈希表",-1),D=t("code",null,"字符串",-1),F=t("code",null,"滑动窗口",-1),H={style:{"text-align":"left"}},J=t("td",{style:{"text-align":"center"}},"485",-1),P={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/max-consecutive-ones",target:"_blank",rel:"noopener noreferrer"},U={style:{"text-align":"center"}},W={style:{"text-align":"left"}},X=t("code",null,"数组",-1),Y={style:{"text-align":"left"}},Z=t("td",{style:{"text-align":"center"}},"487",-1),$={style:{"text-align":"left"}},tt={href:"https://leetcode.com/problems/max-consecutive-ones-ii",target:"_blank",rel:"noopener noreferrer"},et=t("td",{style:{"text-align":"center"}},null,-1),nt={style:{"text-align":"left"}},st=t("code",null,"数组",-1),ot=t("code",null,"动态规划",-1),at=t("code",null,"滑动窗口",-1),lt={style:{"text-align":"left"}},ct=t("td",{style:{"text-align":"center"}},"1493",-1),dt={style:{"text-align":"left"}},it={href:"https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element",target:"_blank",rel:"noopener noreferrer"},rt=t("td",{style:{"text-align":"center"}},null,-1),pt={style:{"text-align":"left"}},ut=t("code",null,"数组",-1),_t=t("code",null,"动态规划",-1),ht=t("code",null,"滑动窗口",-1),mt={style:{"text-align":"left"}},gt=t("td",{style:{"text-align":"center"}},"2024",-1),ft={style:{"text-align":"left"}},kt={href:"https://leetcode.com/problems/maximize-the-confusion-of-an-exam",target:"_blank",rel:"noopener noreferrer"},bt=t("td",{style:{"text-align":"center"}},null,-1),yt={style:{"text-align":"left"}},xt=t("code",null,"字符串",-1),vt=t("code",null,"二分查找",-1),wt=t("code",null,"前缀和",-1),Et=t("code",null,"1+",-1),Ct={style:{"text-align":"left"}},It=t("td",{style:{"text-align":"center"}},"2379",-1),Lt={style:{"text-align":"left"}},Mt={href:"https://leetcode.com/problems/minimum-recolors-to-get-k-consecutive-black-blocks",target:"_blank",rel:"noopener noreferrer"},qt=t("td",{style:{"text-align":"center"}},null,-1),zt={style:{"text-align":"left"}},Bt=t("code",null,"字符串",-1),Kt=t("code",null,"滑动窗口",-1),Nt={style:{"text-align":"left"}},Ot=t("td",{style:{"text-align":"center"}},"2401",-1),Vt={style:{"text-align":"left"}},jt={href:"https://leetcode.com/problems/longest-nice-subarray",target:"_blank",rel:"noopener noreferrer"},Tt=t("td",{style:{"text-align":"center"}},null,-1),Rt={style:{"text-align":"left"}},Gt=t("code",null,"位运算",-1),St=t("code",null,"数组",-1),At=t("code",null,"滑动窗口",-1),Dt={style:{"text-align":"left"}},Ft=t("td",{style:{"text-align":"center"}},"2461",-1),Ht={style:{"text-align":"left"}},Jt={href:"https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k",target:"_blank",rel:"noopener noreferrer"},Pt=t("td",{style:{"text-align":"center"}},null,-1),Qt={style:{"text-align":"left"}},Ut=t("code",null,"数组",-1),Wt=t("code",null,"哈希表",-1),Xt=t("code",null,"滑动窗口",-1),Yt={style:{"text-align":"left"}},Zt=t("td",{style:{"text-align":"center"}},"2511",-1),$t={style:{"text-align":"left"}},te={href:"https://leetcode.com/problems/maximum-enemy-forts-that-can-be-captured",target:"_blank",rel:"noopener noreferrer"},ee=t("td",{style:{"text-align":"center"}},null,-1),ne={style:{"text-align":"left"}},se=t("code",null,"数组",-1),oe=t("code",null,"双指针",-1),ae={style:{"text-align":"left"}};function le(ce,de){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink");return i(),r("div",null,[t("h1",h,[m,n(),t("a",g,[n("1004. 最大连续1的个数 III"),e(a)])]),t("p",null,[n("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(o,{to:"/tag/array.html"},{default:s(()=>[f]),_:1}),n(),e(o,{to:"/tag/binary-search.html"},{default:s(()=>[k]),_:1}),n(),e(o,{to:"/tag/prefix-sum.html"},{default:s(()=>[b]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[y]),_:1}),n("  🔗 "),t("a",x,[v,e(a)]),n(),t("a",w,[E,e(a)])]),C,p(" prettier-ignore "),t("table",null,[I,t("tbody",null,[t("tr",null,[L,t("td",M,[t("a",q,[n("至多包含 K 个不同字符的最长子串 🔒"),e(a)])]),z,t("td",B,[e(o,{to:"/tag/hash-table.html"},{default:s(()=>[K]),_:1}),n(),e(o,{to:"/tag/string.html"},{default:s(()=>[N]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[O]),_:1})]),t("td",V,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[j,t("td",T,[t("a",R,[n("替换后的最长重复字符"),e(a)])]),G,t("td",S,[e(o,{to:"/tag/hash-table.html"},{default:s(()=>[A]),_:1}),n(),e(o,{to:"/tag/string.html"},{default:s(()=>[D]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[F]),_:1})]),t("td",H,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[J,t("td",P,[t("a",Q,[n("最大连续 1 的个数"),e(a)])]),t("td",U,[e(o,{to:"/problem/0485.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",W,[e(o,{to:"/tag/array.html"},{default:s(()=>[X]),_:1})]),t("td",Y,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[Z,t("td",$,[t("a",tt,[n("最大连续1的个数 II 🔒"),e(a)])]),et,t("td",nt,[e(o,{to:"/tag/array.html"},{default:s(()=>[st]),_:1}),n(),e(o,{to:"/tag/dynamic-programming.html"},{default:s(()=>[ot]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[at]),_:1})]),t("td",lt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[ct,t("td",dt,[t("a",it,[n("删掉一个元素以后全为 1 的最长子数组"),e(a)])]),rt,t("td",pt,[e(o,{to:"/tag/array.html"},{default:s(()=>[ut]),_:1}),n(),e(o,{to:"/tag/dynamic-programming.html"},{default:s(()=>[_t]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[ht]),_:1})]),t("td",mt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[gt,t("td",ft,[t("a",kt,[n("考试的最大困扰度"),e(a)])]),bt,t("td",yt,[e(o,{to:"/tag/string.html"},{default:s(()=>[xt]),_:1}),n(),e(o,{to:"/tag/binary-search.html"},{default:s(()=>[vt]),_:1}),n(),e(o,{to:"/tag/prefix-sum.html"},{default:s(()=>[wt]),_:1}),n(),Et]),t("td",Ct,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[It,t("td",Lt,[t("a",Mt,[n("得到 K 个黑块的最少涂色次数"),e(a)])]),qt,t("td",zt,[e(o,{to:"/tag/string.html"},{default:s(()=>[Bt]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[Kt]),_:1})]),t("td",Nt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[Ot,t("td",Vt,[t("a",jt,[n("最长优雅子数组"),e(a)])]),Tt,t("td",Rt,[e(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Gt]),_:1}),n(),e(o,{to:"/tag/array.html"},{default:s(()=>[St]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[At]),_:1})]),t("td",Dt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Ft,t("td",Ht,[t("a",Jt,[n("长度为 K 子数组中的最大和"),e(a)])]),Pt,t("td",Qt,[e(o,{to:"/tag/array.html"},{default:s(()=>[Ut]),_:1}),n(),e(o,{to:"/tag/hash-table.html"},{default:s(()=>[Wt]),_:1}),n(),e(o,{to:"/tag/sliding-window.html"},{default:s(()=>[Xt]),_:1})]),t("td",Yt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[Zt,t("td",$t,[t("a",te,[n("最多可以摧毁的敌人城堡数目"),e(a)])]),ee,t("td",ne,[e(o,{to:"/tag/array.html"},{default:s(()=>[se]),_:1}),n(),e(o,{to:"/tag/two-pointers.html"},{default:s(()=>[oe]),_:1})]),t("td",ae,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const re=d(_,[["render",le],["__file","1004.html.vue"]]);export{re as default};
