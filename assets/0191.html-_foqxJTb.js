import{_ as p,r,o as u,c as h,a as e,b as t,d as n,w as s,f as _,e as m}from"./app-ZVJfwurD.js";const k={},g={id:"_191-位1的个数",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#_191-位1的个数","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0191.html",target:"_blank",rel:"noopener noreferrer"},y=e("code",null,"位运算",-1),v=e("code",null,"分治",-1),x={href:"https://leetcode.cn/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"力扣",-1),E={href:"https://leetcode.com/problems/number-of-1-bits",target:"_blank",rel:"noopener noreferrer"},j=e("code",null,"LeetCode",-1),I=e("h2",{id:"题目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),t(" 题目")],-1),O={href:"http://en.wikipedia.org/wiki/Hamming_weight",target:"_blank",rel:"noopener noreferrer"},T=e("p",null,[e("strong",null,"Note:")],-1),q=e("li",null,"Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.",-1),C={href:"https://en.wikipedia.org/wiki/Two%27s_complement",target:"_blank",rel:"noopener noreferrer"},N=e("strong",null,"Example 3",-1),A=e("code",null,"-3",-1),L=m('<p><strong>Example 1:</strong></p><blockquote><p>Input: n = 00000000000000000000000000001011</p><p>Output: 3</p><p>Explanation: The input binary string <strong>00000000000000000000000000001011</strong> has a total of three &#39;1&#39; bits.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 00000000000000000000000010000000</p><p>Output: 1</p><p>Explanation: The input binary string <strong>00000000000000000000000010000000</strong> has a total of one &#39;1&#39; bit.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: n = 11111111111111111111111111111101</p><p>Output: 31</p><p>Explanation: The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one &#39;1&#39; bits.</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The input must be a <strong>binary string</strong> of length <code>32</code>.</li></ul><p><strong>Follow up:</strong> If this function is called many times, how would you optimize it?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 &#39;1&#39; 的个数（也被称为 汉明重量）。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-循环" tabindex="-1"><a class="header-anchor" href="#思路一-循环" aria-hidden="true">#</a> 思路一：循环</h3><p>可以直接循环检查给定整数 <code>n</code> 的二进制位的每一位是否为 <code>1</code>。</p><p>当检查第 <code>i</code> 位时，可以让 <code>n</code> 与 <code>2^i</code> 进行 <strong>与</strong> 运算，当且仅当 <code>n</code> 的第 <code>i</code> 位为 <code>1</code> 时，运算结果不为 <code>0</code>。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(k)</code>，其中 <code>k=32</code>，一共需要检查 <code>32</code> 位。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只需要常数的空间保存若干变量。</li></ul><hr><h3 id="思路二-位运算" tabindex="-1"><a class="header-anchor" href="#思路二-位运算" aria-hidden="true">#</a> 思路二：位运算</h3><p>将<code>res</code> 初始化为 0，用于存储返回结果。</p><p>当 <code>n &gt; 0</code> 时，循环以下步骤：</p><ul><li>若<code>n &amp; 1</code> 不为 0，则 <code>n</code> 的最后一位为 <code>1</code>，<code>res++</code></li><li><code>n &gt;&gt;= 1</code>，将 <code>n</code> 右移一位，准备提取下一个位。</li></ul><p>最终返回 <code>res</code></p><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(k)</code>，其中 <code>k=32</code>，每次右移一位，一共需要检查 <code>32</code> 位。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只需要常数的空间保存若干变量。</li></ul><hr><h3 id="思路三-位运算" tabindex="-1"><a class="header-anchor" href="#思路三-位运算" aria-hidden="true">#</a> 思路三：位运算</h3><p>由于 <code>n &amp; (n−1)</code> 会 <code>n</code> 的二进制位中的最低位的 <code>1</code> 变为 <code>0</code> ，如：<code>6 &amp; (6−1) = 4</code>, <code>6 = (110)_2</code>, <code>4 = (100)_2</code>，运算结果 <code>4</code> 即为把 <code>6</code> 的二进制位中的最低位的 <code>1</code> 变为 <code>0</code> 之后的结果。</p><p>可以利用这个位运算的性质，不断让当前的 <code>n</code> 与 <code>n - 1</code> 做与运算，直到 <code>n</code> 变为 <code>0</code> 即可。因为每次运算会使得 <code>n</code> 的最低位的 <code>1</code> 被翻转，因此运算次数就等于 <code>n</code> 的二进制位中 <code>1</code> 的个数。</p><h4 id="复杂度分析-2" tabindex="-1"><a class="header-anchor" href="#复杂度分析-2" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(m)</code>，其中 <code>m</code> 是 <code>n</code> 的二进制表示中 <code>1</code> 的数量。每次 <code>n &amp;= n - 1</code> 操作都会消除 <code>n</code> 中的一个 <code>1</code>，因此循环的次数等于 <code>1</code> 的个数。最坏情况下，当 <code>n</code> 的所有位都是 <code>1</code> 时，循环次数等于 <code>m</code>。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只需要常数的空间保存变量。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',32),V=e("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token doc-comment comment"},[t(`/**
 * `),e("span",{class:"token keyword"},"@param"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("number"),e("span",{class:"token punctuation"},"}")]),t(),e("span",{class:"token parameter"},"n"),t(` - a positive integer
 * `),e("span",{class:"token keyword"},"@return"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("number"),e("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),e("span",{class:"token keyword"},"var"),t(),e("span",{class:"token function-variable function"},"hammingWeight"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"n"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
	`),e("span",{class:"token keyword"},"let"),t(" res "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),t(`
	`),e("span",{class:"token keyword"},"for"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"let"),t(" i "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),t(" i "),e("span",{class:"token operator"},"<"),t(),e("span",{class:"token number"},"32"),e("span",{class:"token punctuation"},";"),t(" i"),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
		`),e("span",{class:"token keyword"},"if"),t(),e("span",{class:"token punctuation"},"("),t("n "),e("span",{class:"token operator"},"&"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),t(),e("span",{class:"token operator"},"<<"),t(" i"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
			res`),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},";"),t(`
		`),e("span",{class:"token punctuation"},"}"),t(`
	`),e("span",{class:"token punctuation"},"}"),t(`
	`),e("span",{class:"token keyword"},"return"),t(" res"),e("span",{class:"token punctuation"},";"),t(`
`),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},";"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),W=e("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token doc-comment comment"},[t(`/**
 * `),e("span",{class:"token keyword"},"@param"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("number"),e("span",{class:"token punctuation"},"}")]),t(),e("span",{class:"token parameter"},"n"),t(`
 * `),e("span",{class:"token keyword"},"@return"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("number"),e("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),e("span",{class:"token keyword"},"var"),t(),e("span",{class:"token function-variable function"},"hammingWeight"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"n"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
	`),e("span",{class:"token keyword"},"let"),t(" res "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),t(`
	`),e("span",{class:"token keyword"},"while"),t(),e("span",{class:"token punctuation"},"("),t("n "),e("span",{class:"token operator"},">"),t(),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
		`),e("span",{class:"token keyword"},"if"),t(),e("span",{class:"token punctuation"},"("),t("n "),e("span",{class:"token operator"},"&"),t(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
			res`),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},";"),t(`
		`),e("span",{class:"token punctuation"},"}"),t(`
		n `),e("span",{class:"token operator"},"="),t(" n "),e("span",{class:"token operator"},">>"),t(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},";"),t(`
	`),e("span",{class:"token punctuation"},"}"),t(`
	`),e("span",{class:"token keyword"},"return"),t(" res"),e("span",{class:"token punctuation"},";"),t(`
`),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},";"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),B=e("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token doc-comment comment"},[t(`/**
 * `),e("span",{class:"token keyword"},"@param"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("number"),e("span",{class:"token punctuation"},"}")]),t(),e("span",{class:"token parameter"},"n"),t(` - a positive integer
 * `),e("span",{class:"token keyword"},"@return"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("number"),e("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),e("span",{class:"token keyword"},"var"),t(),e("span",{class:"token function-variable function"},"hammingWeight"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"n"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
	`),e("span",{class:"token keyword"},"let"),t(" res "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),t(`
	`),e("span",{class:"token keyword"},"while"),t(),e("span",{class:"token punctuation"},"("),t("n"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t(`
		n `),e("span",{class:"token operator"},"&="),t(" n "),e("span",{class:"token operator"},"-"),t(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},";"),t(`
		res`),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},";"),t(`
	`),e("span",{class:"token punctuation"},"}"),t(`
	`),e("span",{class:"token keyword"},"return"),t(" res"),e("span",{class:"token punctuation"},";"),t(`
`),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},";"),t(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),H=e("h2",{id:"相关题目",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),t(" 相关题目")],-1),J=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"题号"),e("th",{style:{"text-align":"left"}},"标题"),e("th",{style:{"text-align":"center"}},"题解"),e("th",{style:{"text-align":"left"}},"标签"),e("th",{style:{"text-align":"left"}},"难度")])],-1),R=e("td",{style:{"text-align":"center"}},"190",-1),z={style:{"text-align":"left"}},F={href:"https://leetcode.com/problems/reverse-bits",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"center"}},D={style:{"text-align":"left"}},G=e("code",null,"位运算",-1),K=e("code",null,"分治",-1),M={style:{"text-align":"left"}},P=e("td",{style:{"text-align":"center"}},"231",-1),Q={style:{"text-align":"left"}},U={href:"https://leetcode.com/problems/power-of-two",target:"_blank",rel:"noopener noreferrer"},X=e("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},Z=e("code",null,"位运算",-1),$=e("code",null,"递归",-1),ee=e("code",null,"数学",-1),te={style:{"text-align":"left"}},ne=e("td",{style:{"text-align":"center"}},"338",-1),se={style:{"text-align":"left"}},oe={href:"https://leetcode.com/problems/counting-bits",target:"_blank",rel:"noopener noreferrer"},ae=e("td",{style:{"text-align":"center"}},null,-1),le={style:{"text-align":"left"}},ce=e("code",null,"位运算",-1),ie=e("code",null,"动态规划",-1),re={style:{"text-align":"left"}},de=e("td",{style:{"text-align":"center"}},"401",-1),pe={style:{"text-align":"left"}},ue={href:"https://leetcode.com/problems/binary-watch",target:"_blank",rel:"noopener noreferrer"},he=e("td",{style:{"text-align":"center"}},null,-1),_e={style:{"text-align":"left"}},me=e("code",null,"位运算",-1),ke=e("code",null,"回溯",-1),ge={style:{"text-align":"left"}},be=e("td",{style:{"text-align":"center"}},"461",-1),fe={style:{"text-align":"left"}},ye={href:"https://leetcode.com/problems/hamming-distance",target:"_blank",rel:"noopener noreferrer"},ve=e("td",{style:{"text-align":"center"}},null,-1),xe={style:{"text-align":"left"}},we=e("code",null,"位运算",-1),Ee={style:{"text-align":"left"}},je=e("td",{style:{"text-align":"center"}},"693",-1),Ie={style:{"text-align":"left"}},Oe={href:"https://leetcode.com/problems/binary-number-with-alternating-bits",target:"_blank",rel:"noopener noreferrer"},Te=e("td",{style:{"text-align":"center"}},null,-1),qe={style:{"text-align":"left"}},Ce=e("code",null,"位运算",-1),Ne={style:{"text-align":"left"}},Ae=e("td",{style:{"text-align":"center"}},"762",-1),Le={style:{"text-align":"left"}},Ve={href:"https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation",target:"_blank",rel:"noopener noreferrer"},We=e("td",{style:{"text-align":"center"}},null,-1),Be={style:{"text-align":"left"}},He=e("code",null,"位运算",-1),Je=e("code",null,"数学",-1),Re={style:{"text-align":"left"}},ze=e("td",{style:{"text-align":"center"}},"3280",-1),Fe={style:{"text-align":"left"}},Se={href:"https://leetcode.com/problems/convert-date-to-binary",target:"_blank",rel:"noopener noreferrer"},De=e("td",{style:{"text-align":"center"}},null,-1),Ge={style:{"text-align":"left"}},Ke=e("code",null,"数学",-1),Me=e("code",null,"字符串",-1),Pe={style:{"text-align":"left"}};function Qe(Ue,Xe){const a=r("ExternalLinkIcon"),l=r("font"),o=r("RouterLink"),d=r("CodeTabs");return u(),h("div",null,[e("h1",g,[b,t(),e("a",f,[t("191. 位1的个数"),n(a)])]),e("p",null,[t("🟢 "),n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1}),t("  🔖  "),n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[y]),_:1}),t(),n(o,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[v]),_:1}),t("  🔗 "),e("a",x,[w,n(a)]),t(),e("a",E,[j,n(a)])]),I,e("p",null,[t("Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the "),e("a",O,[t("Hamming weight"),n(a)]),t(").")]),T,e("ul",null,[q,e("li",null,[t("In Java, the compiler represents the signed integers using "),e("a",C,[t("2's complement notation"),n(a)]),t(". Therefore, in "),N,t(" , the input represents the signed integer. "),A,t(".")])]),L,n(d,{id:"183",data:[{id:"循环"},{id:"位运算"},{id:"位运算"}]},{title0:s(({value:c,isActive:i})=>[t("循环")]),title1:s(({value:c,isActive:i})=>[t("位运算")]),title2:s(({value:c,isActive:i})=>[t("位运算")]),tab0:s(({value:c,isActive:i})=>[V]),tab1:s(({value:c,isActive:i})=>[W]),tab2:s(({value:c,isActive:i})=>[B]),_:1}),H,_(" prettier-ignore "),e("table",null,[J,e("tbody",null,[e("tr",null,[R,e("td",z,[e("a",F,[t("颠倒二进制位"),n(a)])]),e("td",S,[n(o,{to:"/problem/0190.html"},{default:s(()=>[t("[✓]")]),_:1})]),e("td",D,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[G]),_:1}),t(),n(o,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[K]),_:1})]),e("td",M,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[P,e("td",Q,[e("a",U,[t("2 的幂"),n(a)])]),X,e("td",Y,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Z]),_:1}),t(),n(o,{to:"/tag/recursion.html"},{default:s(()=>[$]),_:1}),t(),n(o,{to:"/tag/math.html"},{default:s(()=>[ee]),_:1})]),e("td",te,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[ne,e("td",se,[e("a",oe,[t("比特位计数"),n(a)])]),ae,e("td",le,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[ce]),_:1}),t(),n(o,{to:"/tag/dynamic-programming.html"},{default:s(()=>[ie]),_:1})]),e("td",re,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[de,e("td",pe,[e("a",ue,[t("二进制手表"),n(a)])]),he,e("td",_e,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[me]),_:1}),t(),n(o,{to:"/tag/backtracking.html"},{default:s(()=>[ke]),_:1})]),e("td",ge,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[be,e("td",fe,[e("a",ye,[t("汉明距离"),n(a)])]),ve,e("td",xe,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[we]),_:1})]),e("td",Ee,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[je,e("td",Ie,[e("a",Oe,[t("交替位二进制数"),n(a)])]),Te,e("td",qe,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Ce]),_:1})]),e("td",Ne,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[Ae,e("td",Le,[e("a",Ve,[t("二进制表示中质数个计算置位"),n(a)])]),We,e("td",Be,[n(o,{to:"/tag/bit-manipulation.html"},{default:s(()=>[He]),_:1}),t(),n(o,{to:"/tag/math.html"},{default:s(()=>[Je]),_:1})]),e("td",Re,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),e("tr",null,[ze,e("td",Fe,[e("a",Se,[t("将日期转换为二进制表示"),n(a)])]),De,e("td",Ge,[n(o,{to:"/tag/math.html"},{default:s(()=>[Ke]),_:1}),t(),n(o,{to:"/tag/string.html"},{default:s(()=>[Me]),_:1})]),e("td",Pe,[n(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])])])])])}const Ze=p(k,[["render",Qe],["__file","0191.html.vue"]]);export{Ze as default};
