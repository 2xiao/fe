import{_ as p,r as c,o as i,c as d,a as t,b as e,d as n,w as s,f as r,e as u}from"./app-zLZrqgWi.js";const _={},h={id:"_264-丑数-ii",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_264-丑数-ii","aria-hidden":"true"},"#",-1),k={href:"https://2xiao.github.io/leetcode-js/problem/0264.html",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"哈希表",-1),f=t("code",null,"数学",-1),b=t("code",null,"动态规划",-1),v=t("code",null,"堆（优先队列）",-1),y={href:"https://leetcode.cn/problems/ugly-number-ii",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/ugly-number-ii",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"LeetCode",-1),I=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p><p>Given an integer <code>n</code>, return <em>the</em> <code>nth</code> <em><strong>ugly number</strong></em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: n = 10</p><p>Output: 12</p><p>Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: n = 1</p><p>Output: 1</p><p>Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= n &lt;= 1690</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个整数 <code>n</code> ，请你找出并返回第 <code>n</code> 个 <strong>丑数</strong> 。</p><p>说明：丑数是只包含质因数 <code>2</code>、<code>3</code> 和/或 <code>5</code> 的正整数；<code>1</code> 是丑数。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题很精妙，你看着它好像是道数学题，实际上它却是一个合并多个有序链表的问题，同时用到了筛选素数的思路。</p><p>类似 <strong>如何高效寻找素数</strong> 的思路：如果一个数 x 是丑数，那么 <code>x * 2</code>, <code>x * 3</code>, <code>x * 5</code> 都一定是丑数。</p><p>我们把所有丑数想象成一个从小到大排序的链表，就是这个样子：</p><p><code>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 8 -&gt; ...</code></p><p>然后，我们可以把丑数分为三类：<code>2</code> 的倍数、<code>3</code> 的倍数、<code>5</code> 的倍数（按照题目的意思，<code>1</code> 算作特殊的丑数，放在开头），这三类丑数就好像三条有序链表，如下：</p><ul><li>能被 <code>2</code> 整除的丑数：</li></ul><p><code>1 -&gt; 1*2 -&gt; 2*2 -&gt; 3*2 -&gt; 4*2 -&gt; 5*2 -&gt; 6*2 -&gt; 8*2 -&gt;...</code></p><ul><li>能被 <code>3</code> 整除的丑数：</li></ul><p><code>1 -&gt; 1*3 -&gt; 2*3 -&gt; 3*3 -&gt; 4*3 -&gt; 5*3 -&gt; 6*3 -&gt; 8*3 -&gt;...</code></p><ul><li>能被 <code>5</code> 整除的丑数：</li></ul><p><code>1 -&gt; 1*5 -&gt; 2*5 -&gt; 3*5 -&gt; 4*5 -&gt; 5*5 -&gt; 6*5 -&gt; 8*5 -&gt;...</code></p><p>我们其实就是想把这三条「有序链表」合并在一起并去重，合并的结果就是丑数的序列，然后求合并后的这条有序链表中第 <code>n</code> 个元素是什么。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">nthUglyNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> index2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		index3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		index5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
		val3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
		val5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> ugly <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>val2<span class="token punctuation">,</span> val3<span class="token punctuation">,</span> val5<span class="token punctuation">)</span><span class="token punctuation">;</span>
		ugly<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>
		index<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> val2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			val2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> ugly<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>
			index2<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> val3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			val3 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> ugly<span class="token punctuation">[</span>index3<span class="token punctuation">]</span><span class="token punctuation">;</span>
			index3<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> val5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			val5 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> ugly<span class="token punctuation">[</span>index5<span class="token punctuation">]</span><span class="token punctuation">;</span>
			index5<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> ugly<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),E=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),M=t("td",{style:{"text-align":"center"}},"23",-1),N={style:{"text-align":"left"}},C={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},V={style:{"text-align":"left"}},j=t("code",null,"链表",-1),B=t("code",null,"分治",-1),A=t("code",null,"堆（优先队列）",-1),O=t("code",null,"1+",-1),R={style:{"text-align":"left"}},G=t("td",{style:{"text-align":"center"}},"204",-1),H={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/count-primes",target:"_blank",rel:"noopener noreferrer"},S=t("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},U=t("code",null,"数组",-1),z=t("code",null,"数学",-1),D=t("code",null,"枚举",-1),F=t("code",null,"1+",-1),J={style:{"text-align":"left"}},P=t("td",{style:{"text-align":"center"}},"263",-1),Q={style:{"text-align":"left"}},W={href:"https://leetcode.com/problems/ugly-number",target:"_blank",rel:"noopener noreferrer"},X=t("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},Z=t("code",null,"数学",-1),$={style:{"text-align":"left"}},tt=t("td",{style:{"text-align":"center"}},"279",-1),nt={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/perfect-squares",target:"_blank",rel:"noopener noreferrer"},st={style:{"text-align":"center"}},at={style:{"text-align":"left"}},ot=t("code",null,"广度优先搜索",-1),lt=t("code",null,"数学",-1),ct=t("code",null,"动态规划",-1),pt={style:{"text-align":"left"}},it=t("td",{style:{"text-align":"center"}},"313",-1),dt={style:{"text-align":"left"}},rt={href:"https://leetcode.com/problems/super-ugly-number",target:"_blank",rel:"noopener noreferrer"},ut=t("td",{style:{"text-align":"center"}},null,-1),_t={style:{"text-align":"left"}},ht=t("code",null,"数组",-1),mt=t("code",null,"数学",-1),kt=t("code",null,"动态规划",-1),gt={style:{"text-align":"left"}},ft=t("td",{style:{"text-align":"center"}},"1201",-1),bt={style:{"text-align":"left"}},vt={href:"https://leetcode.com/problems/ugly-number-iii",target:"_blank",rel:"noopener noreferrer"},yt=t("td",{style:{"text-align":"center"}},null,-1),xt={style:{"text-align":"left"}},wt=t("code",null,"数学",-1),qt=t("code",null,"二分查找",-1),It=t("code",null,"组合数学",-1),Et=t("code",null,"1+",-1),Mt={style:{"text-align":"left"}};function Nt(Ct,Lt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),d("div",null,[t("h1",h,[m,e(),t("a",k,[e("264. 丑数 II"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[g]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[f]),_:1}),e(),n(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[b]),_:1}),e(),n(a,{to:"/tag/heap-priority-queue.html"},{default:s(()=>[v]),_:1}),e("  🔗 "),t("a",y,[x,n(o)]),e(),t("a",w,[q,n(o)])]),I,r(" prettier-ignore "),t("table",null,[E,t("tbody",null,[t("tr",null,[M,t("td",N,[t("a",C,[e("合并 K 个升序链表"),n(o)])]),t("td",L,[n(a,{to:"/problem/0023.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",V,[n(a,{to:"/tag/linked-list.html"},{default:s(()=>[j]),_:1}),e(),n(a,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[B]),_:1}),e(),n(a,{to:"/tag/heap-priority-queue.html"},{default:s(()=>[A]),_:1}),e(),O]),t("td",R,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[G,t("td",H,[t("a",K,[e("计数质数"),n(o)])]),S,t("td",T,[n(a,{to:"/tag/array.html"},{default:s(()=>[U]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[z]),_:1}),e(),n(a,{to:"/tag/enumeration.html"},{default:s(()=>[D]),_:1}),e(),F]),t("td",J,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[P,t("td",Q,[t("a",W,[e("丑数"),n(o)])]),X,t("td",Y,[n(a,{to:"/tag/math.html"},{default:s(()=>[Z]),_:1})]),t("td",$,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[tt,t("td",nt,[t("a",et,[e("完全平方数"),n(o)])]),t("td",st,[n(a,{to:"/problem/0279.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",at,[n(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[ot]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[lt]),_:1}),e(),n(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[ct]),_:1})]),t("td",pt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[it,t("td",dt,[t("a",rt,[e("超级丑数"),n(o)])]),ut,t("td",_t,[n(a,{to:"/tag/array.html"},{default:s(()=>[ht]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[mt]),_:1}),e(),n(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[kt]),_:1})]),t("td",gt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ft,t("td",bt,[t("a",vt,[e("丑数 III"),n(o)])]),yt,t("td",xt,[n(a,{to:"/tag/math.html"},{default:s(()=>[wt]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[qt]),_:1}),e(),n(a,{to:"/tag/combinatorics.html"},{default:s(()=>[It]),_:1}),e(),Et]),t("td",Mt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const jt=p(_,[["render",Nt],["__file","0264.html.vue"]]);export{jt as default};
