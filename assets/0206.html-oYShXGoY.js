import{_ as u,r as c,o as p,c as h,a as t,b as e,d as n,w as s,f as _,e as k}from"./app-HYmO-yoP.js";const m={},f={id:"_206-反转链表",tabindex:"-1"},g=t("a",{class:"header-anchor",href:"#_206-反转链表","aria-hidden":"true"},"#",-1),b={href:"https://leetcode.com/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"递归",-1),v=t("code",null,"链表",-1),y={href:"https://leetcode.com/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"},w=t("code",null,"LeetCode",-1),L=k('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [1,2,3,4,5]</p><p>Output: [5,4,3,2,1]</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: head = [1,2]</p><p>Output: [2,1]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: head = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>有两种解题方法，一是循环、二是递归。</p><h3 id="思路一-循环" tabindex="-1"><a class="header-anchor" href="#思路一-循环" aria-hidden="true">#</a> 思路一：循环</h3><p>使用双指针，遍历链表，并在访问各节点时修改 <code>next</code> 引用指向。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>： <code>O(n)</code>，遍历链表使用线性大小时间。</li><li><strong>空间复杂度</strong>： <code>O(1)</code>，变量 <code>prev</code> 和 <code>cur</code> 使用常数大小额外空间。</li></ul><hr><h3 id="思路二-递归" tabindex="-1"><a class="header-anchor" href="#思路二-递归" aria-hidden="true">#</a> 思路二：递归</h3><p>使用递归法遍历链表，当越过尾节点后终止递归，在回溯时修改各节点的 <code>next</code> 引用指向。</p><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>： <code>O(n)</code>，遍历链表使用线性大小时间。</li><li><strong>空间复杂度</strong>： <code>O(n)</code>，遍历链表的递归深度达到 <code>n</code> ，系统使用 <code>O(n)</code> 大小额外空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',27),N=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("ListNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"head"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("ListNode"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"reverseList"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"head"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" prev "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" cur "),t("span",{class:"token operator"},"="),e(" head"),t("span",{class:"token punctuation"},";"),e(`

	`),t("span",{class:"token keyword"},"while"),e(),t("span",{class:"token punctuation"},"("),e("cur "),t("span",{class:"token operator"},"!=="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
		`),t("span",{class:"token keyword"},"let"),e(" next "),t("span",{class:"token operator"},"="),e(" cur"),t("span",{class:"token punctuation"},"."),e("next"),t("span",{class:"token punctuation"},";"),e(`
		cur`),t("span",{class:"token punctuation"},"."),e("next "),t("span",{class:"token operator"},"="),e(" prev"),t("span",{class:"token punctuation"},";"),e(`
		prev `),t("span",{class:"token operator"},"="),e(" cur"),t("span",{class:"token punctuation"},";"),e(`
		cur `),t("span",{class:"token operator"},"="),e(" next"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token punctuation"},"}"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" prev"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),j=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("ListNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"head"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("ListNode"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"reverseList"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"head"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("head "),t("span",{class:"token operator"},"==="),e(),t("span",{class:"token keyword"},"null"),e(),t("span",{class:"token operator"},"||"),e(" head"),t("span",{class:"token punctuation"},"."),e("next "),t("span",{class:"token operator"},"==="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
		`),t("span",{class:"token keyword"},"return"),e(" head"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token punctuation"},"}"),e(`
	`),t("span",{class:"token keyword"},"const"),e(" last "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token function"},"reverseList"),t("span",{class:"token punctuation"},"("),e("head"),t("span",{class:"token punctuation"},"."),e("next"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	head`),t("span",{class:"token punctuation"},"."),e("next"),t("span",{class:"token punctuation"},"."),e("next "),t("span",{class:"token operator"},"="),e(" head"),t("span",{class:"token punctuation"},";"),e(`
	head`),t("span",{class:"token punctuation"},"."),e("next "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" last"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),C=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),E=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),O=t("td",{style:{"text-align":"center"}},"92",-1),I={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/reverse-linked-list-ii",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"center"}},A={style:{"text-align":"left"}},V=t("code",null,"链表",-1),T={style:{"text-align":"left"}},B=t("td",{style:{"text-align":"center"}},"156",-1),z={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/binary-tree-upside-down",target:"_blank",rel:"noopener noreferrer"},F={style:{"text-align":"center"}},G={style:{"text-align":"left"}},S=t("code",null,"树",-1),D=t("code",null,"深度优先搜索",-1),H=t("code",null,"二叉树",-1),J={style:{"text-align":"left"}},K=t("td",{style:{"text-align":"center"}},"234",-1),P={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/palindrome-linked-list",target:"_blank",rel:"noopener noreferrer"},U={style:{"text-align":"center"}},W={style:{"text-align":"left"}},X=t("code",null,"栈",-1),Y=t("code",null,"递归",-1),Z=t("code",null,"链表",-1),$=t("code",null,"1+",-1),tt={style:{"text-align":"left"}},et=t("td",{style:{"text-align":"center"}},"2074",-1),nt={style:{"text-align":"left"}},st={href:"https://leetcode.com/problems/reverse-nodes-in-even-length-groups",target:"_blank",rel:"noopener noreferrer"},ot=t("td",{style:{"text-align":"center"}},null,-1),at={style:{"text-align":"left"}},lt=t("code",null,"链表",-1),ct={style:{"text-align":"left"}},it=t("td",{style:{"text-align":"center"}},"2130",-1),rt={style:{"text-align":"left"}},dt={href:"https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list",target:"_blank",rel:"noopener noreferrer"},ut=t("td",{style:{"text-align":"center"}},null,-1),pt={style:{"text-align":"left"}},ht=t("code",null,"栈",-1),_t=t("code",null,"链表",-1),kt=t("code",null,"双指针",-1),mt={style:{"text-align":"left"}},ft=t("td",{style:{"text-align":"center"}},"2487",-1),gt={style:{"text-align":"left"}},bt={href:"https://leetcode.com/problems/remove-nodes-from-linked-list",target:"_blank",rel:"noopener noreferrer"},xt=t("td",{style:{"text-align":"center"}},null,-1),vt={style:{"text-align":"left"}},yt=t("code",null,"栈",-1),wt=t("code",null,"递归",-1),Lt=t("code",null,"链表",-1),Nt=t("code",null,"1+",-1),jt={style:{"text-align":"left"}},Ct=t("td",{style:{"text-align":"center"}},"2807",-1),Et={style:{"text-align":"left"}},Ot={href:"https://leetcode.com/problems/insert-greatest-common-divisors-in-linked-list",target:"_blank",rel:"noopener noreferrer"},It=t("td",{style:{"text-align":"center"}},null,-1),qt={style:{"text-align":"left"}},Mt=t("code",null,"链表",-1),At=t("code",null,"数学",-1),Vt=t("code",null,"数论",-1),Tt={style:{"text-align":"left"}};function Bt(zt,Rt){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink"),d=c("CodeTabs");return p(),h("div",null,[t("h1",f,[g,e(),t("a",b,[e("206. 反转链表"),n(a)])]),t("p",null,[e("🟢 "),n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1}),e("  🔖  "),n(o,{to:"/tag/recursion.html"},{default:s(()=>[x]),_:1}),e(),n(o,{to:"/tag/linked-list.html"},{default:s(()=>[v]),_:1}),e("  🔗 "),t("a",y,[w,n(a)])]),L,n(d,{id:"127",data:[{id:"循环"},{id:"递归"}]},{title0:s(({value:i,isActive:r})=>[e("循环")]),title1:s(({value:i,isActive:r})=>[e("递归")]),tab0:s(({value:i,isActive:r})=>[N]),tab1:s(({value:i,isActive:r})=>[j]),_:1}),C,_(" prettier-ignore "),t("table",null,[E,t("tbody",null,[t("tr",null,[O,t("td",I,[t("a",q,[e("反转链表 II"),n(a)])]),t("td",M,[n(o,{to:"/problem/0092.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",A,[n(o,{to:"/tag/linked-list.html"},{default:s(()=>[V]),_:1})]),t("td",T,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[B,t("td",z,[t("a",R,[e("上下翻转二叉树"),n(a)])]),t("td",F,[n(o,{to:"/problem/0156.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",G,[n(o,{to:"/tag/tree.html"},{default:s(()=>[S]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[D]),_:1}),e(),n(o,{to:"/tag/binary-tree.html"},{default:s(()=>[H]),_:1})]),t("td",J,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[K,t("td",P,[t("a",Q,[e("回文链表"),n(a)])]),t("td",U,[n(o,{to:"/problem/0234.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",W,[n(o,{to:"/tag/stack.html"},{default:s(()=>[X]),_:1}),e(),n(o,{to:"/tag/recursion.html"},{default:s(()=>[Y]),_:1}),e(),n(o,{to:"/tag/linked-list.html"},{default:s(()=>[Z]),_:1}),e(),$]),t("td",tt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[et,t("td",nt,[t("a",st,[e("反转偶数长度组的节点"),n(a)])]),ot,t("td",at,[n(o,{to:"/tag/linked-list.html"},{default:s(()=>[lt]),_:1})]),t("td",ct,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[it,t("td",rt,[t("a",dt,[e("链表最大孪生和"),n(a)])]),ut,t("td",pt,[n(o,{to:"/tag/stack.html"},{default:s(()=>[ht]),_:1}),e(),n(o,{to:"/tag/linked-list.html"},{default:s(()=>[_t]),_:1}),e(),n(o,{to:"/tag/two-pointers.html"},{default:s(()=>[kt]),_:1})]),t("td",mt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ft,t("td",gt,[t("a",bt,[e("从链表中移除节点"),n(a)])]),xt,t("td",vt,[n(o,{to:"/tag/stack.html"},{default:s(()=>[yt]),_:1}),e(),n(o,{to:"/tag/recursion.html"},{default:s(()=>[wt]),_:1}),e(),n(o,{to:"/tag/linked-list.html"},{default:s(()=>[Lt]),_:1}),e(),Nt]),t("td",jt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ct,t("td",Et,[t("a",Ot,[e("在链表中插入最大公约数"),n(a)])]),It,t("td",qt,[n(o,{to:"/tag/linked-list.html"},{default:s(()=>[Mt]),_:1}),e(),n(o,{to:"/tag/math.html"},{default:s(()=>[At]),_:1}),e(),n(o,{to:"/tag/number-theory.html"},{default:s(()=>[Vt]),_:1})]),t("td",Tt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const Gt=u(m,[["render",Bt],["__file","0206.html.vue"]]);export{Gt as default};
