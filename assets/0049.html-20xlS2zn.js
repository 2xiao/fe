import{_ as p,r as c,o as i,c as r,a as n,b as t,d as s,w as a,f as u,e as d}from"./app-ZVJfwurD.js";const k={},h={id:"_49-字母异位词分组",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_49-字母异位词分组","aria-hidden":"true"},"#",-1),g={href:"https://2xiao.github.io/leetcode-js/problem/0049.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"数组",-1),m=n("code",null,"哈希表",-1),b=n("code",null,"字符串",-1),v=n("code",null,"排序",-1),y={href:"https://leetcode.cn/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"力扣",-1),q={href:"https://leetcode.com/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"LeetCode",-1),E=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p><p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: strs = [&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;]</p><p>Output: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: strs = [&quot;&quot;]</p><p>Output: [[&quot;&quot;]]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: strs = [&quot;a&quot;]</p><p>Output: [[&quot;a&quot;]]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 10^4</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> consists of lowercase English letters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><ul><li><code>strs[i]</code> 仅包含小写字母</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>异位词这类问题的关键在于，如何迅速判断两个字符串是异位词，主要考察数据编码和哈希表的使用。</p><p>可以尝试找到一种编码方法，使得字母异位词的编码相同？找到这种编码方式之后，就可以用一个哈希表存储编码相同的所有异位词，得到最终的答案。</p><p>对字符串排序可以是一种编码方案，如果是异位词，排序后就变成一样的了，但是这样时间复杂度略高，且会修改原始数据。</p><p>更好的编码方案是利用每个字符的字母出现频率作为键（key）进行编码：</p><ol><li><p><strong>编码字符串</strong>：</p><ul><li>编写一个 <code>encode</code> 函数，该函数接收一个字符串并返回一个表示该字符串字符频率的编码形式。</li><li>这里可以使用一个长度为 26 的数组来记录每个字母的出现次数，然后将这个数组转为字符串作为编码。</li></ul></li><li><p><strong>遍历输入数组</strong>：</p><ul><li>使用一个对象 <code>res</code> 来存储结果，键为编码字符串，值为一个数组，存储所有与该编码字符串对应的原始字符串。</li><li>遍历输入的字符串数组，对于每个字符串： <ul><li>调用 <code>encode</code> 函数获取其编码。</li><li>如果该编码字符串尚未在 <code>res</code> 中存在，则初始化一个空数组。</li><li>将当前字符串添加到对应的数组中。</li></ul></li></ul></li><li><p><strong>返回结果</strong>：</p><ul><li>最后，使用 <code>Object.values(res)</code> 将对象 <code>res</code> 中的所有值（即各个变位词组）作为结果返回。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n * k)</code>，其中 <code>n</code> 是字符串的数量，<code>k</code> 是字符串的平均长度。</p><ul><li>外层循环遍历输入数组 <code>strs</code> 中的每个字符串，总共有 <code>n</code> 个字符串。</li><li>内层循环对每个字符串执行编码操作，需要遍历每个字符串的字符，每个字符串的平均长度为 <code>k</code>。</li><li>因此，时间复杂度为 <code>O(n * k)</code></li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code></p><ul><li>使用一个对象 <code>res</code> 来存储结果，其中每个键对应一个唯一的编码字符串，值是一个包含该编码字符串所有变位词的数组。在最坏情况下，所有字符串都是不同的变位词，因此可能会存储 <code>n</code> 个键值对。</li><li>另外，在 <code>encode</code> 函数中，使用一个长度为 26 的数组 <code>res</code> 来统计每个字符的出现次数，这个数组的大小是固定的，因而不影响总体的空间复杂度。</li><li>因此，总空间复杂度为 <code>O(n)</code>。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">strs</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">groupAnagrams</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> encodeStr <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>encodeStr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			res<span class="token punctuation">[</span>encodeStr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		res<span class="token punctuation">[</span>encodeStr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">encode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> code <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		res<span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,26),O=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),j=n("td",{style:{"text-align":"center"}},"242",-1),C={style:{"text-align":"left"}},A={href:"https://leetcode.com/problems/valid-anagram",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"center"}},L={style:{"text-align":"left"}},N=n("code",null,"哈希表",-1),S=n("code",null,"字符串",-1),V=n("code",null,"排序",-1),B={style:{"text-align":"left"}},M=n("td",{style:{"text-align":"center"}},"249",-1),R={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/group-shifted-strings",target:"_blank",rel:"noopener noreferrer"},H=n("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},Y=n("code",null,"数组",-1),z=n("code",null,"哈希表",-1),D=n("code",null,"字符串",-1),F={style:{"text-align":"left"}},J=n("td",{style:{"text-align":"center"}},"2273",-1),K={style:{"text-align":"left"}},P={href:"https://leetcode.com/problems/find-resultant-array-after-removing-anagrams",target:"_blank",rel:"noopener noreferrer"},Q=n("td",{style:{"text-align":"center"}},null,-1),U={style:{"text-align":"left"}},W=n("code",null,"数组",-1),X=n("code",null,"哈希表",-1),Z=n("code",null,"字符串",-1),$=n("code",null,"1+",-1),nn={style:{"text-align":"left"}},tn=n("td",{style:{"text-align":"center"}},"2514",-1),sn={style:{"text-align":"left"}},an={href:"https://leetcode.com/problems/count-anagrams",target:"_blank",rel:"noopener noreferrer"},en=n("td",{style:{"text-align":"center"}},null,-1),on={style:{"text-align":"left"}},ln=n("code",null,"哈希表",-1),cn=n("code",null,"数学",-1),pn=n("code",null,"字符串",-1),rn=n("code",null,"2+",-1),un={style:{"text-align":"left"}};function dn(kn,hn){const o=c("ExternalLinkIcon"),l=c("font"),e=c("RouterLink");return i(),r("div",null,[n("h1",h,[_,t(),n("a",g,[t("49. 字母异位词分组"),s(o)])]),n("p",null,[t("🟠 "),s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1}),t("  🔖  "),s(e,{to:"/tag/array.html"},{default:a(()=>[f]),_:1}),t(),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[m]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[b]),_:1}),t(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[v]),_:1}),t("  🔗 "),n("a",y,[x,s(o)]),t(),n("a",q,[w,s(o)])]),E,u(" prettier-ignore "),n("table",null,[O,n("tbody",null,[n("tr",null,[j,n("td",C,[n("a",A,[t("有效的字母异位词"),s(o)])]),n("td",I,[s(e,{to:"/problem/0242.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",L,[s(e,{to:"/tag/hash-table.html"},{default:a(()=>[N]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[S]),_:1}),t(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[V]),_:1})]),n("td",B,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[M,n("td",R,[n("a",G,[t("移位字符串分组 🔒"),s(o)])]),H,n("td",T,[s(e,{to:"/tag/array.html"},{default:a(()=>[Y]),_:1}),t(),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[z]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[D]),_:1})]),n("td",F,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[J,n("td",K,[n("a",P,[t("移除字母异位词后的结果数组"),s(o)])]),Q,n("td",U,[s(e,{to:"/tag/array.html"},{default:a(()=>[W]),_:1}),t(),s(e,{to:"/tag/hash-table.html"},{default:a(()=>[X]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[Z]),_:1}),t(),$]),n("td",nn,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[tn,n("td",sn,[n("a",an,[t("统计同位异构字符串数目"),s(o)])]),en,n("td",on,[s(e,{to:"/tag/hash-table.html"},{default:a(()=>[ln]),_:1}),t(),s(e,{to:"/tag/math.html"},{default:a(()=>[cn]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[pn]),_:1}),t(),rn]),n("td",un,[s(l,{color:"#ff334b"},{default:a(()=>[t("Hard")]),_:1})])])])])])}const gn=p(k,[["render",dn],["__file","0049.html.vue"]]);export{gn as default};
