import{_ as p,r as c,o as i,c as r,a as n,b as t,d as s,w as a,f as u,e as d}from"./app-AaR8dgoJ.js";const k={},m=n("h1",{id:"_1671-得到山形数组的最少删除次数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1671-得到山形数组的最少删除次数","aria-hidden":"true"},"#"),t(" 1671. 得到山形数组的最少删除次数")],-1),_=n("code",null,"贪心",-1),h=n("code",null,"数组",-1),g=n("code",null,"二分查找",-1),f=n("code",null,"动态规划",-1),b={href:"https://leetcode.cn/problems/minimum-number-of-removals-to-make-mountain-array",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),L=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You may recall that an array <code>arr</code> is a <strong>mountain array</strong> if and only if:</p><ul><li><code>arr.length &gt;= 3</code></li><li>There exists some index <code>i</code> (<strong>0-indexed</strong>) with <code>0 &lt; i &lt; arr.length - 1</code> such that: <ul><li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li><li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li></ul></li></ul><p>Given an integer array <code>nums</code>​​​, return <em>the <strong>minimum</strong> number of elements to remove to make</em> <code>nums</code> <em>a <strong>mountain array</strong>.</em></p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,3,1]</p><p>Output: 0</p><p>Explanation: The array itself is a mountain array so we do not need to remove any elements.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [2,1,1,5,6,2,3,1]</p><p>Output: 3</p><p>Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li><li>It is guaranteed that you can make a mountain array out of <code>nums</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>我们定义 <code>arr</code> 是 <strong>山形数组</strong> 当且仅当它满足：</p><ul><li><code>arr.length &gt;= 3</code></li><li>存在某个下标 <code>i</code> （<strong>从 0 开始</strong> ） 满足 <code>0 &lt; i &lt; arr.length - 1</code> 且： <ul><li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li><li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li></ul></li></ul><p>给你整数数组 <code>nums</code>​ ，请你返回将 <code>nums</code> 变成 <strong>山形状数组</strong> 的 ​ <strong>最少</strong> 删除次数。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,3,1]</p><p><strong>输出：</strong> 0</p><p><strong>解释：</strong> 数组本身就是山形数组，所以我们不需要删除任何元素。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,1,1,5,6,2,3,1]</p><p><strong>输出：</strong> 3</p><p><strong>解释：</strong> 一种方法是将下标为 0，1 和 5 的元素删除，剩余元素为 [1,5,6,3,1] ，是山形数组。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li><li>题目保证 <code>nums</code> 删除一些元素后一定能得到山形数组。</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题要求我们找出将一个数组转换为山脉数组所需的最小删除次数，一个山脉数组的定义是：数组必须先严格递增然后严格递减。因此，可以讲题目转化为求山脉数组的最大长度，可以利用动态规划来解决这个问题，具体步骤如下：</p><ol><li><p><strong>定义两个动态规划数组</strong>：</p><ul><li><code>LIS[i]</code> 表示以 <code>nums[i]</code> 结尾的最长递增子序列的长度。</li><li><code>LDS[i]</code> 表示以 <code>nums[i]</code> 开头的最长递减子序列的长度。</li></ul></li><li><p><strong>从左到右计算 LIS</strong>：</p><ul><li>遍历数组，对于每个元素 <code>nums[i]</code>，更新其 <code>LIS</code> 值。</li><li><code>LIS[i]</code> 是 <code>1 + max(LIS[j])</code>，其中 <code>j</code> 是所有满足 <code>nums[j] &lt; nums[i]</code> 的索引。</li></ul></li><li><p><strong>从右到左计算 LDS</strong>：</p><ul><li>遍历数组的逆序，对于每个元素 <code>nums[i]</code>，更新其 <code>LDS</code> 值。</li><li><code>LDS[i]</code> 是 <code>1 + max(LDS[j])</code>，其中 <code>j</code> 是所有满足 <code>nums[j] &lt; nums[i]</code> 的索引。</li></ul></li><li><p><strong>计算最大山脉长度</strong>：</p><ul><li>遍历每个元素，检查 <code>LIS[i] &gt; 1</code> 和 <code>LDS[i] &gt; 1</code>，并更新最大山脉长度。</li></ul></li><li><p><strong>返回最小删除次数</strong>：</p><ul><li>最小删除次数等于数组的长度减去最大山脉数组的长度，即 <code>n - maxMountain</code>。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n^2)</code>，其中 <code>n</code> 是数组的长度，由于计算 <code>LIS</code> 和 <code>LDS</code> 时的双重循环。在实际应用中，对于更大的输入，利用其他优化方法，比如二分搜索，可以将复杂度进一步降低至 <code>O(n log n)</code>。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，存储 <code>LIS</code> 和 <code>LDS</code> 需要线性空间。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">minimumMountainRemovals</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token comment">// 需要至少三个元素才能形成山脉</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> <span class="token constant">LIS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token constant">LDS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 计算 LIS</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token constant">LIS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">LIS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">LIS</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 计算 LDS</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token constant">LDS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">LDS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">LDS</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> maxMountain <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token comment">// 计算最大山脉长度</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LIS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">LDS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			maxMountain <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxMountain<span class="token punctuation">,</span> <span class="token constant">LIS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token constant">LDS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 返回最小删除次数</span>
	<span class="token keyword">return</span> n <span class="token operator">-</span> maxMountain<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,28),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),S=n("td",{style:{"text-align":"center"}},"300",-1),I={style:{"text-align":"left"}},j={href:"https://leetcode.com/problems/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},D={style:{"text-align":"center"}},M={style:{"text-align":"left"}},q=n("code",null,"数组",-1),E=n("code",null,"二分查找",-1),O=n("code",null,"动态规划",-1),C={style:{"text-align":"left"}},N=n("td",{style:{"text-align":"center"}},"845",-1),V={style:{"text-align":"left"}},B={href:"https://leetcode.com/problems/longest-mountain-in-array",target:"_blank",rel:"noopener noreferrer"},R={style:{"text-align":"center"}},T={style:{"text-align":"left"}},A=n("code",null,"数组",-1),H=n("code",null,"双指针",-1),G=n("code",null,"动态规划",-1),Y=n("code",null,"1+",-1),z={style:{"text-align":"left"}},F=n("td",{style:{"text-align":"center"}},"852",-1),J={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"center"}},Q={style:{"text-align":"left"}},U=n("code",null,"数组",-1),W=n("code",null,"二分查找",-1),X={style:{"text-align":"left"}},Z=n("td",{style:{"text-align":"center"}},"941",-1),$={style:{"text-align":"left"}},nn={href:"https://leetcode.com/problems/valid-mountain-array",target:"_blank",rel:"noopener noreferrer"},sn=n("td",{style:{"text-align":"center"}},null,-1),tn={style:{"text-align":"left"}},an=n("code",null,"数组",-1),en={style:{"text-align":"left"}},on=n("td",{style:{"text-align":"center"}},"1095",-1),ln={style:{"text-align":"left"}},cn={href:"https://leetcode.com/problems/find-in-mountain-array",target:"_blank",rel:"noopener noreferrer"},pn=n("td",{style:{"text-align":"center"}},null,-1),rn={style:{"text-align":"left"}},un=n("code",null,"数组",-1),dn=n("code",null,"二分查找",-1),kn=n("code",null,"交互",-1),mn={style:{"text-align":"left"}},_n=n("td",{style:{"text-align":"center"}},"2865",-1),hn={style:{"text-align":"left"}},gn={href:"https://leetcode.com/problems/beautiful-towers-i",target:"_blank",rel:"noopener noreferrer"},fn=n("td",{style:{"text-align":"center"}},null,-1),bn={style:{"text-align":"left"}},yn=n("code",null,"栈",-1),vn=n("code",null,"数组",-1),xn=n("code",null,"单调栈",-1),Ln={style:{"text-align":"left"}},wn=n("td",{style:{"text-align":"center"}},"2866",-1),Sn={style:{"text-align":"left"}},In={href:"https://leetcode.com/problems/beautiful-towers-ii",target:"_blank",rel:"noopener noreferrer"},jn=n("td",{style:{"text-align":"center"}},null,-1),Dn={style:{"text-align":"left"}},Mn=n("code",null,"栈",-1),qn=n("code",null,"数组",-1),En=n("code",null,"单调栈",-1),On={style:{"text-align":"left"}};function Cn(Nn,Vn){const l=c("font"),e=c("RouterLink"),o=c("ExternalLinkIcon");return i(),r("div",null,[m,n("p",null,[t("🔴 "),s(l,{color:"#ff334b"},{default:a(()=>[t("Hard")]),_:1}),t("  🔖  "),s(e,{to:"/tag/greedy.html"},{default:a(()=>[_]),_:1}),t(),s(e,{to:"/tag/array.html"},{default:a(()=>[h]),_:1}),t(),s(e,{to:"/tag/binary-search.html"},{default:a(()=>[g]),_:1}),t(),s(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[f]),_:1}),t("  🔗 "),n("a",b,[y,s(o)]),t(),n("a",v,[x,s(o)])]),L,u(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[S,n("td",I,[n("a",j,[t("最长递增子序列"),s(o)])]),n("td",D,[s(e,{to:"/problem/0300.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",M,[s(e,{to:"/tag/array.html"},{default:a(()=>[q]),_:1}),t(),s(e,{to:"/tag/binary-search.html"},{default:a(()=>[E]),_:1}),t(),s(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[O]),_:1})]),n("td",C,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[N,n("td",V,[n("a",B,[t("数组中的最长山脉"),s(o)])]),n("td",R,[s(e,{to:"/problem/0845.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",T,[s(e,{to:"/tag/array.html"},{default:a(()=>[A]),_:1}),t(),s(e,{to:"/tag/two-pointers.html"},{default:a(()=>[H]),_:1}),t(),s(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[G]),_:1}),t(),Y]),n("td",z,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[F,n("td",J,[n("a",K,[t("山脉数组的峰顶索引"),s(o)])]),n("td",P,[s(e,{to:"/problem/0852.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",Q,[s(e,{to:"/tag/array.html"},{default:a(()=>[U]),_:1}),t(),s(e,{to:"/tag/binary-search.html"},{default:a(()=>[W]),_:1})]),n("td",X,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[Z,n("td",$,[n("a",nn,[t("有效的山脉数组"),s(o)])]),sn,n("td",tn,[s(e,{to:"/tag/array.html"},{default:a(()=>[an]),_:1})]),n("td",en,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[on,n("td",ln,[n("a",cn,[t("山脉数组中查找目标值"),s(o)])]),pn,n("td",rn,[s(e,{to:"/tag/array.html"},{default:a(()=>[un]),_:1}),t(),s(e,{to:"/tag/binary-search.html"},{default:a(()=>[dn]),_:1}),t(),s(e,{to:"/tag/interactive.html"},{default:a(()=>[kn]),_:1})]),n("td",mn,[s(l,{color:"#ff334b"},{default:a(()=>[t("Hard")]),_:1})])]),n("tr",null,[_n,n("td",hn,[n("a",gn,[t("美丽塔 I"),s(o)])]),fn,n("td",bn,[s(e,{to:"/tag/stack.html"},{default:a(()=>[yn]),_:1}),t(),s(e,{to:"/tag/array.html"},{default:a(()=>[vn]),_:1}),t(),s(e,{to:"/tag/monotonic-stack.html"},{default:a(()=>[xn]),_:1})]),n("td",Ln,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[wn,n("td",Sn,[n("a",In,[t("美丽塔 II"),s(o)])]),jn,n("td",Dn,[s(e,{to:"/tag/stack.html"},{default:a(()=>[Mn]),_:1}),t(),s(e,{to:"/tag/array.html"},{default:a(()=>[qn]),_:1}),t(),s(e,{to:"/tag/monotonic-stack.html"},{default:a(()=>[En]),_:1})]),n("td",On,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])])])])])}const Rn=p(k,[["render",Cn],["__file","1671.html.vue"]]);export{Rn as default};
