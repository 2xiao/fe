import{_ as i,r as c,o as r,c as p,a as n,b as s,d as t,w as e,f as d,e as u}from"./app-ZVJfwurD.js";const h={},k={id:"_297-二叉树的序列化与反序列化",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_297-二叉树的序列化与反序列化","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0297.html",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"树",-1),g=n("code",null,"深度优先搜索",-1),b=n("code",null,"广度优先搜索",-1),v=n("code",null,"设计",-1),y=n("code",null,"字符串",-1),x=n("code",null,"二叉树",-1),w={href:"https://leetcode.cn/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"力扣",-1),N={href:"https://leetcode.com/problems/serialize-and-deserialize-binary-tree",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"LeetCode",-1),O=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),s(" 题目")],-1),j=n("p",null,"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.",-1),C=n("p",null,"Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.",-1),q=n("strong",null,"Clarification:",-1),E={href:"https://leetcode.com/faq/#binary-tree",target:"_blank",rel:"noopener noreferrer"},L=u(`<p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,2,3,null,null,4,5]</p><p>Output: [1,2,3,null,null,4,5]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 10^4]</code>.</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>设计一个算法，来序列化和反序列化二叉树。并不限制如何进行序列化和反序列化，但是你需要保证二叉树可以序列化为字符串，并且这个字符串可以被反序列化成原有的二叉树。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>序列化其实就是二叉树的遍历，顺手把遍历的结果转化成字符串的形式；</li><li>反序列化就是二叉树的还原，把序列化字符串还原成二叉树；</li><li>以前序遍历为例，前序遍历的特点是根节点在开头，然后是左子树的前序遍历结果，然后是右子树的前序遍历结果；</li><li>序列化时，不存在的结点用 <code>null</code> 填充，左右子树之间用 <code>&#39;,&#39;</code> 分割；</li><li>反序列化过程中，首先将序列化字符串按逗号进行切分，得到一个节点值的列表。然后，通过递归地从这个列表中取值，构建二叉树。反序列化的过程中，每次取第一个值即为当前节点的值，然后递归构建左子树和右子树。</li></ol><h3 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h3><ol><li><p><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是二叉树的节点数量。</p><ul><li><strong><code>serialize</code> 函数</strong>：对每个节点递归调用一次，因此每个节点被访问一次。</li><li><strong><code>deserialize</code> 函数</strong>：通过递归从数组构建二叉树，类似于前序遍历。每个节点会被递归处理一次。</li></ul></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code></p><ul><li><p><strong><code>serialize</code> 函数</strong>：<code>O(n)</code></p><ul><li>递归的调用栈深度同样取决于树的高度，最坏情况下二叉树的高度为 <code>n</code>（链状树），最坏情况下为 <code>O(n)</code>。</li><li>最终生成的字符串的长度大致为 <code>n</code>（每个节点值加上分隔符）。</li></ul></li><li><p><strong><code>deserialize</code> 函数</strong>：<code>O(n)</code></p><ul><li>递归的调用栈深度同样取决于树的高度，最坏情况下为 <code>O(n)</code>。</li><li>存储拆分后的 <code>nodes</code> 数组占用的空间为 <code>O(n)</code>。</li></ul></li></ul></li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * Encodes a tree to a single string.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">serialize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;null&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Decodes your encoded data to tree.
 *
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">data</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">deserialize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">nodes</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">const</span> val <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> root<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> nodes <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,16),V=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),I=n("td",{style:{"text-align":"center"}},"271",-1),B={style:{"text-align":"left"}},M={href:"https://leetcode.com/problems/encode-and-decode-strings",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},R=n("code",null,"设计",-1),S=n("code",null,"数组",-1),Y=n("code",null,"字符串",-1),A={style:{"text-align":"left"}},F=n("td",{style:{"text-align":"center"}},"428",-1),G={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree",target:"_blank",rel:"noopener noreferrer"},K=n("td",{style:{"text-align":"center"}},null,-1),P={style:{"text-align":"left"}},Q=n("code",null,"树",-1),U=n("code",null,"深度优先搜索",-1),W=n("code",null,"广度优先搜索",-1),X=n("code",null,"1+",-1),Z={style:{"text-align":"left"}},$=n("td",{style:{"text-align":"center"}},"449",-1),nn={style:{"text-align":"left"}},sn={href:"https://leetcode.com/problems/serialize-and-deserialize-bst",target:"_blank",rel:"noopener noreferrer"},tn=n("td",{style:{"text-align":"center"}},null,-1),en={style:{"text-align":"left"}},an=n("code",null,"树",-1),on=n("code",null,"深度优先搜索",-1),ln=n("code",null,"广度优先搜索",-1),cn=n("code",null,"4+",-1),rn={style:{"text-align":"left"}},pn=n("td",{style:{"text-align":"center"}},"652",-1),dn={style:{"text-align":"left"}},un={href:"https://leetcode.com/problems/find-duplicate-subtrees",target:"_blank",rel:"noopener noreferrer"},hn=n("td",{style:{"text-align":"center"}},null,-1),kn={style:{"text-align":"left"}},_n=n("code",null,"树",-1),fn=n("code",null,"深度优先搜索",-1),mn=n("code",null,"哈希表",-1),gn=n("code",null,"1+",-1),bn={style:{"text-align":"left"}};function vn(yn,xn){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return r(),p("div",null,[n("h1",k,[_,s(),n("a",f,[s("297. 二叉树的序列化与反序列化"),t(o)])]),n("p",null,[s("🔴 "),t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1}),s("  🔖  "),t(a,{to:"/tag/tree.html"},{default:e(()=>[m]),_:1}),s(),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[b]),_:1}),s(),t(a,{to:"/tag/design.html"},{default:e(()=>[v]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[y]),_:1}),s(),t(a,{to:"/tag/binary-tree.html"},{default:e(()=>[x]),_:1}),s("  🔗 "),n("a",w,[z,t(o)]),s(),n("a",N,[T,t(o)])]),O,j,C,n("p",null,[q,s(" The input/output format is the same as "),n("a",E,[s("how LeetCode serializes a binary tree"),t(o)]),s(". You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.")]),L,d(" prettier-ignore "),n("table",null,[V,n("tbody",null,[n("tr",null,[I,n("td",B,[n("a",M,[s("字符串的编码与解码 🔒"),t(o)])]),D,n("td",H,[t(a,{to:"/tag/design.html"},{default:e(()=>[R]),_:1}),s(),t(a,{to:"/tag/array.html"},{default:e(()=>[S]),_:1}),s(),t(a,{to:"/tag/string.html"},{default:e(()=>[Y]),_:1})]),n("td",A,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[F,n("td",G,[n("a",J,[s("序列化和反序列化 N 叉树 🔒"),t(o)])]),K,n("td",P,[t(a,{to:"/tag/tree.html"},{default:e(()=>[Q]),_:1}),s(),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[U]),_:1}),s(),t(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[W]),_:1}),s(),X]),n("td",Z,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[$,n("td",nn,[n("a",sn,[s("序列化和反序列化二叉搜索树"),t(o)])]),tn,n("td",en,[t(a,{to:"/tag/tree.html"},{default:e(()=>[an]),_:1}),s(),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[on]),_:1}),s(),t(a,{to:"/tag/breadth-first-search.html"},{default:e(()=>[ln]),_:1}),s(),cn]),n("td",rn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[pn,n("td",dn,[n("a",un,[s("寻找重复的子树"),t(o)])]),hn,n("td",kn,[t(a,{to:"/tag/tree.html"},{default:e(()=>[_n]),_:1}),s(),t(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[fn]),_:1}),s(),t(a,{to:"/tag/hash-table.html"},{default:e(()=>[mn]),_:1}),s(),gn]),n("td",bn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const zn=i(h,[["render",vn],["__file","0297.html.vue"]]);export{zn as default};
