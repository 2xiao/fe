import{_ as p,r as c,o as d,c as _,a as t,b as n,d as e,w as s,f as k,e as h}from"./app-zLZrqgWi.js";const f={},m={id:"_102-二叉树的层序遍历",tabindex:"-1"},b=t("a",{class:"header-anchor",href:"#_102-二叉树的层序遍历","aria-hidden":"true"},"#",-1),g={href:"https://2xiao.github.io/leetcode-js/problem/0102.html",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"树",-1),v=t("code",null,"广度优先搜索",-1),x=t("code",null,"二叉树",-1),w={href:"https://leetcode.cn/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"力扣",-1),E={href:"https://leetcode.com/problems/binary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},N=t("code",null,"LeetCode",-1),S=h('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes &#39; values</em>. (i.e., from left to right, level by level).</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,9,20,null,null,15,7]</p><p>Output: [[3],[9,20],[15,7]]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = [1]</p><p>Output: [[1]]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>层序</strong> 遍历。（即逐层地，从左到右访问所有节点）。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-广度优先遍历-bfs" tabindex="-1"><a class="header-anchor" href="#思路一-广度优先遍历-bfs" aria-hidden="true">#</a> 思路一：广度优先遍历(BFS)</h3><ul><li>使用队列实现</li></ul><ol><li>首先将根节点放入队列中；</li><li>更新队列的长度 <code>len</code> ，遍历队列的前 <code>len</code> 个节点；</li><li>如果该节点存在直接子节点，将直接子节点加入队列中，并将节点的值存入一个临时数组中；</li><li>将队列的前 <code>len</code> 个节点出队，此时队列中都是下一层的子节点，将临时数组加入返回值中；</li><li>重复步骤 2、3、4，直至队列为空；</li></ol><hr><h3 id="思路二-深度优先遍历-dfs" tabindex="-1"><a class="header-anchor" href="#思路二-深度优先遍历-dfs" aria-hidden="true">#</a> 思路二：深度优先遍历(DFS)</h3><ol><li>维护一个递归函数，参数为节点和该节点的深度</li><li>先将根节点与深度 0 传入递归函数</li><li>将节点放入 index 与深度对应的数组内</li><li>将节点的左子节点和右子节点分别传入递归函数，深度 +1</li><li>重复步骤 3、4，直至子节点为空</li></ol><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',21),j=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token comment"},"// 思路一：广度优先遍历(BFS)"),n(`
`),t("span",{class:"token doc-comment comment"},[n(`/**
 * `),t("span",{class:"token keyword"},"@param"),n(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),n("TreeNode"),t("span",{class:"token punctuation"},"}")]),n(),t("span",{class:"token parameter"},"root"),n(`
 * `),t("span",{class:"token keyword"},"@return"),n(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),n("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),n(`
 */`)]),n(`
`),t("span",{class:"token keyword"},"var"),n(),t("span",{class:"token function-variable function"},"levelOrder"),n(),t("span",{class:"token operator"},"="),n(),t("span",{class:"token keyword"},"function"),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
	`),t("span",{class:"token keyword"},"let"),n(" res "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),n(`
	`),t("span",{class:"token keyword"},"if"),n(),t("span",{class:"token punctuation"},"("),n("root "),t("span",{class:"token operator"},"=="),n(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token keyword"},"return"),n(" res"),t("span",{class:"token punctuation"},";"),n(`
	`),t("span",{class:"token keyword"},"let"),n(" queue "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"["),n("root"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),n(`

	`),t("span",{class:"token keyword"},"while"),n(),t("span",{class:"token punctuation"},"("),n("queue"),t("span",{class:"token punctuation"},"."),n("length"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
		`),t("span",{class:"token keyword"},"let"),n(" len "),t("span",{class:"token operator"},"="),n(" queue"),t("span",{class:"token punctuation"},"."),n("length"),t("span",{class:"token punctuation"},";"),n(`
		`),t("span",{class:"token keyword"},"let"),n(" temp "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),n(`
		`),t("span",{class:"token keyword"},"for"),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"let"),n(" i "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},";"),n(" i "),t("span",{class:"token operator"},"<"),n(" len"),t("span",{class:"token punctuation"},";"),n(" i"),t("span",{class:"token operator"},"++"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
			`),t("span",{class:"token keyword"},"if"),n(),t("span",{class:"token punctuation"},"("),n("queue"),t("span",{class:"token punctuation"},"["),n("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),n("left"),t("span",{class:"token punctuation"},")"),n(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),n("queue"),t("span",{class:"token punctuation"},"["),n("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),n("left"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
			`),t("span",{class:"token keyword"},"if"),n(),t("span",{class:"token punctuation"},"("),n("queue"),t("span",{class:"token punctuation"},"["),n("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),n("right"),t("span",{class:"token punctuation"},")"),n(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),n("queue"),t("span",{class:"token punctuation"},"["),n("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),n("right"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
			temp`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),n("queue"),t("span",{class:"token punctuation"},"["),n("i"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),n("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
		`),t("span",{class:"token punctuation"},"}"),n(`
		queue `),t("span",{class:"token operator"},"="),n(" queue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"slice"),t("span",{class:"token punctuation"},"("),n("len"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
		res`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),n("temp"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
	`),t("span",{class:"token punctuation"},"}"),n(`
	`),t("span",{class:"token keyword"},"return"),n(" res"),t("span",{class:"token punctuation"},";"),n(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),n(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),F=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token comment"},"// 思路二：深度优先遍历(DFS)"),n(`
`),t("span",{class:"token doc-comment comment"},[n(`/**
 * `),t("span",{class:"token keyword"},"@param"),n(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),n("TreeNode"),t("span",{class:"token punctuation"},"}")]),n(),t("span",{class:"token parameter"},"root"),n(`
 * `),t("span",{class:"token keyword"},"@return"),n(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),n("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),n(`
 */`)]),n(`
`),t("span",{class:"token keyword"},"var"),n(),t("span",{class:"token function-variable function"},"levelOrder"),n(),t("span",{class:"token operator"},"="),n(),t("span",{class:"token keyword"},"function"),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
	`),t("span",{class:"token keyword"},"let"),n(" res "),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),n(`
	`),t("span",{class:"token keyword"},"const"),n(),t("span",{class:"token function-variable function"},"traverse"),n(),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},[n("node"),t("span",{class:"token punctuation"},","),n(" deep")]),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token operator"},"=>"),n(),t("span",{class:"token punctuation"},"{"),n(`
		`),t("span",{class:"token keyword"},"if"),n(),t("span",{class:"token punctuation"},"("),n("node "),t("span",{class:"token operator"},"=="),n(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token keyword"},"return"),t("span",{class:"token punctuation"},";"),n(`
		`),t("span",{class:"token keyword"},"if"),n(),t("span",{class:"token punctuation"},"("),n("res"),t("span",{class:"token punctuation"},"."),n("length "),t("span",{class:"token operator"},"=="),n(" deep"),t("span",{class:"token punctuation"},")"),n(),t("span",{class:"token punctuation"},"{"),n(`
			res`),t("span",{class:"token punctuation"},"["),n("deep"),t("span",{class:"token punctuation"},"]"),n(),t("span",{class:"token operator"},"="),n(),t("span",{class:"token punctuation"},"["),n("node"),t("span",{class:"token punctuation"},"."),n("val"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),n(`
		`),t("span",{class:"token punctuation"},"}"),n(),t("span",{class:"token keyword"},"else"),n(),t("span",{class:"token punctuation"},"{"),n(`
			res`),t("span",{class:"token punctuation"},"["),n("deep"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),n("node"),t("span",{class:"token punctuation"},"."),n("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
		`),t("span",{class:"token punctuation"},"}"),n(`
		`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),n("node"),t("span",{class:"token punctuation"},"."),n("left"),t("span",{class:"token punctuation"},","),n(" deep "),t("span",{class:"token operator"},"+"),n(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
		`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),n("node"),t("span",{class:"token punctuation"},"."),n("right"),t("span",{class:"token punctuation"},","),n(" deep "),t("span",{class:"token operator"},"+"),n(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
	`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),n(`
	`),t("span",{class:"token function"},"traverse"),t("span",{class:"token punctuation"},"("),n("root"),t("span",{class:"token punctuation"},","),n(),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),n(`
	`),t("span",{class:"token keyword"},"return"),n(" res"),t("span",{class:"token punctuation"},";"),n(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),n(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),B=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),n(" 相关题目")],-1),C=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),I=t("td",{style:{"text-align":"center"}},"103",-1),M={style:{"text-align":"left"}},T={href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},O={style:{"text-align":"left"}},V=t("code",null,"树",-1),A=t("code",null,"广度优先搜索",-1),D=t("code",null,"二叉树",-1),z={style:{"text-align":"left"}},R=t("td",{style:{"text-align":"center"}},"107",-1),G={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii",target:"_blank",rel:"noopener noreferrer"},J={style:{"text-align":"center"}},K={style:{"text-align":"left"}},P=t("code",null,"树",-1),Q=t("code",null,"广度优先搜索",-1),U=t("code",null,"二叉树",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"111",-1),Y={style:{"text-align":"left"}},Z={href:"https://leetcode.com/problems/minimum-depth-of-binary-tree",target:"_blank",rel:"noopener noreferrer"},$={style:{"text-align":"center"}},tt={style:{"text-align":"left"}},nt=t("code",null,"树",-1),et=t("code",null,"深度优先搜索",-1),st=t("code",null,"广度优先搜索",-1),at=t("code",null,"1+",-1),ot={style:{"text-align":"left"}},lt=t("td",{style:{"text-align":"center"}},"314",-1),ct={style:{"text-align":"left"}},it={href:"https://leetcode.com/problems/binary-tree-vertical-order-traversal",target:"_blank",rel:"noopener noreferrer"},rt=t("td",{style:{"text-align":"center"}},null,-1),ut={style:{"text-align":"left"}},pt=t("code",null,"树",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),kt=t("code",null,"3+",-1),ht={style:{"text-align":"left"}},ft=t("td",{style:{"text-align":"center"}},"429",-1),mt={style:{"text-align":"left"}},bt={href:"https://leetcode.com/problems/n-ary-tree-level-order-traversal",target:"_blank",rel:"noopener noreferrer"},gt=t("td",{style:{"text-align":"center"}},null,-1),yt={style:{"text-align":"left"}},vt=t("code",null,"树",-1),xt=t("code",null,"广度优先搜索",-1),wt={style:{"text-align":"left"}},qt=t("td",{style:{"text-align":"center"}},"637",-1),Et={style:{"text-align":"left"}},Nt={href:"https://leetcode.com/problems/average-of-levels-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},St={style:{"text-align":"center"}},jt={style:{"text-align":"left"}},Ft=t("code",null,"树",-1),Bt=t("code",null,"深度优先搜索",-1),Ct=t("code",null,"广度优先搜索",-1),It=t("code",null,"1+",-1),Mt={style:{"text-align":"left"}},Tt=t("td",{style:{"text-align":"center"}},"993",-1),Lt={style:{"text-align":"left"}},Ot={href:"https://leetcode.com/problems/cousins-in-binary-tree",target:"_blank",rel:"noopener noreferrer"},Vt=t("td",{style:{"text-align":"center"}},null,-1),At={style:{"text-align":"left"}},Dt=t("code",null,"树",-1),zt=t("code",null,"深度优先搜索",-1),Rt=t("code",null,"广度优先搜索",-1),Gt=t("code",null,"1+",-1),Ht={style:{"text-align":"left"}},Jt=t("td",{style:{"text-align":"center"}},"2471",-1),Kt={style:{"text-align":"left"}},Pt={href:"https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level",target:"_blank",rel:"noopener noreferrer"},Qt=t("td",{style:{"text-align":"center"}},null,-1),Ut={style:{"text-align":"left"}},Wt=t("code",null,"树",-1),Xt=t("code",null,"广度优先搜索",-1),Yt=t("code",null,"二叉树",-1),Zt={style:{"text-align":"left"}},$t=t("td",{style:{"text-align":"center"}},"2493",-1),tn={style:{"text-align":"left"}},nn={href:"https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},en=t("td",{style:{"text-align":"center"}},null,-1),sn={style:{"text-align":"left"}},an=t("code",null,"广度优先搜索",-1),on=t("code",null,"并查集",-1),ln=t("code",null,"图",-1),cn={style:{"text-align":"left"}};function rn(un,pn){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink"),u=c("CodeTabs");return d(),_("div",null,[t("h1",m,[b,n(),t("a",g,[n("102. 二叉树的层序遍历"),e(o)])]),t("p",null,[n("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/tag/tree.html"},{default:s(()=>[y]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[v]),_:1}),n(),e(a,{to:"/tag/binary-tree.html"},{default:s(()=>[x]),_:1}),n("  🔗 "),t("a",w,[q,e(o)]),n(),t("a",E,[N,e(o)])]),S,e(u,{id:"143",data:[{id:"广度优先遍历(BFS)"},{id:"深度优先遍历(DFS)"}]},{title0:s(({value:i,isActive:r})=>[n("广度优先遍历(BFS)")]),title1:s(({value:i,isActive:r})=>[n("深度优先遍历(DFS)")]),tab0:s(({value:i,isActive:r})=>[j]),tab1:s(({value:i,isActive:r})=>[F]),_:1}),B,k(" prettier-ignore "),t("table",null,[C,t("tbody",null,[t("tr",null,[I,t("td",M,[t("a",T,[n("二叉树的锯齿形层序遍历"),e(o)])]),t("td",L,[e(a,{to:"/problem/0103.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",O,[e(a,{to:"/tag/tree.html"},{default:s(()=>[V]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[A]),_:1}),n(),e(a,{to:"/tag/binary-tree.html"},{default:s(()=>[D]),_:1})]),t("td",z,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[R,t("td",G,[t("a",H,[n("二叉树的层序遍历 II"),e(o)])]),t("td",J,[e(a,{to:"/problem/0107.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",K,[e(a,{to:"/tag/tree.html"},{default:s(()=>[P]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[Q]),_:1}),n(),e(a,{to:"/tag/binary-tree.html"},{default:s(()=>[U]),_:1})]),t("td",W,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[X,t("td",Y,[t("a",Z,[n("二叉树的最小深度"),e(o)])]),t("td",$,[e(a,{to:"/problem/0111.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",tt,[e(a,{to:"/tag/tree.html"},{default:s(()=>[nt]),_:1}),n(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[et]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[st]),_:1}),n(),at]),t("td",ot,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[lt,t("td",ct,[t("a",it,[n("二叉树的垂直遍历 🔒"),e(o)])]),rt,t("td",ut,[e(a,{to:"/tag/tree.html"},{default:s(()=>[pt]),_:1}),n(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[dt]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[_t]),_:1}),n(),kt]),t("td",ht,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[ft,t("td",mt,[t("a",bt,[n("N 叉树的层序遍历"),e(o)])]),gt,t("td",yt,[e(a,{to:"/tag/tree.html"},{default:s(()=>[vt]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[xt]),_:1})]),t("td",wt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[qt,t("td",Et,[t("a",Nt,[n("二叉树的层平均值"),e(o)])]),t("td",St,[e(a,{to:"/problem/0637.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",jt,[e(a,{to:"/tag/tree.html"},{default:s(()=>[Ft]),_:1}),n(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[Bt]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[Ct]),_:1}),n(),It]),t("td",Mt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[Tt,t("td",Lt,[t("a",Ot,[n("二叉树的堂兄弟节点"),e(o)])]),Vt,t("td",At,[e(a,{to:"/tag/tree.html"},{default:s(()=>[Dt]),_:1}),n(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[zt]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[Rt]),_:1}),n(),Gt]),t("td",Ht,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[Jt,t("td",Kt,[t("a",Pt,[n("逐层排序二叉树所需的最少操作数目"),e(o)])]),Qt,t("td",Ut,[e(a,{to:"/tag/tree.html"},{default:s(()=>[Wt]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[Xt]),_:1}),n(),e(a,{to:"/tag/binary-tree.html"},{default:s(()=>[Yt]),_:1})]),t("td",Zt,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[$t,t("td",tn,[t("a",nn,[n("将节点分成尽可能多的组"),e(o)])]),en,t("td",sn,[e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[an]),_:1}),n(),e(a,{to:"/tag/union-find.html"},{default:s(()=>[on]),_:1}),n(),e(a,{to:"/tag/graph.html"},{default:s(()=>[ln]),_:1})]),t("td",cn,[e(l,{color:"#ff334b"},{default:s(()=>[n("Hard")]),_:1})])])])])])}const _n=p(f,[["render",rn],["__file","0102.html.vue"]]);export{_n as default};
