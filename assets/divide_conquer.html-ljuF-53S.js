import{_ as a,r as _,o as i,c,f as d,a as t,d as o,b as e,w as l}from"./app-ynO5B_DP.js";const h={},u=t("h1",{id:"_3-3-分治算法",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_3-3-分治算法","aria-hidden":"true"},"#"),o(" 3.3 分治算法")],-1),f=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),o(" 相关题目")],-1),g=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),m=t("td",{style:{"text-align":"center"}},"4",-1),x={style:{"text-align":"left"}},y={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},p={style:{"text-align":"center"}},b={href:"/problem/0004",target:"_blank",rel:"noopener noreferrer"},k={style:{"text-align":"left"}},E=t("code",null,"数组",-1),T=t("code",null,"二分查找",-1),v=t("code",null,"分治",-1),N={style:{"text-align":"left"}},q=t("td",{style:{"text-align":"center"}},"23",-1),w={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},L={style:{"text-align":"center"}},R={href:"/problem/0023",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"left"}},B=t("code",null,"链表",-1),C=t("code",null,"分治",-1),D=t("code",null,"堆（优先队列）",-1),M=t("code",null,"1+",-1),O={style:{"text-align":"left"}},S=t("td",{style:{"text-align":"center"}},"53",-1),V={style:{"text-align":"left"}},H={href:"https://leetcode.com/problems/maximum-subarray",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"center"}},j={href:"/problem/0053",target:"_blank",rel:"noopener noreferrer"},z={style:{"text-align":"left"}},U=t("code",null,"数组",-1),K=t("code",null,"分治",-1),F=t("code",null,"动态规划",-1),G={style:{"text-align":"left"}},J=t("td",{style:{"text-align":"center"}},"241",-1),Q={style:{"text-align":"left"}},W={href:"https://leetcode.com/problems/different-ways-to-add-parentheses",target:"_blank",rel:"noopener noreferrer"},X=t("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},Z=t("code",null,"递归",-1),$=t("code",null,"记忆化搜索",-1),tt=t("code",null,"数学",-1),et=t("code",null,"2+",-1),ot={style:{"text-align":"left"}},lt=t("td",{style:{"text-align":"center"}},"169",-1),nt={style:{"text-align":"left"}},st={href:"https://leetcode.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"},rt={style:{"text-align":"center"}},dt={href:"/problem/0169",target:"_blank",rel:"noopener noreferrer"},_t={style:{"text-align":"left"}},at=t("code",null,"数组",-1),it=t("code",null,"哈希表",-1),ct=t("code",null,"分治",-1),ht=t("code",null,"2+",-1),ut={style:{"text-align":"left"}},ft=t("td",{style:{"text-align":"center"}},"50",-1),gt={style:{"text-align":"left"}},mt={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},xt={style:{"text-align":"center"}},yt={href:"/problem/0050",target:"_blank",rel:"noopener noreferrer"},pt={style:{"text-align":"left"}},bt=t("code",null,"递归",-1),kt=t("code",null,"数学",-1),Et={style:{"text-align":"left"}},Tt=t("td",{style:{"text-align":"center"}},"14",-1),vt={style:{"text-align":"left"}},Nt={href:"https://leetcode.com/problems/longest-common-prefix",target:"_blank",rel:"noopener noreferrer"},qt={style:{"text-align":"center"}},wt={href:"/problem/0014",target:"_blank",rel:"noopener noreferrer"},It={style:{"text-align":"left"}},Lt=t("code",null,"字典树",-1),Rt=t("code",null,"字符串",-1),At={style:{"text-align":"left"}},Bt=t("td",{style:{"text-align":"center"}},"剑指 Offer 33",-1),Ct={style:{"text-align":"left"}},Dt={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"},Mt={style:{"text-align":"center"}},Ot={href:"/problem/jz_offer_33_1",target:"_blank",rel:"noopener noreferrer"},St={style:{"text-align":"left"}},Vt=t("code",null,"栈",-1),Ht=t("code",null,"树",-1),Pt=t("code",null,"二叉搜索树",-1),jt=t("code",null,"4+",-1),zt={style:{"text-align":"left"}};function Ut(Kt,Ft){const s=_("ExternalLinkIcon"),n=_("RouterLink"),r=_("font");return i(),c("div",null,[u,d(" START TABLE "),d(" Please keep comment here to allow auto update "),d(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),f,d(" prettier-ignore "),t("table",null,[g,t("tbody",null,[t("tr",null,[m,t("td",x,[t("a",y,[o("寻找两个正序数组的中位数"),e(s)])]),t("td",p,[t("a",b,[o("[✓]"),e(s)])]),t("td",k,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[v]),_:1})]),t("td",N,[e(r,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[q,t("td",w,[t("a",I,[o("合并 K 个升序链表"),e(s)])]),t("td",L,[t("a",R,[o("[✓]"),e(s)])]),t("td",A,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[B]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[D]),_:1}),o(),M]),t("td",O,[e(r,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[S,t("td",V,[t("a",H,[o("最大子数组和"),e(s)])]),t("td",P,[t("a",j,[o("[✓]"),e(s)])]),t("td",z,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[K]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[F]),_:1})]),t("td",G,[e(r,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[J,t("td",Q,[t("a",W,[o("为运算表达式设计优先级"),e(s)])]),X,t("td",Y,[e(n,{to:"/outline/tag/recursion.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[tt]),_:1}),o(),et]),t("td",ot,[e(r,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[lt,t("td",nt,[t("a",st,[o("多数元素"),e(s)])]),t("td",rt,[t("a",dt,[o("[✓]"),e(s)])]),t("td",_t,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[ct]),_:1}),o(),ht]),t("td",ut,[e(r,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[ft,t("td",gt,[t("a",mt,[o("Pow(x, n)"),e(s)])]),t("td",xt,[t("a",yt,[o("[✓]"),e(s)])]),t("td",pt,[e(n,{to:"/outline/tag/recursion.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/outline/tag/math.html"},{default:l(()=>[kt]),_:1})]),t("td",Et,[e(r,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Tt,t("td",vt,[t("a",Nt,[o("最长公共前缀"),e(s)])]),t("td",qt,[t("a",wt,[o("[✓]"),e(s)])]),t("td",It,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[Lt]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Rt]),_:1})]),t("td",At,[e(r,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Bt,t("td",Ct,[t("a",Dt,[o("二叉搜索树的后序遍历序列"),e(s)])]),t("td",Mt,[t("a",Ot,[o("[✓]"),e(s)])]),t("td",St,[e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[Vt]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[Ht]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[Pt]),_:1}),o(),jt]),t("td",zt,[e(r,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])])])])])}const Jt=a(h,[["render",Ut],["__file","divide_conquer.html.vue"]]);export{Jt as default};
