import{_ as p,r as c,o as r,c as i,a as n,b as t,d as s,w as e,f as d,e as u}from"./app-ZVJfwurD.js";const h={},k={id:"_50-pow-x-n",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_50-pow-x-n","aria-hidden":"true"},"#",-1),m={href:"https://2xiao.github.io/leetcode-js/problem/0050.html",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"递归",-1),b=n("code",null,"数学",-1),x={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"LeetCode",-1),w=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),t(" 题目")],-1),E={href:"http://www.cplusplus.com/reference/valarray/pow/",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"x",-1),I=n("code",null,"n",-1),C=n("code",null,"xn",-1),L=u(`<p><strong>Example 1:</strong></p><blockquote><p>Input: x = 2.00000, n = 10</p><p>Output: 1024.00000</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: x = 2.10000, n = 3</p><p>Output: 9.26100</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: x = 2.00000, n = -2</p><p>Output: 0.25000</p><p>Explanation: 2-2 = 1/22 = 1/4 = 0.25</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>-100.0 &lt; x &lt; 100.0</code></li><li><code>-2^31 &lt;= n &lt;= 2^31-1</code></li><li><code>n</code> is an integer.</li><li>Either <code>x</code> is not zero or <code>n &gt; 0</code>.</li><li><code>-10^4 &lt;= xn &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>直接循环相乘可能会超时，因为做了很多重复计算，可以使用二分法来避免重复计算。</p><ul><li>用递归的方式，不断的将 <code>n</code> 二分下去，每次计算 <code>myPow(x, Math.floor(n / 2))</code>;</li><li>注意 <code>n</code> 为负数时，要提前处理 <code>x</code>；</li><li>注意 <code>n</code> 为奇数时，要手动多乘上一个被省略的 <code>x</code>；</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(log n)</code></li><li><strong>空间复杂度</strong>: <code>O(1)</code></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">n</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">myPow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>
		n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> temp <span class="token operator">*</span> temp <span class="token operator">*</span> x<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> temp <span class="token operator">*</span> temp<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),M=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),N=n("td",{style:{"text-align":"center"}},"69",-1),O={style:{"text-align":"left"}},V={href:"https://leetcode.com/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},j={style:{"text-align":"center"}},P={style:{"text-align":"left"}},B=n("code",null,"数学",-1),R=n("code",null,"二分查找",-1),z={style:{"text-align":"left"}},S=n("td",{style:{"text-align":"center"}},"372",-1),T={style:{"text-align":"left"}},A={href:"https://leetcode.com/problems/super-pow",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"center"}},null,-1),F={style:{"text-align":"left"}},G=n("code",null,"数学",-1),H=n("code",null,"分治",-1),J={style:{"text-align":"left"}},K=n("td",{style:{"text-align":"center"}},"2550",-1),Q={style:{"text-align":"left"}},U={href:"https://leetcode.com/problems/count-collisions-of-monkeys-on-a-polygon",target:"_blank",rel:"noopener noreferrer"},W=n("td",{style:{"text-align":"center"}},null,-1),X={style:{"text-align":"left"}},Y=n("code",null,"递归",-1),Z=n("code",null,"数学",-1),$={style:{"text-align":"left"}};function nn(tn,sn){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return r(),i("div",null,[n("h1",k,[_,t(),n("a",m,[t("50. Pow(x, n)"),s(o)])]),n("p",null,[t("🟠 "),s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔖  "),s(a,{to:"/tag/recursion.html"},{default:e(()=>[f]),_:1}),t(),s(a,{to:"/tag/math.html"},{default:e(()=>[b]),_:1}),t("  🔗 "),n("a",x,[g,s(o)]),t(),n("a",v,[y,s(o)])]),w,n("p",null,[t("Implement "),n("a",E,[t("pow(x, n)"),s(o)]),t(", which calculates "),q,t(" raised to the power "),I,t(" (i.e., "),C,t(").")]),L,d(" prettier-ignore "),n("table",null,[M,n("tbody",null,[n("tr",null,[N,n("td",O,[n("a",V,[t("x 的平方根"),s(o)])]),n("td",j,[s(a,{to:"/problem/0069.html"},{default:e(()=>[t("[✓]")]),_:1})]),n("td",P,[s(a,{to:"/tag/math.html"},{default:e(()=>[B]),_:1}),t(),s(a,{to:"/tag/binary-search.html"},{default:e(()=>[R]),_:1})]),n("td",z,[s(l,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1})])]),n("tr",null,[S,n("td",T,[n("a",A,[t("超级次方"),s(o)])]),D,n("td",F,[s(a,{to:"/tag/math.html"},{default:e(()=>[G]),_:1}),t(),s(a,{to:"/tag/divide-and-conquer.html"},{default:e(()=>[H]),_:1})]),n("td",J,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[K,n("td",Q,[n("a",U,[t("猴子碰撞的方法数"),s(o)])]),W,n("td",X,[s(a,{to:"/tag/recursion.html"},{default:e(()=>[Y]),_:1}),t(),s(a,{to:"/tag/math.html"},{default:e(()=>[Z]),_:1})]),n("td",$,[s(l,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])])])}const an=p(h,[["render",nn],["__file","0050.html.vue"]]);export{an as default};
