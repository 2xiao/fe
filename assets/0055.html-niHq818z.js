import{_ as r,r as c,o as i,c as d,a as t,b as n,d as e,w as s,f as p,e as u}from"./app-PpWft8bW.js";const _={},h={id:"_55-跳跃游戏",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_55-跳跃游戏","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0055.html",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"贪心",-1),k=t("code",null,"数组",-1),b=t("code",null,"动态规划",-1),x={href:"https://leetcode.cn/problems/jump-game",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/jump-game",target:"_blank",rel:"noopener noreferrer"},w=t("code",null,"LeetCode",-1),I=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given an integer array <code>nums</code>. You are initially positioned at the array&#39;s <strong>first index</strong> , and each element in the array represents your maximum jump length at that position.</p><p>Return <code>true</code> <em>if you can reach the last index, or</em><code>false</code> <em>otherwise</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [2,3,1,1,4]</p><p>Output: true</p><p>Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [3,2,1,0,4]</p><p>Output: false</p><p>Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>0 &lt;= nums[i] &lt;= 10^5</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums = [2,3,1,1,4]</p><p>输出：true</p><p>解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums = [3,2,1,0,4]</p><p>输出：false</p><p>解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</p></blockquote><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>这道题表面上不是求最值，但是可以改一改：</p><p>请问通过题目中的跳跃规则，最多能跳多远？如果能够越过最后一格，返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p>所以解题关键在于求出能够跳到的最远距离。</p><ol><li>遍历数组，不断计算能跳到的最远距离；</li><li>当最远距离小于当前 <code>index</code> 时，可能是遇到了 0，卡住跳不动了（要排除最后一跳为 0 的情况）；</li><li>遍历结束后，判断能跳到的最远距离，是否大于等于数组的最后一位。</li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，其中 <code>n</code> 是 <code>nums</code> 数组的长度，遍历了整个数组。</li><li><strong>空间复杂度</strong>: <code>O(1)</code>，使用了常数个变量来存储中间状态。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">canJump</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 不断计算能跳到的最远距离</span>
		max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 可能碰到了 0，卡住跳不动了</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> max <span class="token operator">&gt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,26),j=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),q=t("td",{style:{"text-align":"center"}},"45",-1),E={style:{"text-align":"left"}},M={href:"https://leetcode.com/problems/jump-game-ii",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"center"}},C={style:{"text-align":"left"}},L=t("code",null,"贪心",-1),N=t("code",null,"数组",-1),O=t("code",null,"动态规划",-1),B={style:{"text-align":"left"}},R=t("td",{style:{"text-align":"center"}},"1306",-1),Y={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/jump-game-iii",target:"_blank",rel:"noopener noreferrer"},H=t("td",{style:{"text-align":"center"}},null,-1),S={style:{"text-align":"left"}},T=t("code",null,"深度优先搜索",-1),z=t("code",null,"广度优先搜索",-1),A=t("code",null,"数组",-1),D={style:{"text-align":"left"}},F=t("td",{style:{"text-align":"center"}},"1871",-1),G={style:{"text-align":"left"}},K={href:"https://leetcode.com/problems/jump-game-vii",target:"_blank",rel:"noopener noreferrer"},P=t("td",{style:{"text-align":"center"}},null,-1),Q={style:{"text-align":"left"}},U=t("code",null,"字符串",-1),W=t("code",null,"动态规划",-1),X=t("code",null,"前缀和",-1),Z=t("code",null,"1+",-1),$={style:{"text-align":"left"}},tt=t("td",{style:{"text-align":"center"}},"2297",-1),et={style:{"text-align":"left"}},nt={href:"https://leetcode.com/problems/jump-game-viii",target:"_blank",rel:"noopener noreferrer"},st=t("td",{style:{"text-align":"center"}},null,-1),at={style:{"text-align":"left"}},ot=t("code",null,"栈",-1),lt=t("code",null,"图",-1),ct=t("code",null,"数组",-1),rt=t("code",null,"3+",-1),it={style:{"text-align":"left"}},dt=t("td",{style:{"text-align":"center"}},"2617",-1),pt={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/minimum-number-of-visited-cells-in-a-grid",target:"_blank",rel:"noopener noreferrer"},_t=t("td",{style:{"text-align":"center"}},null,-1),ht={style:{"text-align":"left"}},mt=t("code",null,"栈",-1),ft=t("code",null,"广度优先搜索",-1),gt=t("code",null,"并查集",-1),kt=t("code",null,"5+",-1),bt={style:{"text-align":"left"}},xt=t("td",{style:{"text-align":"center"}},"2789",-1),yt={style:{"text-align":"left"}},vt={href:"https://leetcode.com/problems/largest-element-in-an-array-after-merge-operations",target:"_blank",rel:"noopener noreferrer"},wt=t("td",{style:{"text-align":"center"}},null,-1),It={style:{"text-align":"left"}},jt=t("code",null,"贪心",-1),qt=t("code",null,"数组",-1),Et={style:{"text-align":"left"}};function Mt(Vt,Ct){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),d("div",null,[t("h1",h,[m,n(),t("a",f,[n("55. 跳跃游戏"),e(o)])]),t("p",null,[n("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1}),n("  🔖  "),e(a,{to:"/tag/greedy.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[k]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[b]),_:1}),n("  🔗 "),t("a",x,[y,e(o)]),n(),t("a",v,[w,e(o)])]),I,p(" prettier-ignore "),t("table",null,[j,t("tbody",null,[t("tr",null,[q,t("td",E,[t("a",M,[n("跳跃游戏 II"),e(o)])]),t("td",V,[e(a,{to:"/problem/0045.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",C,[e(a,{to:"/tag/greedy.html"},{default:s(()=>[L]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[N]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[O]),_:1})]),t("td",B,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[R,t("td",Y,[t("a",J,[n("跳跃游戏 III"),e(o)])]),H,t("td",S,[e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[T]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[z]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[A]),_:1})]),t("td",D,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[F,t("td",G,[t("a",K,[n("跳跃游戏 VII"),e(o)])]),P,t("td",Q,[e(a,{to:"/tag/string.html"},{default:s(()=>[U]),_:1}),n(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[W]),_:1}),n(),e(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[X]),_:1}),n(),Z]),t("td",$,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[tt,t("td",et,[t("a",nt,[n("跳跃游戏 VIII 🔒"),e(o)])]),st,t("td",at,[e(a,{to:"/tag/stack.html"},{default:s(()=>[ot]),_:1}),n(),e(a,{to:"/tag/graph.html"},{default:s(()=>[lt]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[ct]),_:1}),n(),rt]),t("td",it,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])]),t("tr",null,[dt,t("td",pt,[t("a",ut,[n("网格图中最少访问的格子数"),e(o)])]),_t,t("td",ht,[e(a,{to:"/tag/stack.html"},{default:s(()=>[mt]),_:1}),n(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[ft]),_:1}),n(),e(a,{to:"/tag/union-find.html"},{default:s(()=>[gt]),_:1}),n(),kt]),t("td",bt,[e(l,{color:"#ff334b"},{default:s(()=>[n("Hard")]),_:1})])]),t("tr",null,[xt,t("td",yt,[t("a",vt,[n("合并后数组中的最大元素"),e(o)])]),wt,t("td",It,[e(a,{to:"/tag/greedy.html"},{default:s(()=>[jt]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[qt]),_:1})]),t("td",Et,[e(l,{color:"#ffb800"},{default:s(()=>[n("Medium")]),_:1})])])])])])}const Nt=r(_,[["render",Mt],["__file","0055.html.vue"]]);export{Nt as default};
