import{_ as i,r as p,o as r,c as u,a as n,b as s,d as a,w as t,f as d,e as c}from"./app-mXo2sCT-.js";const k={},h={id:"_445-两数相加-ii",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_445-两数相加-ii","aria-hidden":"true"},"#",-1),_={href:"https://2xiao.github.io/leetcode-js/problem/0445.html",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"栈",-1),v=n("code",null,"链表",-1),g=n("code",null,"数学",-1),f={href:"https://leetcode.cn/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),N=c('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/09/sumii-linked-list.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: l1 = [7,2,4,3], l2 = [5,6,4]</p><p>Output: [7,8,0,7]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: l1 = [2,4,3], l2 = [5,6,4]</p><p>Output: [8,0,7]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: l1 = [0], l2 = [0]</p><p>Output: [0]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>It is guaranteed that the list represents a number that does not have leading zeros.</li></ul><p><strong>Follow up:</strong> Could you solve it without reversing the input lists?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你两个 <strong>非空</strong> 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',17),O=c(`<p>这道题的主要难点在于链表中数位的顺序与做加法的顺序是相反的，例如，数字 342 被表示为链表 <code>2 -&gt; 4 -&gt; 3</code>，而且要求不能反转链表。</p><p>为了逆序处理所有数位，可以使用栈：把所有数字压入栈中，再依次取出相加。计算过程中需要注意进位的情况。</p><ol><li><p><strong>使用栈</strong>：</p><ul><li>利用栈的后进先出特性，将链表的节点值推入两个栈 <code>stack1</code> 和 <code>stack2</code>，这样可以从低位到高位逐位相加。</li></ul></li><li><p><strong>逐位相加</strong>：</p><ul><li>从两个栈中逐位弹出数字并相加，同时处理进位。具体步骤如下： <ul><li>初始化 <code>carry</code> 为 0。</li><li>当两个栈都为空且 <code>carry</code> 为 0 时，停止循环。</li><li>从每个栈弹出一个数字（如果栈不为空），并加上 <code>carry</code>。</li><li>计算新的 <code>carry</code> 和当前位的数字。</li><li>创建一个新节点，将当前位的结果插入到结果链表的前面。</li></ul></li></ul></li><li><p><strong>构建结果链表</strong>：</p><ul><li>将每次计算得到的结果存储在新的链表中，从而形成最终的结果链表。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>： <code>O(n + m)</code>，其中 <code>n</code> 为链表 <code>l1</code> 的长度 ，<code>m</code> 为链表 <code>l2</code> 的长度。</p><ul><li>首先，需要遍历两个链表以将它们的值推入栈中，这一部分的时间复杂度为 <code>O(n + m)</code>。</li><li>然后，需要遍历两个栈以进行逐位相加，这一部分的时间复杂度也为 <code>O(n + m)</code>。</li><li>因此，总时间复杂度为 <code>O(n + m)</code>。</li></ul></li><li><p><strong>空间复杂度</strong>： <code>O(n + m)</code></p><ul><li>使用两个栈分别存储两个链表的节点值，最坏情况下，栈的大小为 <code>O(n)</code> 和 <code>O(m)</code>，因此总空间复杂度为 <code>O(n + m)</code>。</li><li>除了栈之外，还需要存储结果链表，但在链表中存储的节点数是固定的，不会影响总体空间复杂度。</li></ul></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token function-variable function">linkToStack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
			head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> stack<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> stack1 <span class="token operator">=</span> <span class="token function">linkToStack</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> stack2 <span class="token operator">=</span> <span class="token function">linkToStack</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> stack2<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> carry <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> sum <span class="token operator">=</span> carry<span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">+=</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">+=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		carry <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		sum <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
		res <span class="token operator">=</span> node<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,8),L=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),I=n("td",{style:{"text-align":"center"}},"2",-1),T={style:{"text-align":"left"}},q={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"center"}},E={style:{"text-align":"left"}},j=n("code",null,"递归",-1),V=n("code",null,"链表",-1),M=n("code",null,"数学",-1),S={style:{"text-align":"left"}},z=n("td",{style:{"text-align":"center"}},"1634",-1),B={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists",target:"_blank",rel:"noopener noreferrer"},Y=n("td",{style:{"text-align":"center"}},null,-1),A={style:{"text-align":"left"}},F=n("code",null,"链表",-1),D=n("code",null,"数学",-1),G=n("code",null,"双指针",-1),H={style:{"text-align":"left"}};function J(K,P){const o=p("ExternalLinkIcon"),l=p("font"),e=p("RouterLink");return r(),u("div",null,[n("h1",h,[m,s(),n("a",_,[s("445. 两数相加 II"),a(o)])]),n("p",null,[s("🟠 "),a(l,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1}),s("  🔖  "),a(e,{to:"/tag/stack.html"},{default:t(()=>[b]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[v]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[g]),_:1}),s("  🔗 "),n("a",f,[y,a(o)]),s(),n("a",w,[x,a(o)])]),N,n("p",null,[s("这道题是 "),a(e,{to:"/problem/0002.html"},{default:t(()=>[s("第 2 题")]),_:1}),s(" 的变种题，第 2 题中的 2 个数是从个位逆序排到高位，这样相加只用从头加到尾，进位一直进位即可。")]),O,d(" prettier-ignore "),n("table",null,[L,n("tbody",null,[n("tr",null,[I,n("td",T,[n("a",q,[s("两数相加"),a(o)])]),n("td",C,[a(e,{to:"/problem/0002.html"},{default:t(()=>[s("[✓]")]),_:1})]),n("td",E,[a(e,{to:"/tag/recursion.html"},{default:t(()=>[j]),_:1}),s(),a(e,{to:"/tag/linked-list.html"},{default:t(()=>[V]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[M]),_:1})]),n("td",S,[a(l,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])]),n("tr",null,[z,n("td",B,[n("a",R,[s("求两个多项式链表的和 🔒"),a(o)])]),Y,n("td",A,[a(e,{to:"/tag/linked-list.html"},{default:t(()=>[F]),_:1}),s(),a(e,{to:"/tag/math.html"},{default:t(()=>[D]),_:1}),s(),a(e,{to:"/tag/two-pointers.html"},{default:t(()=>[G]),_:1})]),n("td",H,[a(l,{color:"#ffb800"},{default:t(()=>[s("Medium")]),_:1})])])])])])}const U=i(k,[["render",J],["__file","0445.html.vue"]]);export{U as default};
