import{_ as i,r as _,o as a,c,a as t,b as e,w as l,d as o,f as u}from"./app-ynO5B_DP.js";const r={},h=t("h1",{id:"归并排序",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#归并排序","aria-hidden":"true"},"#"),o(" 归并排序")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),x=t("code",null,"矩阵",-1),p=t("code",null,"链表",-1),b=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),v=t("code",null,"单调栈",-1),q=t("code",null,"队列",-1),H=t("code",null,"单调队列",-1),w=t("code",null,"堆（优先队列）",-1),I=t("code",null,"哈希表",-1),z=t("code",null,"字符串",-1),M=t("code",null,"字符串匹配",-1),B=t("code",null,"树",-1),L=t("code",null,"二叉树",-1),N=t("code",null,"二叉搜索树",-1),V=t("code",null,"最小生成树",-1),C=t("code",null,"图",-1),E=t("code",null,"有序集合",-1),O=t("code",null,"拓扑排序",-1),K=t("code",null,"最短路",-1),R=t("code",null,"强连通分量",-1),S=t("code",null,"欧拉回路",-1),W=t("code",null,"双连通分量",-1),j=t("code",null,"并查集",-1),T=t("code",null,"字典树",-1),X=t("code",null,"线段树",-1),A=t("code",null,"树状数组",-1),D=t("code",null,"后缀数组",-1),F=t("p",null,[t("strong",null,"算法")],-1),G=t("code",null,"枚举",-1),J=t("code",null,"递归",-1),P=t("code",null,"分治",-1),Q=t("code",null,"回溯",-1),U=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),ot=t("span",{class:"blue"},"归并排序",-1),lt=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),it=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),ut=t("code",null,"计数",-1),rt=t("code",null,"滑动窗口",-1),ht=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),xt=t("code",null,"数学",-1),pt=t("code",null,"数论",-1),bt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),vt=t("code",null,"模拟",-1),qt=t("code",null,"组合数学",-1),Ht=t("code",null,"随机化",-1),wt=t("code",null,"概率与统计",-1),It=t("code",null,"水塘抽样",-1),zt=t("code",null,"拒绝采样",-1),Mt=t("code",null,"数据库",-1),Bt=t("code",null,"设计",-1),Lt=t("code",null,"数据流",-1),Nt=t("code",null,"脑筋急转弯",-1),Vt=t("code",null,"交互",-1),Ct=t("code",null,"迭代器",-1),Et=t("code",null,"多线程",-1),Ot=t("hr",null,null,-1),Kt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Rt=t("td",{style:{"text-align":"center"}},"23",-1),St={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/merge-k-sorted-lists",target:"_blank",rel:"noopener noreferrer"},jt={style:{"text-align":"center"}},Tt={href:"/problem/0023",target:"_blank",rel:"noopener noreferrer"},Xt={style:{"text-align":"left"}},At=t("code",null,"链表",-1),Dt=t("code",null,"分治",-1),Ft=t("code",null,"堆（优先队列）",-1),Gt=t("code",null,"1+",-1),Jt={style:{"text-align":"left"}},Pt=t("td",{style:{"text-align":"center"}},"148",-1),Qt={style:{"text-align":"left"}},Ut={href:"https://leetcode.com/problems/sort-list",target:"_blank",rel:"noopener noreferrer"},Yt={style:{"text-align":"center"}},Zt={href:"/problem/0148",target:"_blank",rel:"noopener noreferrer"},$t={style:{"text-align":"left"}},te=t("code",null,"链表",-1),ee=t("code",null,"双指针",-1),oe=t("code",null,"分治",-1),le=t("code",null,"2+",-1),ne={style:{"text-align":"left"}},se=t("td",{style:{"text-align":"center"}},"315",-1),de={style:{"text-align":"left"}},_e={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},ie=t("td",{style:{"text-align":"center"}},null,-1),ae={style:{"text-align":"left"}},ce=t("code",null,"树状数组",-1),ue=t("code",null,"线段树",-1),re=t("code",null,"数组",-1),he=t("code",null,"4+",-1),fe={style:{"text-align":"left"}},ge=t("td",{style:{"text-align":"center"}},"327",-1),me={style:{"text-align":"left"}},ye={href:"https://leetcode.com/problems/count-of-range-sum",target:"_blank",rel:"noopener noreferrer"},xe=t("td",{style:{"text-align":"center"}},null,-1),pe={style:{"text-align":"left"}},be=t("code",null,"树状数组",-1),ke=t("code",null,"线段树",-1),ve=t("code",null,"数组",-1),qe=t("code",null,"4+",-1),He={style:{"text-align":"left"}},we=t("td",{style:{"text-align":"center"}},"493",-1),Ie={style:{"text-align":"left"}},ze={href:"https://leetcode.com/problems/reverse-pairs",target:"_blank",rel:"noopener noreferrer"},Me=t("td",{style:{"text-align":"center"}},null,-1),Be={style:{"text-align":"left"}},Le=t("code",null,"树状数组",-1),Ne=t("code",null,"线段树",-1),Ve=t("code",null,"数组",-1),Ce=t("code",null,"4+",-1),Ee={style:{"text-align":"left"}},Oe=t("td",{style:{"text-align":"center"}},"912",-1),Ke={style:{"text-align":"left"}},Re={href:"https://leetcode.com/problems/sort-an-array",target:"_blank",rel:"noopener noreferrer"},Se=t("td",{style:{"text-align":"center"}},null,-1),We={style:{"text-align":"left"}},je=t("code",null,"数组",-1),Te=t("code",null,"分治",-1),Xe=t("code",null,"桶排序",-1),Ae=t("code",null,"5+",-1),De={style:{"text-align":"left"}},Fe=t("td",{style:{"text-align":"center"}},"1649",-1),Ge={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/create-sorted-array-through-instructions",target:"_blank",rel:"noopener noreferrer"},Pe=t("td",{style:{"text-align":"center"}},null,-1),Qe={style:{"text-align":"left"}},Ue=t("code",null,"树状数组",-1),Ye=t("code",null,"线段树",-1),Ze=t("code",null,"数组",-1),$e=t("code",null,"4+",-1),to={style:{"text-align":"left"}},eo=t("td",{style:{"text-align":"center"}},"2031",-1),oo={style:{"text-align":"left"}},lo={href:"https://leetcode.com/problems/count-subarrays-with-more-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},no=t("td",{style:{"text-align":"center"}},null,-1),so={style:{"text-align":"left"}},_o=t("code",null,"树状数组",-1),io=t("code",null,"线段树",-1),ao=t("code",null,"数组",-1),co=t("code",null,"4+",-1),uo={style:{"text-align":"left"}},ro=t("td",{style:{"text-align":"center"}},"2179",-1),ho={style:{"text-align":"left"}},fo={href:"https://leetcode.com/problems/count-good-triplets-in-an-array",target:"_blank",rel:"noopener noreferrer"},go=t("td",{style:{"text-align":"center"}},null,-1),mo={style:{"text-align":"left"}},yo=t("code",null,"树状数组",-1),xo=t("code",null,"线段树",-1),po=t("code",null,"数组",-1),bo=t("code",null,"4+",-1),ko={style:{"text-align":"left"}},vo=t("td",{style:{"text-align":"center"}},"2426",-1),qo={style:{"text-align":"left"}},Ho={href:"https://leetcode.com/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},wo=t("td",{style:{"text-align":"center"}},null,-1),Io={style:{"text-align":"left"}},zo=t("code",null,"树状数组",-1),Mo=t("code",null,"线段树",-1),Bo=t("code",null,"数组",-1),Lo=t("code",null,"4+",-1),No={style:{"text-align":"left"}},Vo=t("td",{style:{"text-align":"center"}},"2519",-1),Co={style:{"text-align":"left"}},Eo={href:"https://leetcode.com/problems/count-the-number-of-k-big-indices",target:"_blank",rel:"noopener noreferrer"},Oo=t("td",{style:{"text-align":"center"}},null,-1),Ko={style:{"text-align":"left"}},Ro=t("code",null,"树状数组",-1),So=t("code",null,"线段树",-1),Wo=t("code",null,"数组",-1),jo=t("code",null,"4+",-1),To={style:{"text-align":"left"}},Xo=t("td",{style:{"text-align":"center"}},"3109",-1),Ao={style:{"text-align":"left"}},Do={href:"https://leetcode.com/problems/find-the-index-of-permutation",target:"_blank",rel:"noopener noreferrer"},Fo=t("td",{style:{"text-align":"center"}},null,-1),Go={style:{"text-align":"left"}},Jo=t("code",null,"树状数组",-1),Po=t("code",null,"线段树",-1),Qo=t("code",null,"数组",-1),Uo=t("code",null,"4+",-1),Yo={style:{"text-align":"left"}},Zo=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),$o={style:{"text-align":"left"}},tl={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},el=t("td",{style:{"text-align":"center"}},null,-1),ol={style:{"text-align":"left"}},ll=t("code",null,"树状数组",-1),nl=t("code",null,"线段树",-1),sl=t("code",null,"数组",-1),dl=t("code",null,"4+",-1),_l={style:{"text-align":"left"}},il=t("td",{style:{"text-align":"center"}},"剑指 Offer II 77",-1),al={style:{"text-align":"left"}},cl={href:"https://leetcode.cn/problems/7WHec2",target:"_blank",rel:"noopener noreferrer"},ul=t("td",{style:{"text-align":"center"}},null,-1),rl={style:{"text-align":"left"}},hl=t("code",null,"链表",-1),fl=t("code",null,"双指针",-1),gl=t("code",null,"分治",-1),ml=t("code",null,"2+",-1),yl={style:{"text-align":"left"}},xl=t("td",{style:{"text-align":"center"}},"剑指 Offer II 78",-1),pl={style:{"text-align":"left"}},bl={href:"https://leetcode.cn/problems/vvXgSW",target:"_blank",rel:"noopener noreferrer"},kl=t("td",{style:{"text-align":"center"}},null,-1),vl={style:{"text-align":"left"}},ql=t("code",null,"链表",-1),Hl=t("code",null,"分治",-1),wl=t("code",null,"堆（优先队列）",-1),Il=t("code",null,"1+",-1),zl={style:{"text-align":"left"}};function Ml(Bl,Ll){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return a(),c("div",null,[h,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[y]),_:1}),o(),e(n,{to:"/outline/tag/matrix.html"},{default:l(()=>[x]),_:1}),o(),e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[p]),_:1}),o(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:l(()=>[b]),_:1}),o(),e(n,{to:"/outline/tag/stack.html"},{default:l(()=>[k]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:l(()=>[v]),_:1}),o(),e(n,{to:"/outline/tag/queue.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[w]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[I]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[z]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[M]),_:1}),o(),e(n,{to:"/outline/tag/tree.html"},{default:l(()=>[B]),_:1}),o(),e(n,{to:"/outline/tag/binary-tree.html"},{default:l(()=>[L]),_:1}),o(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:l(()=>[N]),_:1}),o(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:l(()=>[V]),_:1}),o(),e(n,{to:"/outline/tag/graph.html"},{default:l(()=>[C]),_:1}),o(),e(n,{to:"/outline/tag/ordered-set.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/outline/tag/topological-sort.html"},{default:l(()=>[O]),_:1}),o(),e(n,{to:"/outline/tag/shortest-path.html"},{default:l(()=>[K]),_:1}),o(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:l(()=>[R]),_:1}),o(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:l(()=>[S]),_:1}),o(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:l(()=>[W]),_:1}),o(),e(n,{to:"/outline/tag/union-find.html"},{default:l(()=>[j]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[T]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[X]),_:1}),o(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[A]),_:1}),o(),e(n,{to:"/outline/tag/suffix-array.html"},{default:l(()=>[D]),_:1})]),F,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:l(()=>[G]),_:1}),o(),e(n,{to:"/outline/tag/recursion.html"},{default:l(()=>[J]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[P]),_:1}),o(),e(n,{to:"/outline/tag/backtracking.html"},{default:l(()=>[Q]),_:1}),o(),e(n,{to:"/outline/tag/greedy.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Y]),_:1}),o(),e(n,{to:"/outline/tag/sorting.html"},{default:l(()=>[Z]),_:1}),o(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:l(()=>[$]),_:1}),o(),e(n,{to:"/outline/tag/counting-sort.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/outline/tag/radix-sort.html"},{default:l(()=>[et]),_:1}),o(),ot,o(),e(n,{to:"/outline/tag/quickselect.html"},{default:l(()=>[lt]),_:1}),o(),e(n,{to:"/outline/tag/binary-search.html"},{default:l(()=>[nt]),_:1}),o(),e(n,{to:"/outline/tag/memoization.html"},{default:l(()=>[st]),_:1}),o(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[dt]),_:1}),o(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:l(()=>[_t]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[it]),_:1}),o(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:l(()=>[ct]),_:1}),o(),e(n,{to:"/outline/tag/counting.html"},{default:l(()=>[ut]),_:1}),o(),e(n,{to:"/outline/tag/sliding-window.html"},{default:l(()=>[rt]),_:1}),o(),e(n,{to:"/outline/tag/bitmask.html"},{default:l(()=>[ht]),_:1}),o(),e(n,{to:"/outline/tag/hash-function.html"},{default:l(()=>[ft]),_:1}),o(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:l(()=>[gt]),_:1}),o(),e(n,{to:"/outline/tag/line-sweep.html"},{default:l(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/outline/tag/number-theory.html"},{default:l(()=>[pt]),_:1}),o(),e(n,{to:"/outline/tag/geometry.html"},{default:l(()=>[bt]),_:1}),o(),e(n,{to:"/outline/tag/game-theory.html"},{default:l(()=>[kt]),_:1}),o(),e(n,{to:"/outline/tag/simulation.html"},{default:l(()=>[vt]),_:1}),o(),e(n,{to:"/outline/tag/combinatorics.html"},{default:l(()=>[qt]),_:1}),o(),e(n,{to:"/outline/tag/randomized.html"},{default:l(()=>[Ht]),_:1}),o(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:l(()=>[wt]),_:1}),o(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:l(()=>[It]),_:1}),o(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:l(()=>[zt]),_:1}),o(),e(n,{to:"/outline/tag/database.html"},{default:l(()=>[Mt]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[Bt]),_:1}),o(),e(n,{to:"/outline/tag/data-stream.html"},{default:l(()=>[Lt]),_:1}),o(),e(n,{to:"/outline/tag/brainteaser.html"},{default:l(()=>[Nt]),_:1}),o(),e(n,{to:"/outline/tag/interactive.html"},{default:l(()=>[Vt]),_:1}),o(),e(n,{to:"/outline/tag/iterator.html"},{default:l(()=>[Ct]),_:1}),o(),e(n,{to:"/outline/tag/concurrency.html"},{default:l(()=>[Et]),_:1})])]),Ot,u(" prettier-ignore "),t("table",null,[Kt,t("tbody",null,[t("tr",null,[Rt,t("td",St,[t("a",Wt,[o("合并 K 个升序链表"),e(s)])]),t("td",jt,[t("a",Tt,[o("[✓]"),e(s)])]),t("td",Xt,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[At]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Dt]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[Ft]),_:1}),o(),Gt]),t("td",Jt,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Pt,t("td",Qt,[t("a",Ut,[o("排序链表"),e(s)])]),t("td",Yt,[t("a",Zt,[o("[✓]"),e(s)])]),t("td",$t,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[te]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[ee]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[oe]),_:1}),o(),le]),t("td",ne,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[se,t("td",de,[t("a",_e,[o("计算右侧小于当前元素的个数"),e(s)])]),ie,t("td",ae,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[ce]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[ue]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[re]),_:1}),o(),he]),t("td",fe,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[ge,t("td",me,[t("a",ye,[o("区间和的个数"),e(s)])]),xe,t("td",pe,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[be]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[ke]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ve]),_:1}),o(),qe]),t("td",He,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[we,t("td",Ie,[t("a",ze,[o("翻转对"),e(s)])]),Me,t("td",Be,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Le]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Ne]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ve]),_:1}),o(),Ce]),t("td",Ee,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Oe,t("td",Ke,[t("a",Re,[o("排序数组"),e(s)])]),Se,t("td",We,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[je]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Te]),_:1}),o(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:l(()=>[Xe]),_:1}),o(),Ae]),t("td",De,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Fe,t("td",Ge,[t("a",Je,[o("通过指令创建有序数组"),e(s)])]),Pe,t("td",Qe,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Ue]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Ye]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ze]),_:1}),o(),$e]),t("td",to,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[eo,t("td",oo,[t("a",lo,[o("1 比 0 多的子数组个数"),e(s)])]),no,t("td",so,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[_o]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[io]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[ao]),_:1}),o(),co]),t("td",uo,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[ro,t("td",ho,[t("a",fo,[o("统计数组中好三元组数目"),e(s)])]),go,t("td",mo,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[yo]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[xo]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[po]),_:1}),o(),bo]),t("td",ko,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[vo,t("td",qo,[t("a",Ho,[o("满足不等式的数对数目"),e(s)])]),wo,t("td",Io,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[zo]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Mo]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Bo]),_:1}),o(),Lo]),t("td",No,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Vo,t("td",Co,[t("a",Eo,[o("统计 K-Big 索引的数量"),e(s)])]),Oo,t("td",Ko,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Ro]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[So]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Wo]),_:1}),o(),jo]),t("td",To,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Xo,t("td",Ao,[t("a",Do,[o("查找排列的下标"),e(s)])]),Fo,t("td",Go,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[Jo]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[Po]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Qo]),_:1}),o(),Uo]),t("td",Yo,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Zo,t("td",$o,[t("a",tl,[o("数组中的逆序对"),e(s)])]),el,t("td",ol,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:l(()=>[ll]),_:1}),o(),e(n,{to:"/outline/tag/segment-tree.html"},{default:l(()=>[nl]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[sl]),_:1}),o(),dl]),t("td",_l,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[il,t("td",al,[t("a",cl,[o("链表排序"),e(s)])]),ul,t("td",rl,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[hl]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[fl]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[gl]),_:1}),o(),ml]),t("td",yl,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[xl,t("td",pl,[t("a",bl,[o("合并排序链表"),e(s)])]),kl,t("td",vl,[e(n,{to:"/outline/tag/linked-list.html"},{default:l(()=>[ql]),_:1}),o(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:l(()=>[Hl]),_:1}),o(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:l(()=>[wl]),_:1}),o(),Il]),t("td",zl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])])])])])}const Vl=i(r,[["render",Ml],["__file","merge-sort.html.vue"]]);export{Vl as default};
