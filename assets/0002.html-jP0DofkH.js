import{_ as i,r as c,o as p,c as d,a as t,b as e,d as n,w as s,f as r,e as u}from"./app-Cu8sRDUK.js";const _={},h={id:"_2-两数相加",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_2-两数相加","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"递归",-1),f=t("code",null,"链表",-1),b=t("code",null,"数学",-1),v={href:"https://leetcode.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> , and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: l1 = [2,4,3], l2 = [5,6,4]</p><p>Output: [7,0,8]</p><p>Explanation: 342 + 465 = 807.</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: l1 = [0], l2 = [0]</p><p>Output: [0]</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</p><p>Output: [8,9,9,9,0,0,0,1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>It is guaranteed that the list represents a number that does not have leading zeros.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>2 个逆序的链表，要求从低位开始相加，得出结果也逆序输出，返回值是逆序结果链表的头结点。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>需要注意的是各种进位问题。</p><p>极端情况，例如</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Input: (9 -&gt; 9 -&gt; 9 -&gt; 9 -&gt; 9) + (1 -&gt; )
Output: 0 -&gt; 0 -&gt; 0 -&gt; 0 -&gt; 0 -&gt; 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了处理方法统一，可以先建立一个虚拟头结点，这个虚拟头结点的 <code>next</code> 指向真正的 <code>head</code>，这样 <code>head</code> 不需要单独处理，直接 <code>while</code> 循环即可。另外判断循环终止的条件不用是 <code>p.next ！= null</code>，这样最后一位还需要额外计算，循环终止条件应该是 <code>p != null</code>。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l1</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span> <span class="token parameter">l2</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> List <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> head <span class="token operator">=</span> List<span class="token punctuation">;</span>
	<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">=</span> sum <span class="token operator">+</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
			l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sum <span class="token operator">=</span> sum <span class="token operator">+</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
			l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			sum <span class="token operator">=</span> sum <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
		head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

		sum <span class="token operator">=</span> carry<span class="token punctuation">;</span>
		carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> List<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,22),w=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),L=t("td",{style:{"text-align":"center"}},"43",-1),N={style:{"text-align":"left"}},E={href:"https://leetcode.com/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},I={style:{"text-align":"center"}},q={style:{"text-align":"left"}},M=t("code",null,"数学",-1),C=t("code",null,"字符串",-1),V=t("code",null,"模拟",-1),j={style:{"text-align":"left"}},O=t("td",{style:{"text-align":"center"}},"67",-1),T={style:{"text-align":"left"}},z={href:"https://leetcode.com/problems/add-binary",target:"_blank",rel:"noopener noreferrer"},B={style:{"text-align":"center"}},R={style:{"text-align":"left"}},Y=t("code",null,"位运算",-1),A=t("code",null,"数学",-1),S=t("code",null,"字符串",-1),D=t("code",null,"1+",-1),F={style:{"text-align":"left"}},G=t("td",{style:{"text-align":"center"}},"371",-1),H={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/sum-of-two-integers",target:"_blank",rel:"noopener noreferrer"},K=t("td",{style:{"text-align":"center"}},null,-1),P={style:{"text-align":"left"}},Q=t("code",null,"位运算",-1),U=t("code",null,"数学",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"415",-1),Z={style:{"text-align":"left"}},$={href:"https://leetcode.com/problems/add-strings",target:"_blank",rel:"noopener noreferrer"},tt={style:{"text-align":"center"}},nt={style:{"text-align":"left"}},et=t("code",null,"数学",-1),st=t("code",null,"字符串",-1),at=t("code",null,"模拟",-1),ot={style:{"text-align":"left"}},lt=t("td",{style:{"text-align":"center"}},"445",-1),ct={style:{"text-align":"left"}},it={href:"https://leetcode.com/problems/add-two-numbers-ii",target:"_blank",rel:"noopener noreferrer"},pt={style:{"text-align":"center"}},dt={style:{"text-align":"left"}},rt=t("code",null,"栈",-1),ut=t("code",null,"链表",-1),_t=t("code",null,"数学",-1),ht={style:{"text-align":"left"}},mt=t("td",{style:{"text-align":"center"}},"989",-1),kt={style:{"text-align":"left"}},gt={href:"https://leetcode.com/problems/add-to-array-form-of-integer",target:"_blank",rel:"noopener noreferrer"},ft=t("td",{style:{"text-align":"center"}},null,-1),bt={style:{"text-align":"left"}},vt=t("code",null,"数组",-1),yt=t("code",null,"数学",-1),xt={style:{"text-align":"left"}},wt=t("td",{style:{"text-align":"center"}},"1634",-1),Lt={style:{"text-align":"left"}},Nt={href:"https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists",target:"_blank",rel:"noopener noreferrer"},Et=t("td",{style:{"text-align":"center"}},null,-1),It={style:{"text-align":"left"}},qt=t("code",null,"链表",-1),Mt=t("code",null,"数学",-1),Ct=t("code",null,"双指针",-1),Vt={style:{"text-align":"left"}},jt=t("td",{style:{"text-align":"center"}},"2816",-1),Ot={style:{"text-align":"left"}},Tt={href:"https://leetcode.com/problems/double-a-number-represented-as-a-linked-list",target:"_blank",rel:"noopener noreferrer"},zt=t("td",{style:{"text-align":"center"}},null,-1),Bt={style:{"text-align":"left"}},Rt=t("code",null,"栈",-1),Yt=t("code",null,"链表",-1),At=t("code",null,"数学",-1),St={style:{"text-align":"left"}};function Dt(Ft,Gt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return p(),d("div",null,[t("h1",h,[m,e(),t("a",k,[e("2. 两数相加"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/tag/recursion.html"},{default:s(()=>[g]),_:1}),e(),n(a,{to:"/tag/linked-list.html"},{default:s(()=>[f]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[b]),_:1}),e("  🔗 "),t("a",v,[y,n(o)])]),x,r(" prettier-ignore "),t("table",null,[w,t("tbody",null,[t("tr",null,[L,t("td",N,[t("a",E,[e("字符串相乘"),n(o)])]),t("td",I,[n(a,{to:"/problem/0043.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",q,[n(a,{to:"/tag/math.html"},{default:s(()=>[M]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[C]),_:1}),e(),n(a,{to:"/tag/simulation.html"},{default:s(()=>[V]),_:1})]),t("td",j,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[O,t("td",T,[t("a",z,[e("二进制求和"),n(o)])]),t("td",B,[n(a,{to:"/problem/0067.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",R,[n(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Y]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[A]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[S]),_:1}),e(),D]),t("td",F,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[G,t("td",H,[t("a",J,[e("两整数之和"),n(o)])]),K,t("td",P,[n(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Q]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[U]),_:1})]),t("td",W,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[X,t("td",Z,[t("a",$,[e("字符串相加"),n(o)])]),t("td",tt,[n(a,{to:"/problem/0415.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",nt,[n(a,{to:"/tag/math.html"},{default:s(()=>[et]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[st]),_:1}),e(),n(a,{to:"/tag/simulation.html"},{default:s(()=>[at]),_:1})]),t("td",ot,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[lt,t("td",ct,[t("a",it,[e("两数相加 II"),n(o)])]),t("td",pt,[n(a,{to:"/problem/0445.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",dt,[n(a,{to:"/tag/stack.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/tag/linked-list.html"},{default:s(()=>[ut]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[_t]),_:1})]),t("td",ht,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[mt,t("td",kt,[t("a",gt,[e("数组形式的整数加法"),n(o)])]),ft,t("td",bt,[n(a,{to:"/tag/array.html"},{default:s(()=>[vt]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[yt]),_:1})]),t("td",xt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[wt,t("td",Lt,[t("a",Nt,[e("求两个多项式链表的和"),n(o)])]),Et,t("td",It,[n(a,{to:"/tag/linked-list.html"},{default:s(()=>[qt]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[Mt]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Ct]),_:1})]),t("td",Vt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[jt,t("td",Ot,[t("a",Tt,[e("翻倍以链表形式表示的数字"),n(o)])]),zt,t("td",Bt,[n(a,{to:"/tag/stack.html"},{default:s(()=>[Rt]),_:1}),e(),n(a,{to:"/tag/linked-list.html"},{default:s(()=>[Yt]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[At]),_:1})]),t("td",St,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const Jt=i(_,[["render",Dt],["__file","0002.html.vue"]]);export{Jt as default};
