import{_ as p,r as c,o as r,c as i,a as t,b as n,d as e,w as s,f as d,e as u}from"./app-mXo2sCT-.js";const _={},h={id:"_217-存在重复元素",tabindex:"-1"},k=t("a",{class:"header-anchor",href:"#_217-存在重复元素","aria-hidden":"true"},"#",-1),m={href:"https://2xiao.github.io/leetcode-js/problem/0217.html",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"数组",-1),g=t("code",null,"哈希表",-1),b=t("code",null,"排序",-1),y={href:"https://leetcode.cn/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/contains-duplicate",target:"_blank",rel:"noopener noreferrer"},w=t("code",null,"LeetCode",-1),I=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code>, return <code>true</code> if any value appears <strong>at least twice</strong> in the array, and return <code>false</code> if every element is distinct.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,1]</p><p>Output: true</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [1,2,3,4]</p><p>Output: false</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: nums = [1,1,1,3,3,4,3,2,4,2]</p><p>Output: true</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>如果数组里面有重复数字就输出 <code>true</code> ，否则输出 <code>flase</code> 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>用 <code>map</code> 判断即可。</p><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">containsDuplicate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,17),E=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),q=t("td",{style:{"text-align":"center"}},"219",-1),C={style:{"text-align":"left"}},L={href:"https://leetcode.com/problems/contains-duplicate-ii",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},V={style:{"text-align":"left"}},j=t("code",null,"数组",-1),B=t("code",null,"哈希表",-1),O=t("code",null,"滑动窗口",-1),R={style:{"text-align":"left"}},z=t("td",{style:{"text-align":"center"}},"220",-1),D={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/contains-duplicate-iii",target:"_blank",rel:"noopener noreferrer"},H=t("td",{style:{"text-align":"center"}},null,-1),M={style:{"text-align":"left"}},S=t("code",null,"数组",-1),T=t("code",null,"桶排序",-1),A=t("code",null,"有序集合",-1),F=t("code",null,"2+",-1),J={style:{"text-align":"left"}},K=t("td",{style:{"text-align":"center"}},"2357",-1),P={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts",target:"_blank",rel:"noopener noreferrer"},U=t("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},X=t("code",null,"贪心",-1),Y=t("code",null,"数组",-1),Z=t("code",null,"哈希表",-1),$=t("code",null,"3+",-1),tt={style:{"text-align":"left"}};function nt(et,st){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return r(),i("div",null,[t("h1",h,[k,n(),t("a",m,[n("217. 存在重复元素"),e(o)])]),t("p",null,[n("🟢 "),e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1}),n("  🔖  "),e(a,{to:"/tag/array.html"},{default:s(()=>[f]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[g]),_:1}),n(),e(a,{to:"/tag/sorting.html"},{default:s(()=>[b]),_:1}),n("  🔗 "),t("a",y,[v,e(o)]),n(),t("a",x,[w,e(o)])]),I,d(" prettier-ignore "),t("table",null,[E,t("tbody",null,[t("tr",null,[q,t("td",C,[t("a",L,[n("存在重复元素 II"),e(o)])]),t("td",N,[e(a,{to:"/problem/0219.html"},{default:s(()=>[n("[✓]")]),_:1})]),t("td",V,[e(a,{to:"/tag/array.html"},{default:s(()=>[j]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[B]),_:1}),n(),e(a,{to:"/tag/sliding-window.html"},{default:s(()=>[O]),_:1})]),t("td",R,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])]),t("tr",null,[z,t("td",D,[t("a",G,[n("存在重复元素 III"),e(o)])]),H,t("td",M,[e(a,{to:"/tag/array.html"},{default:s(()=>[S]),_:1}),n(),e(a,{to:"/tag/bucket-sort.html"},{default:s(()=>[T]),_:1}),n(),e(a,{to:"/tag/ordered-set.html"},{default:s(()=>[A]),_:1}),n(),F]),t("td",J,[e(l,{color:"#ff334b"},{default:s(()=>[n("Hard")]),_:1})])]),t("tr",null,[K,t("td",P,[t("a",Q,[n("使数组中所有元素都等于零"),e(o)])]),U,t("td",W,[e(a,{to:"/tag/greedy.html"},{default:s(()=>[X]),_:1}),n(),e(a,{to:"/tag/array.html"},{default:s(()=>[Y]),_:1}),n(),e(a,{to:"/tag/hash-table.html"},{default:s(()=>[Z]),_:1}),n(),$]),t("td",tt,[e(l,{color:"#15bd66"},{default:s(()=>[n("Easy")]),_:1})])])])])])}const ot=p(_,[["render",nt],["__file","0217.html.vue"]]);export{ot as default};
