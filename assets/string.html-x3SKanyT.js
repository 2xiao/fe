import{_ as a,r as i,o as c,c as _,f as r,a as t,d as o,b as e,w as l,e as h}from"./app-ynO5B_DP.js";const u="/leetcode-js/assets/2-9-1-4ntTgB4b.png",g={},f=h('<h1 id="_2-9-字符串" tabindex="-1"><a class="header-anchor" href="#_2-9-字符串" aria-hidden="true">#</a> 2.9 字符串</h1><h2 id="字符串的定义" tabindex="-1"><a class="header-anchor" href="#字符串的定义" aria-hidden="true">#</a> 字符串的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>字符串（String）</strong> ：是由零个或多个字符组成的有限序列。一般记为 <code>s = a1a2……an</code>（ <code>n</code> 大于 <code>0</code> 小于正无穷）。</p></div><p>字符串中任意个连续的字符组成的子序列称为该字符串的 <strong>子串（Substring）</strong>；</p><p>起始于位置为 <code>0</code>、长度为 <code>k</code> 的子串称为 <strong>前缀（Prefix）</strong>；</p><p>终止于位置 <code>n - 1</code>、长度为 <code>k</code> 的子串称为 <strong>后缀（Suffix）</strong>。</p><h2 id="字符编码" tabindex="-1"><a class="header-anchor" href="#字符编码" aria-hidden="true">#</a> 字符编码</h2><p>计算机中最常用的字符编码是 <code>ASCII</code> 编码。最早的时候，人们制定了一个包含 <code>127</code> 个字符的编码表 <code>ASCII</code> 到计算机系统中。<code>ASCII</code> 编码表中的字符包含了大小写的英文字母、数字和一些符号。每个字符对应一个编码，比如大写字母 <code>A</code> 的编码是 <code>65</code>，小写字母 <code>a</code> 的编码是 <code>97</code>。</p><p><code>ASCII</code> 编码可以解决以英语为主的语言，可是无法满足中文编码。为了解决中文编码，我国制定了 <code>GB2312</code>、<code>GBK</code>、<code>GB18030</code> 等中文编码标准，将中文编译进去。但是世界上有上百种语言和文字，各国有各国的标准，就会不可避免的产生冲突，于是就有了 <code>Unicode</code> 编码。<code>Unicode</code> 编码最常用的就是 <code>UTF-8</code> 编码，<code>UTF-8</code> 编码把一个 <code>Unicode</code> 字符根据不同的数字大小编码成 <code>1</code> ~ <code>6</code> 个字节，常用的英文字母被编码成 <code>1</code> 个字节，汉字通常是 <code>3</code> 个字节。</p><h2 id="字符串的存储结构" tabindex="-1"><a class="header-anchor" href="#字符串的存储结构" aria-hidden="true">#</a> 字符串的存储结构</h2><p>字符串的两种最基本的存储结构是：顺序存储结构 和 链接存储结构。</p><h3 id="顺序存储" tabindex="-1"><a class="header-anchor" href="#顺序存储" aria-hidden="true">#</a> 顺序存储</h3><p>与线性表的顺序存储结构相似，字符串的顺序存储结构也是使用一组地址连续的存储单元依次存放串中的各个字符。按照预定义的大小，为每个定义的字符串变量分配一个固定长度的存储区域。一般是用定长数组来定义。</p><p>字符串的顺序存储中每一个字符元素都有自己的下标索引，下标索引从 <code>0</code> 开始，到 <code>length - 1</code> 结束。字符串中每一个下标索引，都有一个与之对应的字符元素。</p><p>跟数组类似，字符串也支持随机访问。即字符串可以根据下标，直接定位到某一个字符元素存放的位置。</p><h3 id="链式存储" tabindex="-1"><a class="header-anchor" href="#链式存储" aria-hidden="true">#</a> 链式存储</h3><p>字符串的存储也可以采用链式存储结构，即采用一个线性链表来存储一个字符串。字符串的链节点包含一个用于存放字符的 <code>data</code> 变量，和指向下一个链节点的指针变量 <code>next</code>。这样，一个字符串就可以用一个线性链表来表示。</p><p>在字符串的链式存储结构中，每个链节点可以仅存放一个字符，也可以存放多个字符。通常情况下，链节点的字符长度为 <code>1</code> 或者 <code>4</code>，这是为了避免浪费空间。当链节点的字符长度为 <code>4</code> 时，由于字符串的长度不一定是 <code>4</code> 的倍数，因此字符串所占用的链节点中最后那个链节点的 <code>data</code> 变量可能没有占满，我们可以用 <code>#</code> 或其他不属于字符集的特殊字符将其补全。</p><h2 id="字符串匹配" tabindex="-1"><a class="header-anchor" href="#字符串匹配" aria-hidden="true">#</a> 字符串匹配</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>字符串匹配（String Matching）</strong> ：又称模式匹配（pattern matching），可以概括为「给定字符串 <code>S</code> 和 <code>T</code>，在主串 <code>S</code> 中寻找子串 <code>T</code>」。子串 <code>T</code> 称为模式串 (pattern)。</p></div><p>其中，在主串 <code>S</code> 中找出 <strong>一个</strong> 模式串 <code>T</code>的所有位置，叫做<strong>单模式匹配（Single Pattern Matching）</strong>；</p><p>在主串 <code>S</code> 中找出 <strong>多个</strong> 模式串 <code>T1,T2,……,Tn</code>的所有位置，叫做<strong>多模式匹配（Multi Pattern Matching）</strong>。</p><p>两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等。</p><h3 id="bf-算法" tabindex="-1"><a class="header-anchor" href="#bf-算法" aria-hidden="true">#</a> BF 算法</h3><p>BF 算法中的 BF 是 Brute Force 的缩写，中文叫作暴力匹配算法，也叫朴素匹配算法。从名字可以看出，这种算法的字符串匹配方式很“暴力”，也就比较简单、好懂，但相应的性能也不高。</p><p>BF 算法的思想可以用一句话来概括：在主串中检查起始位置分别是 <code>0、1、2…n-m</code> 且长度为 <code>m</code> 的 <code>n-m+1</code> 个子串，看有没有跟模式串匹配的。</p><p>这种算法的最坏情况时间复杂度是 <code>O(n*m)</code>。</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="实现代码" tabindex="-1"><a class="header-anchor" href="#实现代码" aria-hidden="true">#</a> 实现代码</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,30),m=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),o(" 相关题目")],-1),p=t("h4",{id:"字符串基础题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#字符串基础题目","aria-hidden":"true"},"#"),o(" 字符串基础题目")],-1),x=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),y=t("td",{style:{"text-align":"center"}},"125",-1),b={style:{"text-align":"left"}},k={href:"https://leetcode.com/problems/valid-palindrome",target:"_blank",rel:"noopener noreferrer"},w={style:{"text-align":"center"}},T={href:"/problem/0125",target:"_blank",rel:"noopener noreferrer"},v={style:{"text-align":"left"}},E=t("code",null,"双指针",-1),I=t("code",null,"字符串",-1),S={style:{"text-align":"left"}},M=t("td",{style:{"text-align":"center"}},"5",-1),B={style:{"text-align":"left"}},A={href:"https://leetcode.com/problems/longest-palindromic-substring",target:"_blank",rel:"noopener noreferrer"},N={style:{"text-align":"center"}},C={href:"/problem/0005",target:"_blank",rel:"noopener noreferrer"},F={style:{"text-align":"left"}},H=t("code",null,"双指针",-1),U=t("code",null,"字符串",-1),L=t("code",null,"动态规划",-1),P={style:{"text-align":"left"}},R=t("td",{style:{"text-align":"center"}},"3",-1),V={style:{"text-align":"left"}},j={href:"https://leetcode.com/problems/longest-substring-without-repeating-characters",target:"_blank",rel:"noopener noreferrer"},D={style:{"text-align":"center"}},O={href:"/problem/0003",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"left"}},K=t("code",null,"哈希表",-1),q=t("code",null,"字符串",-1),z=t("code",null,"滑动窗口",-1),J={style:{"text-align":"left"}},Q=t("td",{style:{"text-align":"center"}},"344",-1),W={style:{"text-align":"left"}},X={href:"https://leetcode.com/problems/reverse-string",target:"_blank",rel:"noopener noreferrer"},Y={style:{"text-align":"center"}},Z={href:"/problem/0344",target:"_blank",rel:"noopener noreferrer"},$={style:{"text-align":"left"}},tt=t("code",null,"双指针",-1),et=t("code",null,"字符串",-1),ot={style:{"text-align":"left"}},lt=t("td",{style:{"text-align":"center"}},"557",-1),nt={style:{"text-align":"left"}},st={href:"https://leetcode.com/problems/reverse-words-in-a-string-iii",target:"_blank",rel:"noopener noreferrer"},dt={style:{"text-align":"center"}},rt={href:"/problem/0557",target:"_blank",rel:"noopener noreferrer"},it={style:{"text-align":"left"}},at=t("code",null,"双指针",-1),ct=t("code",null,"字符串",-1),_t={style:{"text-align":"left"}},ht=t("td",{style:{"text-align":"center"}},"49",-1),ut={style:{"text-align":"left"}},gt={href:"https://leetcode.com/problems/group-anagrams",target:"_blank",rel:"noopener noreferrer"},ft={style:{"text-align":"center"}},mt={href:"/problem/0049",target:"_blank",rel:"noopener noreferrer"},pt={style:{"text-align":"left"}},xt=t("code",null,"数组",-1),yt=t("code",null,"哈希表",-1),bt=t("code",null,"字符串",-1),kt=t("code",null,"1+",-1),wt={style:{"text-align":"left"}},Tt=t("td",{style:{"text-align":"center"}},"415",-1),vt={style:{"text-align":"left"}},Et={href:"https://leetcode.com/problems/add-strings",target:"_blank",rel:"noopener noreferrer"},It={style:{"text-align":"center"}},St={href:"/problem/0415",target:"_blank",rel:"noopener noreferrer"},Mt={style:{"text-align":"left"}},Bt=t("code",null,"数学",-1),At=t("code",null,"字符串",-1),Nt=t("code",null,"模拟",-1),Ct={style:{"text-align":"left"}},Ft=t("td",{style:{"text-align":"center"}},"151",-1),Ht={style:{"text-align":"left"}},Ut={href:"https://leetcode.com/problems/reverse-words-in-a-string",target:"_blank",rel:"noopener noreferrer"},Lt={style:{"text-align":"center"}},Pt={href:"/problem/0151",target:"_blank",rel:"noopener noreferrer"},Rt={style:{"text-align":"left"}},Vt=t("code",null,"双指针",-1),jt=t("code",null,"字符串",-1),Dt={style:{"text-align":"left"}},Ot=t("td",{style:{"text-align":"center"}},"43",-1),Gt={style:{"text-align":"left"}},Kt={href:"https://leetcode.com/problems/multiply-strings",target:"_blank",rel:"noopener noreferrer"},qt={style:{"text-align":"center"}},zt={href:"/problem/0043",target:"_blank",rel:"noopener noreferrer"},Jt={style:{"text-align":"left"}},Qt=t("code",null,"数学",-1),Wt=t("code",null,"字符串",-1),Xt=t("code",null,"模拟",-1),Yt={style:{"text-align":"left"}},Zt=t("td",{style:{"text-align":"center"}},"14",-1),$t={style:{"text-align":"left"}},te={href:"https://leetcode.com/problems/longest-common-prefix",target:"_blank",rel:"noopener noreferrer"},ee={style:{"text-align":"center"}},oe={href:"/problem/0014",target:"_blank",rel:"noopener noreferrer"},le={style:{"text-align":"left"}},ne=t("code",null,"字典树",-1),se=t("code",null,"字符串",-1),de={style:{"text-align":"left"}},re=t("h4",{id:"单模式串匹配",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#单模式串匹配","aria-hidden":"true"},"#"),o(" 单模式串匹配")],-1),ie=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),ae=t("td",{style:{"text-align":"center"}},"28",-1),ce={style:{"text-align":"left"}},_e={href:"https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string",target:"_blank",rel:"noopener noreferrer"},he={style:{"text-align":"center"}},ue={href:"/problem/0028",target:"_blank",rel:"noopener noreferrer"},ge={style:{"text-align":"left"}},fe=t("code",null,"双指针",-1),me=t("code",null,"字符串",-1),pe=t("code",null,"字符串匹配",-1),xe={style:{"text-align":"left"}},ye=t("td",{style:{"text-align":"center"}},"459",-1),be={style:{"text-align":"left"}},ke={href:"https://leetcode.com/problems/repeated-substring-pattern",target:"_blank",rel:"noopener noreferrer"},we={style:{"text-align":"center"}},Te={href:"/problem/0459",target:"_blank",rel:"noopener noreferrer"},ve={style:{"text-align":"left"}},Ee=t("code",null,"字符串",-1),Ie=t("code",null,"字符串匹配",-1),Se={style:{"text-align":"left"}},Me=t("td",{style:{"text-align":"center"}},"686",-1),Be={style:{"text-align":"left"}},Ae={href:"https://leetcode.com/problems/repeated-string-match",target:"_blank",rel:"noopener noreferrer"},Ne=t("td",{style:{"text-align":"center"}},null,-1),Ce={style:{"text-align":"left"}},Fe=t("code",null,"字符串",-1),He=t("code",null,"字符串匹配",-1),Ue={style:{"text-align":"left"}},Le=t("td",{style:{"text-align":"center"}},"1668",-1),Pe={style:{"text-align":"left"}},Re={href:"https://leetcode.com/problems/maximum-repeating-substring",target:"_blank",rel:"noopener noreferrer"},Ve=t("td",{style:{"text-align":"center"}},null,-1),je={style:{"text-align":"left"}},De=t("code",null,"字符串",-1),Oe=t("code",null,"动态规划",-1),Ge=t("code",null,"字符串匹配",-1),Ke={style:{"text-align":"left"}},qe=t("td",{style:{"text-align":"center"}},"796",-1),ze={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/rotate-string",target:"_blank",rel:"noopener noreferrer"},Qe=t("td",{style:{"text-align":"center"}},null,-1),We={style:{"text-align":"left"}},Xe=t("code",null,"字符串",-1),Ye=t("code",null,"字符串匹配",-1),Ze={style:{"text-align":"left"}},$e=t("td",{style:{"text-align":"center"}},"1408",-1),to={style:{"text-align":"left"}},eo={href:"https://leetcode.com/problems/string-matching-in-an-array",target:"_blank",rel:"noopener noreferrer"},oo=t("td",{style:{"text-align":"center"}},null,-1),lo={style:{"text-align":"left"}},no=t("code",null,"数组",-1),so=t("code",null,"字符串",-1),ro=t("code",null,"字符串匹配",-1),io={style:{"text-align":"left"}},ao=t("td",{style:{"text-align":"center"}},"2156",-1),co={style:{"text-align":"left"}},_o={href:"https://leetcode.com/problems/find-substring-with-given-hash-value",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},null,-1),uo={style:{"text-align":"left"}},go=t("code",null,"字符串",-1),fo=t("code",null,"滑动窗口",-1),mo=t("code",null,"哈希函数",-1),po=t("code",null,"1+",-1),xo={style:{"text-align":"left"}},yo=t("h4",{id:"字典树",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#字典树","aria-hidden":"true"},"#"),o(" 字典树")],-1),bo=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),ko=t("td",{style:{"text-align":"center"}},"208",-1),wo={style:{"text-align":"left"}},To={href:"https://leetcode.com/problems/implement-trie-prefix-tree",target:"_blank",rel:"noopener noreferrer"},vo={style:{"text-align":"center"}},Eo={href:"/problem/0208",target:"_blank",rel:"noopener noreferrer"},Io={style:{"text-align":"left"}},So=t("code",null,"设计",-1),Mo=t("code",null,"字典树",-1),Bo=t("code",null,"哈希表",-1),Ao=t("code",null,"1+",-1),No={style:{"text-align":"left"}},Co=t("td",{style:{"text-align":"center"}},"677",-1),Fo={style:{"text-align":"left"}},Ho={href:"https://leetcode.com/problems/map-sum-pairs",target:"_blank",rel:"noopener noreferrer"},Uo=t("td",{style:{"text-align":"center"}},null,-1),Lo={style:{"text-align":"left"}},Po=t("code",null,"设计",-1),Ro=t("code",null,"字典树",-1),Vo=t("code",null,"哈希表",-1),jo=t("code",null,"1+",-1),Do={style:{"text-align":"left"}},Oo=t("td",{style:{"text-align":"center"}},"648",-1),Go={style:{"text-align":"left"}},Ko={href:"https://leetcode.com/problems/replace-words",target:"_blank",rel:"noopener noreferrer"},qo=t("td",{style:{"text-align":"center"}},null,-1),zo={style:{"text-align":"left"}},Jo=t("code",null,"字典树",-1),Qo=t("code",null,"数组",-1),Wo=t("code",null,"哈希表",-1),Xo=t("code",null,"1+",-1),Yo={style:{"text-align":"left"}},Zo=t("td",{style:{"text-align":"center"}},"642",-1),$o={style:{"text-align":"left"}},tl={href:"https://leetcode.com/problems/design-search-autocomplete-system",target:"_blank",rel:"noopener noreferrer"},el=t("td",{style:{"text-align":"center"}},null,-1),ol={style:{"text-align":"left"}},ll=t("code",null,"深度优先搜索",-1),nl=t("code",null,"设计",-1),sl=t("code",null,"字典树",-1),dl=t("code",null,"4+",-1),rl={style:{"text-align":"left"}},il=t("td",{style:{"text-align":"center"}},"211",-1),al={style:{"text-align":"left"}},cl={href:"https://leetcode.com/problems/design-add-and-search-words-data-structure",target:"_blank",rel:"noopener noreferrer"},_l={style:{"text-align":"center"}},hl={href:"/problem/0211",target:"_blank",rel:"noopener noreferrer"},ul={style:{"text-align":"left"}},gl=t("code",null,"深度优先搜索",-1),fl=t("code",null,"设计",-1),ml=t("code",null,"字典树",-1),pl=t("code",null,"1+",-1),xl={style:{"text-align":"left"}},yl=t("td",{style:{"text-align":"center"}},"421",-1),bl={style:{"text-align":"left"}},kl={href:"https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array",target:"_blank",rel:"noopener noreferrer"},wl=t("td",{style:{"text-align":"center"}},null,-1),Tl={style:{"text-align":"left"}},vl=t("code",null,"位运算",-1),El=t("code",null,"字典树",-1),Il=t("code",null,"数组",-1),Sl=t("code",null,"1+",-1),Ml={style:{"text-align":"left"}},Bl=t("td",{style:{"text-align":"center"}},"212",-1),Al={style:{"text-align":"left"}},Nl={href:"https://leetcode.com/problems/word-search-ii",target:"_blank",rel:"noopener noreferrer"},Cl={style:{"text-align":"center"}},Fl={href:"/problem/0212",target:"_blank",rel:"noopener noreferrer"},Hl={style:{"text-align":"left"}},Ul=t("code",null,"字典树",-1),Ll=t("code",null,"数组",-1),Pl=t("code",null,"字符串",-1),Rl=t("code",null,"2+",-1),Vl={style:{"text-align":"left"}},jl=t("td",{style:{"text-align":"center"}},"425",-1),Dl={style:{"text-align":"left"}},Ol={href:"https://leetcode.com/problems/word-squares",target:"_blank",rel:"noopener noreferrer"},Gl=t("td",{style:{"text-align":"center"}},null,-1),Kl={style:{"text-align":"left"}},ql=t("code",null,"字典树",-1),zl=t("code",null,"数组",-1),Jl=t("code",null,"字符串",-1),Ql=t("code",null,"1+",-1),Wl={style:{"text-align":"left"}},Xl=t("td",{style:{"text-align":"center"}},"336",-1),Yl={style:{"text-align":"left"}},Zl={href:"https://leetcode.com/problems/palindrome-pairs",target:"_blank",rel:"noopener noreferrer"},$l=t("td",{style:{"text-align":"center"}},null,-1),tn={style:{"text-align":"left"}},en=t("code",null,"字典树",-1),on=t("code",null,"数组",-1),ln=t("code",null,"哈希表",-1),nn=t("code",null,"1+",-1),sn={style:{"text-align":"left"}},dn=t("td",{style:{"text-align":"center"}},"1023",-1),rn={style:{"text-align":"left"}},an={href:"https://leetcode.com/problems/camelcase-matching",target:"_blank",rel:"noopener noreferrer"},cn=t("td",{style:{"text-align":"center"}},null,-1),_n={style:{"text-align":"left"}},hn=t("code",null,"字典树",-1),un=t("code",null,"数组",-1),gn=t("code",null,"双指针",-1),fn=t("code",null,"2+",-1),mn={style:{"text-align":"left"}},pn=t("td",{style:{"text-align":"center"}},"676",-1),xn={style:{"text-align":"left"}},yn={href:"https://leetcode.com/problems/implement-magic-dictionary",target:"_blank",rel:"noopener noreferrer"},bn=t("td",{style:{"text-align":"center"}},null,-1),kn={style:{"text-align":"left"}},wn=t("code",null,"深度优先搜索",-1),Tn=t("code",null,"设计",-1),vn=t("code",null,"字典树",-1),En=t("code",null,"2+",-1),In={style:{"text-align":"left"}},Sn=t("td",{style:{"text-align":"center"}},"440",-1),Mn={style:{"text-align":"left"}},Bn={href:"https://leetcode.com/problems/k-th-smallest-in-lexicographical-order",target:"_blank",rel:"noopener noreferrer"},An={style:{"text-align":"center"}},Nn={href:"/problem/0440",target:"_blank",rel:"noopener noreferrer"},Cn={style:{"text-align":"left"}},Fn=t("code",null,"字典树",-1),Hn={style:{"text-align":"left"}};function Un(Ln,Pn){const s=i("ExternalLinkIcon"),n=i("RouterLink"),d=i("font");return c(),_("div",null,[f,r(" START TABLE "),r(" Please keep comment here to allow auto update "),r(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),m,p,r(" prettier-ignore "),t("table",null,[x,t("tbody",null,[t("tr",null,[y,t("td",b,[t("a",k,[o("验证回文串"),e(s)])]),t("td",w,[t("a",T,[o("[✓]"),e(s)])]),t("td",v,[e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[E]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[I]),_:1})]),t("td",S,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[M,t("td",B,[t("a",A,[o("最长回文子串"),e(s)])]),t("td",N,[t("a",C,[o("[✓]"),e(s)])]),t("td",F,[e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[H]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[U]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[L]),_:1})]),t("td",P,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[R,t("td",V,[t("a",j,[o("无重复字符的最长子串"),e(s)])]),t("td",D,[t("a",O,[o("[✓]"),e(s)])]),t("td",G,[e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[K]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[q]),_:1}),o(),e(n,{to:"/outline/tag/sliding-window.html"},{default:l(()=>[z]),_:1})]),t("td",J,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Q,t("td",W,[t("a",X,[o("反转字符串"),e(s)])]),t("td",Y,[t("a",Z,[o("[✓]"),e(s)])]),t("td",$,[e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[tt]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[et]),_:1})]),t("td",ot,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[lt,t("td",nt,[t("a",st,[o("反转字符串中的单词 III"),e(s)])]),t("td",dt,[t("a",rt,[o("[✓]"),e(s)])]),t("td",it,[e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[at]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[ct]),_:1})]),t("td",_t,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[ht,t("td",ut,[t("a",gt,[o("字母异位词分组"),e(s)])]),t("td",ft,[t("a",mt,[o("[✓]"),e(s)])]),t("td",pt,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[xt]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[yt]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[bt]),_:1}),o(),kt]),t("td",wt,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Tt,t("td",vt,[t("a",Et,[o("字符串相加"),e(s)])]),t("td",It,[t("a",St,[o("[✓]"),e(s)])]),t("td",Mt,[e(n,{to:"/outline/tag/math.html"},{default:l(()=>[Bt]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[At]),_:1}),o(),e(n,{to:"/outline/tag/simulation.html"},{default:l(()=>[Nt]),_:1})]),t("td",Ct,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Ft,t("td",Ht,[t("a",Ut,[o("反转字符串中的单词"),e(s)])]),t("td",Lt,[t("a",Pt,[o("[✓]"),e(s)])]),t("td",Rt,[e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[Vt]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[jt]),_:1})]),t("td",Dt,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Ot,t("td",Gt,[t("a",Kt,[o("字符串相乘"),e(s)])]),t("td",qt,[t("a",zt,[o("[✓]"),e(s)])]),t("td",Jt,[e(n,{to:"/outline/tag/math.html"},{default:l(()=>[Qt]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Wt]),_:1}),o(),e(n,{to:"/outline/tag/simulation.html"},{default:l(()=>[Xt]),_:1})]),t("td",Yt,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Zt,t("td",$t,[t("a",te,[o("最长公共前缀"),e(s)])]),t("td",ee,[t("a",oe,[o("[✓]"),e(s)])]),t("td",le,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[ne]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[se]),_:1})]),t("td",de,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])])])]),re,r(" prettier-ignore "),t("table",null,[ie,t("tbody",null,[t("tr",null,[ae,t("td",ce,[t("a",_e,[o("找出字符串中第一个匹配项的下标"),e(s)])]),t("td",he,[t("a",ue,[o("[✓]"),e(s)])]),t("td",ge,[e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[fe]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[me]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[pe]),_:1})]),t("td",xe,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[ye,t("td",be,[t("a",ke,[o("重复的子字符串"),e(s)])]),t("td",we,[t("a",Te,[o("[✓]"),e(s)])]),t("td",ve,[e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Ee]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[Ie]),_:1})]),t("td",Se,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[Me,t("td",Be,[t("a",Ae,[o("重复叠加字符串匹配"),e(s)])]),Ne,t("td",Ce,[e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Fe]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[He]),_:1})]),t("td",Ue,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Le,t("td",Pe,[t("a",Re,[o("最大重复子字符串"),e(s)])]),Ve,t("td",je,[e(n,{to:"/outline/tag/string.html"},{default:l(()=>[De]),_:1}),o(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:l(()=>[Oe]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[Ge]),_:1})]),t("td",Ke,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[qe,t("td",ze,[t("a",Je,[o("旋转字符串"),e(s)])]),Qe,t("td",We,[e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Xe]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[Ye]),_:1})]),t("td",Ze,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[$e,t("td",to,[t("a",eo,[o("数组中的字符串匹配"),e(s)])]),oo,t("td",lo,[e(n,{to:"/outline/tag/array.html"},{default:l(()=>[no]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[so]),_:1}),o(),e(n,{to:"/outline/tag/string-matching.html"},{default:l(()=>[ro]),_:1})]),t("td",io,[e(d,{color:"#15bd66"},{default:l(()=>[o("Easy")]),_:1})])]),t("tr",null,[ao,t("td",co,[t("a",_o,[o("查找给定哈希值的子串"),e(s)])]),ho,t("td",uo,[e(n,{to:"/outline/tag/string.html"},{default:l(()=>[go]),_:1}),o(),e(n,{to:"/outline/tag/sliding-window.html"},{default:l(()=>[fo]),_:1}),o(),e(n,{to:"/outline/tag/hash-function.html"},{default:l(()=>[mo]),_:1}),o(),po]),t("td",xo,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])])])]),yo,r(" prettier-ignore "),t("table",null,[bo,t("tbody",null,[t("tr",null,[ko,t("td",wo,[t("a",To,[o("实现 Trie (前缀树)"),e(s)])]),t("td",vo,[t("a",Eo,[o("[✓]"),e(s)])]),t("td",Io,[e(n,{to:"/outline/tag/design.html"},{default:l(()=>[So]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[Mo]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Bo]),_:1}),o(),Ao]),t("td",No,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Co,t("td",Fo,[t("a",Ho,[o("键值映射"),e(s)])]),Uo,t("td",Lo,[e(n,{to:"/outline/tag/design.html"},{default:l(()=>[Po]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[Ro]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Vo]),_:1}),o(),jo]),t("td",Do,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Oo,t("td",Go,[t("a",Ko,[o("单词替换"),e(s)])]),qo,t("td",zo,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[Jo]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Qo]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[Wo]),_:1}),o(),Xo]),t("td",Yo,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Zo,t("td",$o,[t("a",tl,[o("设计搜索自动补全系统"),e(s)])]),el,t("td",ol,[e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[ll]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[nl]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[sl]),_:1}),o(),dl]),t("td",rl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[il,t("td",al,[t("a",cl,[o("添加与搜索单词 - 数据结构设计"),e(s)])]),t("td",_l,[t("a",hl,[o("[✓]"),e(s)])]),t("td",ul,[e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[gl]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[fl]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[ml]),_:1}),o(),pl]),t("td",xl,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[yl,t("td",bl,[t("a",kl,[o("数组中两个数的最大异或值"),e(s)])]),wl,t("td",Tl,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:l(()=>[vl]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[El]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Il]),_:1}),o(),Sl]),t("td",Ml,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Bl,t("td",Al,[t("a",Nl,[o("单词搜索 II"),e(s)])]),t("td",Cl,[t("a",Fl,[o("[✓]"),e(s)])]),t("td",Hl,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[Ul]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[Ll]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Pl]),_:1}),o(),Rl]),t("td",Vl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[jl,t("td",Dl,[t("a",Ol,[o("单词方块"),e(s)])]),Gl,t("td",Kl,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[ql]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[zl]),_:1}),o(),e(n,{to:"/outline/tag/string.html"},{default:l(()=>[Jl]),_:1}),o(),Ql]),t("td",Wl,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[Xl,t("td",Yl,[t("a",Zl,[o("回文对"),e(s)])]),$l,t("td",tn,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[en]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[on]),_:1}),o(),e(n,{to:"/outline/tag/hash-table.html"},{default:l(()=>[ln]),_:1}),o(),nn]),t("td",sn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])]),t("tr",null,[dn,t("td",rn,[t("a",an,[o("驼峰式匹配"),e(s)])]),cn,t("td",_n,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[hn]),_:1}),o(),e(n,{to:"/outline/tag/array.html"},{default:l(()=>[un]),_:1}),o(),e(n,{to:"/outline/tag/two-pointers.html"},{default:l(()=>[gn]),_:1}),o(),fn]),t("td",mn,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[pn,t("td",xn,[t("a",yn,[o("实现一个魔法字典"),e(s)])]),bn,t("td",kn,[e(n,{to:"/outline/tag/depth-first-search.html"},{default:l(()=>[wn]),_:1}),o(),e(n,{to:"/outline/tag/design.html"},{default:l(()=>[Tn]),_:1}),o(),e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[vn]),_:1}),o(),En]),t("td",In,[e(d,{color:"#ffb800"},{default:l(()=>[o("Medium")]),_:1})])]),t("tr",null,[Sn,t("td",Mn,[t("a",Bn,[o("字典序的第K小数字"),e(s)])]),t("td",An,[t("a",Nn,[o("[✓]"),e(s)])]),t("td",Cn,[e(n,{to:"/outline/tag/trie.html"},{default:l(()=>[Fn]),_:1})]),t("td",Hn,[e(d,{color:"#ff334b"},{default:l(()=>[o("Hard")]),_:1})])])])])])}const Vn=a(g,[["render",Un],["__file","string.html.vue"]]);export{Vn as default};
