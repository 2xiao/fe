import{_ as u,r as c,o as p,c as _,a as t,b as e,d as n,w as s,f as h,e as k}from"./app-mXo2sCT-.js";const f={},m={id:"_94-二叉树的中序遍历",tabindex:"-1"},g=t("a",{class:"header-anchor",href:"#_94-二叉树的中序遍历","aria-hidden":"true"},"#",-1),b={href:"https://2xiao.github.io/leetcode-js/problem/0094.html",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"栈",-1),v=t("code",null,"树",-1),x=t("code",null,"深度优先搜索",-1),w=t("code",null,"二叉树",-1),T={href:"https://leetcode.cn/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},O=t("code",null,"力扣",-1),E={href:"https://leetcode.com/problems/binary-tree-inorder-traversal",target:"_blank",rel:"noopener noreferrer"},j=t("code",null,"LeetCode",-1),N=k('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes&#39; values</em>.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,null,2,3]</p><p>Output: [1,3,2]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: root = []</p><p>Output: []</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: root = [1]</p><p>Output: [1]</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>中序</strong> 遍历。</p><p><strong>进阶</strong>：递归算法很简单，你可以通过迭代算法完成吗？</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h3 id="思路一-递归" tabindex="-1"><a class="header-anchor" href="#思路一-递归" aria-hidden="true">#</a> 思路一：递归</h3><p>中序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树。而在访问左子树或者右子树的时候，按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，可以直接用递归函数来模拟这一过程。</p><ul><li>先递归调用 <code>preorderTraversal(root.left)</code> 来遍历 <code>root</code> 节点的左子树</li><li>再将 <code>root</code> 节点的值加入答案</li><li>最后递归调用 <code>preorderTraversal(root.right)</code> 来遍历 <code>root</code> 节点的右子树即可</li><li>递归终止的条件为碰到空节点</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是二叉树的节点数。每一个节点恰好被遍历一次。</p></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code>，为递归过程中栈的开销，平均情况下为 <code>O(log⁡n)</code>，最坏情况下树呈现链状，为 <code>O(n)</code>。</p></li></ul><hr><h3 id="思路二-迭代" tabindex="-1"><a class="header-anchor" href="#思路二-迭代" aria-hidden="true">#</a> 思路二：迭代</h3><p>也可以用迭代的方式实现思路一的递归函数，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而迭代的时候需要显式地将这个栈模拟出来，其余的实现与细节都相同，具体可以参考下面的代码。</p><p>中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进 res 数组中），这就造成了处理顺序和访问顺序是不一致的。那么在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</p><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是二叉树的节点数。每一个节点恰好被遍历一次。</p></li><li><p><strong>空间复杂度</strong>：<code>O(n)</code>，为迭代过程中显式栈的开销，平均情况下为 <code>O(log⁡n)</code>，最坏情况下树呈现链状，为 <code>O(n)</code>。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',28),C=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("TreeNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"root"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"inorderTraversal"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" res "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("root "),t("span",{class:"token operator"},"=="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
	res`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"..."),t("span",{class:"token function"},"inorderTraversal"),t("span",{class:"token punctuation"},"("),e("root"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	res`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("root"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	res`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),t("span",{class:"token operator"},"..."),t("span",{class:"token function"},"inorderTraversal"),t("span",{class:"token punctuation"},"("),e("root"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),I=t("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[t("pre",{class:"language-javascript"},[t("code",null,[t("span",{class:"token doc-comment comment"},[e(`/**
 * `),t("span",{class:"token keyword"},"@param"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("TreeNode"),t("span",{class:"token punctuation"},"}")]),e(),t("span",{class:"token parameter"},"root"),e(`
 * `),t("span",{class:"token keyword"},"@return"),e(),t("span",{class:"token class-name"},[t("span",{class:"token punctuation"},"{"),e("number"),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},"}")]),e(`
 */`)]),e(`
`),t("span",{class:"token keyword"},"var"),e(),t("span",{class:"token function-variable function"},"inorderTraversal"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"root"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" res "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("root "),t("span",{class:"token operator"},"=="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" stack "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"["),t("span",{class:"token punctuation"},"]"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"let"),e(" cur "),t("span",{class:"token operator"},"="),e(" root"),t("span",{class:"token punctuation"},";"),e(`
	`),t("span",{class:"token keyword"},"while"),e(),t("span",{class:"token punctuation"},"("),e("cur "),t("span",{class:"token operator"},"!="),e(),t("span",{class:"token keyword"},"null"),e(),t("span",{class:"token operator"},"||"),e(" stack"),t("span",{class:"token punctuation"},"."),e("length"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
		`),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("cur "),t("span",{class:"token operator"},"!="),e(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e(`
			stack`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("cur"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
			cur `),t("span",{class:"token operator"},"="),e(" cur"),t("span",{class:"token punctuation"},"."),e("left"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token keyword"},"else"),e(),t("span",{class:"token punctuation"},"{"),e(`
			cur `),t("span",{class:"token operator"},"="),e(" stack"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"pop"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
			res`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"push"),t("span",{class:"token punctuation"},"("),e("cur"),t("span",{class:"token punctuation"},"."),e("val"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(`
			cur `),t("span",{class:"token operator"},"="),e(" cur"),t("span",{class:"token punctuation"},"."),e("right"),t("span",{class:"token punctuation"},";"),e(`
		`),t("span",{class:"token punctuation"},"}"),e(`
	`),t("span",{class:"token punctuation"},"}"),e(`
	`),t("span",{class:"token keyword"},"return"),e(" res"),t("span",{class:"token punctuation"},";"),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),e(`
`)])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),q=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),L=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),M=t("td",{style:{"text-align":"center"}},"98",-1),V={style:{"text-align":"left"}},A={href:"https://leetcode.com/problems/validate-binary-search-tree",target:"_blank",rel:"noopener noreferrer"},B={style:{"text-align":"center"}},R={style:{"text-align":"left"}},z=t("code",null,"树",-1),F=t("code",null,"深度优先搜索",-1),G=t("code",null,"二叉搜索树",-1),H=t("code",null,"1+",-1),K={style:{"text-align":"left"}},S=t("td",{style:{"text-align":"center"}},"144",-1),D={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/binary-tree-preorder-traversal",target:"_blank",rel:"noopener noreferrer"},P={style:{"text-align":"center"}},Q={style:{"text-align":"left"}},U=t("code",null,"栈",-1),W=t("code",null,"树",-1),X=t("code",null,"深度优先搜索",-1),Y=t("code",null,"1+",-1),Z={style:{"text-align":"left"}},$=t("td",{style:{"text-align":"center"}},"145",-1),tt={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/binary-tree-postorder-traversal",target:"_blank",rel:"noopener noreferrer"},nt={style:{"text-align":"center"}},st={style:{"text-align":"left"}},ot=t("code",null,"栈",-1),at=t("code",null,"树",-1),lt=t("code",null,"深度优先搜索",-1),ct=t("code",null,"1+",-1),rt={style:{"text-align":"left"}},it=t("td",{style:{"text-align":"center"}},"173",-1),dt={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/binary-search-tree-iterator",target:"_blank",rel:"noopener noreferrer"},pt={style:{"text-align":"center"}},_t={style:{"text-align":"left"}},ht=t("code",null,"栈",-1),kt=t("code",null,"树",-1),ft=t("code",null,"设计",-1),mt=t("code",null,"3+",-1),gt={style:{"text-align":"left"}},bt=t("td",{style:{"text-align":"center"}},"230",-1),yt={style:{"text-align":"left"}},vt={href:"https://leetcode.com/problems/kth-smallest-element-in-a-bst",target:"_blank",rel:"noopener noreferrer"},xt={style:{"text-align":"center"}},wt={style:{"text-align":"left"}},Tt=t("code",null,"树",-1),Ot=t("code",null,"深度优先搜索",-1),Et=t("code",null,"二叉搜索树",-1),jt=t("code",null,"1+",-1),Nt={style:{"text-align":"left"}},Ct=t("td",{style:{"text-align":"center"}},"272",-1),It={style:{"text-align":"left"}},qt={href:"https://leetcode.com/problems/closest-binary-search-tree-value-ii",target:"_blank",rel:"noopener noreferrer"},Lt=t("td",{style:{"text-align":"center"}},null,-1),Mt={style:{"text-align":"left"}},Vt=t("code",null,"栈",-1),At=t("code",null,"树",-1),Bt=t("code",null,"深度优先搜索",-1),Rt=t("code",null,"4+",-1),zt={style:{"text-align":"left"}},Ft=t("td",{style:{"text-align":"center"}},"285",-1),Gt={style:{"text-align":"left"}},Ht={href:"https://leetcode.com/problems/inorder-successor-in-bst",target:"_blank",rel:"noopener noreferrer"},Kt=t("td",{style:{"text-align":"center"}},null,-1),St={style:{"text-align":"left"}},Dt=t("code",null,"树",-1),Jt=t("code",null,"深度优先搜索",-1),Pt=t("code",null,"二叉搜索树",-1),Qt=t("code",null,"1+",-1),Ut={style:{"text-align":"left"}},Wt=t("td",{style:{"text-align":"center"}},"426",-1),Xt={style:{"text-align":"left"}},Yt={href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Zt={style:{"text-align":"center"}},$t={style:{"text-align":"left"}},te=t("code",null,"栈",-1),ee=t("code",null,"树",-1),ne=t("code",null,"深度优先搜索",-1),se=t("code",null,"4+",-1),oe={style:{"text-align":"left"}},ae=t("td",{style:{"text-align":"center"}},"783",-1),le={style:{"text-align":"left"}},ce={href:"https://leetcode.com/problems/minimum-distance-between-bst-nodes",target:"_blank",rel:"noopener noreferrer"},re={style:{"text-align":"center"}},ie={style:{"text-align":"left"}},de=t("code",null,"树",-1),ue=t("code",null,"深度优先搜索",-1),pe=t("code",null,"广度优先搜索",-1),_e=t("code",null,"2+",-1),he={style:{"text-align":"left"}};function ke(fe,me){const a=c("ExternalLinkIcon"),l=c("font"),o=c("RouterLink"),d=c("CodeTabs");return p(),_("div",null,[t("h1",m,[g,e(),t("a",b,[e("94. 二叉树的中序遍历"),n(a)])]),t("p",null,[e("🟢 "),n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1}),e("  🔖  "),n(o,{to:"/tag/stack.html"},{default:s(()=>[y]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[v]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[x]),_:1}),e(),n(o,{to:"/tag/binary-tree.html"},{default:s(()=>[w]),_:1}),e("  🔗 "),t("a",T,[O,n(a)]),e(),t("a",E,[j,n(a)])]),N,n(d,{id:"149",data:[{id:"递归"},{id:"迭代"}]},{title0:s(({value:r,isActive:i})=>[e("递归")]),title1:s(({value:r,isActive:i})=>[e("迭代")]),tab0:s(({value:r,isActive:i})=>[C]),tab1:s(({value:r,isActive:i})=>[I]),_:1}),q,h(" prettier-ignore "),t("table",null,[L,t("tbody",null,[t("tr",null,[M,t("td",V,[t("a",A,[e("验证二叉搜索树"),n(a)])]),t("td",B,[n(o,{to:"/problem/0098.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",R,[n(o,{to:"/tag/tree.html"},{default:s(()=>[z]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[F]),_:1}),e(),n(o,{to:"/tag/binary-search-tree.html"},{default:s(()=>[G]),_:1}),e(),H]),t("td",K,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[S,t("td",D,[t("a",J,[e("二叉树的前序遍历"),n(a)])]),t("td",P,[n(o,{to:"/problem/0144.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Q,[n(o,{to:"/tag/stack.html"},{default:s(()=>[U]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[W]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[X]),_:1}),e(),Y]),t("td",Z,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[$,t("td",tt,[t("a",et,[e("二叉树的后序遍历"),n(a)])]),t("td",nt,[n(o,{to:"/problem/0145.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",st,[n(o,{to:"/tag/stack.html"},{default:s(()=>[ot]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[at]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[lt]),_:1}),e(),ct]),t("td",rt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])]),t("tr",null,[it,t("td",dt,[t("a",ut,[e("二叉搜索树迭代器"),n(a)])]),t("td",pt,[n(o,{to:"/problem/0173.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",_t,[n(o,{to:"/tag/stack.html"},{default:s(()=>[ht]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[kt]),_:1}),e(),n(o,{to:"/tag/design.html"},{default:s(()=>[ft]),_:1}),e(),mt]),t("td",gt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[bt,t("td",yt,[t("a",vt,[e("二叉搜索树中第 K 小的元素"),n(a)])]),t("td",xt,[n(o,{to:"/problem/0230.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",wt,[n(o,{to:"/tag/tree.html"},{default:s(()=>[Tt]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[Ot]),_:1}),e(),n(o,{to:"/tag/binary-search-tree.html"},{default:s(()=>[Et]),_:1}),e(),jt]),t("td",Nt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Ct,t("td",It,[t("a",qt,[e("最接近的二叉搜索树值 II 🔒"),n(a)])]),Lt,t("td",Mt,[n(o,{to:"/tag/stack.html"},{default:s(()=>[Vt]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[At]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[Bt]),_:1}),e(),Rt]),t("td",zt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[Ft,t("td",Gt,[t("a",Ht,[e("二叉搜索树中的中序后继 🔒"),n(a)])]),Kt,t("td",St,[n(o,{to:"/tag/tree.html"},{default:s(()=>[Dt]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[Jt]),_:1}),e(),n(o,{to:"/tag/binary-search-tree.html"},{default:s(()=>[Pt]),_:1}),e(),Qt]),t("td",Ut,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[Wt,t("td",Xt,[t("a",Yt,[e("将二叉搜索树转化为排序的双向链表 🔒"),n(a)])]),t("td",Zt,[n(o,{to:"/problem/0426.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",$t,[n(o,{to:"/tag/stack.html"},{default:s(()=>[te]),_:1}),e(),n(o,{to:"/tag/tree.html"},{default:s(()=>[ee]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[ne]),_:1}),e(),se]),t("td",oe,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[ae,t("td",le,[t("a",ce,[e("二叉搜索树节点最小距离"),n(a)])]),t("td",re,[n(o,{to:"/problem/0783.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",ie,[n(o,{to:"/tag/tree.html"},{default:s(()=>[de]),_:1}),e(),n(o,{to:"/tag/depth-first-search.html"},{default:s(()=>[ue]),_:1}),e(),n(o,{to:"/tag/breadth-first-search.html"},{default:s(()=>[pe]),_:1}),e(),_e]),t("td",he,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})])])])])])}const be=u(f,[["render",ke],["__file","0094.html.vue"]]);export{be as default};
