import{_ as r,r as i,o as d,c as k,d as t,w as a,a as n,b as s,f as p,e as u}from"./app-JnDxddK3.js";const m="/leetcode-js/assets/2-3-1-dE_3FrDA.png",h="/leetcode-js/assets/2-3-2-KnNVB_Qi.png",b="/leetcode-js/assets/2-3-3-zRwXf0VI.png",_={},v=u('<h1 id="_2-3-栈" tabindex="-1"><a class="header-anchor" href="#_2-3-栈" aria-hidden="true">#</a> 2.3 栈</h1><h2 id="栈的定义" tabindex="-1"><a class="header-anchor" href="#栈的定义" aria-hidden="true">#</a> 栈的定义</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>栈（Stack）</strong> 是一种“操作受限”的线性表，只允许在一端插入和删除数据。后进者先出，先进者后出，这就是典型的“栈”结构。</p></div><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>栈是一种 <strong>后进先出（Last In First Out）</strong> 的线性表，简称为 LIFO 结构。</p><p>有一个非常贴切的例子，就是一摞叠在一起的盘子。我们平时放盘子的时候，都是从下往上一个一个放；取的时候，我们也是从上往下一个一个地依次取，不能从中间任意抽出。</p><p>我们把栈中允许插入和删除的一端称为 <strong>栈顶（top）</strong>；另一端则称为 <strong>栈底（bottom）</strong>。当表中没有任何数据元素时，称之为 <strong>空栈</strong>。</p><p>栈主要包含两个操作，<strong>入栈和出栈</strong>，入栈<code>push()</code>就是在栈顶插入一个数据；出栈<code>pop()</code>就是从栈顶删除一个数据。</p><p>我们可以从两个方面来解释一下栈的定义：</p><ul><li><p>「<strong>线性表</strong>」</p><p>栈首先是一个线性表，栈中元素具有前驱后继的线性关系。栈中元素按照 <code>a1,a2,...,an</code> 的次序依次进栈。栈顶元素为 <code>an</code>。</p></li><li><p>「<strong>后进先出原则</strong>」</p><p>元素进入栈或者退出退栈是按照 <strong>后进先出（Last In First Out）</strong> 的原则进行的。每次删除的总是栈中当前的栈顶元素，即最后进入栈的元素。而在进栈时，最先进入栈的元素一定在栈底，最后进入栈的元素一定在栈顶。</p></li></ul><h2 id="栈的实现" tabindex="-1"><a class="header-anchor" href="#栈的实现" aria-hidden="true">#</a> 栈的实现</h2><p>栈既可以用数组来实现，也可以用链表来实现。</p><p>用数组实现的栈，我们叫作<strong>顺序栈</strong>，用链表实现的栈，我们叫作<strong>链式栈</strong>。</p><h3 id="顺序栈" tabindex="-1"><a class="header-anchor" href="#顺序栈" aria-hidden="true">#</a> 顺序栈</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 基于数组实现的顺序栈</span>
<span class="token keyword">class</span> <span class="token class-name">ArrayStack</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 栈中的数据</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 入栈</span>
	<span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 出栈</span>
	<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 清空栈</span>
	<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 获取栈中元素的数量</span>
	<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 打印栈</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details><summary>👉 查看代码测试 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: [1, 2, 3]</span>
stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: [1, 2]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="链式栈" tabindex="-1"><a class="header-anchor" href="#链式栈" aria-hidden="true">#</a> 链式栈</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义节点类</span>
<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// 节点中的数据</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 下一个节点</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 基于链表实现的链式栈</span>
<span class="token keyword">class</span> <span class="token class-name">LinkedListStack</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶元素</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 栈中元素的个数</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 入栈</span>
	<span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
		newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 出栈</span>
	<span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> data<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 清空栈</span>
	<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 获取栈中元素的数量</span>
	<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 打印栈</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details><summary>👉 查看代码测试 👈</summary><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedListStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output: Node {data: 3, next: Node {data: 2, next: Node {data: 1, next: null}}}</span>

stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// output: Node {data: 2, next: Node {data: 1, next: null}}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// output: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度：</h4><p>不管是顺序栈还是链式栈，我们存储数据只需要一个大小为 n 的数组就够了。在入栈和出栈过程中，只需要一两个临时变量存储空间，所以空间复杂度是 O(1)。我们说空间复杂度的时候，是指除了原本的数据存储空间外，算法运行还需要额外的存储空间。</p><h4 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度：</h4><p>不管是顺序栈还是链式栈，入栈、出栈只涉及栈顶个别数据的操作，所以时间复杂度都是 O(1)。</p><h2 id="栈的应用" tabindex="-1"><a class="header-anchor" href="#栈的应用" aria-hidden="true">#</a> 栈的应用</h2><p>从功能上来说，数组或链表可以完全替代栈，但特定的数据结构是对特定场景的抽象，数组或链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然也就更容易出错。</p><p>当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，我们就应该首选“栈”这种数据结构。</p><h3 id="_1-表达式求值" tabindex="-1"><a class="header-anchor" href="#_1-表达式求值" aria-hidden="true">#</a> 1. 表达式求值</h3><p>一个常见的应用场景是，编译器利用栈来实现表达式求值。</p>`,28),g={id:"📌-227-基本计算器-ii-leetcode",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#📌-227-基本计算器-ii-leetcode","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0227.html",target:"_blank",rel:"noopener noreferrer"},w=n("h4",{id:"💻-题目大意",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),x=n("p",null,"给定一个字符串表达式 s，表达式中所有整数为非负整数，运算符只有 +、-、*、/，没有括号。实现一个基本计算器来计算并返回它的值。",-1),q=n("p",null,[n("strong",null,"示例"),s("：")],-1),j=n("blockquote",null,[n("p",null,'输入：s = "3+2*2"'),n("p",null,"输出：7")],-1),H=n("blockquote",null,[n("p",null,'输入：s = " 3/2 "'),n("p",null,"输出：1")],-1),L=n("p",null,[n("strong",null,"说明"),s("：")],-1),M=n("ul",null,[n("li",null,[n("code",null,"1 ≤ s.length ≤ 3∗10^5")]),n("li",null,[n("code",null,"s"),s(" 由整数和算符（"),n("code",null,"+、-、*、/"),s("）组成，中间由一些空格隔开")]),n("li",null,[n("code",null,"s"),s(" 表示一个有效表达式")]),n("li",null,[s("表达式中的所有整数都是非负整数，且在范围"),n("code",null," [0, 2^31 − 1]"),s("内")]),n("li",null,[s("题目数据保证答案是一个 "),n("code",null,"32-bit"),s(" 整数")])],-1),I=n("h4",{id:"💡-解题思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),N=n("p",null,"通过两个栈来实现。其中一个是保存操作数的栈，另一个是保存运算符的栈。从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较。",-1),O=n("p",null,"如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。",-1),T=n("p",null,[s("比如："),n("code",null,"3 + 5 * 8 - 6"),s("：")],-1),E=n("figure",null,[n("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),B=n("h4",{id:"💎-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),C=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// TODO: add code"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),S=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [227. 基本计算器 II - LeetCode](https://2xiao.github.io/leetcode-js/problem/0227.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个字符串表达式 s，表达式中所有整数为非负整数，运算符只有 +、-、\\*、/，没有括号。实现一个基本计算器来计算并返回它的值。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "3+2\\*2"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：7

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = " 3/2 "
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：1

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 ≤ s.length ≤ 3∗10^5`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(" 由整数和算符（"),n("span",{class:"token code-snippet code keyword"},"`+、-、*、/`"),s(`）组成，中间由一些空格隔开
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`s`"),s(` 表示一个有效表达式
`),n("span",{class:"token list punctuation"},"-"),s(" 表达式中的所有整数都是非负整数，且在范围"),n("span",{class:"token code-snippet code keyword"},"` [0, 2^31 − 1]`"),s(`内
`),n("span",{class:"token list punctuation"},"-"),s(" 题目数据保证答案是一个 "),n("span",{class:"token code-snippet code keyword"},"`32-bit`"),s(` 整数

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

通过两个栈来实现。其中一个是保存操作数的栈，另一个是保存运算符的栈。从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较。

如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。

比如：`),n("span",{class:"token code-snippet code keyword"},"`3 + 5 * 8 - 6`"),s(`：

![](../image/2-3-2.png)

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token comment"},"// TODO: add code")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("h3",{id:"_2-括号匹配",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-括号匹配","aria-hidden":"true"},"#"),s(" 2. 括号匹配")],-1),V=n("p",null,"还可以借助栈来检查表达式中的括号是否匹配。",-1),z={id:"📌-20-有效的括号-leetcode",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#📌-20-有效的括号-leetcode","aria-hidden":"true"},"#",-1),R={href:"https://2xiao.github.io/leetcode-js/problem/0020.html",target:"_blank",rel:"noopener noreferrer"},F=n("h4",{id:"💻-题目大意-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-1","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),G=n("p",null,"给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串 s 是否有效（即括号是否匹配）。",-1),P=n("p",null,[n("strong",null,"示例"),s("：")],-1),U=n("blockquote",null,[n("p",null,'输入：s = "()"'),n("p",null,"输出：True")],-1),K=n("blockquote",null,[n("p",null,'输入：s = "()[]{}"'),n("p",null,"输出：True")],-1),Q=n("p",null,[n("strong",null,"说明"),s("：")],-1),X=n("p",null,"有效字符串需满足：",-1),J=n("ul",null,[n("li",null,"左括号必须用相同类型的右括号闭合。"),n("li",null,"左括号必须以正确的顺序闭合。")],-1),W=n("h4",{id:"💡-解题思路-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-1","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),Y=n("p",null,"用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；",-1),Z=n("p",null,[s("当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如“"),n("code",null,"("),s("”跟“"),n("code",null,")"),s("”匹配，“"),n("code",null,"["),s("”跟“"),n("code",null,"]"),s("”匹配，“"),n("code",null,"{"),s("”跟“"),n("code",null,"}"),s("”匹配，则继续扫描剩下的字符串。")],-1),$=n("p",null,"如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。",-1),nn=n("p",null,"当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明有未匹配的左括号，为非法格式。",-1),sn=n("h4",{id:"💎-代码-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-1","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),tn=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"s"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("boolean"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"isValid"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"s"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" len "),n("span",{class:"token operator"},"="),s(" s"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("len "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"let"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" len"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"let"),s(" v "),n("span",{class:"token operator"},"="),s(" s"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'{'"),s(),n("span",{class:"token operator"},"||"),s(" v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token operator"},"||"),s(" v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'['"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(`
			`),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'}'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'{'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(`
			`),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(`
			`),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"']'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'['"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),an=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [20. 有效的括号 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0020.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串 s 是否有效（即括号是否匹配）。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "()"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：True

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：s = "()[]{}"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：True

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

有效字符串需满足：

`),n("span",{class:"token list punctuation"},"-"),s(` 左括号必须用相同类型的右括号闭合。
`),n("span",{class:"token list punctuation"},"-"),s(` 左括号必须以正确的顺序闭合。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；

当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如“`),n("span",{class:"token code-snippet code keyword"},"`(`"),s("”跟“"),n("span",{class:"token code-snippet code keyword"},"`)`"),s("”匹配，“"),n("span",{class:"token code-snippet code keyword"},"`[`"),s("”跟“"),n("span",{class:"token code-snippet code keyword"},"`]`"),s("”匹配，“"),n("span",{class:"token code-snippet code keyword"},"`{`"),s("”跟“"),n("span",{class:"token code-snippet code keyword"},"`}`"),s(`”匹配，则继续扫描剩下的字符串。

如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。

当所有的括号都扫描完成之后，如果栈为空，则说明字符串为合法格式；否则，说明有未匹配的左括号，为非法格式。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("string"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"s"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("boolean"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"isValid"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"s"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"const"),s(" len "),n("span",{class:"token operator"},"="),s(" s"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("len "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token keyword"},"let"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" len"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"let"),s(" v "),n("span",{class:"token operator"},"="),s(" s"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'{'"),s(),n("span",{class:"token operator"},"||"),s(" v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'('"),s(),n("span",{class:"token operator"},"||"),s(" v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'['"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("v"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(`
			`),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'}'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'{'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(`
			`),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"')'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'('"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(`
			`),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"']'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'['"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),en=n("h3",{id:"_3-浏览器历史记录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-浏览器历史记录","aria-hidden":"true"},"#"),s(" 3. 浏览器历史记录")],-1),on=n("p",null,"另一个常见的应用场景是浏览器的前进后退功能。",-1),ln={id:"📌-1472-设计浏览器历史记录-leetcode",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#📌-1472-设计浏览器历史记录-leetcode","aria-hidden":"true"},"#",-1),pn={href:"https://2xiao.github.io/leetcode-js/problem/1472.html",target:"_blank",rel:"noopener noreferrer"},un=n("h4",{id:"💻-题目大意-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-2","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),rn=n("p",null,[s("设计一个只支持单个标签页的 "),n("strong",null,"浏览器"),s(" ，最开始浏览的网页是 "),n("code",null,"homepage"),s(" ，可以访问其他的网站 "),n("code",null,"url"),s(" ，也可以在浏览历史中后退 "),n("code",null,"steps"),s(" 步或前进 "),n("code",null,"steps"),s(" 步。")],-1),dn=n("p",null,[s("请你实现 "),n("code",null,"BrowserHistory"),s(" 类：")],-1),kn=n("ul",null,[n("li",null,[n("code",null,"BrowserHistory(string homepage)"),s(" ，用 "),n("code",null,"homepage"),s(" 初始化浏览器类。")]),n("li",null,[n("code",null,"void visit(string url)"),s(" 从当前页跳转访问 "),n("code",null,"url"),s(" 对应的页面。执行此操作会把浏览历史前进的记录全部删除。")]),n("li",null,[n("code",null,"string back(int steps)"),s(" 在浏览历史中后退 "),n("code",null,"steps"),s(" 步。如果你只能在浏览历史中后退至多 "),n("code",null,"x"),s(" 步且 "),n("code",null,"steps > x"),s(" ，那么你只后退 "),n("code",null,"x"),s(" 步。请返回后退 至多 "),n("code",null,"steps"),s(" 步以后的 "),n("code",null,"url"),s(" 。")]),n("li",null,[n("code",null,"string forward(int steps)"),s(" 在浏览历史中前进 "),n("code",null,"steps"),s(" 步。如果你只能在浏览历史中前进至多 x 步且 "),n("code",null,"steps > x"),s(" ，那么你只前进 "),n("code",null,"x"),s(" 步。请返回前进 至多 "),n("code",null,"steps"),s(" 步以后的 "),n("code",null,"url"),s(" 。")])],-1),mn=n("p",null,[n("strong",null,"示例"),s("：")],-1),hn=n("blockquote",null,[n("p",null,'BrowserHistory browserHistory = new BrowserHistory("leetcode.com");'),n("p",null,'browserHistory.visit("google.com"); // 访问 "google.com"'),n("p",null,'browserHistory.visit("facebook.com"); // 访问 "facebook.com"'),n("p",null,'browserHistory.visit("youtube.com"); // 访问 "youtube.com"'),n("p",null,'browserHistory.back(1); // 后退到 "facebook.com"'),n("p",null,'browserHistory.back(1); // 后退到 "google.com"'),n("p",null,'browserHistory.forward(1); // 前进到 "facebook.com"'),n("p",null,'browserHistory.visit("linkedin.com"); // 访问 "linkedin.com"'),n("p",null,"browserHistory.forward(2); // 无法前进任何步数。"),n("p",null,'browserHistory.back(2); // 后退两步依次先到 "facebook.com" ，然后到 "google.com"'),n("p",null,'browserHistory.back(7); // 只能后退一步到 "leetcode.com"')],-1),bn=n("p",null,[n("strong",null,"说明"),s("：")],-1),_n=n("ul",null,[n("li",null,[n("code",null,"1 <= homepage.length <= 20")]),n("li",null,[n("code",null,"1 <= url.length <= 20")]),n("li",null,[n("code",null,"1 <= steps <= 100")]),n("li",null,[n("code",null,"homepage"),s(" 和 "),n("code",null,"url"),s(" 都只包含 "),n("code",null,"'.'"),s(" 或者小写英文字母。")]),n("li",null,[s("最多调用 "),n("code",null,"5000"),s(" 次 "),n("code",null,"visit，"),s(),n("code",null,"back"),s(" 和 "),n("code",null,"forward"),s(" 函数。")])],-1),vn=n("h4",{id:"💡-解题思路-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-2","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),gn=n("p",null,[s("使用栈来存储浏览器的访问历史，使用 "),n("code",null,"cur_index"),s(" 变量来存储当前访问的网址在栈中的位置。")],-1),yn=n("ul",null,[n("li",null,[n("code",null,"visit"),s("： "),n("ul",null,[n("li",null,[s("先清空 "),n("code",null,"cur_index"),s(" 之后的历史记录；")]),n("li",null,[s("将 "),n("code",null,"url"),s(" 放入栈顶；")]),n("li",null,[s("将 "),n("code",null,"cur_index"),s(" 指向栈顶；")])])]),n("li",null,[n("code",null,"back"),s("：比较栈中存储的历史记录数 "),n("code",null,"n"),s(" 和 "),n("code",null,"steps"),s(" 的大小，最多只能倒退 "),n("code",null,"n"),s(" 步；")]),n("li",null,[n("code",null,"forward"),s(": 比较 "),n("code",null,"cur_index"),s(" 之后的历史记录数 "),n("code",null,"m"),s(" 和 "),n("code",null,"steps"),s(" 的大小，最多只能前进 "),n("code",null,"m"),s(" 步；")])],-1),fn=n("h4",{id:"💎-代码-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-2","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),wn=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BrowserHistory"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// @param {string} homepage"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"homepage"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("homepage"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {string} url"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"visit"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"url"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// clear forward history"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("url"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} steps"),s(`
	`),n("span",{class:"token comment"},"// @return {string}"),s(`
	`),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"steps"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"-"),s(" steps"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} steps"),s(`
	`),n("span",{class:"token comment"},"// @return {string}"),s(`
	`),n("span",{class:"token function"},"forward"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"steps"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"+"),s(" steps"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),xn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [1472. 设计浏览器历史记录 - LeetCode](https://2xiao.github.io/leetcode-js/problem/1472.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

设计一个只支持单个标签页的 `),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"浏览器"),n("span",{class:"token punctuation"},"**")]),s(" ，最开始浏览的网页是 "),n("span",{class:"token code-snippet code keyword"},"`homepage`"),s(" ，可以访问其他的网站 "),n("span",{class:"token code-snippet code keyword"},"`url`"),s(" ，也可以在浏览历史中后退 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(" 步或前进 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(` 步。

请你实现 `),n("span",{class:"token code-snippet code keyword"},"`BrowserHistory`"),s(` 类：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`BrowserHistory(string homepage)`"),s(" ，用 "),n("span",{class:"token code-snippet code keyword"},"`homepage`"),s(` 初始化浏览器类。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`void visit(string url)`"),s(" 从当前页跳转访问 "),n("span",{class:"token code-snippet code keyword"},"`url`"),s(` 对应的页面。执行此操作会把浏览历史前进的记录全部删除。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`string back(int steps)`"),s(" 在浏览历史中后退 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(" 步。如果你只能在浏览历史中后退至多 "),n("span",{class:"token code-snippet code keyword"},"`x`"),s(" 步且 "),n("span",{class:"token code-snippet code keyword"},"`steps > x`"),s(" ，那么你只后退 "),n("span",{class:"token code-snippet code keyword"},"`x`"),s(" 步。请返回后退 至多 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(" 步以后的 "),n("span",{class:"token code-snippet code keyword"},"`url`"),s(` 。
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`string forward(int steps)`"),s(" 在浏览历史中前进 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(" 步。如果你只能在浏览历史中前进至多 x 步且 "),n("span",{class:"token code-snippet code keyword"},"`steps > x`"),s(" ，那么你只前进 "),n("span",{class:"token code-snippet code keyword"},"`x`"),s(" 步。请返回前进 至多 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(" 步以后的 "),n("span",{class:"token code-snippet code keyword"},"`url`"),s(` 。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token blockquote punctuation"},">"),s(` BrowserHistory browserHistory = new BrowserHistory("leetcode.com");
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.visit("google.com"); // 访问 "google.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.visit("facebook.com"); // 访问 "facebook.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.visit("youtube.com"); // 访问 "youtube.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.back(1); // 后退到 "facebook.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.back(1); // 后退到 "google.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.forward(1); // 前进到 "facebook.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.visit("linkedin.com"); // 访问 "linkedin.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.forward(2); // 无法前进任何步数。
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.back(2); // 后退两步依次先到 "facebook.com" ，然后到 "google.com"
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` browserHistory.back(7); // 只能后退一步到 "leetcode.com"

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= homepage.length <= 20`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= url.length <= 20`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= steps <= 100`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`homepage`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`url`"),s(" 都只包含 "),n("span",{class:"token code-snippet code keyword"},"`'.'`"),s(` 或者小写英文字母。
`),n("span",{class:"token list punctuation"},"-"),s(" 最多调用 "),n("span",{class:"token code-snippet code keyword"},"`5000`"),s(" 次 "),n("span",{class:"token code-snippet code keyword"},"`visit，`"),s(),n("span",{class:"token code-snippet code keyword"},"`back`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`forward`"),s(` 函数。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

使用栈来存储浏览器的访问历史，使用 `),n("span",{class:"token code-snippet code keyword"},"`cur_index`"),s(` 变量来存储当前访问的网址在栈中的位置。

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`visit`"),s(`：
  `),n("span",{class:"token list punctuation"},"-"),s(" 先清空 "),n("span",{class:"token code-snippet code keyword"},"`cur_index`"),s(` 之后的历史记录；
  `),n("span",{class:"token list punctuation"},"-"),s(" 将 "),n("span",{class:"token code-snippet code keyword"},"`url`"),s(` 放入栈顶；
  `),n("span",{class:"token list punctuation"},"-"),s(" 将 "),n("span",{class:"token code-snippet code keyword"},"`cur_index`"),s(` 指向栈顶；
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`back`"),s("：比较栈中存储的历史记录数 "),n("span",{class:"token code-snippet code keyword"},"`n`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(" 的大小，最多只能倒退 "),n("span",{class:"token code-snippet code keyword"},"`n`"),s(` 步；
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`forward`"),s(": 比较 "),n("span",{class:"token code-snippet code keyword"},"`cur_index`"),s(" 之后的历史记录数 "),n("span",{class:"token code-snippet code keyword"},"`m`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`steps`"),s(" 的大小，最多只能前进 "),n("span",{class:"token code-snippet code keyword"},"`m`"),s(` 步；

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BrowserHistory"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token comment"},"// @param {string} homepage"),s(`
	`),n("span",{class:"token function"},"constructor"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"homepage"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("homepage"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {string} url"),s(`
	`),n("span",{class:"token comment"},"// @return {void}"),s(`
	`),n("span",{class:"token function"},"visit"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"url"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// clear forward history"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"slice"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("url"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} steps"),s(`
	`),n("span",{class:"token comment"},"// @return {string}"),s(`
	`),n("span",{class:"token function"},"back"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"steps"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"-"),s(" steps"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token comment"},"// @param {number} steps"),s(`
	`),n("span",{class:"token comment"},"// @return {string}"),s(`
	`),n("span",{class:"token function"},"forward"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"steps"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"="),s(" Math"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index "),n("span",{class:"token operator"},"+"),s(" steps"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("history"),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("cur_index"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),qn=u(`<h3 id="_4-函数调用栈" tabindex="-1"><a class="header-anchor" href="#_4-函数调用栈" aria-hidden="true">#</a> 4. 函数调用栈</h3><p>还有一个比较经典的应用场景就是函数调用栈。</p><p>操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构,用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。更好地理解，来看下这段代码的执行过程。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ret <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> a <span class="token operator">+</span> ret<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reuturn <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码中可以看出，main()函数调用了 add()函数，获取计算结果，并且与临时变量 a 相加，最后打印 res 的值。在执行到 add()函数时，函数调用栈的情况如下所示：</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="单调栈" tabindex="-1"><a class="header-anchor" href="#单调栈" aria-hidden="true">#</a> 单调栈</h2><div class="hint-container info"><p class="hint-container-title">定义</p><p><strong>单调栈（Monotone Stack）</strong> ：一种特殊的栈。在栈的先进后出规则基础上，要求从栈顶到栈底的元素是单调递增或者单调递减。</p></div><h3 id="单调递增栈" tabindex="-1"><a class="header-anchor" href="#单调递增栈" aria-hidden="true">#</a> 单调递增栈</h3><p><strong>单调递增栈</strong>：只有比栈顶元素小的元素才能直接进栈，否则需要先将栈中比当前元素小的元素出栈，再将当前元素入栈。</p><p>单调递增栈的入栈、出栈过程如下：</p><ul><li>假设当前进栈元素为 <code>x</code>，如果 <code>x</code> 比栈顶元素小，则直接入栈；</li><li>否则从栈顶开始遍历栈中元素，把小于 <code>x</code> 或者等于 <code>x</code> 的元素弹出栈，直到遇到一个大于 <code>x</code> 的元素为止，然后再把 <code>x</code> 压入栈中；</li></ul><p>比如，将数组 <code>[2, 7, 5, 4, 6]</code> 依次入栈，则过程是：</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:left;"><code>2</code> 入栈</td><td style="text-align:left;"><code>[2]</code></td></tr><tr><td style="text-align:left;"><code>2</code> 出栈， <code>7</code> 入栈</td><td style="text-align:left;"><code>[7]</code></td></tr><tr><td style="text-align:left;"><code>5</code> 入栈</td><td style="text-align:left;"><code>[7, 5]</code></td></tr><tr><td style="text-align:left;"><code>4</code> 入栈</td><td style="text-align:left;"><code>[7, 5, 4]</code></td></tr><tr><td style="text-align:left;"><code>4</code> 出栈， <code>5</code> 出栈， <code>6</code> 入栈</td><td style="text-align:left;"><code>[7, 6]</code></td></tr></tbody></table><p>最终栈中元素为 <code>[7, 6]</code>。</p><hr><h3 id="单调递减栈" tabindex="-1"><a class="header-anchor" href="#单调递减栈" aria-hidden="true">#</a> 单调递减栈</h3><p><strong>单调递减栈</strong>：只有比栈顶元素大的元素才能直接进栈，否则需要先将栈中比当前元素大的元素出栈，再将当前元素入栈。</p><p>单调递减栈的入栈、出栈过程如下：</p><ul><li>假设当前进栈元素为 <code>x</code>，如果 <code>x</code> 比栈顶元素大，则直接入栈。</li><li>否则从栈顶开始遍历栈中元素，把大于 <code>x</code> 或者等于 <code>x</code> 的元素弹出栈，直到遇到一个小于 <code>x</code> 的元素为止，然后再把 <code>x</code> 压入栈中。</li></ul><p>比如，将数组 <code>[2, 7, 5, 4, 6]</code> 依次入栈，则过程是：</p><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:left;"><code>2</code> 入栈</td><td style="text-align:left;"><code>[2]</code></td></tr><tr><td style="text-align:left;"><code>7</code> 入栈</td><td style="text-align:left;"><code>[2, 7]</code></td></tr><tr><td style="text-align:left;"><code>7</code> 出栈，<code>5</code> 入栈</td><td style="text-align:left;"><code>[2, 5]</code></td></tr><tr><td style="text-align:left;"><code>5</code> 出栈，<code>4</code> 入栈</td><td style="text-align:left;"><code>[2, 4]</code></td></tr><tr><td style="text-align:left;"><code>6</code> 入栈</td><td style="text-align:left;"><code>[2, 4, 6]</code></td></tr></tbody></table><p>最终栈中元素为 <code>[2, 4, 6]</code>。</p><h2 id="单调栈的应用" tabindex="-1"><a class="header-anchor" href="#单调栈的应用" aria-hidden="true">#</a> 单调栈的应用</h2><h3 id="_1-下一个更大元素" tabindex="-1"><a class="header-anchor" href="#_1-下一个更大元素" aria-hidden="true">#</a> 1. 下一个更大元素</h3>',25),jn={id:"📌-496-下一个更大元素-i-leetcode",tabindex:"-1"},Hn=n("a",{class:"header-anchor",href:"#📌-496-下一个更大元素-i-leetcode","aria-hidden":"true"},"#",-1),Ln={href:"https://2xiao.github.io/leetcode-js/problem/0496.html",target:"_blank",rel:"noopener noreferrer"},Mn=n("h4",{id:"💻-题目大意-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-3","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),In=n("p",null,[s("给定两个没有重复元素的数组 "),n("code",null,"nums1"),s(" 和 "),n("code",null,"nums2"),s(" ，其中 "),n("code",null,"nums1"),s(" 是 "),n("code",null,"nums2"),s(" 的子集。找出 "),n("code",null,"nums1"),s(" 中每个元素在 "),n("code",null,"nums2"),s(" 中的下一个比其大的值。")],-1),Nn=n("p",null,[n("code",null,"nums1"),s(" 中数字 "),n("code",null,"x"),s(" 的下一个更大元素是指： "),n("code",null,"x"),s(" 在 "),n("code",null,"nums2"),s(" 中对应位置的右边的第一个比 "),n("code",null,"x"),s(" 大的元素。如果不存在，对应位置输出 "),n("code",null,"-1"),s("。")],-1),On=n("p",null,[s("请设计一个时间复杂度为 "),n("code",null,"O(nums1.length + nums2.length)"),s(" 的解决方案。")],-1),Tn=n("p",null,[n("strong",null,"示例"),s("：")],-1),En=n("blockquote",null,[n("p",null,"输入：nums1 = [4,1,2], nums2 = [1,3,4,2]"),n("p",null,"输出：[-1,3,-1]")],-1),Bn=n("blockquote",null,[n("p",null,"输入：nums1 = [2,4], nums2 = [1,2,3,4]"),n("p",null,"输出：[3,-1]")],-1),Cn=n("p",null,[n("strong",null,"说明"),s("：")],-1),Sn=n("ul",null,[n("li",null,[n("code",null,"1 <= nums1.length <= nums2.length <= 1000")]),n("li",null,[n("code",null,"0 <= nums1[i]"),s(", "),n("code",null,"nums2[i] <= 10^4")]),n("li",null,[n("code",null,"nums1"),s(" 和 "),n("code",null,"nums2"),s(" 中所有整数互不相同")]),n("li",null,[n("code",null,"nums1"),s(" 中的所有整数同样出现在 "),n("code",null,"nums2"),s(" 中")])],-1),Dn=n("h4",{id:"💡-解题思路-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-3","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),Vn=n("ul",null,[n("li",null,"使用单调递增栈；"),n("li",null,[s("因为 "),n("code",null,"nums1"),s(" 是 "),n("code",null,"nums2"),s(" 的子集，所以我们可以先遍历一遍 "),n("code",null,"nums2"),s("，并构造单调递增栈；")]),n("li",null,[s("求出 "),n("code",null,"nums2"),s(" 中每个元素右侧下一个更大的元素，然后将其存储到哈希表中；")]),n("li",null,[s("再遍历一遍 "),n("code",null,"nums1"),s("，从哈希表中取出对应结果，存放到答案数组中；")]),n("li",null,[s("这种解法的时间复杂度是 "),n("code",null,"O(n)"),s("。")])],-1),zn=n("h4",{id:"💎-代码-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-3","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),An=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums1"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums2"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"nextGreaterElement"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("nums1"),n("span",{class:"token punctuation"},","),s(" nums2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" num "),n("span",{class:"token keyword"},"of"),s(" nums2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"&&"),s(" stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			map`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums1"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		nums1`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("nums1"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("nums1"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" nums1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),Rn=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [496. 下一个更大元素 I - LeetCode](https://2xiao.github.io/leetcode-js/problem/0496.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定两个没有重复元素的数组 `),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(" ，其中 "),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(" 是 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(" 的子集。找出 "),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(" 中每个元素在 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(` 中的下一个比其大的值。

`),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(" 中数字 "),n("span",{class:"token code-snippet code keyword"},"`x`"),s(" 的下一个更大元素是指： "),n("span",{class:"token code-snippet code keyword"},"`x`"),s(" 在 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(" 中对应位置的右边的第一个比 "),n("span",{class:"token code-snippet code keyword"},"`x`"),s(" 大的元素。如果不存在，对应位置输出 "),n("span",{class:"token code-snippet code keyword"},"`-1`"),s(`。

请设计一个时间复杂度为 `),n("span",{class:"token code-snippet code keyword"},"`O(nums1.length + nums2.length)`"),s(` 的解决方案。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：nums1 = [4,1,2], nums2 = [1,3,4,2]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[-1,3,-1]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：nums1 = [2,4], nums2 = [1,2,3,4]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[3,-1]

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= nums1.length <= nums2.length <= 1000`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`0 <= nums1[i]`"),s(", "),n("span",{class:"token code-snippet code keyword"},"`nums2[i] <= 10^4`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(" 和 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(` 中所有整数互不相同
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(" 中的所有整数同样出现在 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(` 中

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(` 使用单调递增栈；
`),n("span",{class:"token list punctuation"},"-"),s(" 因为 "),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(" 是 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(" 的子集，所以我们可以先遍历一遍 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(`，并构造单调递增栈；
`),n("span",{class:"token list punctuation"},"-"),s(" 求出 "),n("span",{class:"token code-snippet code keyword"},"`nums2`"),s(` 中每个元素右侧下一个更大的元素，然后将其存储到哈希表中；
`),n("span",{class:"token list punctuation"},"-"),s(" 再遍历一遍 "),n("span",{class:"token code-snippet code keyword"},"`nums1`"),s(`，从哈希表中取出对应结果，存放到答案数组中；
`),n("span",{class:"token list punctuation"},"-"),s(" 这种解法的时间复杂度是 "),n("span",{class:"token code-snippet code keyword"},"`O(n)`"),s(`。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums1"),s(`
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"nums2"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"nextGreaterElement"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("nums1"),n("span",{class:"token punctuation"},","),s(" nums2")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" num "),n("span",{class:"token keyword"},"of"),s(" nums2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"&&"),s(" stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			map`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("num"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" nums1"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		nums1`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("nums1"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("nums1"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" nums1"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Fn=n("h3",{id:"_2-每日温度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-每日温度","aria-hidden":"true"},"#"),s(" 2. 每日温度")],-1),Gn={id:"📌-739-每日温度-leetcode",tabindex:"-1"},Pn=n("a",{class:"header-anchor",href:"#📌-739-每日温度-leetcode","aria-hidden":"true"},"#",-1),Un={href:"https://2xiao.github.io/leetcode-js/problem/0739.html",target:"_blank",rel:"noopener noreferrer"},Kn=n("h4",{id:"💻-题目大意-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💻-题目大意-4","aria-hidden":"true"},"#"),s(" 💻 "),n("strong",null,"题目大意")],-1),Qn=n("p",null,"给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。",-1),Xn=n("p",null,[n("strong",null,"示例"),s("：")],-1),Jn=n("blockquote",null,[n("p",null,"输入：temperatures = [73,74,75,71,69,72,76,73]"),n("p",null,"输出：[1,1,4,2,1,1,0,0]")],-1),Wn=n("blockquote",null,[n("p",null,"输入：temperatures = [30,40,50,60]"),n("p",null,"输出：[1,1,1,0]")],-1),Yn=n("blockquote",null,[n("p",null,"输入：temperatures = [30,60,90]"),n("p",null,"输出：[1,1,0]")],-1),Zn=n("p",null,[n("strong",null,"说明"),s("：")],-1),$n=n("ul",null,[n("li",null,[n("code",null,"1 <= temperatures.length <= 10^5")]),n("li",null,[n("code",null,"30 <= temperatures[i] <= 100")])],-1),ns=n("h4",{id:"💡-解题思路-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💡-解题思路-4","aria-hidden":"true"},"#"),s(" 💡 "),n("strong",null,"解题思路")],-1),ss=n("ul",null,[n("li",null,"使用单调递增栈；"),n("li",null,[s("先遍历一遍 "),n("code",null,"temperatures"),s("，并构造单调递增栈，栈中保存元素对应的 "),n("code",null,"index"),s("；")]),n("li",null,[s("求出 "),n("code",null,"temperatures"),s(" 中每个元素右侧下一个更大的元素，然后将其对应的 "),n("code",null,"index"),s(" 存储到哈希表中；")]),n("li",null,[s("然后再遍历一遍 "),n("code",null,"temperatures"),s("，从哈希表中取出对应结果，将差值 "),n("code",null,"value - key"),s(" 存放到答案数组中；")]),n("li",null,[s("这种解法的时间复杂度是 "),n("code",null,"O(n)"),s("。")])],-1),ts=n("h4",{id:"💎-代码-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#💎-代码-4","aria-hidden":"true"},"#"),s(" 💎 "),n("strong",null,"代码")],-1),as=n("details",null,[n("summary",null,"👉 查看代码 👈"),n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"temperatures"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"dailyTemperatures"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"temperatures"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" temperatures"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(`
			stack`),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"&&"),s(`
			temperatures`),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" temperatures"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
		`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			map`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" temperatures"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		temperatures`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(" i "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" temperatures"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),es=n("div",{class:"language-markdown line-numbers-mode","data-ext":"md"},[n("pre",{class:"language-markdown"},[n("code",null,[n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 📌 [739. 每日温度 - LeetCode](https://2xiao.github.io/leetcode-js/problem/0739.html)")]),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💻 **题目大意**")]),s(`

给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"示例"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：temperatures = [73,74,75,71,69,72,76,73]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[1,1,4,2,1,1,0,0]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：temperatures = [30,40,50,60]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[1,1,1,0]

`),n("span",{class:"token blockquote punctuation"},">"),s(` 输入：temperatures = [30,60,90]
`),n("span",{class:"token blockquote punctuation"},">"),s(`
`),n("span",{class:"token blockquote punctuation"},">"),s(` 输出：[1,1,0]

`),n("span",{class:"token bold"},[n("span",{class:"token punctuation"},"**"),n("span",{class:"token content"},"说明"),n("span",{class:"token punctuation"},"**")]),s(`：

`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`1 <= temperatures.length <= 10^5`"),s(`
`),n("span",{class:"token list punctuation"},"-"),s(),n("span",{class:"token code-snippet code keyword"},"`30 <= temperatures[i] <= 100`"),s(`

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💡 **解题思路**")]),s(`

`),n("span",{class:"token list punctuation"},"-"),s(` 使用单调递增栈；
`),n("span",{class:"token list punctuation"},"-"),s(" 先遍历一遍 "),n("span",{class:"token code-snippet code keyword"},"`temperatures`"),s("，并构造单调递增栈，栈中保存元素对应的 "),n("span",{class:"token code-snippet code keyword"},"`index`"),s(`；
`),n("span",{class:"token list punctuation"},"-"),s(" 求出 "),n("span",{class:"token code-snippet code keyword"},"`temperatures`"),s(" 中每个元素右侧下一个更大的元素，然后将其对应的 "),n("span",{class:"token code-snippet code keyword"},"`index`"),s(` 存储到哈希表中；
`),n("span",{class:"token list punctuation"},"-"),s(" 然后再遍历一遍 "),n("span",{class:"token code-snippet code keyword"},"`temperatures`"),s("，从哈希表中取出对应结果，将差值 "),n("span",{class:"token code-snippet code keyword"},"`value - key`"),s(` 存放到答案数组中；
`),n("span",{class:"token list punctuation"},"-"),s(" 这种解法的时间复杂度是 "),n("span",{class:"token code-snippet code keyword"},"`O(n)`"),s(`。

`),n("span",{class:"token title important"},[n("span",{class:"token punctuation"},"####"),s(" 💎 **代码**")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("summary")]),n("span",{class:"token punctuation"},">")]),s("👉 查看代码 👈"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("summary")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token code"},[n("span",{class:"token punctuation"},"```"),n("span",{class:"token code-language"},"javascript"),s(`
`),n("span",{class:"token code-block language-javascript"},[n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(),n("span",{class:"token parameter"},"temperatures"),s(`
 * `),n("span",{class:"token keyword"},"@return"),s(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),s("number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"}")]),s(`
 */`)]),s(`
`),n("span",{class:"token keyword"},"var"),s(),n("span",{class:"token function-variable function"},"dailyTemperatures"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"temperatures"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"let"),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" temperatures"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s(`
			stack`),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"&&"),s(`
			temperatures`),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"["),s("stack"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"<"),s(" temperatures"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
		`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			map`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" temperatures"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		temperatures`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"has"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(" i "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" temperatures"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"token punctuation"},"```")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("details")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),os=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),s(" 相关题目")],-1),ls=n("h4",{id:"栈基础题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#栈基础题目","aria-hidden":"true"},"#"),s(" 栈基础题目")],-1),cs=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),ps=n("td",{style:{"text-align":"center"}},"1047",-1),is=n("td",{style:{"text-align":"left"}},"删除字符串中的所有相邻重复项",-1),us={style:{"text-align":"center"}},rs={style:{"text-align":"left"}},ds=n("code",null,"栈",-1),ks=n("code",null,"字符串",-1),ms={style:{"text-align":"left"}},hs={style:{"text-align":"center"}},bs={href:"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string",target:"_blank",rel:"noopener noreferrer"},_s={href:"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string",target:"_blank",rel:"noopener noreferrer"},vs=n("td",{style:{"text-align":"center"}},"155",-1),gs=n("td",{style:{"text-align":"left"}},"最小栈",-1),ys={style:{"text-align":"center"}},fs={style:{"text-align":"left"}},ws=n("code",null,"栈",-1),xs=n("code",null,"设计",-1),qs={style:{"text-align":"left"}},js={style:{"text-align":"center"}},Hs={href:"https://leetcode.cn/problems/min-stack",target:"_blank",rel:"noopener noreferrer"},Ls={href:"https://leetcode.com/problems/min-stack",target:"_blank",rel:"noopener noreferrer"},Ms=n("td",{style:{"text-align":"center"}},"20",-1),Is=n("td",{style:{"text-align":"left"}},"有效的括号",-1),Ns={style:{"text-align":"center"}},Os={style:{"text-align":"left"}},Ts=n("code",null,"栈",-1),Es=n("code",null,"字符串",-1),Bs={style:{"text-align":"left"}},Cs={style:{"text-align":"center"}},Ss={href:"https://leetcode.cn/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},Ds={href:"https://leetcode.com/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},Vs=n("td",{style:{"text-align":"center"}},"227",-1),zs=n("td",{style:{"text-align":"left"}},"基本计算器 II",-1),As={style:{"text-align":"center"}},Rs={style:{"text-align":"left"}},Fs=n("code",null,"栈",-1),Gs=n("code",null,"数学",-1),Ps=n("code",null,"字符串",-1),Us={style:{"text-align":"left"}},Ks={style:{"text-align":"center"}},Qs={href:"https://leetcode.cn/problems/basic-calculator-ii",target:"_blank",rel:"noopener noreferrer"},Xs={href:"https://leetcode.com/problems/basic-calculator-ii",target:"_blank",rel:"noopener noreferrer"},Js=n("td",{style:{"text-align":"center"}},"739",-1),Ws=n("td",{style:{"text-align":"left"}},"每日温度",-1),Ys={style:{"text-align":"center"}},Zs={style:{"text-align":"left"}},$s=n("code",null,"栈",-1),nt=n("code",null,"数组",-1),st=n("code",null,"单调栈",-1),tt={style:{"text-align":"left"}},at={style:{"text-align":"center"}},et={href:"https://leetcode.cn/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},ot={href:"https://leetcode.com/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},lt=n("td",{style:{"text-align":"center"}},"150",-1),ct=n("td",{style:{"text-align":"left"}},"逆波兰表达式求值",-1),pt={style:{"text-align":"center"}},it={style:{"text-align":"left"}},ut=n("code",null,"栈",-1),rt=n("code",null,"数组",-1),dt=n("code",null,"数学",-1),kt={style:{"text-align":"left"}},mt={style:{"text-align":"center"}},ht={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation",target:"_blank",rel:"noopener noreferrer"},bt={href:"https://leetcode.com/problems/evaluate-reverse-polish-notation",target:"_blank",rel:"noopener noreferrer"},_t=n("td",{style:{"text-align":"center"}},"232",-1),vt=n("td",{style:{"text-align":"left"}},"用栈实现队列",-1),gt={style:{"text-align":"center"}},yt={style:{"text-align":"left"}},ft=n("code",null,"栈",-1),wt=n("code",null,"设计",-1),xt=n("code",null,"队列",-1),qt={style:{"text-align":"left"}},jt={style:{"text-align":"center"}},Ht={href:"https://leetcode.cn/problems/implement-queue-using-stacks",target:"_blank",rel:"noopener noreferrer"},Lt={href:"https://leetcode.com/problems/implement-queue-using-stacks",target:"_blank",rel:"noopener noreferrer"},Mt=n("td",{style:{"text-align":"center"}},"剑指 Offer 9",-1),It=n("td",{style:{"text-align":"left"}},"用两个栈实现队列",-1),Nt={style:{"text-align":"center"}},Ot={style:{"text-align":"left"}},Tt=n("code",null,"栈",-1),Et=n("code",null,"设计",-1),Bt=n("code",null,"队列",-1),Ct={style:{"text-align":"left"}},St={style:{"text-align":"center"}},Dt={href:"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof",target:"_blank",rel:"noopener noreferrer"},Vt=n("td",{style:{"text-align":"center"}},"394",-1),zt=n("td",{style:{"text-align":"left"}},"字符串解码",-1),At={style:{"text-align":"center"}},Rt={style:{"text-align":"left"}},Ft=n("code",null,"栈",-1),Gt=n("code",null,"递归",-1),Pt=n("code",null,"字符串",-1),Ut={style:{"text-align":"left"}},Kt={style:{"text-align":"center"}},Qt={href:"https://leetcode.cn/problems/decode-string",target:"_blank",rel:"noopener noreferrer"},Xt={href:"https://leetcode.com/problems/decode-string",target:"_blank",rel:"noopener noreferrer"},Jt=n("td",{style:{"text-align":"center"}},"32",-1),Wt=n("td",{style:{"text-align":"left"}},"最长有效括号",-1),Yt={style:{"text-align":"center"}},Zt={style:{"text-align":"left"}},$t=n("code",null,"栈",-1),na=n("code",null,"字符串",-1),sa=n("code",null,"动态规划",-1),ta={style:{"text-align":"left"}},aa={style:{"text-align":"center"}},ea={href:"https://leetcode.cn/problems/longest-valid-parentheses",target:"_blank",rel:"noopener noreferrer"},oa={href:"https://leetcode.com/problems/longest-valid-parentheses",target:"_blank",rel:"noopener noreferrer"},la=n("td",{style:{"text-align":"center"}},"946",-1),ca=n("td",{style:{"text-align":"left"}},"验证栈序列",-1),pa={style:{"text-align":"center"}},ia={style:{"text-align":"left"}},ua=n("code",null,"栈",-1),ra=n("code",null,"数组",-1),da=n("code",null,"模拟",-1),ka={style:{"text-align":"left"}},ma={style:{"text-align":"center"}},ha={href:"https://leetcode.cn/problems/validate-stack-sequences",target:"_blank",rel:"noopener noreferrer"},ba={href:"https://leetcode.com/problems/validate-stack-sequences",target:"_blank",rel:"noopener noreferrer"},_a=n("td",{style:{"text-align":"center"}},"剑指 Offer 6",-1),va=n("td",{style:{"text-align":"left"}},"从尾到头打印链表",-1),ga={style:{"text-align":"center"}},ya={style:{"text-align":"left"}},fa=n("code",null,"栈",-1),wa=n("code",null,"递归",-1),xa=n("code",null,"链表",-1),qa=n("code",null,"1+",-1),ja={style:{"text-align":"left"}},Ha={style:{"text-align":"center"}},La={href:"https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof",target:"_blank",rel:"noopener noreferrer"},Ma=n("td",{style:{"text-align":"center"}},"71",-1),Ia=n("td",{style:{"text-align":"left"}},"简化路径",-1),Na={style:{"text-align":"center"}},Oa={style:{"text-align":"left"}},Ta=n("code",null,"栈",-1),Ea=n("code",null,"字符串",-1),Ba={style:{"text-align":"left"}},Ca={style:{"text-align":"center"}},Sa={href:"https://leetcode.cn/problems/simplify-path",target:"_blank",rel:"noopener noreferrer"},Da={href:"https://leetcode.com/problems/simplify-path",target:"_blank",rel:"noopener noreferrer"},Va=n("h4",{id:"单调栈-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单调栈-1","aria-hidden":"true"},"#"),s(" 单调栈")],-1),za=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度"),n("th",{style:{"text-align":"center"}},"力扣")])],-1),Aa=n("td",{style:{"text-align":"center"}},"739",-1),Ra=n("td",{style:{"text-align":"left"}},"每日温度",-1),Fa={style:{"text-align":"center"}},Ga={style:{"text-align":"left"}},Pa=n("code",null,"栈",-1),Ua=n("code",null,"数组",-1),Ka=n("code",null,"单调栈",-1),Qa={style:{"text-align":"left"}},Xa={style:{"text-align":"center"}},Ja={href:"https://leetcode.cn/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},Wa={href:"https://leetcode.com/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},Ya=n("td",{style:{"text-align":"center"}},"496",-1),Za=n("td",{style:{"text-align":"left"}},"下一个更大元素 I",-1),$a={style:{"text-align":"center"}},ne={style:{"text-align":"left"}},se=n("code",null,"栈",-1),te=n("code",null,"数组",-1),ae=n("code",null,"哈希表",-1),ee=n("code",null,"1+",-1),oe={style:{"text-align":"left"}},le={style:{"text-align":"center"}},ce={href:"https://leetcode.cn/problems/next-greater-element-i",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://leetcode.com/problems/next-greater-element-i",target:"_blank",rel:"noopener noreferrer"},ie=n("td",{style:{"text-align":"center"}},"503",-1),ue=n("td",{style:{"text-align":"left"}},"下一个更大元素 II",-1),re={style:{"text-align":"center"}},de={style:{"text-align":"left"}},ke=n("code",null,"栈",-1),me=n("code",null,"数组",-1),he=n("code",null,"单调栈",-1),be={style:{"text-align":"left"}},_e={style:{"text-align":"center"}},ve={href:"https://leetcode.cn/problems/next-greater-element-ii",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://leetcode.com/problems/next-greater-element-ii",target:"_blank",rel:"noopener noreferrer"},ye=n("td",{style:{"text-align":"center"}},"901",-1),fe=n("td",{style:{"text-align":"left"}},"股票价格跨度",-1),we=n("td",{style:{"text-align":"center"}},null,-1),xe={style:{"text-align":"left"}},qe=n("code",null,"栈",-1),je=n("code",null,"设计",-1),He=n("code",null,"数据流",-1),Le=n("code",null,"1+",-1),Me={style:{"text-align":"left"}},Ie={style:{"text-align":"center"}},Ne={href:"https://leetcode.cn/problems/online-stock-span",target:"_blank",rel:"noopener noreferrer"},Oe={href:"https://leetcode.com/problems/online-stock-span",target:"_blank",rel:"noopener noreferrer"},Te=n("td",{style:{"text-align":"center"}},"84",-1),Ee=n("td",{style:{"text-align":"left"}},"柱状图中最大的矩形",-1),Be={style:{"text-align":"center"}},Ce={style:{"text-align":"left"}},Se=n("code",null,"栈",-1),De=n("code",null,"数组",-1),Ve=n("code",null,"单调栈",-1),ze={style:{"text-align":"left"}},Ae={style:{"text-align":"center"}},Re={href:"https://leetcode.cn/problems/largest-rectangle-in-histogram",target:"_blank",rel:"noopener noreferrer"},Fe={href:"https://leetcode.com/problems/largest-rectangle-in-histogram",target:"_blank",rel:"noopener noreferrer"},Ge=n("td",{style:{"text-align":"center"}},"316",-1),Pe=n("td",{style:{"text-align":"left"}},"去除重复字母",-1),Ue={style:{"text-align":"center"}},Ke={style:{"text-align":"left"}},Qe=n("code",null,"栈",-1),Xe=n("code",null,"贪心",-1),Je=n("code",null,"字符串",-1),We=n("code",null,"1+",-1),Ye={style:{"text-align":"left"}},Ze={style:{"text-align":"center"}},$e={href:"https://leetcode.cn/problems/remove-duplicate-letters",target:"_blank",rel:"noopener noreferrer"},no={href:"https://leetcode.com/problems/remove-duplicate-letters",target:"_blank",rel:"noopener noreferrer"},so=n("td",{style:{"text-align":"center"}},"42",-1),to=n("td",{style:{"text-align":"left"}},"接雨水",-1),ao={style:{"text-align":"center"}},eo={style:{"text-align":"left"}},oo=n("code",null,"栈",-1),lo=n("code",null,"数组",-1),co=n("code",null,"双指针",-1),po=n("code",null,"2+",-1),io={style:{"text-align":"left"}},uo={style:{"text-align":"center"}},ro={href:"https://leetcode.cn/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},ko={href:"https://leetcode.com/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},mo=n("td",{style:{"text-align":"center"}},"85",-1),ho=n("td",{style:{"text-align":"left"}},"最大矩形",-1),bo={style:{"text-align":"center"}},_o={style:{"text-align":"left"}},vo=n("code",null,"栈",-1),go=n("code",null,"数组",-1),yo=n("code",null,"动态规划",-1),fo=n("code",null,"2+",-1),wo={style:{"text-align":"left"}},xo={style:{"text-align":"center"}},qo={href:"https://leetcode.cn/problems/maximal-rectangle",target:"_blank",rel:"noopener noreferrer"},jo={href:"https://leetcode.com/problems/maximal-rectangle",target:"_blank",rel:"noopener noreferrer"};function Ho(Lo,Mo){const o=i("ExternalLinkIcon"),c=i("MdDemo"),e=i("RouterLink"),l=i("font");return d(),k("div",null,[v,t(c,{title:"相关题目",id:"md-demo-97"},{default:a(()=>[n("h4",g,[y,s(" 📌 "),n("a",f,[s("227. 基本计算器 II - LeetCode"),t(o)])]),w,x,q,j,H,L,M,I,N,O,T,E,B,C]),code:a(()=>[S]),_:1}),D,V,t(c,{title:"相关题目",id:"md-demo-185"},{default:a(()=>[n("h4",z,[A,s(" 📌 "),n("a",R,[s("20. 有效的括号 - LeetCode"),t(o)])]),F,G,P,U,K,Q,X,J,W,Y,Z,$,nn,sn,tn]),code:a(()=>[an]),_:1}),en,on,t(c,{title:"相关题目",id:"md-demo-261"},{default:a(()=>[n("h4",ln,[cn,s(" 📌 "),n("a",pn,[s("1472. 设计浏览器历史记录 - LeetCode"),t(o)])]),un,rn,dn,kn,mn,hn,bn,_n,vn,gn,yn,fn,wn]),code:a(()=>[xn]),_:1}),qn,t(c,{title:"相关题目",id:"md-demo-605"},{default:a(()=>[n("h4",jn,[Hn,s(" 📌 "),n("a",Ln,[s("496. 下一个更大元素 I - LeetCode"),t(o)])]),Mn,In,Nn,On,Tn,En,Bn,Cn,Sn,Dn,Vn,zn,An]),code:a(()=>[Rn]),_:1}),Fn,t(c,{title:"相关题目",id:"md-demo-706"},{default:a(()=>[n("h4",Gn,[Pn,s(" 📌 "),n("a",Un,[s("739. 每日温度 - LeetCode"),t(o)])]),Kn,Qn,Xn,Jn,Wn,Yn,Zn,$n,ns,ss,ts,as]),code:a(()=>[es]),_:1}),p(" START TABLE "),p(" Please keep comment here to allow auto update "),p(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),os,ls,p(" prettier-ignore "),n("table",null,[cs,n("tbody",null,[n("tr",null,[ps,is,n("td",us,[t(e,{to:"/problem/1047.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",rs,[t(e,{to:"/tag/stack.html"},{default:a(()=>[ds]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[ks]),_:1})]),n("td",ms,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})]),n("td",hs,[n("a",bs,[s("🀄️"),t(o)]),s(),n("a",_s,[s("🔗"),t(o)])])]),n("tr",null,[vs,gs,n("td",ys,[t(e,{to:"/problem/0155.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",fs,[t(e,{to:"/tag/stack.html"},{default:a(()=>[ws]),_:1}),s(),t(e,{to:"/tag/design.html"},{default:a(()=>[xs]),_:1})]),n("td",qs,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",js,[n("a",Hs,[s("🀄️"),t(o)]),s(),n("a",Ls,[s("🔗"),t(o)])])]),n("tr",null,[Ms,Is,n("td",Ns,[t(e,{to:"/problem/0020.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Os,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Ts]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[Es]),_:1})]),n("td",Bs,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})]),n("td",Cs,[n("a",Ss,[s("🀄️"),t(o)]),s(),n("a",Ds,[s("🔗"),t(o)])])]),n("tr",null,[Vs,zs,n("td",As,[t(e,{to:"/problem/0227.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Rs,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Fs]),_:1}),s(),t(e,{to:"/tag/math.html"},{default:a(()=>[Gs]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[Ps]),_:1})]),n("td",Us,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",Ks,[n("a",Qs,[s("🀄️"),t(o)]),s(),n("a",Xs,[s("🔗"),t(o)])])]),n("tr",null,[Js,Ws,n("td",Ys,[t(e,{to:"/problem/0739.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Zs,[t(e,{to:"/tag/stack.html"},{default:a(()=>[$s]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[nt]),_:1}),s(),t(e,{to:"/tag/monotonic-stack.html"},{default:a(()=>[st]),_:1})]),n("td",tt,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",at,[n("a",et,[s("🀄️"),t(o)]),s(),n("a",ot,[s("🔗"),t(o)])])]),n("tr",null,[lt,ct,n("td",pt,[t(e,{to:"/problem/0150.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",it,[t(e,{to:"/tag/stack.html"},{default:a(()=>[ut]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[rt]),_:1}),s(),t(e,{to:"/tag/math.html"},{default:a(()=>[dt]),_:1})]),n("td",kt,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",mt,[n("a",ht,[s("🀄️"),t(o)]),s(),n("a",bt,[s("🔗"),t(o)])])]),n("tr",null,[_t,vt,n("td",gt,[t(e,{to:"/problem/0232.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",yt,[t(e,{to:"/tag/stack.html"},{default:a(()=>[ft]),_:1}),s(),t(e,{to:"/tag/design.html"},{default:a(()=>[wt]),_:1}),s(),t(e,{to:"/tag/queue.html"},{default:a(()=>[xt]),_:1})]),n("td",qt,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})]),n("td",jt,[n("a",Ht,[s("🀄️"),t(o)]),s(),n("a",Lt,[s("🔗"),t(o)])])]),n("tr",null,[Mt,It,n("td",Nt,[t(e,{to:"/offer/jz_offer_09_1.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Ot,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Tt]),_:1}),s(),t(e,{to:"/tag/design.html"},{default:a(()=>[Et]),_:1}),s(),t(e,{to:"/tag/queue.html"},{default:a(()=>[Bt]),_:1})]),n("td",Ct,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})]),n("td",St,[n("a",Dt,[s("🀄️"),t(o)])])]),n("tr",null,[Vt,zt,n("td",At,[t(e,{to:"/problem/0394.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Rt,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Ft]),_:1}),s(),t(e,{to:"/tag/recursion.html"},{default:a(()=>[Gt]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[Pt]),_:1})]),n("td",Ut,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",Kt,[n("a",Qt,[s("🀄️"),t(o)]),s(),n("a",Xt,[s("🔗"),t(o)])])]),n("tr",null,[Jt,Wt,n("td",Yt,[t(e,{to:"/problem/0032.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Zt,[t(e,{to:"/tag/stack.html"},{default:a(()=>[$t]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[na]),_:1}),s(),t(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[sa]),_:1})]),n("td",ta,[t(l,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1})]),n("td",aa,[n("a",ea,[s("🀄️"),t(o)]),s(),n("a",oa,[s("🔗"),t(o)])])]),n("tr",null,[la,ca,n("td",pa,[t(e,{to:"/problem/0946.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",ia,[t(e,{to:"/tag/stack.html"},{default:a(()=>[ua]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[ra]),_:1}),s(),t(e,{to:"/tag/simulation.html"},{default:a(()=>[da]),_:1})]),n("td",ka,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",ma,[n("a",ha,[s("🀄️"),t(o)]),s(),n("a",ba,[s("🔗"),t(o)])])]),n("tr",null,[_a,va,n("td",ga,[t(e,{to:"/offer/jz_offer_06_1.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",ya,[t(e,{to:"/tag/stack.html"},{default:a(()=>[fa]),_:1}),s(),t(e,{to:"/tag/recursion.html"},{default:a(()=>[wa]),_:1}),s(),t(e,{to:"/tag/linked-list.html"},{default:a(()=>[xa]),_:1}),s(),qa]),n("td",ja,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})]),n("td",Ha,[n("a",La,[s("🀄️"),t(o)])])]),n("tr",null,[Ma,Ia,n("td",Na,[t(e,{to:"/problem/0071.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Oa,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Ta]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[Ea]),_:1})]),n("td",Ba,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",Ca,[n("a",Sa,[s("🀄️"),t(o)]),s(),n("a",Da,[s("🔗"),t(o)])])])])]),Va,p(" prettier-ignore "),n("table",null,[za,n("tbody",null,[n("tr",null,[Aa,Ra,n("td",Fa,[t(e,{to:"/problem/0739.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Ga,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Pa]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[Ua]),_:1}),s(),t(e,{to:"/tag/monotonic-stack.html"},{default:a(()=>[Ka]),_:1})]),n("td",Qa,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",Xa,[n("a",Ja,[s("🀄️"),t(o)]),s(),n("a",Wa,[s("🔗"),t(o)])])]),n("tr",null,[Ya,Za,n("td",$a,[t(e,{to:"/problem/0496.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",ne,[t(e,{to:"/tag/stack.html"},{default:a(()=>[se]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[te]),_:1}),s(),t(e,{to:"/tag/hash-table.html"},{default:a(()=>[ae]),_:1}),s(),ee]),n("td",oe,[t(l,{color:"#15bd66"},{default:a(()=>[s("Easy")]),_:1})]),n("td",le,[n("a",ce,[s("🀄️"),t(o)]),s(),n("a",pe,[s("🔗"),t(o)])])]),n("tr",null,[ie,ue,n("td",re,[t(e,{to:"/problem/0503.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",de,[t(e,{to:"/tag/stack.html"},{default:a(()=>[ke]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[me]),_:1}),s(),t(e,{to:"/tag/monotonic-stack.html"},{default:a(()=>[he]),_:1})]),n("td",be,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",_e,[n("a",ve,[s("🀄️"),t(o)]),s(),n("a",ge,[s("🔗"),t(o)])])]),n("tr",null,[ye,fe,we,n("td",xe,[t(e,{to:"/tag/stack.html"},{default:a(()=>[qe]),_:1}),s(),t(e,{to:"/tag/design.html"},{default:a(()=>[je]),_:1}),s(),t(e,{to:"/tag/data-stream.html"},{default:a(()=>[He]),_:1}),s(),Le]),n("td",Me,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",Ie,[n("a",Ne,[s("🀄️"),t(o)]),s(),n("a",Oe,[s("🔗"),t(o)])])]),n("tr",null,[Te,Ee,n("td",Be,[t(e,{to:"/problem/0084.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Ce,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Se]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[De]),_:1}),s(),t(e,{to:"/tag/monotonic-stack.html"},{default:a(()=>[Ve]),_:1})]),n("td",ze,[t(l,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1})]),n("td",Ae,[n("a",Re,[s("🀄️"),t(o)]),s(),n("a",Fe,[s("🔗"),t(o)])])]),n("tr",null,[Ge,Pe,n("td",Ue,[t(e,{to:"/problem/0316.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",Ke,[t(e,{to:"/tag/stack.html"},{default:a(()=>[Qe]),_:1}),s(),t(e,{to:"/tag/greedy.html"},{default:a(()=>[Xe]),_:1}),s(),t(e,{to:"/tag/string.html"},{default:a(()=>[Je]),_:1}),s(),We]),n("td",Ye,[t(l,{color:"#ffb800"},{default:a(()=>[s("Medium")]),_:1})]),n("td",Ze,[n("a",$e,[s("🀄️"),t(o)]),s(),n("a",no,[s("🔗"),t(o)])])]),n("tr",null,[so,to,n("td",ao,[t(e,{to:"/problem/0042.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",eo,[t(e,{to:"/tag/stack.html"},{default:a(()=>[oo]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[lo]),_:1}),s(),t(e,{to:"/tag/two-pointers.html"},{default:a(()=>[co]),_:1}),s(),po]),n("td",io,[t(l,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1})]),n("td",uo,[n("a",ro,[s("🀄️"),t(o)]),s(),n("a",ko,[s("🔗"),t(o)])])]),n("tr",null,[mo,ho,n("td",bo,[t(e,{to:"/problem/0085.html"},{default:a(()=>[s("[✓]")]),_:1})]),n("td",_o,[t(e,{to:"/tag/stack.html"},{default:a(()=>[vo]),_:1}),s(),t(e,{to:"/tag/array.html"},{default:a(()=>[go]),_:1}),s(),t(e,{to:"/tag/dynamic-programming.html"},{default:a(()=>[yo]),_:1}),s(),fo]),n("td",wo,[t(l,{color:"#ff334b"},{default:a(()=>[s("Hard")]),_:1})]),n("td",xo,[n("a",qo,[s("🀄️"),t(o)]),s(),n("a",jo,[s("🔗"),t(o)])])])])])])}const No=r(_,[["render",Ho],["__file","stack.html.vue"]]);export{No as default};
