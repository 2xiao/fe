import{_ as i,r as p,o as r,c as u,a as n,b as t,d as s,w as e,f as d,e as c}from"./app-mXo2sCT-.js";const k={},b={id:"_2633-将对象转换为-json-字符串-🔒",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_2633-将对象转换为-json-字符串-🔒","aria-hidden":"true"},"#",-1),g={href:"https://2xiao.github.io/leetcode-js/problem/2633.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://leetcode.cn/problems/convert-object-to-json-string",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"力扣",-1),f={href:"https://leetcode.com/problems/convert-object-to-json-string",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"LeetCode",-1),y=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),t(" 题目")],-1),x=n("p",null,[t("Given a value, return a valid JSON string of that value. The value can be a string, number, array, object, boolean, or null. The returned string should not include extra spaces. The order of keys should be the same as the order returned by "),n("code",null,"Object.keys()"),t(".")],-1),q=n("p",null,[t("Please solve it without using the built-in "),n("code",null,"JSON.stringify"),t(" method.")],-1),j=n("p",null,[n("strong",null,"Example 1:")],-1),O=n("blockquote",null,[n("p",{"y:1,x:2":""},"Input: object ="),n("p",{"y:1,x:2":""},"Output:"),n("p",null,"Explanation:"),n("p",null,"Return the JSON representation."),n("p",null,"Note that the order of keys should be the same as the order returned by Object.keys().")],-1),w=n("p",null,[n("strong",null,"Example 2:")],-1),N=n("blockquote",null,[n("p",{"a:str,b:-12,c:true,d:null":""},"Input: object ="),n("p",{"a:str,b:-12,c:true,d:null":""},"Output:"),n("p",null,"Explanation:"),n("p",null,"The primitives of JSON are strings, numbers, booleans, and null.")],-1),S=c('<p><strong>Example 3:</strong></p><blockquote><p>Input: object = {&quot;key&quot;:{&quot;a&quot;:1,&quot;b&quot;:[{},null,&quot;Hello&quot;]}}</p><p>Output: {&quot;key&quot;:{&quot;a&quot;:1,&quot;b&quot;:[{},null,&quot;Hello&quot;]}}</p><p>Explanation:</p><p>Objects and arrays can include other objects and arrays.</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input: object = true</p><p>Output: true</p><p>Explanation:</p><p>Primitive types are valid inputs.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>value</code> is a valid JSON value</li><li><code>1 &lt;= JSON.stringify(object).length &lt;= 10^5</code></li><li><code>maxNestingLevel &lt;= 1000</code></li><li>all strings contain only alphanumeric characters</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>现给定一个值，返回该值的有效 JSON 字符串。你可以假设这个值只包括字符串、整数、数组、对象、布尔值和 null。返回的字符串不能包含额外的空格。键的返回顺序应该与 <code>Object.keys()</code> 的顺序相同。</p><p>请你在不使用内置方法 <code>JSON.stringify</code> 的前提下解决这个问题。</p><p><strong>示例 1：</strong></p>',10),J=n("blockquote",null,[n("p",{"y:1,x:2":""},[n("strong",null,"输入："),t(" object =")]),n("p",{"y:1,x:2":""},[n("strong",null,"输出：")]),n("p",null,[n("strong",null,"解释：")]),n("p",null,"返回该对象的 JSON 表示形式。"),n("p",null,"注意，键的返回顺序应该与 Object.keys() 的顺序相同。")],-1),E=n("p",null,[n("strong",null,"示例 2：")],-1),L=n("blockquote",null,[n("p",{"a:str,b:-12,c:true,d:null":""},[n("strong",null,"输入："),t(" object =")]),n("p",{"a:str,b:-12,c:true,d:null":""},[n("strong",null,"输出：")]),n("p",null,[n("strong",null,"解释：")]),n("p",null,"JSON 的基本类型是字符串、数字型、布尔值和 null。")],-1),I=c(`<p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> object = {&quot;key&quot;:{&quot;a&quot;:1,&quot;b&quot;:[{},null,&quot;Hello&quot;]}}</p><p><strong>输出：</strong> {&quot;key&quot;:{&quot;a&quot;:1,&quot;b&quot;:[{},null,&quot;Hello&quot;]}}</p><p><strong>解释：</strong></p><p>对象和数组可以包括其他对象和数组。</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> object = true</p><p><strong>输出：</strong> true</p><p><strong>解释：</strong></p><p>基本类型是有效的输入</p></blockquote><p><strong>提示：</strong></p><ul><li><code>value</code> 是一个有效的 JSON 值</li><li><code>1 &lt;= JSON.stringify(object).length &lt;= 10^5</code></li><li><code>maxNestingLevel &lt;= 1000</code></li><li>所有字符串只包含字母数字字符</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p><strong>基本数据类型处理</strong>：</p><ul><li><strong>字符串</strong>：需要用双引号包裹，内部的双引号需要转义。</li><li><strong>数字</strong>、<strong>布尔值</strong>和<strong>null</strong>：直接转为字符串即可。</li></ul></li><li><p><strong>数组处理</strong>：</p><ul><li>使用递归处理数组中的每个元素，将结果用逗号连接并用方括号包裹。</li></ul></li><li><p><strong>对象处理</strong>：</p><ul><li>遍历对象的键（使用 <code>Object.keys()</code> 确保顺序），递归处理每个键值对。</li><li>每个键需要用双引号包裹，格式为 <code>&quot;key&quot;:value</code>。</li><li>将结果用逗号连接并用大括号包裹。</li></ul></li><li><p><strong>递归结束条件</strong>：</p><ul><li>如果遇到不支持的类型，返回 <code>null</code> 或抛出错误。</li></ul></li></ol><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是输入值的总元素数量，每个元素只被处理一次。</li><li><strong>空间复杂度</strong>：<code>O(n)</code>，在递归调用和拼接字符串时，需要额外的空间来存储结果。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">stringify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 处理字符串</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> object <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&#39;&quot;&#39;</span> <span class="token operator">+</span> object <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 处理数字、布尔值、null</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>
		<span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">||</span>
		<span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span> <span class="token operator">||</span>
		object <span class="token operator">==</span> <span class="token keyword">null</span>
	<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 处理数组</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&#39;[&#39;</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stringify</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;]&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 处理对象</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> object <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>
			<span class="token string">&#39;{&#39;</span> <span class="token operator">+</span>
			Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">stringify</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> <span class="token function">stringify</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
			<span class="token string">&#39;}&#39;</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果是无法处理的类型，返回 null</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,13),C=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),H=n("td",{style:{"text-align":"center"}},"2625",-1),T={style:{"text-align":"left"}},V={href:"https://leetcode.com/problems/flatten-deeply-nested-array",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"center"}},B=n("td",{style:{"text-align":"left"}},null,-1),R={style:{"text-align":"left"}},A=n("td",{style:{"text-align":"center"}},"2628",-1),P={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/json-deep-equal",target:"_blank",rel:"noopener noreferrer"},z={style:{"text-align":"center"}},D=n("td",{style:{"text-align":"left"}},null,-1),F={style:{"text-align":"left"}},K=n("td",{style:{"text-align":"center"}},"2675",-1),Q={style:{"text-align":"left"}},U={href:"https://leetcode.com/problems/array-of-objects-to-matrix",target:"_blank",rel:"noopener noreferrer"},W={style:{"text-align":"center"}},X=n("td",{style:{"text-align":"left"}},null,-1),Y={style:{"text-align":"left"}},Z=n("td",{style:{"text-align":"center"}},"2700",-1),$={style:{"text-align":"left"}},nn={href:"https://leetcode.com/problems/differences-between-two-objects",target:"_blank",rel:"noopener noreferrer"},tn=n("td",{style:{"text-align":"center"}},null,-1),sn=n("td",{style:{"text-align":"left"}},null,-1),en={style:{"text-align":"left"}};function an(on,ln){const a=p("ExternalLinkIcon"),o=p("font"),l=p("RouterLink");return r(),u("div",null,[n("h1",b,[h,t(),n("a",g,[t("2633. 将对象转换为 JSON 字符串 🔒"),s(a)])]),n("p",null,[t("🟠 "),s(o,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1}),t("  🔗 "),n("a",_,[m,s(a)]),t(),n("a",f,[v,s(a)])]),y,x,q,j,O,w,N,S,J,E,L,I,d(" prettier-ignore "),n("table",null,[C,n("tbody",null,[n("tr",null,[H,n("td",T,[n("a",V,[t("扁平化嵌套数组"),s(a)])]),n("td",M,[s(l,{to:"/problem/2625.html"},{default:e(()=>[t("[✓]")]),_:1})]),B,n("td",R,[s(o,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[A,n("td",P,[n("a",G,[t("完全相等的 JSON 字符串 🔒"),s(a)])]),n("td",z,[s(l,{to:"/problem/2628.html"},{default:e(()=>[t("[✓]")]),_:1})]),D,n("td",F,[s(o,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[K,n("td",Q,[n("a",U,[t("将对象数组转换为矩阵 🔒"),s(a)])]),n("td",W,[s(l,{to:"/problem/2675.html"},{default:e(()=>[t("[✓]")]),_:1})]),X,n("td",Y,[s(o,{color:"#ff334b"},{default:e(()=>[t("Hard")]),_:1})])]),n("tr",null,[Z,n("td",$,[n("a",nn,[t("两个对象之间的差异 🔒"),s(a)])]),tn,sn,n("td",en,[s(o,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])])])}const cn=i(k,[["render",an],["__file","2633.html.vue"]]);export{cn as default};
