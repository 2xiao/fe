import{_ as i,r as _,o as a,c,a as t,b as e,w as o,d as l,f as u}from"./app-ynO5B_DP.js";const r={},h=t("h1",{id:"队列",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#队列","aria-hidden":"true"},"#"),l(" 队列")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),x=t("code",null,"矩阵",-1),b=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),q=t("code",null,"单调栈",-1),M=t("span",{class:"blue"},"队列",-1),w=t("code",null,"单调队列",-1),H=t("code",null,"堆（优先队列）",-1),v=t("code",null,"哈希表",-1),E=t("code",null,"字符串",-1),I=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),O=t("code",null,"二叉树",-1),K=t("code",null,"二叉搜索树",-1),L=t("code",null,"最小生成树",-1),V=t("code",null,"图",-1),j=t("code",null,"有序集合",-1),C=t("code",null,"拓扑排序",-1),N=t("code",null,"最短路",-1),B=t("code",null,"强连通分量",-1),R=t("code",null,"欧拉回路",-1),D=t("code",null,"双连通分量",-1),P=t("code",null,"并查集",-1),Q=t("code",null,"字典树",-1),T=t("code",null,"线段树",-1),U=t("code",null,"树状数组",-1),A=t("code",null,"后缀数组",-1),F=t("p",null,[t("strong",null,"算法")],-1),G=t("code",null,"枚举",-1),J=t("code",null,"递归",-1),S=t("code",null,"分治",-1),W=t("code",null,"回溯",-1),X=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),lt=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),it=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),ut=t("code",null,"计数",-1),rt=t("code",null,"滑动窗口",-1),ht=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),xt=t("code",null,"数学",-1),bt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),qt=t("code",null,"模拟",-1),Mt=t("code",null,"组合数学",-1),wt=t("code",null,"随机化",-1),Ht=t("code",null,"概率与统计",-1),vt=t("code",null,"水塘抽样",-1),Et=t("code",null,"拒绝采样",-1),It=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Ot=t("code",null,"数据流",-1),Kt=t("code",null,"脑筋急转弯",-1),Lt=t("code",null,"交互",-1),Vt=t("code",null,"迭代器",-1),jt=t("code",null,"多线程",-1),Ct=t("hr",null,null,-1),Nt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Bt=t("td",{style:{"text-align":"center"}},"225",-1),Rt={style:{"text-align":"left"}},Dt={href:"https://leetcode.com/problems/implement-stack-using-queues",target:"_blank",rel:"noopener noreferrer"},Pt={style:{"text-align":"center"}},Qt={href:"/problem/0225",target:"_blank",rel:"noopener noreferrer"},Tt={style:{"text-align":"left"}},Ut=t("code",null,"栈",-1),At=t("code",null,"设计",-1),Ft=t("code",null,"队列",-1),Gt={style:{"text-align":"left"}},Jt=t("td",{style:{"text-align":"center"}},"232",-1),St={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/implement-queue-using-stacks",target:"_blank",rel:"noopener noreferrer"},Xt={style:{"text-align":"center"}},Yt={href:"/problem/0232",target:"_blank",rel:"noopener noreferrer"},Zt={style:{"text-align":"left"}},$t=t("code",null,"栈",-1),te=t("code",null,"设计",-1),ee=t("code",null,"队列",-1),le={style:{"text-align":"left"}},oe=t("td",{style:{"text-align":"center"}},"239",-1),ne={style:{"text-align":"left"}},se={href:"https://leetcode.com/problems/sliding-window-maximum",target:"_blank",rel:"noopener noreferrer"},de={style:{"text-align":"center"}},_e={href:"/problem/0239",target:"_blank",rel:"noopener noreferrer"},ie={style:{"text-align":"left"}},ae=t("code",null,"队列",-1),ce=t("code",null,"数组",-1),ue=t("code",null,"滑动窗口",-1),re=t("code",null,"2+",-1),he={style:{"text-align":"left"}},fe=t("td",{style:{"text-align":"center"}},"281",-1),ge={style:{"text-align":"left"}},me={href:"https://leetcode.com/problems/zigzag-iterator",target:"_blank",rel:"noopener noreferrer"},ye=t("td",{style:{"text-align":"center"}},null,-1),xe={style:{"text-align":"left"}},be=t("code",null,"设计",-1),pe=t("code",null,"队列",-1),ke=t("code",null,"数组",-1),qe=t("code",null,"1+",-1),Me={style:{"text-align":"left"}},we=t("td",{style:{"text-align":"center"}},"341",-1),He={style:{"text-align":"left"}},ve={href:"https://leetcode.com/problems/flatten-nested-list-iterator",target:"_blank",rel:"noopener noreferrer"},Ee=t("td",{style:{"text-align":"center"}},null,-1),Ie={style:{"text-align":"left"}},ze=t("code",null,"栈",-1),Oe=t("code",null,"树",-1),Ke=t("code",null,"深度优先搜索",-1),Le=t("code",null,"3+",-1),Ve={style:{"text-align":"left"}},je=t("td",{style:{"text-align":"center"}},"346",-1),Ce={style:{"text-align":"left"}},Ne={href:"https://leetcode.com/problems/moving-average-from-data-stream",target:"_blank",rel:"noopener noreferrer"},Be={style:{"text-align":"center"}},Re={href:"/problem/0346",target:"_blank",rel:"noopener noreferrer"},De={style:{"text-align":"left"}},Pe=t("code",null,"设计",-1),Qe=t("code",null,"队列",-1),Te=t("code",null,"数组",-1),Ue=t("code",null,"1+",-1),Ae={style:{"text-align":"left"}},Fe=t("td",{style:{"text-align":"center"}},"353",-1),Ge={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/design-snake-game",target:"_blank",rel:"noopener noreferrer"},Se=t("td",{style:{"text-align":"center"}},null,-1),We={style:{"text-align":"left"}},Xe=t("code",null,"设计",-1),Ye=t("code",null,"队列",-1),Ze=t("code",null,"数组",-1),$e=t("code",null,"2+",-1),tl={style:{"text-align":"left"}},el=t("td",{style:{"text-align":"center"}},"362",-1),ll={style:{"text-align":"left"}},ol={href:"https://leetcode.com/problems/design-hit-counter",target:"_blank",rel:"noopener noreferrer"},nl=t("td",{style:{"text-align":"center"}},null,-1),sl={style:{"text-align":"left"}},dl=t("code",null,"设计",-1),_l=t("code",null,"队列",-1),il=t("code",null,"数组",-1),al=t("code",null,"2+",-1),cl={style:{"text-align":"left"}},ul=t("td",{style:{"text-align":"center"}},"379",-1),rl={style:{"text-align":"left"}},hl={href:"https://leetcode.com/problems/design-phone-directory",target:"_blank",rel:"noopener noreferrer"},fl={style:{"text-align":"center"}},gl={href:"/problem/0379",target:"_blank",rel:"noopener noreferrer"},ml={style:{"text-align":"left"}},yl=t("code",null,"设计",-1),xl=t("code",null,"队列",-1),bl=t("code",null,"数组",-1),pl=t("code",null,"2+",-1),kl={style:{"text-align":"left"}},ql=t("td",{style:{"text-align":"center"}},"387",-1),Ml={style:{"text-align":"left"}},wl={href:"https://leetcode.com/problems/first-unique-character-in-a-string",target:"_blank",rel:"noopener noreferrer"},Hl=t("td",{style:{"text-align":"center"}},null,-1),vl={style:{"text-align":"left"}},El=t("code",null,"队列",-1),Il=t("code",null,"哈希表",-1),zl=t("code",null,"字符串",-1),Ol=t("code",null,"1+",-1),Kl={style:{"text-align":"left"}},Ll=t("td",{style:{"text-align":"center"}},"622",-1),Vl={style:{"text-align":"left"}},jl={href:"https://leetcode.com/problems/design-circular-queue",target:"_blank",rel:"noopener noreferrer"},Cl={style:{"text-align":"center"}},Nl={href:"/problem/0622",target:"_blank",rel:"noopener noreferrer"},Bl={style:{"text-align":"left"}},Rl=t("code",null,"设计",-1),Dl=t("code",null,"队列",-1),Pl=t("code",null,"数组",-1),Ql=t("code",null,"1+",-1),Tl={style:{"text-align":"left"}},Ul=t("td",{style:{"text-align":"center"}},"641",-1),Al={style:{"text-align":"left"}},Fl={href:"https://leetcode.com/problems/design-circular-deque",target:"_blank",rel:"noopener noreferrer"},Gl={style:{"text-align":"center"}},Jl={href:"/problem/0641",target:"_blank",rel:"noopener noreferrer"},Sl={style:{"text-align":"left"}},Wl=t("code",null,"设计",-1),Xl=t("code",null,"队列",-1),Yl=t("code",null,"数组",-1),Zl=t("code",null,"1+",-1),$l={style:{"text-align":"left"}},to=t("td",{style:{"text-align":"center"}},"649",-1),eo={style:{"text-align":"left"}},lo={href:"https://leetcode.com/problems/dota2-senate",target:"_blank",rel:"noopener noreferrer"},oo=t("td",{style:{"text-align":"center"}},null,-1),no={style:{"text-align":"left"}},so=t("code",null,"贪心",-1),_o=t("code",null,"队列",-1),io=t("code",null,"字符串",-1),ao={style:{"text-align":"left"}},co=t("td",{style:{"text-align":"center"}},"683",-1),uo={style:{"text-align":"left"}},ro={href:"https://leetcode.com/problems/k-empty-slots",target:"_blank",rel:"noopener noreferrer"},ho=t("td",{style:{"text-align":"center"}},null,-1),fo={style:{"text-align":"left"}},go=t("code",null,"树状数组",-1),mo=t("code",null,"线段树",-1),yo=t("code",null,"队列",-1),xo=t("code",null,"5+",-1),bo={style:{"text-align":"left"}},po=t("td",{style:{"text-align":"center"}},"862",-1),ko={style:{"text-align":"left"}},qo={href:"https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k",target:"_blank",rel:"noopener noreferrer"},Mo=t("td",{style:{"text-align":"center"}},null,-1),wo={style:{"text-align":"left"}},Ho=t("code",null,"队列",-1),vo=t("code",null,"数组",-1),Eo=t("code",null,"二分查找",-1),Io=t("code",null,"4+",-1),zo={style:{"text-align":"left"}},Oo=t("td",{style:{"text-align":"center"}},"918",-1),Ko={style:{"text-align":"left"}},Lo={href:"https://leetcode.com/problems/maximum-sum-circular-subarray",target:"_blank",rel:"noopener noreferrer"},Vo={style:{"text-align":"center"}},jo={href:"/problem/0918",target:"_blank",rel:"noopener noreferrer"},Co={style:{"text-align":"left"}},No=t("code",null,"队列",-1),Bo=t("code",null,"数组",-1),Ro=t("code",null,"分治",-1),Do=t("code",null,"2+",-1),Po={style:{"text-align":"left"}},Qo=t("td",{style:{"text-align":"center"}},"933",-1),To={style:{"text-align":"left"}},Uo={href:"https://leetcode.com/problems/number-of-recent-calls",target:"_blank",rel:"noopener noreferrer"},Ao=t("td",{style:{"text-align":"center"}},null,-1),Fo={style:{"text-align":"left"}},Go=t("code",null,"设计",-1),Jo=t("code",null,"队列",-1),So=t("code",null,"数据流",-1),Wo={style:{"text-align":"left"}},Xo=t("td",{style:{"text-align":"center"}},"936",-1),Yo={style:{"text-align":"left"}},Zo={href:"https://leetcode.com/problems/stamping-the-sequence",target:"_blank",rel:"noopener noreferrer"},$o=t("td",{style:{"text-align":"center"}},null,-1),tn={style:{"text-align":"left"}},en=t("code",null,"栈",-1),ln=t("code",null,"贪心",-1),on=t("code",null,"队列",-1),nn=t("code",null,"1+",-1),sn={style:{"text-align":"left"}},dn=t("td",{style:{"text-align":"center"}},"950",-1),_n={style:{"text-align":"left"}},an={href:"https://leetcode.com/problems/reveal-cards-in-increasing-order",target:"_blank",rel:"noopener noreferrer"},cn=t("td",{style:{"text-align":"center"}},null,-1),un={style:{"text-align":"left"}},rn=t("code",null,"队列",-1),hn=t("code",null,"数组",-1),fn=t("code",null,"排序",-1),gn=t("code",null,"1+",-1),mn={style:{"text-align":"left"}},yn=t("td",{style:{"text-align":"center"}},"995",-1),xn={style:{"text-align":"left"}},bn={href:"https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips",target:"_blank",rel:"noopener noreferrer"},pn=t("td",{style:{"text-align":"center"}},null,-1),kn={style:{"text-align":"left"}},qn=t("code",null,"位运算",-1),Mn=t("code",null,"队列",-1),wn=t("code",null,"数组",-1),Hn=t("code",null,"2+",-1),vn={style:{"text-align":"left"}},En=t("td",{style:{"text-align":"center"}},"1352",-1),In={style:{"text-align":"left"}},zn={href:"https://leetcode.com/problems/product-of-the-last-k-numbers",target:"_blank",rel:"noopener noreferrer"},On=t("td",{style:{"text-align":"center"}},null,-1),Kn={style:{"text-align":"left"}},Ln=t("code",null,"设计",-1),Vn=t("code",null,"队列",-1),jn=t("code",null,"数组",-1),Cn=t("code",null,"2+",-1),Nn={style:{"text-align":"left"}},Bn=t("td",{style:{"text-align":"center"}},"1425",-1),Rn={style:{"text-align":"left"}},Dn={href:"https://leetcode.com/problems/constrained-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},Pn=t("td",{style:{"text-align":"center"}},null,-1),Qn={style:{"text-align":"left"}},Tn=t("code",null,"队列",-1),Un=t("code",null,"数组",-1),An=t("code",null,"动态规划",-1),Fn=t("code",null,"3+",-1),Gn={style:{"text-align":"left"}},Jn=t("td",{style:{"text-align":"center"}},"1429",-1),Sn={style:{"text-align":"left"}},Wn={href:"https://leetcode.com/problems/first-unique-number",target:"_blank",rel:"noopener noreferrer"},Xn=t("td",{style:{"text-align":"center"}},null,-1),Yn={style:{"text-align":"left"}},Zn=t("code",null,"设计",-1),$n=t("code",null,"队列",-1),ts=t("code",null,"数组",-1),es=t("code",null,"2+",-1),ls={style:{"text-align":"left"}},os=t("td",{style:{"text-align":"center"}},"1438",-1),ns={style:{"text-align":"left"}},ss={href:"https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",target:"_blank",rel:"noopener noreferrer"},ds=t("td",{style:{"text-align":"center"}},null,-1),_s={style:{"text-align":"left"}},is=t("code",null,"队列",-1),as=t("code",null,"数组",-1),cs=t("code",null,"有序集合",-1),us=t("code",null,"3+",-1),rs={style:{"text-align":"left"}},hs=t("td",{style:{"text-align":"center"}},"1499",-1),fs={style:{"text-align":"left"}},gs={href:"https://leetcode.com/problems/max-value-of-equation",target:"_blank",rel:"noopener noreferrer"},ms=t("td",{style:{"text-align":"center"}},null,-1),ys={style:{"text-align":"left"}},xs=t("code",null,"队列",-1),bs=t("code",null,"数组",-1),ps=t("code",null,"滑动窗口",-1),ks=t("code",null,"2+",-1),qs={style:{"text-align":"left"}},Ms=t("td",{style:{"text-align":"center"}},"1670",-1),ws={style:{"text-align":"left"}},Hs={href:"https://leetcode.com/problems/design-front-middle-back-queue",target:"_blank",rel:"noopener noreferrer"},vs=t("td",{style:{"text-align":"center"}},null,-1),Es={style:{"text-align":"left"}},Is=t("code",null,"设计",-1),zs=t("code",null,"队列",-1),Os=t("code",null,"数组",-1),Ks=t("code",null,"2+",-1),Ls={style:{"text-align":"left"}},Vs=t("td",{style:{"text-align":"center"}},"1687",-1),js={style:{"text-align":"left"}},Cs={href:"https://leetcode.com/problems/delivering-boxes-from-storage-to-ports",target:"_blank",rel:"noopener noreferrer"},Ns=t("td",{style:{"text-align":"center"}},null,-1),Bs={style:{"text-align":"left"}},Rs=t("code",null,"线段树",-1),Ds=t("code",null,"队列",-1),Ps=t("code",null,"数组",-1),Qs=t("code",null,"4+",-1),Ts={style:{"text-align":"left"}},Us=t("td",{style:{"text-align":"center"}},"1696",-1),As={style:{"text-align":"left"}},Fs={href:"https://leetcode.com/problems/jump-game-vi",target:"_blank",rel:"noopener noreferrer"},Gs=t("td",{style:{"text-align":"center"}},null,-1),Js={style:{"text-align":"left"}},Ss=t("code",null,"队列",-1),Ws=t("code",null,"数组",-1),Xs=t("code",null,"动态规划",-1),Ys=t("code",null,"2+",-1),Zs={style:{"text-align":"left"}},$s=t("td",{style:{"text-align":"center"}},"1700",-1),td={style:{"text-align":"left"}},ed={href:"https://leetcode.com/problems/number-of-students-unable-to-eat-lunch",target:"_blank",rel:"noopener noreferrer"},ld=t("td",{style:{"text-align":"center"}},null,-1),od={style:{"text-align":"left"}},nd=t("code",null,"栈",-1),sd=t("code",null,"队列",-1),dd=t("code",null,"数组",-1),_d=t("code",null,"1+",-1),id={style:{"text-align":"left"}},ad=t("td",{style:{"text-align":"center"}},"1823",-1),cd={style:{"text-align":"left"}},ud={href:"https://leetcode.com/problems/find-the-winner-of-the-circular-game",target:"_blank",rel:"noopener noreferrer"},rd=t("td",{style:{"text-align":"center"}},null,-1),hd={style:{"text-align":"left"}},fd=t("code",null,"递归",-1),gd=t("code",null,"队列",-1),md=t("code",null,"数组",-1),yd=t("code",null,"2+",-1),xd={style:{"text-align":"left"}},bd=t("td",{style:{"text-align":"center"}},"1825",-1),pd={style:{"text-align":"left"}},kd={href:"https://leetcode.com/problems/finding-mk-average",target:"_blank",rel:"noopener noreferrer"},qd=t("td",{style:{"text-align":"center"}},null,-1),Md={style:{"text-align":"left"}},wd=t("code",null,"设计",-1),Hd=t("code",null,"队列",-1),vd=t("code",null,"数据流",-1),Ed=t("code",null,"2+",-1),Id={style:{"text-align":"left"}},zd=t("td",{style:{"text-align":"center"}},"2071",-1),Od={style:{"text-align":"left"}},Kd={href:"https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign",target:"_blank",rel:"noopener noreferrer"},Ld=t("td",{style:{"text-align":"center"}},null,-1),Vd={style:{"text-align":"left"}},jd=t("code",null,"贪心",-1),Cd=t("code",null,"队列",-1),Nd=t("code",null,"数组",-1),Bd=t("code",null,"3+",-1),Rd={style:{"text-align":"left"}},Dd=t("td",{style:{"text-align":"center"}},"2073",-1),Pd={style:{"text-align":"left"}},Qd={href:"https://leetcode.com/problems/time-needed-to-buy-tickets",target:"_blank",rel:"noopener noreferrer"},Td=t("td",{style:{"text-align":"center"}},null,-1),Ud={style:{"text-align":"left"}},Ad=t("code",null,"队列",-1),Fd=t("code",null,"数组",-1),Gd=t("code",null,"模拟",-1),Jd={style:{"text-align":"left"}},Sd=t("td",{style:{"text-align":"center"}},"2327",-1),Wd={style:{"text-align":"left"}},Xd={href:"https://leetcode.com/problems/number-of-people-aware-of-a-secret",target:"_blank",rel:"noopener noreferrer"},Yd=t("td",{style:{"text-align":"center"}},null,-1),Zd={style:{"text-align":"left"}},$d=t("code",null,"队列",-1),t_=t("code",null,"动态规划",-1),e_=t("code",null,"模拟",-1),l_={style:{"text-align":"left"}},o_=t("td",{style:{"text-align":"center"}},"2398",-1),n_={style:{"text-align":"left"}},s_={href:"https://leetcode.com/problems/maximum-number-of-robots-within-budget",target:"_blank",rel:"noopener noreferrer"},d_=t("td",{style:{"text-align":"center"}},null,-1),__={style:{"text-align":"left"}},i_=t("code",null,"队列",-1),a_=t("code",null,"数组",-1),c_=t("code",null,"二分查找",-1),u_=t("code",null,"4+",-1),r_={style:{"text-align":"left"}},h_=t("td",{style:{"text-align":"center"}},"2407",-1),f_={style:{"text-align":"left"}},g_={href:"https://leetcode.com/problems/longest-increasing-subsequence-ii",target:"_blank",rel:"noopener noreferrer"},m_=t("td",{style:{"text-align":"center"}},null,-1),y_={style:{"text-align":"left"}},x_=t("code",null,"树状数组",-1),b_=t("code",null,"线段树",-1),p_=t("code",null,"队列",-1),k_=t("code",null,"4+",-1),q_={style:{"text-align":"left"}},M_=t("td",{style:{"text-align":"center"}},"2444",-1),w_={style:{"text-align":"left"}},H_={href:"https://leetcode.com/problems/count-subarrays-with-fixed-bounds",target:"_blank",rel:"noopener noreferrer"},v_=t("td",{style:{"text-align":"center"}},null,-1),E_={style:{"text-align":"left"}},I_=t("code",null,"队列",-1),z_=t("code",null,"数组",-1),O_=t("code",null,"滑动窗口",-1),K_=t("code",null,"1+",-1),L_={style:{"text-align":"left"}},V_=t("td",{style:{"text-align":"center"}},"2526",-1),j_={style:{"text-align":"left"}},C_={href:"https://leetcode.com/problems/find-consecutive-integers-from-a-data-stream",target:"_blank",rel:"noopener noreferrer"},N_=t("td",{style:{"text-align":"center"}},null,-1),B_={style:{"text-align":"left"}},R_=t("code",null,"设计",-1),D_=t("code",null,"队列",-1),P_=t("code",null,"哈希表",-1),Q_=t("code",null,"2+",-1),T_={style:{"text-align":"left"}},U_=t("td",{style:{"text-align":"center"}},"2528",-1),A_={style:{"text-align":"left"}},F_={href:"https://leetcode.com/problems/maximize-the-minimum-powered-city",target:"_blank",rel:"noopener noreferrer"},G_=t("td",{style:{"text-align":"center"}},null,-1),J_={style:{"text-align":"left"}},S_=t("code",null,"贪心",-1),W_=t("code",null,"队列",-1),X_=t("code",null,"数组",-1),Y_=t("code",null,"3+",-1),Z_={style:{"text-align":"left"}},$_=t("td",{style:{"text-align":"center"}},"2534",-1),ti={style:{"text-align":"left"}},ei={href:"https://leetcode.com/problems/time-taken-to-cross-the-door",target:"_blank",rel:"noopener noreferrer"},li=t("td",{style:{"text-align":"center"}},null,-1),oi={style:{"text-align":"left"}},ni=t("code",null,"队列",-1),si=t("code",null,"数组",-1),di=t("code",null,"模拟",-1),_i={style:{"text-align":"left"}},ii=t("td",{style:{"text-align":"center"}},"2762",-1),ai={style:{"text-align":"left"}},ci={href:"https://leetcode.com/problems/continuous-subarrays",target:"_blank",rel:"noopener noreferrer"},ui=t("td",{style:{"text-align":"center"}},null,-1),ri={style:{"text-align":"left"}},hi=t("code",null,"队列",-1),fi=t("code",null,"数组",-1),gi=t("code",null,"有序集合",-1),mi=t("code",null,"3+",-1),yi={style:{"text-align":"left"}},xi=t("td",{style:{"text-align":"center"}},"2944",-1),bi={style:{"text-align":"left"}},pi={href:"https://leetcode.com/problems/minimum-number-of-coins-for-fruits",target:"_blank",rel:"noopener noreferrer"},ki=t("td",{style:{"text-align":"center"}},null,-1),qi={style:{"text-align":"left"}},Mi=t("code",null,"队列",-1),wi=t("code",null,"数组",-1),Hi=t("code",null,"动态规划",-1),vi=t("code",null,"2+",-1),Ei={style:{"text-align":"left"}},Ii=t("td",{style:{"text-align":"center"}},"2945",-1),zi={style:{"text-align":"left"}},Oi={href:"https://leetcode.com/problems/find-maximum-non-decreasing-array-length",target:"_blank",rel:"noopener noreferrer"},Ki=t("td",{style:{"text-align":"center"}},null,-1),Li={style:{"text-align":"left"}},Vi=t("code",null,"栈",-1),ji=t("code",null,"队列",-1),Ci=t("code",null,"数组",-1),Ni=t("code",null,"4+",-1),Bi={style:{"text-align":"left"}},Ri=t("td",{style:{"text-align":"center"}},"2969",-1),Di={style:{"text-align":"left"}},Pi={href:"https://leetcode.com/problems/minimum-number-of-coins-for-fruits-ii",target:"_blank",rel:"noopener noreferrer"},Qi=t("td",{style:{"text-align":"center"}},null,-1),Ti={style:{"text-align":"left"}},Ui=t("code",null,"队列",-1),Ai=t("code",null,"数组",-1),Fi=t("code",null,"动态规划",-1),Gi=t("code",null,"2+",-1),Ji={style:{"text-align":"left"}},Si=t("td",{style:{"text-align":"center"}},"3117",-1),Wi={style:{"text-align":"left"}},Xi={href:"https://leetcode.com/problems/minimum-sum-of-values-by-dividing-array",target:"_blank",rel:"noopener noreferrer"},Yi=t("td",{style:{"text-align":"center"}},null,-1),Zi={style:{"text-align":"left"}},$i=t("code",null,"位运算",-1),ta=t("code",null,"线段树",-1),ea=t("code",null,"队列",-1),la=t("code",null,"3+",-1),oa={style:{"text-align":"left"}},na=t("td",{style:{"text-align":"center"}},"3191",-1),sa={style:{"text-align":"left"}},da={href:"https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-i",target:"_blank",rel:"noopener noreferrer"},_a=t("td",{style:{"text-align":"center"}},null,-1),ia={style:{"text-align":"left"}},aa=t("code",null,"位运算",-1),ca=t("code",null,"队列",-1),ua=t("code",null,"数组",-1),ra=t("code",null,"2+",-1),ha={style:{"text-align":"left"}},fa=t("td",{style:{"text-align":"center"}},"LCP 23",-1),ga={style:{"text-align":"left"}},ma={href:"https://leetcode.cn/problems/er94lq",target:"_blank",rel:"noopener noreferrer"},ya=t("td",{style:{"text-align":"center"}},null,-1),xa={style:{"text-align":"left"}},ba=t("code",null,"队列",-1),pa=t("code",null,"数组",-1),ka=t("code",null,"模拟",-1),qa={style:{"text-align":"left"}},Ma=t("td",{style:{"text-align":"center"}},"剑指 Offer 09",-1),wa={style:{"text-align":"left"}},Ha={href:"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof",target:"_blank",rel:"noopener noreferrer"},va={style:{"text-align":"center"}},Ea={href:"/problem/jz_offer_09_1",target:"_blank",rel:"noopener noreferrer"},Ia={style:{"text-align":"left"}},za=t("code",null,"栈",-1),Oa=t("code",null,"设计",-1),Ka=t("code",null,"队列",-1),La={style:{"text-align":"left"}},Va=t("td",{style:{"text-align":"center"}},"剑指 Offer 50",-1),ja={style:{"text-align":"left"}},Ca={href:"https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof",target:"_blank",rel:"noopener noreferrer"},Na={style:{"text-align":"center"}},Ba={href:"/problem/jz_offer_50_1",target:"_blank",rel:"noopener noreferrer"},Ra={style:{"text-align":"left"}},Da=t("code",null,"队列",-1),Pa=t("code",null,"哈希表",-1),Qa=t("code",null,"字符串",-1),Ta=t("code",null,"1+",-1),Ua={style:{"text-align":"left"}},Aa=t("td",{style:{"text-align":"center"}},"剑指 Offer 59 - I",-1),Fa={style:{"text-align":"left"}},Ga={href:"https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof",target:"_blank",rel:"noopener noreferrer"},Ja=t("td",{style:{"text-align":"center"}},null,-1),Sa={style:{"text-align":"left"}},Wa=t("code",null,"队列",-1),Xa=t("code",null,"数组",-1),Ya=t("code",null,"滑动窗口",-1),Za=t("code",null,"2+",-1),$a={style:{"text-align":"left"}},tc=t("td",{style:{"text-align":"center"}},"剑指 Offer 59 - II",-1),ec={style:{"text-align":"left"}},lc={href:"https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof",target:"_blank",rel:"noopener noreferrer"},oc=t("td",{style:{"text-align":"center"}},null,-1),nc={style:{"text-align":"left"}},sc=t("code",null,"设计",-1),dc=t("code",null,"队列",-1),_c=t("code",null,"单调队列",-1),ic={style:{"text-align":"left"}},ac=t("td",{style:{"text-align":"center"}},"剑指 Offer II 41",-1),cc={style:{"text-align":"left"}},uc={href:"https://leetcode.cn/problems/qIsx9U",target:"_blank",rel:"noopener noreferrer"},rc=t("td",{style:{"text-align":"center"}},null,-1),hc={style:{"text-align":"left"}},fc=t("code",null,"设计",-1),gc=t("code",null,"队列",-1),mc=t("code",null,"数组",-1),yc=t("code",null,"1+",-1),xc={style:{"text-align":"left"}},bc=t("td",{style:{"text-align":"center"}},"剑指 Offer II 42",-1),pc={style:{"text-align":"left"}},kc={href:"https://leetcode.cn/problems/H8086Q",target:"_blank",rel:"noopener noreferrer"},qc=t("td",{style:{"text-align":"center"}},null,-1),Mc={style:{"text-align":"left"}},wc=t("code",null,"设计",-1),Hc=t("code",null,"队列",-1),vc=t("code",null,"数据流",-1),Ec={style:{"text-align":"left"}},Ic=t("td",{style:{"text-align":"center"}},"面试题 03.04",-1),zc={style:{"text-align":"left"}},Oc={href:"https://leetcode.cn/problems/implement-queue-using-stacks-lcci",target:"_blank",rel:"noopener noreferrer"},Kc=t("td",{style:{"text-align":"center"}},null,-1),Lc={style:{"text-align":"left"}},Vc=t("code",null,"栈",-1),jc=t("code",null,"设计",-1),Cc=t("code",null,"队列",-1),Nc={style:{"text-align":"left"}},Bc=t("td",{style:{"text-align":"center"}},"面试题 03.06",-1),Rc={style:{"text-align":"left"}},Dc={href:"https://leetcode.cn/problems/animal-shelter-lcci",target:"_blank",rel:"noopener noreferrer"},Pc=t("td",{style:{"text-align":"center"}},null,-1),Qc={style:{"text-align":"left"}},Tc=t("code",null,"设计",-1),Uc=t("code",null,"队列",-1),Ac={style:{"text-align":"left"}};function Fc(Gc,Jc){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return a(),c("div",null,[h,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/outline/tag/matrix.html"},{default:o(()=>[x]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[p]),_:1}),l(),e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[k]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[q]),_:1}),l(),M,l(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/outline/tag/string-matching.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[z]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[O]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/outline/tag/ordered-set.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/outline/tag/topological-sort.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/outline/tag/shortest-path.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:o(()=>[D]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[P]),_:1}),l(),e(n,{to:"/outline/tag/trie.html"},{default:o(()=>[Q]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[U]),_:1}),l(),e(n,{to:"/outline/tag/suffix-array.html"},{default:o(()=>[A]),_:1})]),F,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:o(()=>[G]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[J]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[X]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Y]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/outline/tag/counting-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/outline/tag/radix-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/outline/tag/merge-sort.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/outline/tag/quickselect.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/outline/tag/memoization.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/outline/tag/counting.html"},{default:o(()=>[ut]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[rt]),_:1}),l(),e(n,{to:"/outline/tag/bitmask.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/outline/tag/hash-function.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:o(()=>[gt]),_:1}),l(),e(n,{to:"/outline/tag/line-sweep.html"},{default:o(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/outline/tag/number-theory.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/outline/tag/geometry.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/outline/tag/game-theory.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/outline/tag/combinatorics.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/outline/tag/randomized.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:o(()=>[Et]),_:1}),l(),e(n,{to:"/outline/tag/database.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[Ot]),_:1}),l(),e(n,{to:"/outline/tag/brainteaser.html"},{default:o(()=>[Kt]),_:1}),l(),e(n,{to:"/outline/tag/interactive.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/outline/tag/iterator.html"},{default:o(()=>[Vt]),_:1}),l(),e(n,{to:"/outline/tag/concurrency.html"},{default:o(()=>[jt]),_:1})])]),Ct,u(" prettier-ignore "),t("table",null,[Nt,t("tbody",null,[t("tr",null,[Bt,t("td",Rt,[t("a",Dt,[l("用队列实现栈"),e(s)])]),t("td",Pt,[t("a",Qt,[l("[✓]"),e(s)])]),t("td",Tt,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Ut]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[At]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ft]),_:1})]),t("td",Gt,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Jt,t("td",St,[t("a",Wt,[l("用栈实现队列"),e(s)])]),t("td",Xt,[t("a",Yt,[l("[✓]"),e(s)])]),t("td",Zt,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[$t]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[te]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ee]),_:1})]),t("td",le,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[oe,t("td",ne,[t("a",se,[l("滑动窗口最大值"),e(s)])]),t("td",de,[t("a",_e,[l("[✓]"),e(s)])]),t("td",ie,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ae]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ce]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[ue]),_:1}),l(),re]),t("td",he,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[fe,t("td",ge,[t("a",me,[l("锯齿迭代器"),e(s)])]),ye,t("td",xe,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[be]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[pe]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ke]),_:1}),l(),qe]),t("td",Me,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[we,t("td",He,[t("a",ve,[l("扁平化嵌套列表迭代器"),e(s)])]),Ee,t("td",Ie,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ze]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Oe]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Ke]),_:1}),l(),Le]),t("td",Ve,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[je,t("td",Ce,[t("a",Ne,[l("数据流中的移动平均值"),e(s)])]),t("td",Be,[t("a",Re,[l("[✓]"),e(s)])]),t("td",De,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Pe]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Qe]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Te]),_:1}),l(),Ue]),t("td",Ae,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Fe,t("td",Ge,[t("a",Je,[l("贪吃蛇"),e(s)])]),Se,t("td",We,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Xe]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ye]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ze]),_:1}),l(),$e]),t("td",tl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[el,t("td",ll,[t("a",ol,[l("敲击计数器"),e(s)])]),nl,t("td",sl,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[dl]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[_l]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[il]),_:1}),l(),al]),t("td",cl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ul,t("td",rl,[t("a",hl,[l("电话目录管理系统"),e(s)])]),t("td",fl,[t("a",gl,[l("[✓]"),e(s)])]),t("td",ml,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[yl]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[xl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[bl]),_:1}),l(),pl]),t("td",kl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ql,t("td",Ml,[t("a",wl,[l("字符串中的第一个唯一字符"),e(s)])]),Hl,t("td",vl,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[El]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Il]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[zl]),_:1}),l(),Ol]),t("td",Kl,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ll,t("td",Vl,[t("a",jl,[l("设计循环队列"),e(s)])]),t("td",Cl,[t("a",Nl,[l("[✓]"),e(s)])]),t("td",Bl,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Rl]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Dl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Pl]),_:1}),l(),Ql]),t("td",Tl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ul,t("td",Al,[t("a",Fl,[l("设计循环双端队列"),e(s)])]),t("td",Gl,[t("a",Jl,[l("[✓]"),e(s)])]),t("td",Sl,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Wl]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Xl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Yl]),_:1}),l(),Zl]),t("td",$l,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[to,t("td",eo,[t("a",lo,[l("Dota2 参议院"),e(s)])]),oo,t("td",no,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[so]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[_o]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[io]),_:1})]),t("td",ao,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[co,t("td",uo,[t("a",ro,[l("K 个关闭的灯泡"),e(s)])]),ho,t("td",fo,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[go]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[mo]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[yo]),_:1}),l(),xo]),t("td",bo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[po,t("td",ko,[t("a",qo,[l("和至少为 K 的最短子数组"),e(s)])]),Mo,t("td",wo,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ho]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[vo]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[Eo]),_:1}),l(),Io]),t("td",zo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Oo,t("td",Ko,[t("a",Lo,[l("环形子数组的最大和"),e(s)])]),t("td",Vo,[t("a",jo,[l("[✓]"),e(s)])]),t("td",Co,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[No]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Bo]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[Ro]),_:1}),l(),Do]),t("td",Po,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Qo,t("td",To,[t("a",Uo,[l("最近的请求次数"),e(s)])]),Ao,t("td",Fo,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Go]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Jo]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[So]),_:1})]),t("td",Wo,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Xo,t("td",Yo,[t("a",Zo,[l("戳印序列"),e(s)])]),$o,t("td",tn,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[en]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[ln]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[on]),_:1}),l(),nn]),t("td",sn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[dn,t("td",_n,[t("a",an,[l("按递增顺序显示卡牌"),e(s)])]),cn,t("td",un,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[rn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[hn]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[fn]),_:1}),l(),gn]),t("td",mn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[yn,t("td",xn,[t("a",bn,[l("K 连续位的最小翻转次数"),e(s)])]),pn,t("td",kn,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[qn]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Mn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[wn]),_:1}),l(),Hn]),t("td",vn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[En,t("td",In,[t("a",zn,[l("最后 K 个数的乘积"),e(s)])]),On,t("td",Kn,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Ln]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Vn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[jn]),_:1}),l(),Cn]),t("td",Nn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Bn,t("td",Rn,[t("a",Dn,[l("带限制的子序列和"),e(s)])]),Pn,t("td",Qn,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Tn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Un]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[An]),_:1}),l(),Fn]),t("td",Gn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Jn,t("td",Sn,[t("a",Wn,[l("第一个唯一数字"),e(s)])]),Xn,t("td",Yn,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Zn]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[$n]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ts]),_:1}),l(),es]),t("td",ls,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[os,t("td",ns,[t("a",ss,[l("绝对差不超过限制的最长连续子数组"),e(s)])]),ds,t("td",_s,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[is]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[as]),_:1}),l(),e(n,{to:"/outline/tag/ordered-set.html"},{default:o(()=>[cs]),_:1}),l(),us]),t("td",rs,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[hs,t("td",fs,[t("a",gs,[l("满足不等式的最大值"),e(s)])]),ms,t("td",ys,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[xs]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[bs]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[ps]),_:1}),l(),ks]),t("td",qs,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ms,t("td",ws,[t("a",Hs,[l("设计前中后队列"),e(s)])]),vs,t("td",Es,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Is]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[zs]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Os]),_:1}),l(),Ks]),t("td",Ls,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Vs,t("td",js,[t("a",Cs,[l("从仓库到码头运输箱子"),e(s)])]),Ns,t("td",Bs,[e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Rs]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ds]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ps]),_:1}),l(),Qs]),t("td",Ts,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Us,t("td",As,[t("a",Fs,[l("跳跃游戏 VI"),e(s)])]),Gs,t("td",Js,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ss]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ws]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Xs]),_:1}),l(),Ys]),t("td",Zs,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[$s,t("td",td,[t("a",ed,[l("无法吃午餐的学生数量"),e(s)])]),ld,t("td",od,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[nd]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[sd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[dd]),_:1}),l(),_d]),t("td",id,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[ad,t("td",cd,[t("a",ud,[l("找出游戏的获胜者"),e(s)])]),rd,t("td",hd,[e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[fd]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[gd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[md]),_:1}),l(),yd]),t("td",xd,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[bd,t("td",pd,[t("a",kd,[l("求出 MK 平均值"),e(s)])]),qd,t("td",Md,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[wd]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Hd]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[vd]),_:1}),l(),Ed]),t("td",Id,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[zd,t("td",Od,[t("a",Kd,[l("你可以安排的最多任务数目"),e(s)])]),Ld,t("td",Vd,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[jd]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Cd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Nd]),_:1}),l(),Bd]),t("td",Rd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Dd,t("td",Pd,[t("a",Qd,[l("买票需要的时间"),e(s)])]),Td,t("td",Ud,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ad]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Fd]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[Gd]),_:1})]),t("td",Jd,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Sd,t("td",Wd,[t("a",Xd,[l("知道秘密的人数"),e(s)])]),Yd,t("td",Zd,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[$d]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[t_]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[e_]),_:1})]),t("td",l_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[o_,t("td",n_,[t("a",s_,[l("预算内的最多机器人数目"),e(s)])]),d_,t("td",__,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[i_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[a_]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[c_]),_:1}),l(),u_]),t("td",r_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[h_,t("td",f_,[t("a",g_,[l("最长递增子序列 II"),e(s)])]),m_,t("td",y_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[x_]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[b_]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[p_]),_:1}),l(),k_]),t("td",q_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[M_,t("td",w_,[t("a",H_,[l("统计定界子数组的数目"),e(s)])]),v_,t("td",E_,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[I_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[z_]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[O_]),_:1}),l(),K_]),t("td",L_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[V_,t("td",j_,[t("a",C_,[l("找到数据流中的连续整数"),e(s)])]),N_,t("td",B_,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[R_]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[D_]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[P_]),_:1}),l(),Q_]),t("td",T_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[U_,t("td",A_,[t("a",F_,[l("最大化城市的最小电量"),e(s)])]),G_,t("td",J_,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[S_]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[W_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[X_]),_:1}),l(),Y_]),t("td",Z_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[$_,t("td",ti,[t("a",ei,[l("通过门的时间"),e(s)])]),li,t("td",oi,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ni]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[si]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[di]),_:1})]),t("td",_i,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ii,t("td",ai,[t("a",ci,[l("不间断子数组"),e(s)])]),ui,t("td",ri,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[hi]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[fi]),_:1}),l(),e(n,{to:"/outline/tag/ordered-set.html"},{default:o(()=>[gi]),_:1}),l(),mi]),t("td",yi,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[xi,t("td",bi,[t("a",pi,[l("购买水果需要的最少金币数"),e(s)])]),ki,t("td",qi,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Mi]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[wi]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Hi]),_:1}),l(),vi]),t("td",Ei,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ii,t("td",zi,[t("a",Oi,[l("找到最大非递减数组的长度"),e(s)])]),Ki,t("td",Li,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Vi]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ji]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ci]),_:1}),l(),Ni]),t("td",Bi,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ri,t("td",Di,[t("a",Pi,[l("购买水果需要的最少金币数 II"),e(s)])]),Qi,t("td",Ti,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ui]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ai]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Fi]),_:1}),l(),Gi]),t("td",Ji,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Si,t("td",Wi,[t("a",Xi,[l("划分数组得到最小的值之和"),e(s)])]),Yi,t("td",Zi,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[$i]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[ta]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ea]),_:1}),l(),la]),t("td",oa,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[na,t("td",sa,[t("a",da,[l("使二进制数组全部等于 1 的最少操作次数 I"),e(s)])]),_a,t("td",ia,[e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[aa]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ca]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ua]),_:1}),l(),ra]),t("td",ha,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[fa,t("td",ga,[t("a",ma,[l("魔术排列"),e(s)])]),ya,t("td",xa,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[ba]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[pa]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[ka]),_:1})]),t("td",qa,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ma,t("td",wa,[t("a",Ha,[l("用两个栈实现队列"),e(s)])]),t("td",va,[t("a",Ea,[l("[✓]"),e(s)])]),t("td",Ia,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[za]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Oa]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Ka]),_:1})]),t("td",La,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Va,t("td",ja,[t("a",Ca,[l("第一个只出现一次的字符"),e(s)])]),t("td",Na,[t("a",Ba,[l("[✓]"),e(s)])]),t("td",Ra,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Da]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Pa]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[Qa]),_:1}),l(),Ta]),t("td",Ua,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Aa,t("td",Fa,[t("a",Ga,[l("滑动窗口的最大值"),e(s)])]),Ja,t("td",Sa,[e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Wa]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Xa]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[Ya]),_:1}),l(),Za]),t("td",$a,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[tc,t("td",ec,[t("a",lc,[l("队列的最大值"),e(s)])]),oc,t("td",nc,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[sc]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[dc]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:o(()=>[_c]),_:1})]),t("td",ic,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ac,t("td",cc,[t("a",uc,[l("滑动窗口的平均值"),e(s)])]),rc,t("td",hc,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[fc]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[gc]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[mc]),_:1}),l(),yc]),t("td",xc,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[bc,t("td",pc,[t("a",kc,[l("最近请求次数"),e(s)])]),qc,t("td",Mc,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[wc]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Hc]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[vc]),_:1})]),t("td",Ec,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ic,t("td",zc,[t("a",Oc,[l("化栈为队"),e(s)])]),Kc,t("td",Lc,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Vc]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[jc]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Cc]),_:1})]),t("td",Nc,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Bc,t("td",Rc,[t("a",Dc,[l("动物收容所"),e(s)])]),Pc,t("td",Qc,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Tc]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[Uc]),_:1})]),t("td",Ac,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])])])])])}const Wc=i(r,[["render",Fc],["__file","queue.html.vue"]]);export{Wc as default};
