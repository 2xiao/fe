import{_ as p,r,o as i,c as d,f as c,a as t,d as n,w as s,b as e,e as u}from"./app-JnDxddK3.js";const _={},h=u(`<h1 id="_3-9-二分查找" tabindex="-1"><a class="header-anchor" href="#_3-9-二分查找" aria-hidden="true">#</a> 3.9 二分查找</h1><p>二分查找（Binary Search）算法，也叫折半查找算法。二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p><p>二分查找是一种非常高效的查找算法，时间复杂度是 <code>O(log n)</code>。</p><h2 id="循环实现" tabindex="-1"><a class="header-anchor" href="#循环实现" aria-hidden="true">#</a> 循环实现</h2><p>最简单的情况就是<strong>有序数组</strong>中<strong>不存在重复元素</strong>，我们在其中用二分查找值等于给定值的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的循环实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有三个<strong>注意事项</strong>：</p><p><strong>1. 循环退出条件</strong></p><p>注意是<code>low &lt;= high</code>，而不是<code>low &lt; high</code>。</p><p><strong>2. mid 的取值</strong></p><p>实际上，<code>mid=(low+high)/2</code>这种写法是有问题的。因为如果<code>low</code>和<code>high</code>比较大的话，两者之和就有可能会溢出。改进的方法是将<code>mid</code>的计算方式写成<code>low+(high-low)/2</code>。更进一步，如果要将性能优化到极致的话，我们可以将这里的除以 2 操作转化成位运算<code>low+((high-low)&gt;&gt;1)</code>。因为相比除法运算来说，计算机处理位运算要快得多。</p><p><strong>3. low 和 high 的更新</strong></p><p><code>low=mid+1</code>，<code>high=mid-1</code>。注意这里的<code>+1</code>和<code>-1</code>，如果直接写成<code>low=mid</code>或者<code>high=mid</code>，就可能会发生死循环。比如，当<code>high=3，low=3</code>时，如果<code>a[3]</code>不等于<code>value</code>，就会导致一直循环不退出。</p><h2 id="递归实现" tabindex="-1"><a class="header-anchor" href="#递归实现" aria-hidden="true">#</a> 递归实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 二分查找的递归实现</span>
<span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">bsearchInternally</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景的局限性" tabindex="-1"><a class="header-anchor" href="#应用场景的局限性" aria-hidden="true">#</a> 应用场景的局限性</h2><p>二分查找的时间复杂度是 <code>O(log n)</code>，查找数据的效率非常高。不过，并不是什么情况下都可以用二分查找，它的应用场景是有很大局限性的。</p><h3 id="依赖顺序表结构-数组" tabindex="-1"><a class="header-anchor" href="#依赖顺序表结构-数组" aria-hidden="true">#</a> 依赖顺序表结构（数组）</h3><p>二分查找只能用在数据是通过顺序表来存储的数据结构上。如果数据是通过其他数据结构存储的，则无法应用二分查找。</p><p>主要原因是二分查找算法需要按照下标随机访问元素。数组按照下标随机访问数据的时间复杂度是 O(1)，而链表随机访问的时间复杂度是 O(n)。所以，如果数据使用链表存储，二分查找的时间复杂就会变得很高。</p><h3 id="数据必须有序" tabindex="-1"><a class="header-anchor" href="#数据必须有序" aria-hidden="true">#</a> 数据必须有序</h3><p>二分查找要求数据必须是有序的。如果数据没有序需要先排序。排序的时间复杂度最低是 O(nlogn)。所以，如果针对的是一组静态的数据，没有频繁地插入、删除，我们可以进行一次排序，多次二分查找。这样排序的成本可被均摊，二分查找的边际成本就会比较低。</p><p>但是，如果数据集合有频繁的插入和删除操作，要想用二分查找，要么每次插入、删除操作之后保证数据仍然有序，要么在每次二分查找之前都先进行排序。针对这种动态数据集合，无论哪种方法，维护有序的成本都是很高的。</p><p>所以，二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。那针对动态数据集合，如何在其中快速查找某个数据呢？别急，等到二叉树那一节我会详细讲。</p><h3 id="数据量太小不适合" tabindex="-1"><a class="header-anchor" href="#数据量太小不适合" aria-hidden="true">#</a> 数据量太小不适合</h3><p>如果要处理的数据量很小，完全没有必要用二分查找，顺序遍历就足够了。比如在一个大小为 10 的数组中查找一个元素，不管用二分查找还是顺序遍历，查找速度都差不多。只有数据量比较大的时候，二分查找的优势才会比较明显。</p><p>不过，这里有一个例外。如果数据之间的比较操作非常耗时，不管数据量大小，都推荐使用二分查找。比如，数组中存储的都是长度超过 300 的字符串，如此长的两个字符串之间比对大小，就会非常耗时。需要尽可能地减少比较次数，而比较次数的减少会大大提高性能，这个时候二分查找就比顺序遍历更有优势。</p><h3 id="数据量太大也不适合" tabindex="-1"><a class="header-anchor" href="#数据量太大也不适合" aria-hidden="true">#</a> 数据量太大也不适合</h3><p>二分查找的底层需要依赖数组这种数据结构，而数组为了支持随机访问的特性，要求内存空间连续，对内存的要求比较苛刻。比如，有 1GB 大小的数据，如果希望用数组来存储，那就需要 1GB 的连续内存空间。</p><p>注意这里的“连续”二字，也就是说，即便有 2GB 的内存空间剩余，但是如果这剩余的 2GB 内存空间都是零散的，没有连续的 1GB 大小的内存空间，那照样无法申请一个 1GB 大小的数组。而二分查找是作用在数组这种数据结构之上的，所以太大的数据用数组存储就比较吃力了，也就不能用二分查找了。</p><h2 id="二分查找的变种写法" tabindex="-1"><a class="header-anchor" href="#二分查找的变种写法" aria-hidden="true">#</a> 二分查找的变种写法</h2><h3 id="变种一-查找第一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种一-查找第一个值等于给定值的元素" aria-hidden="true">#</a> 变种一：查找第一个值等于给定值的元素</h3><p>如果<code>mid</code>等于 0，那这个元素已经是数组的第一个元素，那它肯定是我们要找的；如果<code>mid</code>不等于 0，但<code>arr[mid]</code>的前一个元素<code>arr[mid-1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的第一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种二-查找最后一个值等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种二-查找最后一个值等于给定值的元素" aria-hidden="true">#</a> 变种二：查找最后一个值等于给定值的元素</h3><p>如果<code>arr[mid]</code>这个元素已经是数组中的最后一个元素了，那它肯定是我们要找的；如果<code>arr[mid]</code>的后一个元素<code>a[mid+1]</code>不等于<code>value</code>，那也说明<code>arr[mid]</code>就是我们要找的最后一个值等于给定值的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种三-查找第一个大于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种三-查找第一个大于等于给定值的元素" aria-hidden="true">#</a> 变种三：查找第一个大于等于给定值的元素</h3><p>如果<code>arr[mid]</code>小于要查找的值<code>value</code>，那要查找的值肯定在<code>[mid+1, high]</code>之间，所以，我们更新<code>low=mid+1</code>。</p><p>对于<code>arr[mid]</code>大于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的第一个值大于等于给定值的元素。如果<code>arr[mid]</code>前面已经没有元素，或者前面一个元素小于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><p>如果<code>arr[mid - 1]</code>也大于等于要查找的值<code>value</code>，那说明要查找的元素在<code>[low, mid-1]</code>之间，所以，我们将<code>high</code>更新为<code>mid-1</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变种四-查找最后一个小于等于给定值的元素" tabindex="-1"><a class="header-anchor" href="#变种四-查找最后一个小于等于给定值的元素" aria-hidden="true">#</a> 变种四：查找最后一个小于等于给定值的元素</h3><p>对于<code>arr[mid]</code>小于等于给定值<code>value</code>的情况，我们要先看下这个<code>arr[mid]</code>是不是我们要找的最后一个值小于等于给定值的元素。</p><p>如果<code>arr[mid]</code>后面已经没有元素，或者后面一个元素大于要查找的值<code>value</code>，那<code>arr[mid]</code>就是我们要找的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bsearch</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),k=t("h2",{id:"相关题目",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),e(" 相关题目")],-1),m=t("h4",{id:"二分下标",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分下标","aria-hidden":"true"},"#"),e(" 二分下标")],-1),f=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),g=t("td",{style:{"text-align":"center"}},"704",-1),b=t("td",{style:{"text-align":"left"}},"二分查找",-1),y={style:{"text-align":"center"}},v={style:{"text-align":"left"}},x=t("code",null,"数组",-1),w=t("code",null,"二分查找",-1),M={style:{"text-align":"left"}},I={style:{"text-align":"center"}},E={href:"https://leetcode.cn/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.com/problems/binary-search",target:"_blank",rel:"noopener noreferrer"},B=t("td",{style:{"text-align":"center"}},"374",-1),T=t("td",{style:{"text-align":"left"}},"猜数字大小",-1),N={style:{"text-align":"center"}},q={style:{"text-align":"left"}},O=t("code",null,"二分查找",-1),G=t("code",null,"交互",-1),H={style:{"text-align":"left"}},S={style:{"text-align":"center"}},D={href:"https://leetcode.cn/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},L={href:"https://leetcode.com/problems/guess-number-higher-or-lower",target:"_blank",rel:"noopener noreferrer"},R=t("td",{style:{"text-align":"center"}},"35",-1),V=t("td",{style:{"text-align":"left"}},"搜索插入位置",-1),z={style:{"text-align":"center"}},A={style:{"text-align":"left"}},C=t("code",null,"数组",-1),P=t("code",null,"二分查找",-1),K={style:{"text-align":"left"}},U={style:{"text-align":"center"}},F={href:"https://leetcode.cn/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},J={href:"https://leetcode.com/problems/search-insert-position",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"center"}},"34",-1),W=t("td",{style:{"text-align":"left"}},"在排序数组中查找元素的第一个和最后一个位置",-1),X={style:{"text-align":"center"}},Y={style:{"text-align":"left"}},Z=t("code",null,"数组",-1),$=t("code",null,"二分查找",-1),tt={style:{"text-align":"left"}},et={style:{"text-align":"center"}},nt={href:"https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},st={href:"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},"167",-1),ot=t("td",{style:{"text-align":"left"}},"两数之和 II - 输入有序数组",-1),lt={style:{"text-align":"center"}},ct={style:{"text-align":"left"}},rt=t("code",null,"数组",-1),pt=t("code",null,"双指针",-1),it=t("code",null,"二分查找",-1),dt={style:{"text-align":"left"}},ut={style:{"text-align":"center"}},_t={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},ht={href:"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",target:"_blank",rel:"noopener noreferrer"},kt=t("td",{style:{"text-align":"center"}},"153",-1),mt=t("td",{style:{"text-align":"left"}},"寻找旋转排序数组中的最小值",-1),ft={style:{"text-align":"center"}},gt={style:{"text-align":"left"}},bt=t("code",null,"数组",-1),yt=t("code",null,"二分查找",-1),vt={style:{"text-align":"left"}},xt={style:{"text-align":"center"}},wt={href:"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Mt={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},It=t("td",{style:{"text-align":"center"}},"154",-1),Et=t("td",{style:{"text-align":"left"}},"寻找旋转排序数组中的最小值 II",-1),jt={style:{"text-align":"center"}},Bt={style:{"text-align":"left"}},Tt=t("code",null,"数组",-1),Nt=t("code",null,"二分查找",-1),qt={style:{"text-align":"left"}},Ot={style:{"text-align":"center"}},Gt={href:"https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},Ht={href:"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},St=t("td",{style:{"text-align":"center"}},"33",-1),Dt=t("td",{style:{"text-align":"left"}},"搜索旋转排序数组",-1),Lt={style:{"text-align":"center"}},Rt={style:{"text-align":"left"}},Vt=t("code",null,"数组",-1),zt=t("code",null,"二分查找",-1),At={style:{"text-align":"left"}},Ct={style:{"text-align":"center"}},Pt={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Kt={href:"https://leetcode.com/problems/search-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"},Ut=t("td",{style:{"text-align":"center"}},"81",-1),Ft=t("td",{style:{"text-align":"left"}},"搜索旋转排序数组 II",-1),Jt={style:{"text-align":"center"}},Qt={style:{"text-align":"left"}},Wt=t("code",null,"数组",-1),Xt=t("code",null,"二分查找",-1),Yt={style:{"text-align":"left"}},Zt={style:{"text-align":"center"}},$t={href:"https://leetcode.cn/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},te={href:"https://leetcode.com/problems/search-in-rotated-sorted-array-ii",target:"_blank",rel:"noopener noreferrer"},ee=t("td",{style:{"text-align":"center"}},"278",-1),ne=t("td",{style:{"text-align":"left"}},"第一个错误的版本",-1),se={style:{"text-align":"center"}},ae={style:{"text-align":"left"}},oe=t("code",null,"二分查找",-1),le=t("code",null,"交互",-1),ce={style:{"text-align":"left"}},re={style:{"text-align":"center"}},pe={href:"https://leetcode.cn/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://leetcode.com/problems/first-bad-version",target:"_blank",rel:"noopener noreferrer"},de=t("td",{style:{"text-align":"center"}},"162",-1),ue=t("td",{style:{"text-align":"left"}},"寻找峰值",-1),_e={style:{"text-align":"center"}},he={style:{"text-align":"left"}},ke=t("code",null,"数组",-1),me=t("code",null,"二分查找",-1),fe={style:{"text-align":"left"}},ge={style:{"text-align":"center"}},be={href:"https://leetcode.cn/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},ye={href:"https://leetcode.com/problems/find-peak-element",target:"_blank",rel:"noopener noreferrer"},ve=t("td",{style:{"text-align":"center"}},"852",-1),xe=t("td",{style:{"text-align":"left"}},"山脉数组的峰顶索引",-1),we={style:{"text-align":"center"}},Me={style:{"text-align":"left"}},Ie=t("code",null,"数组",-1),Ee=t("code",null,"二分查找",-1),je={style:{"text-align":"left"}},Be={style:{"text-align":"center"}},Te={href:"https://leetcode.cn/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},Ne={href:"https://leetcode.com/problems/peak-index-in-a-mountain-array",target:"_blank",rel:"noopener noreferrer"},qe=t("td",{style:{"text-align":"center"}},"1095",-1),Oe=t("td",{style:{"text-align":"left"}},"山脉数组中查找目标值",-1),Ge=t("td",{style:{"text-align":"center"}},null,-1),He={style:{"text-align":"left"}},Se=t("code",null,"数组",-1),De=t("code",null,"二分查找",-1),Le=t("code",null,"交互",-1),Re={style:{"text-align":"left"}},Ve={style:{"text-align":"center"}},ze={href:"https://leetcode.cn/problems/find-in-mountain-array",target:"_blank",rel:"noopener noreferrer"},Ae={href:"https://leetcode.com/problems/find-in-mountain-array",target:"_blank",rel:"noopener noreferrer"},Ce=t("td",{style:{"text-align":"center"}},"744",-1),Pe=t("td",{style:{"text-align":"left"}},"寻找比目标字母大的最小字母",-1),Ke=t("td",{style:{"text-align":"center"}},null,-1),Ue={style:{"text-align":"left"}},Fe=t("code",null,"数组",-1),Je=t("code",null,"二分查找",-1),Qe={style:{"text-align":"left"}},We={style:{"text-align":"center"}},Xe={href:"https://leetcode.cn/problems/find-smallest-letter-greater-than-target",target:"_blank",rel:"noopener noreferrer"},Ye={href:"https://leetcode.com/problems/find-smallest-letter-greater-than-target",target:"_blank",rel:"noopener noreferrer"},Ze=t("td",{style:{"text-align":"center"}},"4",-1),$e=t("td",{style:{"text-align":"left"}},"寻找两个正序数组的中位数",-1),tn={style:{"text-align":"center"}},en={style:{"text-align":"left"}},nn=t("code",null,"数组",-1),sn=t("code",null,"二分查找",-1),an=t("code",null,"分治",-1),on={style:{"text-align":"left"}},ln={style:{"text-align":"center"}},cn={href:"https://leetcode.cn/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://leetcode.com/problems/median-of-two-sorted-arrays",target:"_blank",rel:"noopener noreferrer"},pn=t("td",{style:{"text-align":"center"}},"74",-1),dn=t("td",{style:{"text-align":"left"}},"搜索二维矩阵",-1),un={style:{"text-align":"center"}},_n={style:{"text-align":"left"}},hn=t("code",null,"数组",-1),kn=t("code",null,"二分查找",-1),mn=t("code",null,"矩阵",-1),fn={style:{"text-align":"left"}},gn={style:{"text-align":"center"}},bn={href:"https://leetcode.cn/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://leetcode.com/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"},vn=t("td",{style:{"text-align":"center"}},"240",-1),xn=t("td",{style:{"text-align":"left"}},"搜索二维矩阵 II",-1),wn={style:{"text-align":"center"}},Mn={style:{"text-align":"left"}},In=t("code",null,"数组",-1),En=t("code",null,"二分查找",-1),jn=t("code",null,"分治",-1),Bn=t("code",null,"1+",-1),Tn={style:{"text-align":"left"}},Nn={style:{"text-align":"center"}},qn={href:"https://leetcode.cn/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},On={href:"https://leetcode.com/problems/search-a-2d-matrix-ii",target:"_blank",rel:"noopener noreferrer"},Gn=t("h4",{id:"二分答案",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#二分答案","aria-hidden":"true"},"#"),e(" 二分答案")],-1),Hn=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Sn=t("td",{style:{"text-align":"center"}},"69",-1),Dn=t("td",{style:{"text-align":"left"}},"x 的平方根",-1),Ln={style:{"text-align":"center"}},Rn={style:{"text-align":"left"}},Vn=t("code",null,"数学",-1),zn=t("code",null,"二分查找",-1),An={style:{"text-align":"left"}},Cn={style:{"text-align":"center"}},Pn={href:"https://leetcode.cn/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://leetcode.com/problems/sqrtx",target:"_blank",rel:"noopener noreferrer"},Un=t("td",{style:{"text-align":"center"}},"287",-1),Fn=t("td",{style:{"text-align":"left"}},"寻找重复数",-1),Jn={style:{"text-align":"center"}},Qn={style:{"text-align":"left"}},Wn=t("code",null,"位运算",-1),Xn=t("code",null,"数组",-1),Yn=t("code",null,"双指针",-1),Zn=t("code",null,"1+",-1),$n={style:{"text-align":"left"}},ts={style:{"text-align":"center"}},es={href:"https://leetcode.cn/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},ns={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},ss=t("td",{style:{"text-align":"center"}},"50",-1),as=t("td",{style:{"text-align":"left"}},"Pow(x, n)",-1),os={style:{"text-align":"center"}},ls={style:{"text-align":"left"}},cs=t("code",null,"递归",-1),rs=t("code",null,"数学",-1),ps={style:{"text-align":"left"}},is={style:{"text-align":"center"}},ds={href:"https://leetcode.cn/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},us={href:"https://leetcode.com/problems/powx-n",target:"_blank",rel:"noopener noreferrer"},_s=t("td",{style:{"text-align":"center"}},"367",-1),hs=t("td",{style:{"text-align":"left"}},"有效的完全平方数",-1),ks=t("td",{style:{"text-align":"center"}},null,-1),ms={style:{"text-align":"left"}},fs=t("code",null,"数学",-1),gs=t("code",null,"二分查找",-1),bs={style:{"text-align":"left"}},ys={style:{"text-align":"center"}},vs={href:"https://leetcode.cn/problems/valid-perfect-square",target:"_blank",rel:"noopener noreferrer"},xs={href:"https://leetcode.com/problems/valid-perfect-square",target:"_blank",rel:"noopener noreferrer"},ws=t("td",{style:{"text-align":"center"}},"1300",-1),Ms=t("td",{style:{"text-align":"left"}},"转变数组后最接近目标值的数组和",-1),Is=t("td",{style:{"text-align":"center"}},null,-1),Es={style:{"text-align":"left"}},js=t("code",null,"数组",-1),Bs=t("code",null,"二分查找",-1),Ts=t("code",null,"排序",-1),Ns={style:{"text-align":"left"}},qs={style:{"text-align":"center"}},Os={href:"https://leetcode.cn/problems/sum-of-mutated-array-closest-to-target",target:"_blank",rel:"noopener noreferrer"},Gs={href:"https://leetcode.com/problems/sum-of-mutated-array-closest-to-target",target:"_blank",rel:"noopener noreferrer"},Hs=t("td",{style:{"text-align":"center"}},"400",-1),Ss=t("td",{style:{"text-align":"left"}},"第 N 位数字",-1),Ds={style:{"text-align":"center"}},Ls={style:{"text-align":"left"}},Rs=t("code",null,"数学",-1),Vs=t("code",null,"二分查找",-1),zs={style:{"text-align":"left"}},As={style:{"text-align":"center"}},Cs={href:"https://leetcode.cn/problems/nth-digit",target:"_blank",rel:"noopener noreferrer"},Ps={href:"https://leetcode.com/problems/nth-digit",target:"_blank",rel:"noopener noreferrer"},Ks=t("h4",{id:"复杂的二分查找问题",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#复杂的二分查找问题","aria-hidden":"true"},"#"),e(" 复杂的二分查找问题")],-1),Us=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),Fs=t("td",{style:{"text-align":"center"}},"875",-1),Js=t("td",{style:{"text-align":"left"}},"爱吃香蕉的珂珂",-1),Qs=t("td",{style:{"text-align":"center"}},null,-1),Ws={style:{"text-align":"left"}},Xs=t("code",null,"数组",-1),Ys=t("code",null,"二分查找",-1),Zs={style:{"text-align":"left"}},$s={style:{"text-align":"center"}},ta={href:"https://leetcode.cn/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},ea={href:"https://leetcode.com/problems/koko-eating-bananas",target:"_blank",rel:"noopener noreferrer"},na=t("td",{style:{"text-align":"center"}},"410",-1),sa=t("td",{style:{"text-align":"left"}},"分割数组的最大值",-1),aa=t("td",{style:{"text-align":"center"}},null,-1),oa={style:{"text-align":"left"}},la=t("code",null,"贪心",-1),ca=t("code",null,"数组",-1),ra=t("code",null,"二分查找",-1),pa=t("code",null,"2+",-1),ia={style:{"text-align":"left"}},da={style:{"text-align":"center"}},ua={href:"https://leetcode.cn/problems/split-array-largest-sum",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://leetcode.com/problems/split-array-largest-sum",target:"_blank",rel:"noopener noreferrer"},ha=t("td",{style:{"text-align":"center"}},"209",-1),ka=t("td",{style:{"text-align":"left"}},"长度最小的子数组",-1),ma={style:{"text-align":"center"}},fa={style:{"text-align":"left"}},ga=t("code",null,"数组",-1),ba=t("code",null,"二分查找",-1),ya=t("code",null,"前缀和",-1),va=t("code",null,"1+",-1),xa={style:{"text-align":"left"}},wa={style:{"text-align":"center"}},Ma={href:"https://leetcode.cn/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},Ia={href:"https://leetcode.com/problems/minimum-size-subarray-sum",target:"_blank",rel:"noopener noreferrer"},Ea=t("td",{style:{"text-align":"center"}},"658",-1),ja=t("td",{style:{"text-align":"left"}},"找到 K 个最接近的元素",-1),Ba=t("td",{style:{"text-align":"center"}},null,-1),Ta={style:{"text-align":"left"}},Na=t("code",null,"数组",-1),qa=t("code",null,"双指针",-1),Oa=t("code",null,"二分查找",-1),Ga=t("code",null,"3+",-1),Ha={style:{"text-align":"left"}},Sa={style:{"text-align":"center"}},Da={href:"https://leetcode.cn/problems/find-k-closest-elements",target:"_blank",rel:"noopener noreferrer"},La={href:"https://leetcode.com/problems/find-k-closest-elements",target:"_blank",rel:"noopener noreferrer"},Ra=t("td",{style:{"text-align":"center"}},"270",-1),Va=t("td",{style:{"text-align":"left"}},"最接近的二叉搜索树值 🔒",-1),za=t("td",{style:{"text-align":"center"}},null,-1),Aa={style:{"text-align":"left"}},Ca=t("code",null,"树",-1),Pa=t("code",null,"深度优先搜索",-1),Ka=t("code",null,"二叉搜索树",-1),Ua=t("code",null,"2+",-1),Fa={style:{"text-align":"left"}},Ja={style:{"text-align":"center"}},Qa={href:"https://leetcode.cn/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},Wa={href:"https://leetcode.com/problems/closest-binary-search-tree-value",target:"_blank",rel:"noopener noreferrer"},Xa=t("td",{style:{"text-align":"center"}},"702",-1),Ya=t("td",{style:{"text-align":"left"}},"搜索长度未知的有序数组 🔒",-1),Za=t("td",{style:{"text-align":"center"}},null,-1),$a={style:{"text-align":"left"}},to=t("code",null,"数组",-1),eo=t("code",null,"二分查找",-1),no=t("code",null,"交互",-1),so={style:{"text-align":"left"}},ao={style:{"text-align":"center"}},oo={href:"https://leetcode.cn/problems/search-in-a-sorted-array-of-unknown-size",target:"_blank",rel:"noopener noreferrer"},lo={href:"https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size",target:"_blank",rel:"noopener noreferrer"},co=t("td",{style:{"text-align":"center"}},"349",-1),ro=t("td",{style:{"text-align":"left"}},"两个数组的交集",-1),po=t("td",{style:{"text-align":"center"}},null,-1),io={style:{"text-align":"left"}},uo=t("code",null,"数组",-1),_o=t("code",null,"哈希表",-1),ho=t("code",null,"双指针",-1),ko=t("code",null,"2+",-1),mo={style:{"text-align":"left"}},fo={style:{"text-align":"center"}},go={href:"https://leetcode.cn/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},bo={href:"https://leetcode.com/problems/intersection-of-two-arrays",target:"_blank",rel:"noopener noreferrer"},yo=t("td",{style:{"text-align":"center"}},"350",-1),vo=t("td",{style:{"text-align":"left"}},"两个数组的交集 II",-1),xo=t("td",{style:{"text-align":"center"}},null,-1),wo={style:{"text-align":"left"}},Mo=t("code",null,"数组",-1),Io=t("code",null,"哈希表",-1),Eo=t("code",null,"双指针",-1),jo=t("code",null,"2+",-1),Bo={style:{"text-align":"left"}},To={style:{"text-align":"center"}},No={href:"https://leetcode.cn/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},qo={href:"https://leetcode.com/problems/intersection-of-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},Oo=t("td",{style:{"text-align":"center"}},"287",-1),Go=t("td",{style:{"text-align":"left"}},"寻找重复数",-1),Ho={style:{"text-align":"center"}},So={style:{"text-align":"left"}},Do=t("code",null,"位运算",-1),Lo=t("code",null,"数组",-1),Ro=t("code",null,"双指针",-1),Vo=t("code",null,"1+",-1),zo={style:{"text-align":"left"}},Ao={style:{"text-align":"center"}},Co={href:"https://leetcode.cn/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},Po={href:"https://leetcode.com/problems/find-the-duplicate-number",target:"_blank",rel:"noopener noreferrer"},Ko=t("td",{style:{"text-align":"center"}},"719",-1),Uo=t("td",{style:{"text-align":"left"}},"找出第 K 小的数对距离",-1),Fo=t("td",{style:{"text-align":"center"}},null,-1),Jo={style:{"text-align":"left"}},Qo=t("code",null,"数组",-1),Wo=t("code",null,"双指针",-1),Xo=t("code",null,"二分查找",-1),Yo=t("code",null,"1+",-1),Zo={style:{"text-align":"left"}},$o={style:{"text-align":"center"}},tl={href:"https://leetcode.cn/problems/find-k-th-smallest-pair-distance",target:"_blank",rel:"noopener noreferrer"},el={href:"https://leetcode.com/problems/find-k-th-smallest-pair-distance",target:"_blank",rel:"noopener noreferrer"},nl=t("td",{style:{"text-align":"center"}},"259",-1),sl=t("td",{style:{"text-align":"left"}},"较小的三数之和 🔒",-1),al={style:{"text-align":"center"}},ol={style:{"text-align":"left"}},ll=t("code",null,"数组",-1),cl=t("code",null,"双指针",-1),rl=t("code",null,"二分查找",-1),pl=t("code",null,"1+",-1),il={style:{"text-align":"left"}},dl={style:{"text-align":"center"}},ul={href:"https://leetcode.cn/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},_l={href:"https://leetcode.com/problems/3sum-smaller",target:"_blank",rel:"noopener noreferrer"},hl=t("td",{style:{"text-align":"center"}},"1011",-1),kl=t("td",{style:{"text-align":"left"}},"在 D 天内送达包裹的能力",-1),ml=t("td",{style:{"text-align":"center"}},null,-1),fl={style:{"text-align":"left"}},gl=t("code",null,"数组",-1),bl=t("code",null,"二分查找",-1),yl={style:{"text-align":"left"}},vl={style:{"text-align":"center"}},xl={href:"https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days",target:"_blank",rel:"noopener noreferrer"},wl={href:"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days",target:"_blank",rel:"noopener noreferrer"},Ml=t("td",{style:{"text-align":"center"}},"1482",-1),Il=t("td",{style:{"text-align":"left"}},"制作 m 束花所需的最少天数",-1),El=t("td",{style:{"text-align":"center"}},null,-1),jl={style:{"text-align":"left"}},Bl=t("code",null,"数组",-1),Tl=t("code",null,"二分查找",-1),Nl={style:{"text-align":"left"}},ql={style:{"text-align":"center"}},Ol={href:"https://leetcode.cn/problems/minimum-number-of-days-to-make-m-bouquets",target:"_blank",rel:"noopener noreferrer"},Gl={href:"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets",target:"_blank",rel:"noopener noreferrer"};function Hl(Sl,Dl){const a=r("RouterLink"),l=r("font"),o=r("ExternalLinkIcon");return i(),d("div",null,[h,c(" START TABLE "),c(" Please keep comment here to allow auto update "),c(" DON'T EDIT THIS SECTION, INSTEAD RE-RUN `npm run lc` TO UPDATE "),k,m,c(" prettier-ignore "),t("table",null,[f,t("tbody",null,[t("tr",null,[g,b,t("td",y,[n(a,{to:"/problem/0704.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",v,[n(a,{to:"/tag/array.html"},{default:s(()=>[x]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[w]),_:1})]),t("td",M,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",I,[t("a",E,[e("🀄️"),n(o)]),e(),t("a",j,[e("🔗"),n(o)])])]),t("tr",null,[B,T,t("td",N,[n(a,{to:"/problem/0374.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",q,[n(a,{to:"/tag/binary-search.html"},{default:s(()=>[O]),_:1}),e(),n(a,{to:"/tag/interactive.html"},{default:s(()=>[G]),_:1})]),t("td",H,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",S,[t("a",D,[e("🀄️"),n(o)]),e(),t("a",L,[e("🔗"),n(o)])])]),t("tr",null,[R,V,t("td",z,[n(a,{to:"/problem/0035.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",A,[n(a,{to:"/tag/array.html"},{default:s(()=>[C]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[P]),_:1})]),t("td",K,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",U,[t("a",F,[e("🀄️"),n(o)]),e(),t("a",J,[e("🔗"),n(o)])])]),t("tr",null,[Q,W,t("td",X,[n(a,{to:"/problem/0034.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Y,[n(a,{to:"/tag/array.html"},{default:s(()=>[Z]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[$]),_:1})]),t("td",tt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",et,[t("a",nt,[e("🀄️"),n(o)]),e(),t("a",st,[e("🔗"),n(o)])])]),t("tr",null,[at,ot,t("td",lt,[n(a,{to:"/problem/0167.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",ct,[n(a,{to:"/tag/array.html"},{default:s(()=>[rt]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[pt]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[it]),_:1})]),t("td",dt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",ut,[t("a",_t,[e("🀄️"),n(o)]),e(),t("a",ht,[e("🔗"),n(o)])])]),t("tr",null,[kt,mt,t("td",ft,[n(a,{to:"/problem/0153.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",gt,[n(a,{to:"/tag/array.html"},{default:s(()=>[bt]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[yt]),_:1})]),t("td",vt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",xt,[t("a",wt,[e("🀄️"),n(o)]),e(),t("a",Mt,[e("🔗"),n(o)])])]),t("tr",null,[It,Et,t("td",jt,[n(a,{to:"/problem/0154.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Bt,[n(a,{to:"/tag/array.html"},{default:s(()=>[Tt]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Nt]),_:1})]),t("td",qt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",Ot,[t("a",Gt,[e("🀄️"),n(o)]),e(),t("a",Ht,[e("🔗"),n(o)])])]),t("tr",null,[St,Dt,t("td",Lt,[n(a,{to:"/problem/0033.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Rt,[n(a,{to:"/tag/array.html"},{default:s(()=>[Vt]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[zt]),_:1})]),t("td",At,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Ct,[t("a",Pt,[e("🀄️"),n(o)]),e(),t("a",Kt,[e("🔗"),n(o)])])]),t("tr",null,[Ut,Ft,t("td",Jt,[n(a,{to:"/problem/0081.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Qt,[n(a,{to:"/tag/array.html"},{default:s(()=>[Wt]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Xt]),_:1})]),t("td",Yt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Zt,[t("a",$t,[e("🀄️"),n(o)]),e(),t("a",te,[e("🔗"),n(o)])])]),t("tr",null,[ee,ne,t("td",se,[n(a,{to:"/problem/0278.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",ae,[n(a,{to:"/tag/binary-search.html"},{default:s(()=>[oe]),_:1}),e(),n(a,{to:"/tag/interactive.html"},{default:s(()=>[le]),_:1})]),t("td",ce,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",re,[t("a",pe,[e("🀄️"),n(o)]),e(),t("a",ie,[e("🔗"),n(o)])])]),t("tr",null,[de,ue,t("td",_e,[n(a,{to:"/problem/0162.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",he,[n(a,{to:"/tag/array.html"},{default:s(()=>[ke]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[me]),_:1})]),t("td",fe,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",ge,[t("a",be,[e("🀄️"),n(o)]),e(),t("a",ye,[e("🔗"),n(o)])])]),t("tr",null,[ve,xe,t("td",we,[n(a,{to:"/problem/0852.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Me,[n(a,{to:"/tag/array.html"},{default:s(()=>[Ie]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Ee]),_:1})]),t("td",je,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Be,[t("a",Te,[e("🀄️"),n(o)]),e(),t("a",Ne,[e("🔗"),n(o)])])]),t("tr",null,[qe,Oe,Ge,t("td",He,[n(a,{to:"/tag/array.html"},{default:s(()=>[Se]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[De]),_:1}),e(),n(a,{to:"/tag/interactive.html"},{default:s(()=>[Le]),_:1})]),t("td",Re,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",Ve,[t("a",ze,[e("🀄️"),n(o)]),e(),t("a",Ae,[e("🔗"),n(o)])])]),t("tr",null,[Ce,Pe,Ke,t("td",Ue,[n(a,{to:"/tag/array.html"},{default:s(()=>[Fe]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Je]),_:1})]),t("td",Qe,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",We,[t("a",Xe,[e("🀄️"),n(o)]),e(),t("a",Ye,[e("🔗"),n(o)])])]),t("tr",null,[Ze,$e,t("td",tn,[n(a,{to:"/problem/0004.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",en,[n(a,{to:"/tag/array.html"},{default:s(()=>[nn]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[sn]),_:1}),e(),n(a,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[an]),_:1})]),t("td",on,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",ln,[t("a",cn,[e("🀄️"),n(o)]),e(),t("a",rn,[e("🔗"),n(o)])])]),t("tr",null,[pn,dn,t("td",un,[n(a,{to:"/problem/0074.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",_n,[n(a,{to:"/tag/array.html"},{default:s(()=>[hn]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[kn]),_:1}),e(),n(a,{to:"/tag/matrix.html"},{default:s(()=>[mn]),_:1})]),t("td",fn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",gn,[t("a",bn,[e("🀄️"),n(o)]),e(),t("a",yn,[e("🔗"),n(o)])])]),t("tr",null,[vn,xn,t("td",wn,[n(a,{to:"/problem/0240.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Mn,[n(a,{to:"/tag/array.html"},{default:s(()=>[In]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[En]),_:1}),e(),n(a,{to:"/tag/divide-and-conquer.html"},{default:s(()=>[jn]),_:1}),e(),Bn]),t("td",Tn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Nn,[t("a",qn,[e("🀄️"),n(o)]),e(),t("a",On,[e("🔗"),n(o)])])])])]),Gn,c(" prettier-ignore "),t("table",null,[Hn,t("tbody",null,[t("tr",null,[Sn,Dn,t("td",Ln,[n(a,{to:"/problem/0069.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Rn,[n(a,{to:"/tag/math.html"},{default:s(()=>[Vn]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[zn]),_:1})]),t("td",An,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",Cn,[t("a",Pn,[e("🀄️"),n(o)]),e(),t("a",Kn,[e("🔗"),n(o)])])]),t("tr",null,[Un,Fn,t("td",Jn,[n(a,{to:"/problem/0287.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Qn,[n(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Wn]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[Xn]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Yn]),_:1}),e(),Zn]),t("td",$n,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",ts,[t("a",es,[e("🀄️"),n(o)]),e(),t("a",ns,[e("🔗"),n(o)])])]),t("tr",null,[ss,as,t("td",os,[n(a,{to:"/problem/0050.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",ls,[n(a,{to:"/tag/recursion.html"},{default:s(()=>[cs]),_:1}),e(),n(a,{to:"/tag/math.html"},{default:s(()=>[rs]),_:1})]),t("td",ps,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",is,[t("a",ds,[e("🀄️"),n(o)]),e(),t("a",us,[e("🔗"),n(o)])])]),t("tr",null,[_s,hs,ks,t("td",ms,[n(a,{to:"/tag/math.html"},{default:s(()=>[fs]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[gs]),_:1})]),t("td",bs,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",ys,[t("a",vs,[e("🀄️"),n(o)]),e(),t("a",xs,[e("🔗"),n(o)])])]),t("tr",null,[ws,Ms,Is,t("td",Es,[n(a,{to:"/tag/array.html"},{default:s(()=>[js]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Bs]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[Ts]),_:1})]),t("td",Ns,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",qs,[t("a",Os,[e("🀄️"),n(o)]),e(),t("a",Gs,[e("🔗"),n(o)])])]),t("tr",null,[Hs,Ss,t("td",Ds,[n(a,{to:"/problem/0400.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Ls,[n(a,{to:"/tag/math.html"},{default:s(()=>[Rs]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Vs]),_:1})]),t("td",zs,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",As,[t("a",Cs,[e("🀄️"),n(o)]),e(),t("a",Ps,[e("🔗"),n(o)])])])])]),Ks,c(" prettier-ignore "),t("table",null,[Us,t("tbody",null,[t("tr",null,[Fs,Js,Qs,t("td",Ws,[n(a,{to:"/tag/array.html"},{default:s(()=>[Xs]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Ys]),_:1})]),t("td",Zs,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",$s,[t("a",ta,[e("🀄️"),n(o)]),e(),t("a",ea,[e("🔗"),n(o)])])]),t("tr",null,[na,sa,aa,t("td",oa,[n(a,{to:"/tag/greedy.html"},{default:s(()=>[la]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[ca]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[ra]),_:1}),e(),pa]),t("td",ia,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",da,[t("a",ua,[e("🀄️"),n(o)]),e(),t("a",_a,[e("🔗"),n(o)])])]),t("tr",null,[ha,ka,t("td",ma,[n(a,{to:"/problem/0209.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",fa,[n(a,{to:"/tag/array.html"},{default:s(()=>[ga]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[ba]),_:1}),e(),n(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[ya]),_:1}),e(),va]),t("td",xa,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",wa,[t("a",Ma,[e("🀄️"),n(o)]),e(),t("a",Ia,[e("🔗"),n(o)])])]),t("tr",null,[Ea,ja,Ba,t("td",Ta,[n(a,{to:"/tag/array.html"},{default:s(()=>[Na]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[qa]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Oa]),_:1}),e(),Ga]),t("td",Ha,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Sa,[t("a",Da,[e("🀄️"),n(o)]),e(),t("a",La,[e("🔗"),n(o)])])]),t("tr",null,[Ra,Va,za,t("td",Aa,[n(a,{to:"/tag/tree.html"},{default:s(()=>[Ca]),_:1}),e(),n(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[Pa]),_:1}),e(),n(a,{to:"/tag/binary-search-tree.html"},{default:s(()=>[Ka]),_:1}),e(),Ua]),t("td",Fa,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",Ja,[t("a",Qa,[e("🀄️"),n(o)]),e(),t("a",Wa,[e("🔗"),n(o)])])]),t("tr",null,[Xa,Ya,Za,t("td",$a,[n(a,{to:"/tag/array.html"},{default:s(()=>[to]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[eo]),_:1}),e(),n(a,{to:"/tag/interactive.html"},{default:s(()=>[no]),_:1})]),t("td",so,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",ao,[t("a",oo,[e("🀄️"),n(o)]),e(),t("a",lo,[e("🔗"),n(o)])])]),t("tr",null,[co,ro,po,t("td",io,[n(a,{to:"/tag/array.html"},{default:s(()=>[uo]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[_o]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[ho]),_:1}),e(),ko]),t("td",mo,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",fo,[t("a",go,[e("🀄️"),n(o)]),e(),t("a",bo,[e("🔗"),n(o)])])]),t("tr",null,[yo,vo,xo,t("td",wo,[n(a,{to:"/tag/array.html"},{default:s(()=>[Mo]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[Io]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Eo]),_:1}),e(),jo]),t("td",Bo,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",To,[t("a",No,[e("🀄️"),n(o)]),e(),t("a",qo,[e("🔗"),n(o)])])]),t("tr",null,[Oo,Go,t("td",Ho,[n(a,{to:"/problem/0287.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",So,[n(a,{to:"/tag/bit-manipulation.html"},{default:s(()=>[Do]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[Lo]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Ro]),_:1}),e(),Vo]),t("td",zo,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Ao,[t("a",Co,[e("🀄️"),n(o)]),e(),t("a",Po,[e("🔗"),n(o)])])]),t("tr",null,[Ko,Uo,Fo,t("td",Jo,[n(a,{to:"/tag/array.html"},{default:s(()=>[Qo]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Wo]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Xo]),_:1}),e(),Yo]),t("td",Zo,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",$o,[t("a",tl,[e("🀄️"),n(o)]),e(),t("a",el,[e("🔗"),n(o)])])]),t("tr",null,[nl,sl,t("td",al,[n(a,{to:"/problem/0259.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",ol,[n(a,{to:"/tag/array.html"},{default:s(()=>[ll]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[cl]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[rl]),_:1}),e(),pl]),t("td",il,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",dl,[t("a",ul,[e("🀄️"),n(o)]),e(),t("a",_l,[e("🔗"),n(o)])])]),t("tr",null,[hl,kl,ml,t("td",fl,[n(a,{to:"/tag/array.html"},{default:s(()=>[gl]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[bl]),_:1})]),t("td",yl,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",vl,[t("a",xl,[e("🀄️"),n(o)]),e(),t("a",wl,[e("🔗"),n(o)])])]),t("tr",null,[Ml,Il,El,t("td",jl,[n(a,{to:"/tag/array.html"},{default:s(()=>[Bl]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Tl]),_:1})]),t("td",Nl,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",ql,[t("a",Ol,[e("🀄️"),n(o)]),e(),t("a",Gl,[e("🔗"),n(o)])])])])])])}const Rl=p(_,[["render",Hl],["__file","binary_search.html.vue"]]);export{Rl as default};
