import{_ as u,r as p,o as c,c as i,a as t,b as e,d as o,w as a,f as d,e as l}from"./app-ZVJfwurD.js";const h={},q={id:"_2675-将对象数组转换为矩阵-🔒",tabindex:"-1"},b=t("a",{class:"header-anchor",href:"#_2675-将对象数组转换为矩阵-🔒","aria-hidden":"true"},"#",-1),_={href:"https://2xiao.github.io/leetcode-js/problem/2675.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://leetcode.cn/problems/array-of-objects-to-matrix",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"力扣",-1),k={href:"https://leetcode.com/problems/array-of-objects-to-matrix",target:"_blank",rel:"noopener noreferrer"},g=t("code",null,"LeetCode",-1),y=l('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Write a function that converts an array of objects <code>arr</code> into a matrix <code>m</code>.</p><p><code>arr</code> is an array of objects or arrays. Each item in the array can be deeply nested with child arrays and child objects. It can also contain numbers, strings, booleans, and null values.</p><p>The first row <code>m</code> should be the column names. If there is no nesting, the column names are the unique keys within the objects. If there is nesting, the column names are the respective paths in the object separated by <code>&quot;.&quot;</code>.</p><p>Each of the remaining rows corresponds to an object in <code>arr</code>. Each value in the matrix corresponds to a value in an object. If a given object doesn&#39;t contain a value for a given column, the cell should contain an empty string <code>&quot;&quot;</code>.</p><p>The columns in the matrix should be in <strong>lexographically ascending</strong> order.</p><p><strong>Example 1:</strong></p>',7),x=t("blockquote",null,[t("p",null,"Input:"),t("p",null,"arr = ["),t("p",null,'{"b": 1, "a": 2},'),t("p",{"b:3,a:4":""}),t("p",null,"]"),t("p",null,"Output:"),t("p",null,"["),t("p",null,'["a", "b"],'),t("p",null,"[2, 1],"),t("p",null,"[4, 3]"),t("p",null,"]"),t("p",null,"Explanation:"),t("p",null,'There are two unique column names in the two objects: "a" and "b".'),t("p",null,'"a" corresponds with [2, 4].'),t("p",null,'"b" coresponds with [1, 3].')],-1),v=l(`<p><strong>Example 2:</strong></p><blockquote><p>Input:</p><p>arr = [</p><p>{&quot;a&quot;: 1, &quot;b&quot;: 2},</p><p>{&quot;c&quot;: 3, &quot;d&quot;: 4},</p><p>{}</p><p>]</p><p>Output:</p><p>[</p><p>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;],</p><p>[1, 2, &quot;&quot;, &quot;&quot;],</p><p>[&quot;&quot;, &quot;&quot;, 3, 4],</p><p>[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]</p><p>]</p><p>Explanation:</p><p>There are 4 unique column names: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;.</p><p>The first object has values associated with &quot;a&quot; and &quot;b&quot;.</p><p>The second object has values associated with &quot;c&quot; and &quot;d&quot;.</p><p>The third object has no keys, so it is just a row of empty strings.</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input:</p><p>arr = [</p><p>{&quot;a&quot;: {&quot;b&quot;: 1, &quot;c&quot;: 2}},</p><p>{&quot;a&quot;: {&quot;b&quot;: 3, &quot;d&quot;: 4}}</p><p>]</p><p>Output:</p><p>[</p><p>[&quot;a.b&quot;, &quot;a.c&quot;, &quot;a.d&quot;],</p><p>[1, 2, &quot;&quot;],</p><p>[3, &quot;&quot;, 4]</p><p>]</p><p>Explanation:</p><p>In this example, the objects are nested. The keys represent the full path to each value separated by periods.</p><p>There are three paths: &quot;a.b&quot;, &quot;a.c&quot;, &quot;a.d&quot;.</p></blockquote><p><strong>Example 4:</strong></p><blockquote><p>Input:</p><p>arr = [</p><p>[{&quot;a&quot;: null}],</p><p>[{&quot;b&quot;: true}],</p><p>[{&quot;c&quot;: &quot;x&quot;}]</p><p>]</p><p>Output:</p><p>[</p><p>[&quot;0.a&quot;, &quot;0.b&quot;, &quot;0.c&quot;],</p><p>[null, &quot;&quot;, &quot;&quot;],</p><p>[&quot;&quot;, true, &quot;&quot;],</p><p>[&quot;&quot;, &quot;&quot;, &quot;x&quot;]</p><p>]</p><p>Explanation:</p><p>Arrays are also considered objects with their keys being their indices.</p><p>Each array has one element so the keys are &quot;0.a&quot;, &quot;0.b&quot;, and &quot;0.c&quot;.</p></blockquote><p><strong>Example 5:</strong></p><blockquote><p>Input:</p><p>arr = [</p><p>{},</p><p>{},</p><p>{},</p><p>]</p><p>Output:</p><p>[</p><p>[],</p><p>[],</p><p>[],</p><p>[]</p><p>]</p><p>Explanation:</p><p>There are no keys so every row is an empty array.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>arr</code> is a valid JSON array</li><li><code>1 &lt;= arr.length &lt;= 1000</code></li><li><code>unique keys &lt;= 1000</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>编写一个函数，将对象数组 <code>arr</code> 转换为矩阵 <code>m</code> 。</p><p><code>arr</code> 是一个由对象组成的数组或一个数组。数组中的每个项都可以包含深层嵌套的子数组和子对象。它还可以包含数字、字符串、布尔值和空值。</p><p>矩阵 <code>m</code> 的第一行应该是列名。如果没有嵌套，列名是对象中的唯一键。如果存在嵌套，列名是对象中相应路径，以点号 <code>&quot;.&quot;</code> 分隔。</p><p>剩余的每一行对应 <code>arr</code> 中的一个对象。矩阵中的每个值对应对象中的一个值。如果给定对象在给定列中没有值，则应该包含空字符串 <code>&quot;&quot;</code> 。</p><p>矩阵中的列应按 <strong>字典序升序</strong> 排列。</p><p><strong>提示：</strong></p><ul><li><code>arr</code> 是一个有效的 JSON 数组</li><li><code>1 &lt;= arr.length &lt;= 1000</code></li><li><code>unique keys &lt;= 1000</code></li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>：<code>O()</code>，</li><li><strong>空间复杂度</strong>：<code>O()</code>，</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">jsonToMatrix</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		keySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,24),j=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),w=t("td",{style:{"text-align":"center"}},"2628",-1),E={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/json-deep-equal",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},T=t("td",{style:{"text-align":"left"}},null,-1),N={style:{"text-align":"left"}},S=t("td",{style:{"text-align":"center"}},"2633",-1),C={style:{"text-align":"left"}},L={href:"https://leetcode.com/problems/convert-object-to-json-string",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"center"}},J=t("td",{style:{"text-align":"left"}},null,-1),B={style:{"text-align":"left"}};function M(R,A){const n=p("ExternalLinkIcon"),s=p("font"),r=p("RouterLink");return c(),i("div",null,[t("h1",q,[b,e(),t("a",_,[e("2675. 将对象数组转换为矩阵 🔒"),o(n)])]),t("p",null,[e("🔴 "),o(s,{color:"#ff334b"},{default:a(()=>[e("Hard")]),_:1}),e("  🔗 "),t("a",m,[f,o(n)]),e(),t("a",k,[g,o(n)])]),y,x,v,d(" prettier-ignore "),t("table",null,[j,t("tbody",null,[t("tr",null,[w,t("td",E,[t("a",I,[e("完全相等的 JSON 字符串 🔒"),o(n)])]),t("td",O,[o(r,{to:"/problem/2628.html"},{default:a(()=>[e("[✓]")]),_:1})]),T,t("td",N,[o(s,{color:"#ffb800"},{default:a(()=>[e("Medium")]),_:1})])]),t("tr",null,[S,t("td",C,[t("a",L,[e("将对象转换为 JSON 字符串 🔒"),o(n)])]),t("td",V,[o(r,{to:"/problem/2633.html"},{default:a(()=>[e("[✓]")]),_:1})]),J,t("td",B,[o(s,{color:"#ffb800"},{default:a(()=>[e("Medium")]),_:1})])])])])])}const W=u(h,[["render",M],["__file","2675.html.vue"]]);export{W as default};
