import{_ as i,r as p,o as r,c as u,a as n,b as t,d as s,w as a,f as d,e as c}from"./app-OX-nYmHS.js";const k={},h=n("h1",{id:"_345-反转字符串中的元音字母",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_345-反转字符串中的元音字母","aria-hidden":"true"},"#"),t(" 345. 反转字符串中的元音字母")],-1),_=n("code",null,"双指针",-1),m=n("code",null,"字符串",-1),f={href:"https://leetcode.cn/problems/reverse-vowels-of-a-string",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"力扣",-1),v={href:"https://leetcode.com/problems/reverse-vowels-of-a-string",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"LeetCode",-1),y=c('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p><p>The vowels are <code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, and <code>&#39;u&#39;</code>, and they can appear in both lower and upper cases, more than once.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;hello&quot;</p><p>Output: &quot;holle&quot;</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot;leetcode&quot;</p><p>Output: &quot;leotcede&quot;</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 3 * 105</code></li><li><code>s</code> consist of <strong>printable ASCII</strong> characters.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>题目要求我们反转字符串中的元音字母。需要注意字母大小写。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',12),x=c(`<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reverseVowels</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVowel</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVowel</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">let</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
			left<span class="token operator">++</span><span class="token punctuation">;</span>
			right<span class="token operator">--</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">isVowel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token string">&#39;e&#39;</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token string">&#39;i&#39;</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token string">&#39;o&#39;</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token string">&#39;u&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,3),w=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),q=n("td",{style:{"text-align":"center"}},"344",-1),E={style:{"text-align":"left"}},V={href:"https://leetcode.com/problems/reverse-string",target:"_blank",rel:"noopener noreferrer"},C={style:{"text-align":"center"}},I={style:{"text-align":"left"}},L=n("code",null,"双指针",-1),N=n("code",null,"字符串",-1),j={style:{"text-align":"left"}},B=n("td",{style:{"text-align":"center"}},"1119",-1),O={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/remove-vowels-from-a-string",target:"_blank",rel:"noopener noreferrer"},S=n("td",{style:{"text-align":"center"}},null,-1),T={style:{"text-align":"left"}},A=n("code",null,"字符串",-1),G={style:{"text-align":"left"}},M=n("td",{style:{"text-align":"center"}},"2785",-1),z={style:{"text-align":"left"}},D={href:"https://leetcode.com/problems/sort-vowels-in-a-string",target:"_blank",rel:"noopener noreferrer"},F=n("td",{style:{"text-align":"center"}},null,-1),H={style:{"text-align":"left"}},J=n("code",null,"字符串",-1),K=n("code",null,"排序",-1),P={style:{"text-align":"left"}},Q=n("td",{style:{"text-align":"center"}},"2810",-1),U={style:{"text-align":"left"}},W={href:"https://leetcode.com/problems/faulty-keyboard",target:"_blank",rel:"noopener noreferrer"},X=n("td",{style:{"text-align":"center"}},null,-1),Y={style:{"text-align":"left"}},Z=n("code",null,"字符串",-1),$=n("code",null,"模拟",-1),nn={style:{"text-align":"left"}};function sn(tn,an){const l=p("font"),e=p("RouterLink"),o=p("ExternalLinkIcon");return r(),u("div",null,[h,n("p",null,[t("🟢 "),s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1}),t("  🔖  "),s(e,{to:"/tag/two-pointers.html"},{default:a(()=>[_]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[m]),_:1}),t("  🔗 "),n("a",f,[g,s(o)]),t(),n("a",v,[b,s(o)])]),y,n("p",null,[t("这一题的解题思路是用 2 个指针，指针对撞的思路，来不断交换首尾元素，即可。这一题和 "),s(e,{to:"/problem/0344.html"},{default:a(()=>[t("第 344 题")]),_:1}),t(" 思路一样。")]),x,d(" prettier-ignore "),n("table",null,[w,n("tbody",null,[n("tr",null,[q,n("td",E,[n("a",V,[t("反转字符串"),s(o)])]),n("td",C,[s(e,{to:"/problem/0344.html"},{default:a(()=>[t("[✓]")]),_:1})]),n("td",I,[s(e,{to:"/tag/two-pointers.html"},{default:a(()=>[L]),_:1}),t(),s(e,{to:"/tag/string.html"},{default:a(()=>[N]),_:1})]),n("td",j,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[B,n("td",O,[n("a",R,[t("删去字符串中的元音 🔒"),s(o)])]),S,n("td",T,[s(e,{to:"/tag/string.html"},{default:a(()=>[A]),_:1})]),n("td",G,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])]),n("tr",null,[M,n("td",z,[n("a",D,[t("将字符串中的元音字母排序"),s(o)])]),F,n("td",H,[s(e,{to:"/tag/string.html"},{default:a(()=>[J]),_:1}),t(),s(e,{to:"/tag/sorting.html"},{default:a(()=>[K]),_:1})]),n("td",P,[s(l,{color:"#ffb800"},{default:a(()=>[t("Medium")]),_:1})])]),n("tr",null,[Q,n("td",U,[n("a",W,[t("故障键盘"),s(o)])]),X,n("td",Y,[s(e,{to:"/tag/string.html"},{default:a(()=>[Z]),_:1}),t(),s(e,{to:"/tag/simulation.html"},{default:a(()=>[$]),_:1})]),n("td",nn,[s(l,{color:"#15bd66"},{default:a(()=>[t("Easy")]),_:1})])])])])])}const on=i(k,[["render",sn],["__file","0345.html.vue"]]);export{on as default};
