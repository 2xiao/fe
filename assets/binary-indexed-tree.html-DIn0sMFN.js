import{_ as i,r as _,o as a,c,a as t,b as e,w as o,d as l,f as r}from"./app-ynO5B_DP.js";const u={},h=t("h1",{id:"树状数组",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#树状数组","aria-hidden":"true"},"#"),l(" 树状数组")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),x=t("code",null,"矩阵",-1),b=t("code",null,"链表",-1),p=t("code",null,"双向链表",-1),k=t("code",null,"栈",-1),H=t("code",null,"单调栈",-1),q=t("code",null,"队列",-1),I=t("code",null,"单调队列",-1),w=t("code",null,"堆（优先队列）",-1),M=t("code",null,"哈希表",-1),v=t("code",null,"字符串",-1),L=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),B=t("code",null,"二叉树",-1),C=t("code",null,"二叉搜索树",-1),N=t("code",null,"最小生成树",-1),V=t("code",null,"图",-1),j=t("code",null,"有序集合",-1),E=t("code",null,"拓扑排序",-1),K=t("code",null,"最短路",-1),R=t("code",null,"强连通分量",-1),T=t("code",null,"欧拉回路",-1),A=t("code",null,"双连通分量",-1),O=t("code",null,"并查集",-1),P=t("code",null,"字典树",-1),U=t("code",null,"线段树",-1),D=t("span",{class:"blue"},"树状数组",-1),F=t("code",null,"后缀数组",-1),G=t("p",null,[t("strong",null,"算法")],-1),J=t("code",null,"枚举",-1),Q=t("code",null,"递归",-1),S=t("code",null,"分治",-1),W=t("code",null,"回溯",-1),X=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),lt=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),it=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),rt=t("code",null,"计数",-1),ut=t("code",null,"滑动窗口",-1),ht=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),xt=t("code",null,"数学",-1),bt=t("code",null,"数论",-1),pt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),Ht=t("code",null,"模拟",-1),qt=t("code",null,"组合数学",-1),It=t("code",null,"随机化",-1),wt=t("code",null,"概率与统计",-1),Mt=t("code",null,"水塘抽样",-1),vt=t("code",null,"拒绝采样",-1),Lt=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Bt=t("code",null,"数据流",-1),Ct=t("code",null,"脑筋急转弯",-1),Nt=t("code",null,"交互",-1),Vt=t("code",null,"迭代器",-1),jt=t("code",null,"多线程",-1),Et=t("hr",null,null,-1),Kt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Rt=t("td",{style:{"text-align":"center"}},"218",-1),Tt={style:{"text-align":"left"}},At={href:"https://leetcode.com/problems/the-skyline-problem",target:"_blank",rel:"noopener noreferrer"},Ot=t("td",{style:{"text-align":"center"}},null,-1),Pt={style:{"text-align":"left"}},Ut=t("code",null,"树状数组",-1),Dt=t("code",null,"线段树",-1),Ft=t("code",null,"数组",-1),Gt=t("code",null,"4+",-1),Jt={style:{"text-align":"left"}},Qt=t("td",{style:{"text-align":"center"}},"307",-1),St={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/range-sum-query-mutable",target:"_blank",rel:"noopener noreferrer"},Xt={style:{"text-align":"center"}},Yt={href:"/problem/0307",target:"_blank",rel:"noopener noreferrer"},Zt={style:{"text-align":"left"}},$t=t("code",null,"设计",-1),te=t("code",null,"树状数组",-1),ee=t("code",null,"线段树",-1),le=t("code",null,"1+",-1),oe={style:{"text-align":"left"}},ne=t("td",{style:{"text-align":"center"}},"308",-1),se={style:{"text-align":"left"}},de={href:"https://leetcode.com/problems/range-sum-query-2d-mutable",target:"_blank",rel:"noopener noreferrer"},_e=t("td",{style:{"text-align":"center"}},null,-1),ie={style:{"text-align":"left"}},ae=t("code",null,"设计",-1),ce=t("code",null,"树状数组",-1),re=t("code",null,"线段树",-1),ue=t("code",null,"2+",-1),he={style:{"text-align":"left"}},fe=t("td",{style:{"text-align":"center"}},"315",-1),ge={style:{"text-align":"left"}},me={href:"https://leetcode.com/problems/count-of-smaller-numbers-after-self",target:"_blank",rel:"noopener noreferrer"},ye=t("td",{style:{"text-align":"center"}},null,-1),xe={style:{"text-align":"left"}},be=t("code",null,"树状数组",-1),pe=t("code",null,"线段树",-1),ke=t("code",null,"数组",-1),He=t("code",null,"4+",-1),qe={style:{"text-align":"left"}},Ie=t("td",{style:{"text-align":"center"}},"327",-1),we={style:{"text-align":"left"}},Me={href:"https://leetcode.com/problems/count-of-range-sum",target:"_blank",rel:"noopener noreferrer"},ve=t("td",{style:{"text-align":"center"}},null,-1),Le={style:{"text-align":"left"}},ze=t("code",null,"树状数组",-1),Be=t("code",null,"线段树",-1),Ce=t("code",null,"数组",-1),Ne=t("code",null,"4+",-1),Ve={style:{"text-align":"left"}},je=t("td",{style:{"text-align":"center"}},"406",-1),Ee={style:{"text-align":"left"}},Ke={href:"https://leetcode.com/problems/queue-reconstruction-by-height",target:"_blank",rel:"noopener noreferrer"},Re=t("td",{style:{"text-align":"center"}},null,-1),Te={style:{"text-align":"left"}},Ae=t("code",null,"树状数组",-1),Oe=t("code",null,"线段树",-1),Pe=t("code",null,"数组",-1),Ue=t("code",null,"1+",-1),De={style:{"text-align":"left"}},Fe=t("td",{style:{"text-align":"center"}},"493",-1),Ge={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/reverse-pairs",target:"_blank",rel:"noopener noreferrer"},Qe=t("td",{style:{"text-align":"center"}},null,-1),Se={style:{"text-align":"left"}},We=t("code",null,"树状数组",-1),Xe=t("code",null,"线段树",-1),Ye=t("code",null,"数组",-1),Ze=t("code",null,"4+",-1),$e={style:{"text-align":"left"}},tl=t("td",{style:{"text-align":"center"}},"673",-1),el={style:{"text-align":"left"}},ll={href:"https://leetcode.com/problems/number-of-longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"},ol=t("td",{style:{"text-align":"center"}},null,-1),nl={style:{"text-align":"left"}},sl=t("code",null,"树状数组",-1),dl=t("code",null,"线段树",-1),_l=t("code",null,"数组",-1),il=t("code",null,"1+",-1),al={style:{"text-align":"left"}},cl=t("td",{style:{"text-align":"center"}},"683",-1),rl={style:{"text-align":"left"}},ul={href:"https://leetcode.com/problems/k-empty-slots",target:"_blank",rel:"noopener noreferrer"},hl=t("td",{style:{"text-align":"center"}},null,-1),fl={style:{"text-align":"left"}},gl=t("code",null,"树状数组",-1),ml=t("code",null,"线段树",-1),yl=t("code",null,"队列",-1),xl=t("code",null,"5+",-1),bl={style:{"text-align":"left"}},pl=t("td",{style:{"text-align":"center"}},"1157",-1),kl={style:{"text-align":"left"}},Hl={href:"https://leetcode.com/problems/online-majority-element-in-subarray",target:"_blank",rel:"noopener noreferrer"},ql=t("td",{style:{"text-align":"center"}},null,-1),Il={style:{"text-align":"left"}},wl=t("code",null,"设计",-1),Ml=t("code",null,"树状数组",-1),vl=t("code",null,"线段树",-1),Ll=t("code",null,"2+",-1),zl={style:{"text-align":"left"}},Bl=t("td",{style:{"text-align":"center"}},"1395",-1),Cl={style:{"text-align":"left"}},Nl={href:"https://leetcode.com/problems/count-number-of-teams",target:"_blank",rel:"noopener noreferrer"},Vl=t("td",{style:{"text-align":"center"}},null,-1),jl={style:{"text-align":"left"}},El=t("code",null,"树状数组",-1),Kl=t("code",null,"线段树",-1),Rl=t("code",null,"数组",-1),Tl=t("code",null,"1+",-1),Al={style:{"text-align":"left"}},Ol=t("td",{style:{"text-align":"center"}},"1409",-1),Pl={style:{"text-align":"left"}},Ul={href:"https://leetcode.com/problems/queries-on-a-permutation-with-key",target:"_blank",rel:"noopener noreferrer"},Dl=t("td",{style:{"text-align":"center"}},null,-1),Fl={style:{"text-align":"left"}},Gl=t("code",null,"树状数组",-1),Jl=t("code",null,"数组",-1),Ql=t("code",null,"模拟",-1),Sl={style:{"text-align":"left"}},Wl=t("td",{style:{"text-align":"center"}},"1505",-1),Xl={style:{"text-align":"left"}},Yl={href:"https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",target:"_blank",rel:"noopener noreferrer"},Zl=t("td",{style:{"text-align":"center"}},null,-1),$l={style:{"text-align":"left"}},to=t("code",null,"贪心",-1),eo=t("code",null,"树状数组",-1),lo=t("code",null,"线段树",-1),oo=t("code",null,"1+",-1),no={style:{"text-align":"left"}},so=t("td",{style:{"text-align":"center"}},"1649",-1),_o={style:{"text-align":"left"}},io={href:"https://leetcode.com/problems/create-sorted-array-through-instructions",target:"_blank",rel:"noopener noreferrer"},ao=t("td",{style:{"text-align":"center"}},null,-1),co={style:{"text-align":"left"}},ro=t("code",null,"树状数组",-1),uo=t("code",null,"线段树",-1),ho=t("code",null,"数组",-1),fo=t("code",null,"4+",-1),go={style:{"text-align":"left"}},mo=t("td",{style:{"text-align":"center"}},"1756",-1),yo={style:{"text-align":"left"}},xo={href:"https://leetcode.com/problems/design-most-recently-used-queue",target:"_blank",rel:"noopener noreferrer"},bo=t("td",{style:{"text-align":"center"}},null,-1),po={style:{"text-align":"left"}},ko=t("code",null,"栈",-1),Ho=t("code",null,"设计",-1),qo=t("code",null,"树状数组",-1),Io=t("code",null,"3+",-1),wo={style:{"text-align":"left"}},Mo=t("td",{style:{"text-align":"center"}},"1964",-1),vo={style:{"text-align":"left"}},Lo={href:"https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position",target:"_blank",rel:"noopener noreferrer"},zo=t("td",{style:{"text-align":"center"}},null,-1),Bo={style:{"text-align":"left"}},Co=t("code",null,"树状数组",-1),No=t("code",null,"数组",-1),Vo=t("code",null,"二分查找",-1),jo={style:{"text-align":"left"}},Eo=t("td",{style:{"text-align":"center"}},"2031",-1),Ko={style:{"text-align":"left"}},Ro={href:"https://leetcode.com/problems/count-subarrays-with-more-ones-than-zeros",target:"_blank",rel:"noopener noreferrer"},To=t("td",{style:{"text-align":"center"}},null,-1),Ao={style:{"text-align":"left"}},Oo=t("code",null,"树状数组",-1),Po=t("code",null,"线段树",-1),Uo=t("code",null,"数组",-1),Do=t("code",null,"4+",-1),Fo={style:{"text-align":"left"}},Go=t("td",{style:{"text-align":"center"}},"2179",-1),Jo={style:{"text-align":"left"}},Qo={href:"https://leetcode.com/problems/count-good-triplets-in-an-array",target:"_blank",rel:"noopener noreferrer"},So=t("td",{style:{"text-align":"center"}},null,-1),Wo={style:{"text-align":"left"}},Xo=t("code",null,"树状数组",-1),Yo=t("code",null,"线段树",-1),Zo=t("code",null,"数组",-1),$o=t("code",null,"4+",-1),tn={style:{"text-align":"left"}},en=t("td",{style:{"text-align":"center"}},"2193",-1),ln={style:{"text-align":"left"}},on={href:"https://leetcode.com/problems/minimum-number-of-moves-to-make-palindrome",target:"_blank",rel:"noopener noreferrer"},nn=t("td",{style:{"text-align":"center"}},null,-1),sn={style:{"text-align":"left"}},dn=t("code",null,"贪心",-1),_n=t("code",null,"树状数组",-1),an=t("code",null,"双指针",-1),cn=t("code",null,"1+",-1),rn={style:{"text-align":"left"}},un=t("td",{style:{"text-align":"center"}},"2250",-1),hn={style:{"text-align":"left"}},fn={href:"https://leetcode.com/problems/count-number-of-rectangles-containing-each-point",target:"_blank",rel:"noopener noreferrer"},gn=t("td",{style:{"text-align":"center"}},null,-1),mn={style:{"text-align":"left"}},yn=t("code",null,"树状数组",-1),xn=t("code",null,"数组",-1),bn=t("code",null,"二分查找",-1),pn=t("code",null,"1+",-1),kn={style:{"text-align":"left"}},Hn=t("td",{style:{"text-align":"center"}},"2286",-1),qn={style:{"text-align":"left"}},In={href:"https://leetcode.com/problems/booking-concert-tickets-in-groups",target:"_blank",rel:"noopener noreferrer"},wn=t("td",{style:{"text-align":"center"}},null,-1),Mn={style:{"text-align":"left"}},vn=t("code",null,"设计",-1),Ln=t("code",null,"树状数组",-1),zn=t("code",null,"线段树",-1),Bn=t("code",null,"1+",-1),Cn={style:{"text-align":"left"}},Nn=t("td",{style:{"text-align":"center"}},"2407",-1),Vn={style:{"text-align":"left"}},jn={href:"https://leetcode.com/problems/longest-increasing-subsequence-ii",target:"_blank",rel:"noopener noreferrer"},En=t("td",{style:{"text-align":"center"}},null,-1),Kn={style:{"text-align":"left"}},Rn=t("code",null,"树状数组",-1),Tn=t("code",null,"线段树",-1),An=t("code",null,"队列",-1),On=t("code",null,"4+",-1),Pn={style:{"text-align":"left"}},Un=t("td",{style:{"text-align":"center"}},"2424",-1),Dn={style:{"text-align":"left"}},Fn={href:"https://leetcode.com/problems/longest-uploaded-prefix",target:"_blank",rel:"noopener noreferrer"},Gn=t("td",{style:{"text-align":"center"}},null,-1),Jn={style:{"text-align":"left"}},Qn=t("code",null,"并查集",-1),Sn=t("code",null,"设计",-1),Wn=t("code",null,"树状数组",-1),Xn=t("code",null,"4+",-1),Yn={style:{"text-align":"left"}},Zn=t("td",{style:{"text-align":"center"}},"2426",-1),$n={style:{"text-align":"left"}},ts={href:"https://leetcode.com/problems/number-of-pairs-satisfying-inequality",target:"_blank",rel:"noopener noreferrer"},es=t("td",{style:{"text-align":"center"}},null,-1),ls={style:{"text-align":"left"}},os=t("code",null,"树状数组",-1),ns=t("code",null,"线段树",-1),ss=t("code",null,"数组",-1),ds=t("code",null,"4+",-1),_s={style:{"text-align":"left"}},is=t("td",{style:{"text-align":"center"}},"2519",-1),as={style:{"text-align":"left"}},cs={href:"https://leetcode.com/problems/count-the-number-of-k-big-indices",target:"_blank",rel:"noopener noreferrer"},rs=t("td",{style:{"text-align":"center"}},null,-1),us={style:{"text-align":"left"}},hs=t("code",null,"树状数组",-1),fs=t("code",null,"线段树",-1),gs=t("code",null,"数组",-1),ms=t("code",null,"4+",-1),ys={style:{"text-align":"left"}},xs=t("td",{style:{"text-align":"center"}},"2552",-1),bs={style:{"text-align":"left"}},ps={href:"https://leetcode.com/problems/count-increasing-quadruplets",target:"_blank",rel:"noopener noreferrer"},ks=t("td",{style:{"text-align":"center"}},null,-1),Hs={style:{"text-align":"left"}},qs=t("code",null,"树状数组",-1),Is=t("code",null,"数组",-1),ws=t("code",null,"动态规划",-1),Ms=t("code",null,"2+",-1),vs={style:{"text-align":"left"}},Ls=t("td",{style:{"text-align":"center"}},"2659",-1),zs={style:{"text-align":"left"}},Bs={href:"https://leetcode.com/problems/make-array-empty",target:"_blank",rel:"noopener noreferrer"},Cs=t("td",{style:{"text-align":"center"}},null,-1),Ns={style:{"text-align":"left"}},Vs=t("code",null,"贪心",-1),js=t("code",null,"树状数组",-1),Es=t("code",null,"线段树",-1),Ks=t("code",null,"4+",-1),Rs={style:{"text-align":"left"}},Ts=t("td",{style:{"text-align":"center"}},"2736",-1),As={style:{"text-align":"left"}},Os={href:"https://leetcode.com/problems/maximum-sum-queries",target:"_blank",rel:"noopener noreferrer"},Ps=t("td",{style:{"text-align":"center"}},null,-1),Us={style:{"text-align":"left"}},Ds=t("code",null,"栈",-1),Fs=t("code",null,"树状数组",-1),Gs=t("code",null,"线段树",-1),Js=t("code",null,"4+",-1),Qs={style:{"text-align":"left"}},Ss=t("td",{style:{"text-align":"center"}},"2907",-1),Ws={style:{"text-align":"left"}},Xs={href:"https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-i",target:"_blank",rel:"noopener noreferrer"},Ys=t("td",{style:{"text-align":"center"}},null,-1),Zs={style:{"text-align":"left"}},$s=t("code",null,"树状数组",-1),td=t("code",null,"线段树",-1),ed=t("code",null,"数组",-1),ld={style:{"text-align":"left"}},od=t("td",{style:{"text-align":"center"}},"2916",-1),nd={style:{"text-align":"left"}},sd={href:"https://leetcode.com/problems/subarrays-distinct-element-sum-of-squares-ii",target:"_blank",rel:"noopener noreferrer"},dd=t("td",{style:{"text-align":"center"}},null,-1),_d={style:{"text-align":"left"}},id=t("code",null,"树状数组",-1),ad=t("code",null,"线段树",-1),cd=t("code",null,"数组",-1),rd=t("code",null,"1+",-1),ud={style:{"text-align":"left"}},hd=t("td",{style:{"text-align":"center"}},"2921",-1),fd={style:{"text-align":"left"}},gd={href:"https://leetcode.com/problems/maximum-profitable-triplets-with-increasing-prices-ii",target:"_blank",rel:"noopener noreferrer"},md=t("td",{style:{"text-align":"center"}},null,-1),yd={style:{"text-align":"left"}},xd=t("code",null,"树状数组",-1),bd=t("code",null,"线段树",-1),pd=t("code",null,"数组",-1),kd={style:{"text-align":"left"}},Hd=t("td",{style:{"text-align":"center"}},"2926",-1),qd={style:{"text-align":"left"}},Id={href:"https://leetcode.com/problems/maximum-balanced-subsequence-sum",target:"_blank",rel:"noopener noreferrer"},wd=t("td",{style:{"text-align":"center"}},null,-1),Md={style:{"text-align":"left"}},vd=t("code",null,"树状数组",-1),Ld=t("code",null,"线段树",-1),zd=t("code",null,"数组",-1),Bd=t("code",null,"2+",-1),Cd={style:{"text-align":"left"}},Nd=t("td",{style:{"text-align":"center"}},"2940",-1),Vd={style:{"text-align":"left"}},jd={href:"https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet",target:"_blank",rel:"noopener noreferrer"},Ed=t("td",{style:{"text-align":"center"}},null,-1),Kd={style:{"text-align":"left"}},Rd=t("code",null,"栈",-1),Td=t("code",null,"树状数组",-1),Ad=t("code",null,"线段树",-1),Od=t("code",null,"4+",-1),Pd={style:{"text-align":"left"}},Ud=t("td",{style:{"text-align":"center"}},"3009",-1),Dd={style:{"text-align":"left"}},Fd={href:"https://leetcode.com/problems/maximum-number-of-intersections-on-the-chart",target:"_blank",rel:"noopener noreferrer"},Gd=t("td",{style:{"text-align":"center"}},null,-1),Jd={style:{"text-align":"left"}},Qd=t("code",null,"树状数组",-1),Sd=t("code",null,"几何",-1),Wd=t("code",null,"数组",-1),Xd=t("code",null,"1+",-1),Yd={style:{"text-align":"left"}},Zd=t("td",{style:{"text-align":"center"}},"3072",-1),$d={style:{"text-align":"left"}},t_={href:"https://leetcode.com/problems/distribute-elements-into-two-arrays-ii",target:"_blank",rel:"noopener noreferrer"},e_=t("td",{style:{"text-align":"center"}},null,-1),l_={style:{"text-align":"left"}},o_=t("code",null,"树状数组",-1),n_=t("code",null,"线段树",-1),s_=t("code",null,"数组",-1),d_=t("code",null,"1+",-1),__={style:{"text-align":"left"}},i_=t("td",{style:{"text-align":"center"}},"3109",-1),a_={style:{"text-align":"left"}},c_={href:"https://leetcode.com/problems/find-the-index-of-permutation",target:"_blank",rel:"noopener noreferrer"},r_=t("td",{style:{"text-align":"center"}},null,-1),u_={style:{"text-align":"left"}},h_=t("code",null,"树状数组",-1),f_=t("code",null,"线段树",-1),g_=t("code",null,"数组",-1),m_=t("code",null,"4+",-1),y_={style:{"text-align":"left"}},x_=t("td",{style:{"text-align":"center"}},"3161",-1),b_={style:{"text-align":"left"}},p_={href:"https://leetcode.com/problems/block-placement-queries",target:"_blank",rel:"noopener noreferrer"},k_=t("td",{style:{"text-align":"center"}},null,-1),H_={style:{"text-align":"left"}},q_=t("code",null,"树状数组",-1),I_=t("code",null,"线段树",-1),w_=t("code",null,"数组",-1),M_=t("code",null,"1+",-1),v_={style:{"text-align":"left"}},L_=t("td",{style:{"text-align":"center"}},"3187",-1),z_={style:{"text-align":"left"}},B_={href:"https://leetcode.com/problems/peaks-in-array",target:"_blank",rel:"noopener noreferrer"},C_=t("td",{style:{"text-align":"center"}},null,-1),N_={style:{"text-align":"left"}},V_=t("code",null,"树状数组",-1),j_=t("code",null,"线段树",-1),E_=t("code",null,"数组",-1),K_={style:{"text-align":"left"}},R_=t("td",{style:{"text-align":"center"}},"3245",-1),T_={style:{"text-align":"left"}},A_={href:"https://leetcode.com/problems/alternating-groups-iii",target:"_blank",rel:"noopener noreferrer"},O_=t("td",{style:{"text-align":"center"}},null,-1),P_={style:{"text-align":"left"}},U_=t("code",null,"树状数组",-1),D_=t("code",null,"数组",-1),F_={style:{"text-align":"left"}},G_=t("td",{style:{"text-align":"center"}},"LCP 05",-1),J_={style:{"text-align":"left"}},Q_={href:"https://leetcode.cn/problems/coin-bonus",target:"_blank",rel:"noopener noreferrer"},S_=t("td",{style:{"text-align":"center"}},null,-1),W_={style:{"text-align":"left"}},X_=t("code",null,"树状数组",-1),Y_=t("code",null,"线段树",-1),Z_=t("code",null,"数组",-1),$_={style:{"text-align":"left"}},ti=t("td",{style:{"text-align":"center"}},"剑指 Offer 51",-1),ei={style:{"text-align":"left"}},li={href:"https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof",target:"_blank",rel:"noopener noreferrer"},oi=t("td",{style:{"text-align":"center"}},null,-1),ni={style:{"text-align":"left"}},si=t("code",null,"树状数组",-1),di=t("code",null,"线段树",-1),_i=t("code",null,"数组",-1),ii=t("code",null,"4+",-1),ai={style:{"text-align":"left"}},ci=t("td",{style:{"text-align":"center"}},"面试题 10.10",-1),ri={style:{"text-align":"left"}},ui={href:"https://leetcode.cn/problems/rank-from-stream-lcci",target:"_blank",rel:"noopener noreferrer"},hi=t("td",{style:{"text-align":"center"}},null,-1),fi={style:{"text-align":"left"}},gi=t("code",null,"设计",-1),mi=t("code",null,"树状数组",-1),yi=t("code",null,"二分查找",-1),xi=t("code",null,"1+",-1),bi={style:{"text-align":"left"}};function pi(ki,Hi){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return a(),c("div",null,[h,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/outline/tag/matrix.html"},{default:o(()=>[x]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[p]),_:1}),l(),e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[k]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[q]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[M]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/outline/tag/string-matching.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[z]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/outline/tag/ordered-set.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/outline/tag/topological-sort.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/outline/tag/shortest-path.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:o(()=>[A]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[O]),_:1}),l(),e(n,{to:"/outline/tag/trie.html"},{default:o(()=>[P]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[U]),_:1}),l(),D,l(),e(n,{to:"/outline/tag/suffix-array.html"},{default:o(()=>[F]),_:1})]),G,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:o(()=>[J]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[Q]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[X]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Y]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/outline/tag/counting-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/outline/tag/radix-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/outline/tag/merge-sort.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/outline/tag/quickselect.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/outline/tag/memoization.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/outline/tag/counting.html"},{default:o(()=>[rt]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[ut]),_:1}),l(),e(n,{to:"/outline/tag/bitmask.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/outline/tag/hash-function.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:o(()=>[gt]),_:1}),l(),e(n,{to:"/outline/tag/line-sweep.html"},{default:o(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/outline/tag/number-theory.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/outline/tag/geometry.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/outline/tag/game-theory.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/outline/tag/combinatorics.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/outline/tag/randomized.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/outline/tag/database.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[Bt]),_:1}),l(),e(n,{to:"/outline/tag/brainteaser.html"},{default:o(()=>[Ct]),_:1}),l(),e(n,{to:"/outline/tag/interactive.html"},{default:o(()=>[Nt]),_:1}),l(),e(n,{to:"/outline/tag/iterator.html"},{default:o(()=>[Vt]),_:1}),l(),e(n,{to:"/outline/tag/concurrency.html"},{default:o(()=>[jt]),_:1})])]),Et,r(" prettier-ignore "),t("table",null,[Kt,t("tbody",null,[t("tr",null,[Rt,t("td",Tt,[t("a",At,[l("天际线问题"),e(s)])]),Ot,t("td",Pt,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ut]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Dt]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ft]),_:1}),l(),Gt]),t("td",Jt,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Qt,t("td",St,[t("a",Wt,[l("区域和检索 - 数组可修改"),e(s)])]),t("td",Xt,[t("a",Yt,[l("[✓]"),e(s)])]),t("td",Zt,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[$t]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[te]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[ee]),_:1}),l(),le]),t("td",oe,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ne,t("td",se,[t("a",de,[l("二维区域和检索 - 矩阵可修改"),e(s)])]),_e,t("td",ie,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[ae]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[ce]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[re]),_:1}),l(),ue]),t("td",he,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[fe,t("td",ge,[t("a",me,[l("计算右侧小于当前元素的个数"),e(s)])]),ye,t("td",xe,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[be]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[pe]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ke]),_:1}),l(),He]),t("td",qe,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ie,t("td",we,[t("a",Me,[l("区间和的个数"),e(s)])]),ve,t("td",Le,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[ze]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Be]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ce]),_:1}),l(),Ne]),t("td",Ve,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[je,t("td",Ee,[t("a",Ke,[l("根据身高重建队列"),e(s)])]),Re,t("td",Te,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ae]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Oe]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Pe]),_:1}),l(),Ue]),t("td",De,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Fe,t("td",Ge,[t("a",Je,[l("翻转对"),e(s)])]),Qe,t("td",Se,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[We]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Xe]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ye]),_:1}),l(),Ze]),t("td",$e,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[tl,t("td",el,[t("a",ll,[l("最长递增子序列的个数"),e(s)])]),ol,t("td",nl,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[sl]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[dl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[_l]),_:1}),l(),il]),t("td",al,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[cl,t("td",rl,[t("a",ul,[l("K 个关闭的灯泡"),e(s)])]),hl,t("td",fl,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[gl]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[ml]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[yl]),_:1}),l(),xl]),t("td",bl,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[pl,t("td",kl,[t("a",Hl,[l("子数组中占绝大多数的元素"),e(s)])]),ql,t("td",Il,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[wl]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ml]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[vl]),_:1}),l(),Ll]),t("td",zl,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Bl,t("td",Cl,[t("a",Nl,[l("统计作战单位数"),e(s)])]),Vl,t("td",jl,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[El]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Kl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Rl]),_:1}),l(),Tl]),t("td",Al,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ol,t("td",Pl,[t("a",Ul,[l("查询带键的排列"),e(s)])]),Dl,t("td",Fl,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Gl]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Jl]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[Ql]),_:1})]),t("td",Sl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Wl,t("td",Xl,[t("a",Yl,[l("最多 K 次交换相邻数位后得到的最小整数"),e(s)])]),Zl,t("td",$l,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[to]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[eo]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[lo]),_:1}),l(),oo]),t("td",no,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[so,t("td",_o,[t("a",io,[l("通过指令创建有序数组"),e(s)])]),ao,t("td",co,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[ro]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[uo]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ho]),_:1}),l(),fo]),t("td",go,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[mo,t("td",yo,[t("a",xo,[l("设计最近使用（MRU）队列"),e(s)])]),bo,t("td",po,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[ko]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Ho]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[qo]),_:1}),l(),Io]),t("td",wo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Mo,t("td",vo,[t("a",Lo,[l("找出到每个位置为止最长的有效障碍赛跑路线"),e(s)])]),zo,t("td",Bo,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Co]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[No]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[Vo]),_:1})]),t("td",jo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Eo,t("td",Ko,[t("a",Ro,[l("1 比 0 多的子数组个数"),e(s)])]),To,t("td",Ao,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Oo]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Po]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Uo]),_:1}),l(),Do]),t("td",Fo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Go,t("td",Jo,[t("a",Qo,[l("统计数组中好三元组数目"),e(s)])]),So,t("td",Wo,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Xo]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Yo]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Zo]),_:1}),l(),$o]),t("td",tn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[en,t("td",ln,[t("a",on,[l("得到回文串的最少操作次数"),e(s)])]),nn,t("td",sn,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[dn]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[_n]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[an]),_:1}),l(),cn]),t("td",rn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[un,t("td",hn,[t("a",fn,[l("统计包含每个点的矩形数目"),e(s)])]),gn,t("td",mn,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[yn]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[xn]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[bn]),_:1}),l(),pn]),t("td",kn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Hn,t("td",qn,[t("a",In,[l("以组为单位订音乐会的门票"),e(s)])]),wn,t("td",Mn,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[vn]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Ln]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[zn]),_:1}),l(),Bn]),t("td",Cn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Nn,t("td",Vn,[t("a",jn,[l("最长递增子序列 II"),e(s)])]),En,t("td",Kn,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Rn]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Tn]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[An]),_:1}),l(),On]),t("td",Pn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Un,t("td",Dn,[t("a",Fn,[l("最长上传前缀"),e(s)])]),Gn,t("td",Jn,[e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[Qn]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Sn]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Wn]),_:1}),l(),Xn]),t("td",Yn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Zn,t("td",$n,[t("a",ts,[l("满足不等式的数对数目"),e(s)])]),es,t("td",ls,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[os]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[ns]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ss]),_:1}),l(),ds]),t("td",_s,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[is,t("td",as,[t("a",cs,[l("统计 K-Big 索引的数量"),e(s)])]),rs,t("td",us,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[hs]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[fs]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[gs]),_:1}),l(),ms]),t("td",ys,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[xs,t("td",bs,[t("a",ps,[l("统计上升四元组"),e(s)])]),ks,t("td",Hs,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[qs]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Is]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[ws]),_:1}),l(),Ms]),t("td",vs,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ls,t("td",zs,[t("a",Bs,[l("将数组清空"),e(s)])]),Cs,t("td",Ns,[e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[Vs]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[js]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Es]),_:1}),l(),Ks]),t("td",Rs,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ts,t("td",As,[t("a",Os,[l("最大和查询"),e(s)])]),Ps,t("td",Us,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Ds]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Fs]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Gs]),_:1}),l(),Js]),t("td",Qs,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ss,t("td",Ws,[t("a",Xs,[l("价格递增的最大利润三元组 I"),e(s)])]),Ys,t("td",Zs,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[$s]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[td]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[ed]),_:1})]),t("td",ld,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[od,t("td",nd,[t("a",sd,[l("子数组不同元素数目的平方和 II"),e(s)])]),dd,t("td",_d,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[id]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[ad]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[cd]),_:1}),l(),rd]),t("td",ud,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[hd,t("td",fd,[t("a",gd,[l("价格递增的最大利润三元组 II"),e(s)])]),md,t("td",yd,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[xd]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[bd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[pd]),_:1})]),t("td",kd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Hd,t("td",qd,[t("a",Id,[l("平衡子序列的最大和"),e(s)])]),wd,t("td",Md,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[vd]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Ld]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[zd]),_:1}),l(),Bd]),t("td",Cd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Nd,t("td",Vd,[t("a",jd,[l("找到 Alice 和 Bob 可以相遇的建筑"),e(s)])]),Ed,t("td",Kd,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Rd]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Td]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Ad]),_:1}),l(),Od]),t("td",Pd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ud,t("td",Dd,[t("a",Fd,[l("折线图上的最大交点数量"),e(s)])]),Gd,t("td",Jd,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[Qd]),_:1}),l(),e(n,{to:"/outline/tag/geometry.html"},{default:o(()=>[Sd]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Wd]),_:1}),l(),Xd]),t("td",Yd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Zd,t("td",$d,[t("a",t_,[l("将元素分配到两个数组中 II"),e(s)])]),e_,t("td",l_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[o_]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[n_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[s_]),_:1}),l(),d_]),t("td",__,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[i_,t("td",a_,[t("a",c_,[l("查找排列的下标"),e(s)])]),r_,t("td",u_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[h_]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[f_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[g_]),_:1}),l(),m_]),t("td",y_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[x_,t("td",b_,[t("a",p_,[l("物块放置查询"),e(s)])]),k_,t("td",H_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[q_]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[I_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[w_]),_:1}),l(),M_]),t("td",v_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[L_,t("td",z_,[t("a",B_,[l("数组中的峰值"),e(s)])]),C_,t("td",N_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[V_]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[j_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[E_]),_:1})]),t("td",K_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[R_,t("td",T_,[t("a",A_,[l("交替组 III"),e(s)])]),O_,t("td",P_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[U_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[D_]),_:1})]),t("td",F_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[G_,t("td",J_,[t("a",Q_,[l("发 LeetCoin"),e(s)])]),S_,t("td",W_,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[X_]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[Y_]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Z_]),_:1})]),t("td",$_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ti,t("td",ei,[t("a",li,[l("数组中的逆序对"),e(s)])]),oi,t("td",ni,[e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[si]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[di]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[_i]),_:1}),l(),ii]),t("td",ai,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ci,t("td",ri,[t("a",ui,[l("数字流的秩"),e(s)])]),hi,t("td",fi,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[gi]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[mi]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[yi]),_:1}),l(),xi]),t("td",bi,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])])])])])}const Ii=i(u,[["render",pi],["__file","binary-indexed-tree.html.vue"]]);export{Ii as default};
