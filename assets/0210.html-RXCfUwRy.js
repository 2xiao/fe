import{_ as p,r as c,o as i,c as u,a as n,d as s,b as t,w as e,f as r,e as d}from"./app-ynO5B_DP.js";const h={},_={id:"_210-课程表-ii",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_210-课程表-ii","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.com/problems/course-schedule-ii",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"深度优先搜索",-1),g=n("code",null,"广度优先搜索",-1),b=n("code",null,"图",-1),y=n("code",null,"拓扑排序",-1),v={href:"https://leetcode.com/problems/course-schedule-ii",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"LeetCode",-1),w=d(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [ai, bi]</code> indicates that you <strong>must</strong> take course <code>bi</code> first if you want to take course <code>ai</code>.</p><ul><li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li></ul><p>Return <em>the ordering of courses you should take to finish all courses</em>. If there are many valid answers, return <strong>any</strong> of them. If it is impossible to finish all courses, return <strong>an empty array</strong>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: numCourses = 2, prerequisites = [[1,0]]</p><p>Output: [0,1]</p><p>Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]</p><p>Output: [0,2,1,3]</p><p>Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.</p><p>So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: numCourses = 1, prerequisites = []</p><p>Output: [0]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= numCourses &lt;= 2000</code></li><li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li><li><code>prerequisites[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt; numCourses</code></li><li><code>ai != bi</code></li><li>All the pairs <code>[ai, bi]</code> are <strong>distinct</strong>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>现在你总共有 <code>numCourses</code> 门课需要选，记为 <code>0</code> 到 <code>numCourses - 1</code>。给你一个数组 <code>prerequisites</code> ，其中 <code>prerequisites[i] = [ai, bi]</code> ，表示在选修课程 <code>ai</code> 前 <strong>必须</strong> 先选修 <code>bi</code> 。</p><p>例如，想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> ，我们用一个匹配来表示：<code>[0,1]</code> 。</p><p>返回你为了学完所有课程所安排的学习顺序。可能会有多个正确的顺序，你只要返回 <strong>任意一种</strong> 就可以了。如果不可能完成所有课程，返回 <strong>一个空数组</strong> 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>什么时候无法修完所有课程？当存在循环依赖的时候。</p><p>其实这种场景在现实生活中也十分常见，比如我们写代码 import 包也是一个例子，必须合理设计代码目录结构，否则会出现循环依赖，编译器会报错，所以编译器实际上也使用了类似算法来判断你的代码是否能够成功编译。</p><p>看到依赖问题，首先想到的就是把问题转化成「有向图」这种数据结构，只要图中存在环，那就说明存在循环依赖。</p><ul><li>首先可以把课程看成「有向图」中的节点，节点编号分别是 <code>0, 1, ..., numCourses-1</code>，把课程之间的依赖关系看做节点之间的有向边。 <ul><li>比如说必须修完课程 <code>1</code> 才能去修课程 <code>3</code>，那么就有一条有向边从节点 <code>1</code> 指向 <code>3</code>。</li></ul></li><li>如果发现这幅有向图中存在环，那就说明课程之间存在循环依赖，肯定没办法全部上完；反之，如果没有环，那么肯定能上完全部课程。</li><li>用一个 <code>hasCycle</code> 变量记录是否存在环，<code>onPath</code> 记录一次 dfs 递归经过的节点。</li><li>用一个 <code>path</code> 变量记录最终的学习路径，在 DFS 的后序位置更新 <code>path</code>。</li><li>当重复遍历到 <code>onPath</code> 中的节点时，就说明遇到了环，设置 <code>hasCycle = true</code>。</li><li>用一个 <code>visited</code> 变量记录遍历过的节点，防止走回头路。 <ul><li>假设以节点 <code>2</code> 为起点遍历所有可达的路径，最终发现没有环。</li><li>假设另一个节点 <code>5</code> 有一条指向 <code>2</code> 的边，在以 <code>5</code> 为起点遍历所有可达的路径时，肯定还会走到 <code>2</code>，此时就不需要继续遍历 <code>2</code> 的所有可达路径了，避免了冗余计算</li></ul></li><li>遍历图中的所有节点，通过是否有环即可判断能否修完所有课程。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">numCourses</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">prerequisites</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">numCourses<span class="token punctuation">,</span> prerequisites</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token keyword">of</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		graph<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		onPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>numCourses<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		hasCycle <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">graph<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>onPath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			hasCycle <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>hasCycle <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		onPath<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token keyword">of</span> graph<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		onPath<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">dfs</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> hasCycle <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> path<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,24),C=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),q=n("td",{style:{"text-align":"center"}},"207",-1),I={style:{"text-align":"left"}},E={href:"https://leetcode.com/problems/course-schedule",target:"_blank",rel:"noopener noreferrer"},M={style:{"text-align":"center"}},P={href:"/problem/0207",target:"_blank",rel:"noopener noreferrer"},T={style:{"text-align":"left"}},j=n("code",null,"深度优先搜索",-1),A=n("code",null,"广度优先搜索",-1),L=n("code",null,"图",-1),N=n("code",null,"1+",-1),V={style:{"text-align":"left"}},B=n("td",{style:{"text-align":"center"}},"269",-1),H={style:{"text-align":"left"}},O={href:"https://leetcode.com/problems/alien-dictionary",target:"_blank",rel:"noopener noreferrer"},S=n("td",{style:{"text-align":"center"}},null,-1),R={style:{"text-align":"left"}},F=n("code",null,"深度优先搜索",-1),D=n("code",null,"广度优先搜索",-1),Y=n("code",null,"图",-1),z=n("code",null,"3+",-1),G={style:{"text-align":"left"}},J=n("td",{style:{"text-align":"center"}},"310",-1),K={style:{"text-align":"left"}},Q={href:"https://leetcode.com/problems/minimum-height-trees",target:"_blank",rel:"noopener noreferrer"},U=n("td",{style:{"text-align":"center"}},null,-1),W={style:{"text-align":"left"}},X=n("code",null,"深度优先搜索",-1),Z=n("code",null,"广度优先搜索",-1),$=n("code",null,"图",-1),nn=n("code",null,"1+",-1),tn={style:{"text-align":"left"}},sn=n("td",{style:{"text-align":"center"}},"444",-1),en={style:{"text-align":"left"}},an={href:"https://leetcode.com/problems/sequence-reconstruction",target:"_blank",rel:"noopener noreferrer"},on=n("td",{style:{"text-align":"center"}},null,-1),ln={style:{"text-align":"left"}},cn=n("code",null,"图",-1),pn=n("code",null,"拓扑排序",-1),un=n("code",null,"数组",-1),rn={style:{"text-align":"left"}},dn=n("td",{style:{"text-align":"center"}},"630",-1),hn={style:{"text-align":"left"}},_n={href:"https://leetcode.com/problems/course-schedule-iii",target:"_blank",rel:"noopener noreferrer"},kn=n("td",{style:{"text-align":"center"}},null,-1),fn={style:{"text-align":"left"}},mn=n("code",null,"贪心",-1),gn=n("code",null,"数组",-1),bn=n("code",null,"排序",-1),yn=n("code",null,"1+",-1),vn={style:{"text-align":"left"}},xn=n("td",{style:{"text-align":"center"}},"1136",-1),wn={style:{"text-align":"left"}},Cn={href:"https://leetcode.com/problems/parallel-courses",target:"_blank",rel:"noopener noreferrer"},qn=n("td",{style:{"text-align":"center"}},null,-1),In={style:{"text-align":"left"}},En=n("code",null,"图",-1),Mn=n("code",null,"拓扑排序",-1),Pn={style:{"text-align":"left"}},Tn=n("td",{style:{"text-align":"center"}},"2115",-1),jn={style:{"text-align":"left"}},An={href:"https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies",target:"_blank",rel:"noopener noreferrer"},Ln=n("td",{style:{"text-align":"center"}},null,-1),Nn={style:{"text-align":"left"}},Vn=n("code",null,"图",-1),Bn=n("code",null,"拓扑排序",-1),Hn=n("code",null,"数组",-1),On=n("code",null,"2+",-1),Sn={style:{"text-align":"left"}},Rn=n("td",{style:{"text-align":"center"}},"2392",-1),Fn={style:{"text-align":"left"}},Dn={href:"https://leetcode.com/problems/build-a-matrix-with-conditions",target:"_blank",rel:"noopener noreferrer"},Yn=n("td",{style:{"text-align":"center"}},null,-1),zn={style:{"text-align":"left"}},Gn=n("code",null,"图",-1),Jn=n("code",null,"拓扑排序",-1),Kn=n("code",null,"数组",-1),Qn=n("code",null,"1+",-1),Un={style:{"text-align":"left"}},Wn=n("td",{style:{"text-align":"center"}},"2459",-1),Xn={style:{"text-align":"left"}},Zn={href:"https://leetcode.com/problems/sort-array-by-moving-items-to-empty-space",target:"_blank",rel:"noopener noreferrer"},$n=n("td",{style:{"text-align":"center"}},null,-1),nt={style:{"text-align":"left"}},tt=n("code",null,"贪心",-1),st=n("code",null,"数组",-1),et=n("code",null,"排序",-1),at={style:{"text-align":"left"}};function ot(lt,ct){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),u("div",null,[n("h1",_,[k,s(),n("a",f,[s("210. 课程表 II"),t(o)])]),n("p",null,[s("🟠 "),t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1}),s("  🔖  "),t(a,{to:"/outline/tag/depth-first-search.html"},{default:e(()=>[m]),_:1}),s(),t(a,{to:"/outline/tag/breadth-first-search.html"},{default:e(()=>[g]),_:1}),s(),t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[b]),_:1}),s(),t(a,{to:"/outline/tag/topological-sort.html"},{default:e(()=>[y]),_:1}),s("  🔗 "),n("a",v,[x,t(o)])]),w,r(" prettier-ignore "),n("table",null,[C,n("tbody",null,[n("tr",null,[q,n("td",I,[n("a",E,[s("课程表"),t(o)])]),n("td",M,[n("a",P,[s("[✓]"),t(o)])]),n("td",T,[t(a,{to:"/outline/tag/depth-first-search.html"},{default:e(()=>[j]),_:1}),s(),t(a,{to:"/outline/tag/breadth-first-search.html"},{default:e(()=>[A]),_:1}),s(),t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[L]),_:1}),s(),N]),n("td",V,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[B,n("td",H,[n("a",O,[s("火星词典"),t(o)])]),S,n("td",R,[t(a,{to:"/outline/tag/depth-first-search.html"},{default:e(()=>[F]),_:1}),s(),t(a,{to:"/outline/tag/breadth-first-search.html"},{default:e(()=>[D]),_:1}),s(),t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[Y]),_:1}),s(),z]),n("td",G,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[J,n("td",K,[n("a",Q,[s("最小高度树"),t(o)])]),U,n("td",W,[t(a,{to:"/outline/tag/depth-first-search.html"},{default:e(()=>[X]),_:1}),s(),t(a,{to:"/outline/tag/breadth-first-search.html"},{default:e(()=>[Z]),_:1}),s(),t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[$]),_:1}),s(),nn]),n("td",tn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[sn,n("td",en,[n("a",an,[s("序列重建"),t(o)])]),on,n("td",ln,[t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[cn]),_:1}),s(),t(a,{to:"/outline/tag/topological-sort.html"},{default:e(()=>[pn]),_:1}),s(),t(a,{to:"/outline/tag/array.html"},{default:e(()=>[un]),_:1})]),n("td",rn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[dn,n("td",hn,[n("a",_n,[s("课程表 III"),t(o)])]),kn,n("td",fn,[t(a,{to:"/outline/tag/greedy.html"},{default:e(()=>[mn]),_:1}),s(),t(a,{to:"/outline/tag/array.html"},{default:e(()=>[gn]),_:1}),s(),t(a,{to:"/outline/tag/sorting.html"},{default:e(()=>[bn]),_:1}),s(),yn]),n("td",vn,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[xn,n("td",wn,[n("a",Cn,[s("并行课程"),t(o)])]),qn,n("td",In,[t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[En]),_:1}),s(),t(a,{to:"/outline/tag/topological-sort.html"},{default:e(()=>[Mn]),_:1})]),n("td",Pn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Tn,n("td",jn,[n("a",An,[s("从给定原材料中找到所有可以做出的菜"),t(o)])]),Ln,n("td",Nn,[t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[Vn]),_:1}),s(),t(a,{to:"/outline/tag/topological-sort.html"},{default:e(()=>[Bn]),_:1}),s(),t(a,{to:"/outline/tag/array.html"},{default:e(()=>[Hn]),_:1}),s(),On]),n("td",Sn,[t(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),n("tr",null,[Rn,n("td",Fn,[n("a",Dn,[s("给定条件下构造矩阵"),t(o)])]),Yn,n("td",zn,[t(a,{to:"/outline/tag/graph.html"},{default:e(()=>[Gn]),_:1}),s(),t(a,{to:"/outline/tag/topological-sort.html"},{default:e(()=>[Jn]),_:1}),s(),t(a,{to:"/outline/tag/array.html"},{default:e(()=>[Kn]),_:1}),s(),Qn]),n("td",Un,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),n("tr",null,[Wn,n("td",Xn,[n("a",Zn,[s("通过移动项目到空白区域来排序数组"),t(o)])]),$n,n("td",nt,[t(a,{to:"/outline/tag/greedy.html"},{default:e(()=>[tt]),_:1}),s(),t(a,{to:"/outline/tag/array.html"},{default:e(()=>[st]),_:1}),s(),t(a,{to:"/outline/tag/sorting.html"},{default:e(()=>[et]),_:1})]),n("td",at,[t(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])])])])])}const it=p(h,[["render",ot],["__file","0210.html.vue"]]);export{it as default};
