import{_ as r,r as c,o as p,c as i,a as t,b as e,d as n,w as s,f as d,e as u}from"./app-ZVJfwurD.js";const _={},h={id:"_238-除自身以外数组的乘积",tabindex:"-1"},m=t("a",{class:"header-anchor",href:"#_238-除自身以外数组的乘积","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0238.html",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"数组",-1),g=t("code",null,"前缀和",-1),b={href:"https://leetcode.cn/problems/product-of-array-except-self",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"力扣",-1),x={href:"https://leetcode.com/problems/product-of-array-except-self",target:"_blank",rel:"noopener noreferrer"},v=t("code",null,"LeetCode",-1),w=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em><code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em><code>nums[i]</code>.</p><p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p><p>You must write an algorithm that runs in <code>O(n)</code> time and without using the division operation.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: nums = [1,2,3,4]</p><p>Output: [24,12,8,6]</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: nums = [-1,1,0,-3,3]</p><p>Output: [0,0,9,0,0]</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10^5</code></li><li><code>-30 &lt;= nums[i] &lt;= 30</code></li><li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li></ul><p><strong>Follow up:</strong> Can you solve the problem in <code>O(1)</code> extra space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个数组 <code>nums</code>。要求返回数组 <code>answer</code>，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>两次遍历</p><p>构造一个答案数组 <code>res</code>，长度和数组 <code>nums</code> 长度一致。</p><p>先从左到右遍历一遍 <code>nums</code> 数组，将 <code>nums[i]</code> 左侧的元素乘积累积起来，存储到 <code>res</code> 数组中。</p><p>再从右到左遍历一遍，将 <code>nums[i]</code> 右侧的元素乘积累积起来，再乘以原本 <code>res[i]</code> 的值，即为 <code>nums</code> 中除了 <code>nums[i]</code> 之外的其他所有元素乘积。</p><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><strong>时间复杂度</strong>: <code>O(n)</code>，其中 <code>n</code> 是数组的长度，需要遍历数组两次。</li><li><strong>空间复杂度</strong>: <code>O(n)</code>，使用了一个数组来存放最终的结果。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">productExceptSelf</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>
		left <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> right<span class="token punctuation">;</span>
		right <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,23),q=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),C=t("td",{style:{"text-align":"center"}},"42",-1),E={style:{"text-align":"left"}},I={href:"https://leetcode.com/problems/trapping-rain-water",target:"_blank",rel:"noopener noreferrer"},O={style:{"text-align":"center"}},L={style:{"text-align":"left"}},N=t("code",null,"栈",-1),V=t("code",null,"数组",-1),j=t("code",null,"双指针",-1),T=t("code",null,"2+",-1),B={style:{"text-align":"left"}},H=t("td",{style:{"text-align":"center"}},"152",-1),M={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/maximum-product-subarray",target:"_blank",rel:"noopener noreferrer"},S={style:{"text-align":"center"}},F={style:{"text-align":"left"}},G=t("code",null,"数组",-1),Y=t("code",null,"动态规划",-1),z={style:{"text-align":"left"}},A=t("td",{style:{"text-align":"center"}},"265",-1),D={style:{"text-align":"left"}},J={href:"https://leetcode.com/problems/paint-house-ii",target:"_blank",rel:"noopener noreferrer"},K=t("td",{style:{"text-align":"center"}},null,-1),P={style:{"text-align":"left"}},Q=t("code",null,"数组",-1),U=t("code",null,"动态规划",-1),W={style:{"text-align":"left"}},X=t("td",{style:{"text-align":"center"}},"2163",-1),Z={style:{"text-align":"left"}},$={href:"https://leetcode.com/problems/minimum-difference-in-sums-after-removal-of-elements",target:"_blank",rel:"noopener noreferrer"},tt=t("td",{style:{"text-align":"center"}},null,-1),nt={style:{"text-align":"left"}},et=t("code",null,"数组",-1),st=t("code",null,"动态规划",-1),at=t("code",null,"堆（优先队列）",-1),ot={style:{"text-align":"left"}},lt=t("td",{style:{"text-align":"center"}},"2906",-1),ct={style:{"text-align":"left"}},rt={href:"https://leetcode.com/problems/construct-product-matrix",target:"_blank",rel:"noopener noreferrer"},pt=t("td",{style:{"text-align":"center"}},null,-1),it={style:{"text-align":"left"}},dt=t("code",null,"数组",-1),ut=t("code",null,"矩阵",-1),_t=t("code",null,"前缀和",-1),ht={style:{"text-align":"left"}};function mt(ft,kt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return p(),i("div",null,[t("h1",h,[m,e(),t("a",f,[e("238. 除自身以外数组的乘积"),n(o)])]),t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/tag/array.html"},{default:s(()=>[k]),_:1}),e(),n(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[g]),_:1}),e("  🔗 "),t("a",b,[y,n(o)]),e(),t("a",x,[v,n(o)])]),w,d(" prettier-ignore "),t("table",null,[q,t("tbody",null,[t("tr",null,[C,t("td",E,[t("a",I,[e("接雨水"),n(o)])]),t("td",O,[n(a,{to:"/problem/0042.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",L,[n(a,{to:"/tag/stack.html"},{default:s(()=>[N]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[V]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[j]),_:1}),e(),T]),t("td",B,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[H,t("td",M,[t("a",R,[e("乘积最大子数组"),n(o)])]),t("td",S,[n(a,{to:"/problem/0152.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",F,[n(a,{to:"/tag/array.html"},{default:s(()=>[G]),_:1}),e(),n(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[Y]),_:1})]),t("td",z,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])]),t("tr",null,[A,t("td",D,[t("a",J,[e("粉刷房子 II 🔒"),n(o)])]),K,t("td",P,[n(a,{to:"/tag/array.html"},{default:s(()=>[Q]),_:1}),e(),n(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[U]),_:1})]),t("td",W,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[X,t("td",Z,[t("a",$,[e("删除元素后和的最小差值"),n(o)])]),tt,t("td",nt,[n(a,{to:"/tag/array.html"},{default:s(()=>[et]),_:1}),e(),n(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[st]),_:1}),e(),n(a,{to:"/tag/heap-priority-queue.html"},{default:s(()=>[at]),_:1})]),t("td",ot,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})])]),t("tr",null,[lt,t("td",ct,[t("a",rt,[e("构造乘积矩阵"),n(o)])]),pt,t("td",it,[n(a,{to:"/tag/array.html"},{default:s(()=>[dt]),_:1}),e(),n(a,{to:"/tag/matrix.html"},{default:s(()=>[ut]),_:1}),e(),n(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[_t]),_:1})]),t("td",ht,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})])])])])])}const bt=r(_,[["render",mt],["__file","0238.html.vue"]]);export{bt as default};
