import{_ as p,r as c,o as i,c as r,a as t,b as s,d as n,w as e,f as d,e as u}from"./app-mXo2sCT-.js";const _={},k={id:"_224-基本计算器",tabindex:"-1"},h=t("a",{class:"header-anchor",href:"#_224-基本计算器","aria-hidden":"true"},"#",-1),m={href:"https://2xiao.github.io/leetcode-js/problem/0224.html",target:"_blank",rel:"noopener noreferrer"},f=t("code",null,"栈",-1),g=t("code",null,"递归",-1),b=t("code",null,"数学",-1),v=t("code",null,"字符串",-1),y={href:"https://leetcode.cn/problems/basic-calculator",target:"_blank",rel:"noopener noreferrer"},x=t("code",null,"力扣",-1),w={href:"https://leetcode.com/problems/basic-calculator",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"LeetCode",-1),I=u(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p><p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: s = &quot;1 + 1&quot;</p><p>Output: 2</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: s = &quot; 2-1 + 2 &quot;</p><p>Output: 3</p></blockquote><p><strong>Example 3:</strong></p><blockquote><p>Input: s = &quot;(1+(4+5+2)-3)+(6+8)&quot;</p><p>Output: 23</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= s.length &lt;= 3 * 105</code></li><li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li><li><code>s</code> represents a valid expression.</li><li><code>&#39;+&#39;</code> is <strong>not</strong> used as a unary operation (i.e., <code>&quot;+1&quot;</code> and <code>&quot;+(2 + 3)&quot;</code> is invalid).</li><li><code>&#39;-&#39;</code> could be used as a unary operation (i.e., <code>&quot;-1&quot;</code> and <code>&quot;-(2 + 3)&quot;</code> is valid).</li><li>There will be no two consecutive operators in the input.</li><li>Every number and running calculation will fit in a signed 32-bit integer.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>实现一个基本的计算器来计算一个简单的字符串表达式的值。字符串表达式可以包含左括号 ( ，右括号 )，加号 + ，减号 -，非负整数和空格 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>加减法计算器，其实就是一个去括号的过程，需要根据 <code>+</code> <code>-</code> 和 <code>(</code> <code>)</code>来判断数字的正负；</li><li>遍历字符串，每当遇到 <code>(</code> ，就使用栈来保存括号前的运算符号；</li><li>注意，负负得正的情况需要特殊处理，所以需要记录每次计算出来的符号；</li><li>遇到 <code>）</code> ，则出栈；</li><li>遇到 <code>+</code> <code>-</code>，则用 <code>sign</code> 来保存数字前的运算符号；</li><li>每个数字的正负都取决于 栈顶和数字前的运算符号的乘积，即：<code>sum * sign * stack[stack.length - 1]</code>；</li><li>将 <code>数字 * 正负符号</code> 累加起来即可；</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">calculate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> <span class="token function-variable function">isDigit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str <span class="token operator">&lt;=</span> <span class="token string">&#39;9&#39;</span> <span class="token operator">&amp;&amp;</span> str <span class="token operator">&gt;=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDigit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> sum <span class="token operator">=</span> sum <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			res <span class="token operator">+=</span> sum <span class="token operator">*</span> sign <span class="token operator">*</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> sign<span class="token punctuation">)</span><span class="token punctuation">;</span>
				sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	res <span class="token operator">+=</span> sum <span class="token operator">*</span> sign<span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,18),E=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),N=t("td",{style:{"text-align":"center"}},"150",-1),C={style:{"text-align":"left"}},L={href:"https://leetcode.com/problems/evaluate-reverse-polish-notation",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"center"}},j={style:{"text-align":"left"}},H=t("code",null,"栈",-1),M=t("code",null,"数组",-1),z=t("code",null,"数学",-1),B={style:{"text-align":"left"}},O=t("td",{style:{"text-align":"center"}},"227",-1),D={style:{"text-align":"left"}},R={href:"https://leetcode.com/problems/basic-calculator-ii",target:"_blank",rel:"noopener noreferrer"},T={style:{"text-align":"center"}},G={style:{"text-align":"left"}},S=t("code",null,"栈",-1),Y=t("code",null,"数学",-1),A=t("code",null,"字符串",-1),F={style:{"text-align":"left"}},J=t("td",{style:{"text-align":"center"}},"241",-1),K={style:{"text-align":"left"}},P={href:"https://leetcode.com/problems/different-ways-to-add-parentheses",target:"_blank",rel:"noopener noreferrer"},Q=t("td",{style:{"text-align":"center"}},null,-1),U={style:{"text-align":"left"}},W=t("code",null,"递归",-1),X=t("code",null,"记忆化搜索",-1),Z=t("code",null,"数学",-1),$=t("code",null,"2+",-1),tt={style:{"text-align":"left"}},nt=t("td",{style:{"text-align":"center"}},"282",-1),st={style:{"text-align":"left"}},et={href:"https://leetcode.com/problems/expression-add-operators",target:"_blank",rel:"noopener noreferrer"},at=t("td",{style:{"text-align":"center"}},null,-1),ot={style:{"text-align":"left"}},lt=t("code",null,"数学",-1),ct=t("code",null,"字符串",-1),pt=t("code",null,"回溯",-1),it={style:{"text-align":"left"}},rt=t("td",{style:{"text-align":"center"}},"772",-1),dt={style:{"text-align":"left"}},ut={href:"https://leetcode.com/problems/basic-calculator-iii",target:"_blank",rel:"noopener noreferrer"},_t={style:{"text-align":"center"}},kt={style:{"text-align":"left"}},ht=t("code",null,"栈",-1),mt=t("code",null,"递归",-1),ft=t("code",null,"数学",-1),gt=t("code",null,"1+",-1),bt={style:{"text-align":"left"}},vt=t("td",{style:{"text-align":"center"}},"2019",-1),yt={style:{"text-align":"left"}},xt={href:"https://leetcode.com/problems/the-score-of-students-solving-math-expression",target:"_blank",rel:"noopener noreferrer"},wt=t("td",{style:{"text-align":"center"}},null,-1),qt={style:{"text-align":"left"}},It=t("code",null,"栈",-1),Et=t("code",null,"记忆化搜索",-1),Nt=t("code",null,"数组",-1),Ct=t("code",null,"3+",-1),Lt={style:{"text-align":"left"}},Vt=t("td",{style:{"text-align":"center"}},"2232",-1),jt={style:{"text-align":"left"}},Ht={href:"https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression",target:"_blank",rel:"noopener noreferrer"},Mt=t("td",{style:{"text-align":"center"}},null,-1),zt={style:{"text-align":"left"}},Bt=t("code",null,"字符串",-1),Ot=t("code",null,"枚举",-1),Dt={style:{"text-align":"left"}};function Rt(Tt,Gt){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink");return i(),r("div",null,[t("h1",k,[h,s(),t("a",m,[s("224. 基本计算器"),n(o)])]),t("p",null,[s("🔴 "),n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1}),s("  🔖  "),n(a,{to:"/tag/stack.html"},{default:e(()=>[f]),_:1}),s(),n(a,{to:"/tag/recursion.html"},{default:e(()=>[g]),_:1}),s(),n(a,{to:"/tag/math.html"},{default:e(()=>[b]),_:1}),s(),n(a,{to:"/tag/string.html"},{default:e(()=>[v]),_:1}),s("  🔗 "),t("a",y,[x,n(o)]),s(),t("a",w,[q,n(o)])]),I,d(" prettier-ignore "),t("table",null,[E,t("tbody",null,[t("tr",null,[N,t("td",C,[t("a",L,[s("逆波兰表达式求值"),n(o)])]),t("td",V,[n(a,{to:"/problem/0150.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",j,[n(a,{to:"/tag/stack.html"},{default:e(()=>[H]),_:1}),s(),n(a,{to:"/tag/array.html"},{default:e(()=>[M]),_:1}),s(),n(a,{to:"/tag/math.html"},{default:e(()=>[z]),_:1})]),t("td",B,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[O,t("td",D,[t("a",R,[s("基本计算器 II"),n(o)])]),t("td",T,[n(a,{to:"/problem/0227.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",G,[n(a,{to:"/tag/stack.html"},{default:e(()=>[S]),_:1}),s(),n(a,{to:"/tag/math.html"},{default:e(()=>[Y]),_:1}),s(),n(a,{to:"/tag/string.html"},{default:e(()=>[A]),_:1})]),t("td",F,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[J,t("td",K,[t("a",P,[s("为运算表达式设计优先级"),n(o)])]),Q,t("td",U,[n(a,{to:"/tag/recursion.html"},{default:e(()=>[W]),_:1}),s(),n(a,{to:"/tag/memoization.html"},{default:e(()=>[X]),_:1}),s(),n(a,{to:"/tag/math.html"},{default:e(()=>[Z]),_:1}),s(),$]),t("td",tt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])]),t("tr",null,[nt,t("td",st,[t("a",et,[s("给表达式添加运算符"),n(o)])]),at,t("td",ot,[n(a,{to:"/tag/math.html"},{default:e(()=>[lt]),_:1}),s(),n(a,{to:"/tag/string.html"},{default:e(()=>[ct]),_:1}),s(),n(a,{to:"/tag/backtracking.html"},{default:e(()=>[pt]),_:1})]),t("td",it,[n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),t("tr",null,[rt,t("td",dt,[t("a",ut,[s("基本计算器 III 🔒"),n(o)])]),t("td",_t,[n(a,{to:"/problem/0772.html"},{default:e(()=>[s("[✓]")]),_:1})]),t("td",kt,[n(a,{to:"/tag/stack.html"},{default:e(()=>[ht]),_:1}),s(),n(a,{to:"/tag/recursion.html"},{default:e(()=>[mt]),_:1}),s(),n(a,{to:"/tag/math.html"},{default:e(()=>[ft]),_:1}),s(),gt]),t("td",bt,[n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),t("tr",null,[vt,t("td",yt,[t("a",xt,[s("解出数学表达式的学生分数"),n(o)])]),wt,t("td",qt,[n(a,{to:"/tag/stack.html"},{default:e(()=>[It]),_:1}),s(),n(a,{to:"/tag/memoization.html"},{default:e(()=>[Et]),_:1}),s(),n(a,{to:"/tag/array.html"},{default:e(()=>[Nt]),_:1}),s(),Ct]),t("td",Lt,[n(l,{color:"#ff334b"},{default:e(()=>[s("Hard")]),_:1})])]),t("tr",null,[Vt,t("td",jt,[t("a",Ht,[s("向表达式添加括号后的最小结果"),n(o)])]),Mt,t("td",zt,[n(a,{to:"/tag/string.html"},{default:e(()=>[Bt]),_:1}),s(),n(a,{to:"/tag/enumeration.html"},{default:e(()=>[Ot]),_:1})]),t("td",Dt,[n(l,{color:"#ffb800"},{default:e(()=>[s("Medium")]),_:1})])])])])])}const Yt=p(_,[["render",Rt],["__file","0224.html.vue"]]);export{Yt as default};
