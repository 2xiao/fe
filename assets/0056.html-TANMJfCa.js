import{_ as r,r as c,o as i,c as d,a as t,b as e,d as n,w as s,f as p,e as _}from"./app-Ob52y8QZ.js";const u={},h=t("h1",{id:"_56-合并区间",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_56-合并区间","aria-hidden":"true"},"#"),e(" 56. 合并区间")],-1),f=t("code",null,"数组",-1),g=t("code",null,"排序",-1),m={href:"https://leetcode.cn/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},k=t("code",null,"力扣",-1),b={href:"https://leetcode.com/problems/merge-intervals",target:"_blank",rel:"noopener noreferrer"},y=t("code",null,"LeetCode",-1),x=_(`<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given an array of <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p><p><strong>Example 1:</strong></p><blockquote><p>Input: intervals = [[1,3],[2,6],[8,10],[15,18]]</p><p>Output: [[1,6],[8,10],[15,18]]</p><p>Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].</p></blockquote><p><strong>Example 2:</strong></p><blockquote><p>Input: intervals = [[1,4],[4,5]]</p><p>Output: [[1,5]]</p><p>Explanation: Intervals [1,4] and [4,5] are considered overlapping.</p></blockquote><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 10^4</code></li><li><code>intervals[i].length == 2</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 <em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ul><li>一个区间可以表示为 <code>[start, end]</code>，先按区间的 <code>start</code> 排序</li><li>对于几个相交区间合并后的结果区间 <code>x</code>，<code>x.start</code> 一定是这些相交区间中 <code>start</code> 最小的，<code>x.end</code> 一定是这些相交区间中 <code>end</code> 最大的</li><li>由于已经排了序，<code>x.start</code> 很好确定，<code>求 x.end</code> 也很容易，可以类比在数组中找最大值的过程。</li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">intervals</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">intervals</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">// 先按区间的 \`start\` 排序</span>
	intervals <span class="token operator">=</span> intervals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">let</span> start <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token comment">// 如果区间相交，求结果区间 [start, end]</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">inRange</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			start <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			i<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 判断区间是否相交</span>
<span class="token keyword">var</span> <span class="token function-variable function">inRange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">interval<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> <span class="token punctuation">[</span>m<span class="token punctuation">,</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> interval<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> start <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> end <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,15),v=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度"),t("th",{style:{"text-align":"center"}},"力扣")])],-1),w=t("td",{style:{"text-align":"center"}},"57",-1),M=t("td",{style:{"text-align":"left"}},"插入区间",-1),E={style:{"text-align":"center"}},I={style:{"text-align":"left"}},q=t("code",null,"数组",-1),C={style:{"text-align":"left"}},H={style:{"text-align":"center"}},L={href:"https://leetcode.cn/problems/insert-interval",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.com/problems/insert-interval",target:"_blank",rel:"noopener noreferrer"},R=t("td",{style:{"text-align":"center"}},"252",-1),V=t("td",{style:{"text-align":"left"}},"会议室 🔒",-1),j=t("td",{style:{"text-align":"center"}},null,-1),B={style:{"text-align":"left"}},z=t("code",null,"数组",-1),O=t("code",null,"排序",-1),S={style:{"text-align":"left"}},G={style:{"text-align":"center"}},T={href:"https://leetcode.cn/problems/meeting-rooms",target:"_blank",rel:"noopener noreferrer"},A={href:"https://leetcode.com/problems/meeting-rooms",target:"_blank",rel:"noopener noreferrer"},D=t("td",{style:{"text-align":"center"}},"253",-1),F=t("td",{style:{"text-align":"left"}},"会议室 II 🔒",-1),J=t("td",{style:{"text-align":"center"}},null,-1),K={style:{"text-align":"left"}},P=t("code",null,"贪心",-1),Q=t("code",null,"数组",-1),U=t("code",null,"双指针",-1),W=t("code",null,"3+",-1),X={style:{"text-align":"left"}},Y={style:{"text-align":"center"}},Z={href:"https://leetcode.cn/problems/meeting-rooms-ii",target:"_blank",rel:"noopener noreferrer"},$={href:"https://leetcode.com/problems/meeting-rooms-ii",target:"_blank",rel:"noopener noreferrer"},tt=t("td",{style:{"text-align":"center"}},"495",-1),et=t("td",{style:{"text-align":"left"}},"提莫攻击",-1),nt=t("td",{style:{"text-align":"center"}},null,-1),st={style:{"text-align":"left"}},at=t("code",null,"数组",-1),ot=t("code",null,"模拟",-1),lt={style:{"text-align":"left"}},ct={style:{"text-align":"center"}},rt={href:"https://leetcode.cn/problems/teemo-attacking",target:"_blank",rel:"noopener noreferrer"},it={href:"https://leetcode.com/problems/teemo-attacking",target:"_blank",rel:"noopener noreferrer"},dt=t("td",{style:{"text-align":"center"}},"616",-1),pt=t("td",{style:{"text-align":"left"}},"给字符串添加加粗标签 🔒",-1),_t=t("td",{style:{"text-align":"center"}},null,-1),ut={style:{"text-align":"left"}},ht=t("code",null,"字典树",-1),ft=t("code",null,"数组",-1),gt=t("code",null,"哈希表",-1),mt=t("code",null,"2+",-1),kt={style:{"text-align":"left"}},bt={style:{"text-align":"center"}},yt={href:"https://leetcode.cn/problems/add-bold-tag-in-string",target:"_blank",rel:"noopener noreferrer"},xt={href:"https://leetcode.com/problems/add-bold-tag-in-string",target:"_blank",rel:"noopener noreferrer"},vt=t("td",{style:{"text-align":"center"}},"715",-1),wt=t("td",{style:{"text-align":"left"}},"Range 模块",-1),Mt=t("td",{style:{"text-align":"center"}},null,-1),Et={style:{"text-align":"left"}},It=t("code",null,"设计",-1),qt=t("code",null,"线段树",-1),Ct=t("code",null,"有序集合",-1),Ht={style:{"text-align":"left"}},Lt={style:{"text-align":"center"}},Nt={href:"https://leetcode.cn/problems/range-module",target:"_blank",rel:"noopener noreferrer"},Rt={href:"https://leetcode.com/problems/range-module",target:"_blank",rel:"noopener noreferrer"},Vt=t("td",{style:{"text-align":"center"}},"759",-1),jt=t("td",{style:{"text-align":"left"}},"员工空闲时间 🔒",-1),Bt=t("td",{style:{"text-align":"center"}},null,-1),zt={style:{"text-align":"left"}},Ot=t("code",null,"数组",-1),St=t("code",null,"排序",-1),Gt=t("code",null,"堆（优先队列）",-1),Tt={style:{"text-align":"left"}},At={style:{"text-align":"center"}},Dt={href:"https://leetcode.cn/problems/employee-free-time",target:"_blank",rel:"noopener noreferrer"},Ft={href:"https://leetcode.com/problems/employee-free-time",target:"_blank",rel:"noopener noreferrer"},Jt=t("td",{style:{"text-align":"center"}},"763",-1),Kt=t("td",{style:{"text-align":"left"}},"划分字母区间",-1),Pt={style:{"text-align":"center"}},Qt={style:{"text-align":"left"}},Ut=t("code",null,"贪心",-1),Wt=t("code",null,"哈希表",-1),Xt=t("code",null,"双指针",-1),Yt=t("code",null,"1+",-1),Zt={style:{"text-align":"left"}},$t={style:{"text-align":"center"}},te={href:"https://leetcode.cn/problems/partition-labels",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://leetcode.com/problems/partition-labels",target:"_blank",rel:"noopener noreferrer"},ne=t("td",{style:{"text-align":"center"}},"986",-1),se=t("td",{style:{"text-align":"left"}},"区间列表的交集",-1),ae={style:{"text-align":"center"}},oe={style:{"text-align":"left"}},le=t("code",null,"数组",-1),ce=t("code",null,"双指针",-1),re={style:{"text-align":"left"}},ie={style:{"text-align":"center"}},de={href:"https://leetcode.cn/problems/interval-list-intersections",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://leetcode.com/problems/interval-list-intersections",target:"_blank",rel:"noopener noreferrer"},_e=t("td",{style:{"text-align":"center"}},"2158",-1),ue=t("td",{style:{"text-align":"left"}},"每天绘制新区域的数量 🔒",-1),he=t("td",{style:{"text-align":"center"}},null,-1),fe={style:{"text-align":"left"}},ge=t("code",null,"线段树",-1),me=t("code",null,"数组",-1),ke=t("code",null,"有序集合",-1),be={style:{"text-align":"left"}},ye={style:{"text-align":"center"}},xe={href:"https://leetcode.cn/problems/amount-of-new-area-painted-each-day",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://leetcode.com/problems/amount-of-new-area-painted-each-day",target:"_blank",rel:"noopener noreferrer"},we=t("td",{style:{"text-align":"center"}},"2213",-1),Me=t("td",{style:{"text-align":"left"}},"由单个字符重复的最长子字符串",-1),Ee=t("td",{style:{"text-align":"center"}},null,-1),Ie={style:{"text-align":"left"}},qe=t("code",null,"线段树",-1),Ce=t("code",null,"数组",-1),He=t("code",null,"字符串",-1),Le=t("code",null,"1+",-1),Ne={style:{"text-align":"left"}},Re={style:{"text-align":"center"}},Ve={href:"https://leetcode.cn/problems/longest-substring-of-one-repeating-character",target:"_blank",rel:"noopener noreferrer"},je={href:"https://leetcode.com/problems/longest-substring-of-one-repeating-character",target:"_blank",rel:"noopener noreferrer"},Be=t("td",{style:{"text-align":"center"}},"2276",-1),ze=t("td",{style:{"text-align":"left"}},"统计区间中的整数数目",-1),Oe=t("td",{style:{"text-align":"center"}},null,-1),Se={style:{"text-align":"left"}},Ge=t("code",null,"设计",-1),Te=t("code",null,"线段树",-1),Ae=t("code",null,"有序集合",-1),De={style:{"text-align":"left"}},Fe={style:{"text-align":"center"}},Je={href:"https://leetcode.cn/problems/count-integers-in-intervals",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://leetcode.com/problems/count-integers-in-intervals",target:"_blank",rel:"noopener noreferrer"},Pe=t("td",{style:{"text-align":"center"}},"2406",-1),Qe=t("td",{style:{"text-align":"left"}},"将区间分为最少组数",-1),Ue={style:{"text-align":"center"}},We={style:{"text-align":"left"}},Xe=t("code",null,"贪心",-1),Ye=t("code",null,"数组",-1),Ze=t("code",null,"双指针",-1),$e=t("code",null,"3+",-1),tn={style:{"text-align":"left"}},en={style:{"text-align":"center"}},nn={href:"https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups",target:"_blank",rel:"noopener noreferrer"},an=t("td",{style:{"text-align":"center"}},"2446",-1),on=t("td",{style:{"text-align":"left"}},"判断两个事件是否存在冲突",-1),ln=t("td",{style:{"text-align":"center"}},null,-1),cn={style:{"text-align":"left"}},rn=t("code",null,"数组",-1),dn=t("code",null,"字符串",-1),pn={style:{"text-align":"left"}},_n={style:{"text-align":"center"}},un={href:"https://leetcode.cn/problems/determine-if-two-events-have-conflict",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://leetcode.com/problems/determine-if-two-events-have-conflict",target:"_blank",rel:"noopener noreferrer"},fn=t("td",{style:{"text-align":"center"}},"2580",-1),gn=t("td",{style:{"text-align":"left"}},"统计将重叠区间合并成组的方案数",-1),mn=t("td",{style:{"text-align":"center"}},null,-1),kn={style:{"text-align":"left"}},bn=t("code",null,"数组",-1),yn=t("code",null,"排序",-1),xn={style:{"text-align":"left"}},vn={style:{"text-align":"center"}},wn={href:"https://leetcode.cn/problems/count-ways-to-group-overlapping-ranges",target:"_blank",rel:"noopener noreferrer"},Mn={href:"https://leetcode.com/problems/count-ways-to-group-overlapping-ranges",target:"_blank",rel:"noopener noreferrer"},En=t("td",{style:{"text-align":"center"}},"2848",-1),In=t("td",{style:{"text-align":"left"}},"与车相交的点",-1),qn=t("td",{style:{"text-align":"center"}},null,-1),Cn={style:{"text-align":"left"}},Hn=t("code",null,"数组",-1),Ln=t("code",null,"哈希表",-1),Nn=t("code",null,"前缀和",-1),Rn={style:{"text-align":"left"}},Vn={style:{"text-align":"center"}},jn={href:"https://leetcode.cn/problems/points-that-intersect-with-cars",target:"_blank",rel:"noopener noreferrer"},Bn={href:"https://leetcode.com/problems/points-that-intersect-with-cars",target:"_blank",rel:"noopener noreferrer"},zn=t("td",{style:{"text-align":"center"}},"3169",-1),On=t("td",{style:{"text-align":"left"}},"无需开会的工作日",-1),Sn=t("td",{style:{"text-align":"center"}},null,-1),Gn={style:{"text-align":"left"}},Tn=t("code",null,"数组",-1),An=t("code",null,"排序",-1),Dn={style:{"text-align":"left"}},Fn={style:{"text-align":"center"}},Jn={href:"https://leetcode.cn/problems/count-days-without-meetings",target:"_blank",rel:"noopener noreferrer"},Kn={href:"https://leetcode.com/problems/count-days-without-meetings",target:"_blank",rel:"noopener noreferrer"},Pn=t("td",{style:{"text-align":"center"}},"3323",-1),Qn=t("td",{style:{"text-align":"left"}},"通过插入区间最小化连通组 🔒",-1),Un=t("td",{style:{"text-align":"center"}},null,-1),Wn={style:{"text-align":"left"}},Xn=t("code",null,"数组",-1),Yn=t("code",null,"二分查找",-1),Zn=t("code",null,"排序",-1),$n=t("code",null,"1+",-1),ts={style:{"text-align":"left"}},es={style:{"text-align":"center"}},ns={href:"https://leetcode.cn/problems/minimize-connected-groups-by-inserting-interval",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://leetcode.com/problems/minimize-connected-groups-by-inserting-interval",target:"_blank",rel:"noopener noreferrer"};function as(os,ls){const l=c("font"),a=c("RouterLink"),o=c("ExternalLinkIcon");return i(),d("div",null,[h,t("p",null,[e("🟠 "),n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1}),e("  🔖  "),n(a,{to:"/tag/array.html"},{default:s(()=>[f]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[g]),_:1}),e("  🔗 "),t("a",m,[k,n(o)]),e(),t("a",b,[y,n(o)])]),x,p(" prettier-ignore "),t("table",null,[v,t("tbody",null,[t("tr",null,[w,M,t("td",E,[n(a,{to:"/problem/0057.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",I,[n(a,{to:"/tag/array.html"},{default:s(()=>[q]),_:1})]),t("td",C,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",H,[t("a",L,[e("🀄️"),n(o)]),e(),t("a",N,[e("🔗"),n(o)])])]),t("tr",null,[R,V,j,t("td",B,[n(a,{to:"/tag/array.html"},{default:s(()=>[z]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[O]),_:1})]),t("td",S,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",G,[t("a",T,[e("🀄️"),n(o)]),e(),t("a",A,[e("🔗"),n(o)])])]),t("tr",null,[D,F,J,t("td",K,[n(a,{to:"/tag/greedy.html"},{default:s(()=>[P]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[Q]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[U]),_:1}),e(),W]),t("td",X,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Y,[t("a",Z,[e("🀄️"),n(o)]),e(),t("a",$,[e("🔗"),n(o)])])]),t("tr",null,[tt,et,nt,t("td",st,[n(a,{to:"/tag/array.html"},{default:s(()=>[at]),_:1}),e(),n(a,{to:"/tag/simulation.html"},{default:s(()=>[ot]),_:1})]),t("td",lt,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",ct,[t("a",rt,[e("🀄️"),n(o)]),e(),t("a",it,[e("🔗"),n(o)])])]),t("tr",null,[dt,pt,_t,t("td",ut,[n(a,{to:"/tag/trie.html"},{default:s(()=>[ht]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[ft]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[gt]),_:1}),e(),mt]),t("td",kt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",bt,[t("a",yt,[e("🀄️"),n(o)]),e(),t("a",xt,[e("🔗"),n(o)])])]),t("tr",null,[vt,wt,Mt,t("td",Et,[n(a,{to:"/tag/design.html"},{default:s(()=>[It]),_:1}),e(),n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[qt]),_:1}),e(),n(a,{to:"/tag/ordered-set.html"},{default:s(()=>[Ct]),_:1})]),t("td",Ht,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",Lt,[t("a",Nt,[e("🀄️"),n(o)]),e(),t("a",Rt,[e("🔗"),n(o)])])]),t("tr",null,[Vt,jt,Bt,t("td",zt,[n(a,{to:"/tag/array.html"},{default:s(()=>[Ot]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[St]),_:1}),e(),n(a,{to:"/tag/heap-priority-queue.html"},{default:s(()=>[Gt]),_:1})]),t("td",Tt,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",At,[t("a",Dt,[e("🀄️"),n(o)]),e(),t("a",Ft,[e("🔗"),n(o)])])]),t("tr",null,[Jt,Kt,t("td",Pt,[n(a,{to:"/problem/0763.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",Qt,[n(a,{to:"/tag/greedy.html"},{default:s(()=>[Ut]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[Wt]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Xt]),_:1}),e(),Yt]),t("td",Zt,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",$t,[t("a",te,[e("🀄️"),n(o)]),e(),t("a",ee,[e("🔗"),n(o)])])]),t("tr",null,[ne,se,t("td",ae,[n(a,{to:"/problem/0986.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",oe,[n(a,{to:"/tag/array.html"},{default:s(()=>[le]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[ce]),_:1})]),t("td",re,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",ie,[t("a",de,[e("🀄️"),n(o)]),e(),t("a",pe,[e("🔗"),n(o)])])]),t("tr",null,[_e,ue,he,t("td",fe,[n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[ge]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[me]),_:1}),e(),n(a,{to:"/tag/ordered-set.html"},{default:s(()=>[ke]),_:1})]),t("td",be,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",ye,[t("a",xe,[e("🀄️"),n(o)]),e(),t("a",ve,[e("🔗"),n(o)])])]),t("tr",null,[we,Me,Ee,t("td",Ie,[n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[qe]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[Ce]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[He]),_:1}),e(),Le]),t("td",Ne,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",Re,[t("a",Ve,[e("🀄️"),n(o)]),e(),t("a",je,[e("🔗"),n(o)])])]),t("tr",null,[Be,ze,Oe,t("td",Se,[n(a,{to:"/tag/design.html"},{default:s(()=>[Ge]),_:1}),e(),n(a,{to:"/tag/segment-tree.html"},{default:s(()=>[Te]),_:1}),e(),n(a,{to:"/tag/ordered-set.html"},{default:s(()=>[Ae]),_:1})]),t("td",De,[n(l,{color:"#ff334b"},{default:s(()=>[e("Hard")]),_:1})]),t("td",Fe,[t("a",Je,[e("🀄️"),n(o)]),e(),t("a",Ke,[e("🔗"),n(o)])])]),t("tr",null,[Pe,Qe,t("td",Ue,[n(a,{to:"/problem/2406.html"},{default:s(()=>[e("[✓]")]),_:1})]),t("td",We,[n(a,{to:"/tag/greedy.html"},{default:s(()=>[Xe]),_:1}),e(),n(a,{to:"/tag/array.html"},{default:s(()=>[Ye]),_:1}),e(),n(a,{to:"/tag/two-pointers.html"},{default:s(()=>[Ze]),_:1}),e(),$e]),t("td",tn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",en,[t("a",nn,[e("🀄️"),n(o)]),e(),t("a",sn,[e("🔗"),n(o)])])]),t("tr",null,[an,on,ln,t("td",cn,[n(a,{to:"/tag/array.html"},{default:s(()=>[rn]),_:1}),e(),n(a,{to:"/tag/string.html"},{default:s(()=>[dn]),_:1})]),t("td",pn,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",_n,[t("a",un,[e("🀄️"),n(o)]),e(),t("a",hn,[e("🔗"),n(o)])])]),t("tr",null,[fn,gn,mn,t("td",kn,[n(a,{to:"/tag/array.html"},{default:s(()=>[bn]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[yn]),_:1})]),t("td",xn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",vn,[t("a",wn,[e("🀄️"),n(o)]),e(),t("a",Mn,[e("🔗"),n(o)])])]),t("tr",null,[En,In,qn,t("td",Cn,[n(a,{to:"/tag/array.html"},{default:s(()=>[Hn]),_:1}),e(),n(a,{to:"/tag/hash-table.html"},{default:s(()=>[Ln]),_:1}),e(),n(a,{to:"/tag/prefix-sum.html"},{default:s(()=>[Nn]),_:1})]),t("td",Rn,[n(l,{color:"#15bd66"},{default:s(()=>[e("Easy")]),_:1})]),t("td",Vn,[t("a",jn,[e("🀄️"),n(o)]),e(),t("a",Bn,[e("🔗"),n(o)])])]),t("tr",null,[zn,On,Sn,t("td",Gn,[n(a,{to:"/tag/array.html"},{default:s(()=>[Tn]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[An]),_:1})]),t("td",Dn,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",Fn,[t("a",Jn,[e("🀄️"),n(o)]),e(),t("a",Kn,[e("🔗"),n(o)])])]),t("tr",null,[Pn,Qn,Un,t("td",Wn,[n(a,{to:"/tag/array.html"},{default:s(()=>[Xn]),_:1}),e(),n(a,{to:"/tag/binary-search.html"},{default:s(()=>[Yn]),_:1}),e(),n(a,{to:"/tag/sorting.html"},{default:s(()=>[Zn]),_:1}),e(),$n]),t("td",ts,[n(l,{color:"#ffb800"},{default:s(()=>[e("Medium")]),_:1})]),t("td",es,[t("a",ns,[e("🀄️"),n(o)]),e(),t("a",ss,[e("🔗"),n(o)])])])])])])}const rs=r(u,[["render",as],["__file","0056.html.vue"]]);export{rs as default};
