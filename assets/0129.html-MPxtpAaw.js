import{_ as d,r as c,o as k,c as m,a as n,b as t,d as e,w as s,f as h,e as p}from"./app-JOMdB8bl.js";const _={},f={id:"_129-求根节点到叶节点数字之和",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_129-求根节点到叶节点数字之和","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.com/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"树",-1),y=n("code",null,"深度优先搜索",-1),x=n("code",null,"二叉树",-1),w={href:"https://leetcode.com/problems/sum-root-to-leaf-numbers",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"LeetCode",-1),S=p('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>You are given the <code>root</code> of a binary tree containing digits from <code>0</code> to <code>9</code> only.</p><p>Each root-to-leaf path in the tree represents a number.</p><ul><li>For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code> represents the number <code>123</code>.</li></ul><p>Return <em>the total sum of all root-to-leaf numbers</em>. Test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</p><p>A <strong>leaf</strong> node is a node with no children.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [1,2,3]</p><p>Output: 25</p><p>Explanation:</p><p>The root-to-leaf path 1-&gt;2 represents the number 12.</p><p>The root-to-leaf path 1-&gt;3 represents the number 13.</p><p>Therefore, sum = 12 + 13 = 25.</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [4,9,0,5,1]</p><p>Output: 1026</p><p>Explanation:</p><p>The root-to-leaf path 4-&gt;9-&gt;5 represents the number 495.</p><p>The root-to-leaf path 4-&gt;9-&gt;1 represents the number 491.</p><p>The root-to-leaf path 4-&gt;0 represents the number 40.</p><p>Therefore, sum = 495 + 491 + 40 = 1026.</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>The depth of the tree will not exceed <code>10</code>.</li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定一个二叉树，它的每个结点都存放一个  <code>0-9</code>  的数字，每条从根到叶子节点的路径都代表一个数字。例如，从根到叶子节点路径 <code>1-&gt;2-&gt;3</code> 代表数字 <code>123</code>。计算从根到叶子节点生成的所有数字之和。说明:  叶子节点是指没有子节点的节点。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2>',17),N=p('<h3 id="思路一-dfs" tabindex="-1"><a class="header-anchor" href="#思路一-dfs" aria-hidden="true">#</a> 思路一：DFS</h3><ul><li>使用深度优先搜索（DFS）来遍历二叉树，计算从根到叶子节点路径生成的数字之和。</li><li>函数 <code>sumNumbers</code> 是入口函数，调用 <code>dfs</code> 函数进行递归。</li><li>在 <code>dfs</code> 函数中，通过参数 <code>currentSum</code> 记录当前路径上的数字之和。</li><li>当到达叶子节点时，返回当前路径的数字之和。</li><li>整个递归过程计算了所有从根到叶子节点路径生成的数字之和。</li></ul><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是二叉树的节点数，递归函数对每个节点访问一次。</p></li><li><p><strong>空间复杂度</strong>：<code>O(log n)</code>，递归调用栈的深度取决于树的高度。在最好的情况下，二叉树是完全平衡的，树的高度为 <code>O(log n)</code>；最坏情况下，二叉树是链状的，树的高度为 <code>n</code>（即节点数）。</p></li></ul><hr><h3 id="思路二-回溯" tabindex="-1"><a class="header-anchor" href="#思路二-回溯" aria-hidden="true">#</a> 思路二：回溯</h3><ol><li>定义一个结果变量 <code>sum</code> 和一个路径变量 <code>num</code>。</li><li>使用回溯算法，通过递归函数 <code>backtrack</code> 遍历组合的所有可能性。</li><li>在 <code>backtrack</code> 函数中，当到达叶子节点时，将当前路径的数字 <code>num</code> 加入到结果变量 <code>sum</code> 中。</li><li>在每一层递归中，将当前数字加入路径变量，然后递归调用下一层，最后去掉当前数字，回溯到上一层。</li></ol><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1" aria-hidden="true">#</a> 复杂度分析</h4><ul><li><p><strong>时间复杂度</strong>：<code>O(n)</code>，其中 <code>n</code> 是二叉树的节点数，使用回溯方法遍历二叉树中的每一个节点，在每个节点处，进行常数级的操作。</p></li><li><p><strong>空间复杂度</strong>：<code>O(log n)</code>，递归调用栈的深度取决于树的高度。在最好的情况下，二叉树是完全平衡的，树的高度为 <code>O(log n)</code>；最坏情况下，二叉树是链状的，树的高度为 <code>n</code>（即节点数）。</p></li></ul><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2>',10),E=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[t(`/**
 * `),n("span",{class:"token keyword"},"@param"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("TreeNode"),n("span",{class:"token punctuation"},"}")]),t(),n("span",{class:"token parameter"},"root"),t(`
 * `),n("span",{class:"token keyword"},"@return"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("number"),n("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"sumNumbers"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"const"),t(),n("span",{class:"token function-variable function"},"dfs"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("root"),n("span",{class:"token punctuation"},","),t(" currentSum")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),t("root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`
		currentSum `),n("span",{class:"token operator"},"="),t(" currentSum "),n("span",{class:"token operator"},"*"),t(),n("span",{class:"token number"},"10"),t(),n("span",{class:"token operator"},"+"),t(" root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),t("root"),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"&&"),t(),n("span",{class:"token operator"},"!"),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),t(" currentSum"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" left "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},","),t(" currentSum"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"let"),t(" right "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},","),t(" currentSum"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token keyword"},"return"),t(" left "),n("span",{class:"token operator"},"+"),t(" right"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token keyword"},"return"),t(),n("span",{class:"token function"},"dfs"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token doc-comment comment"},[t(`/**
 * `),n("span",{class:"token keyword"},"@param"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("TreeNode"),n("span",{class:"token punctuation"},"}")]),t(),n("span",{class:"token parameter"},"root"),t(`
 * `),n("span",{class:"token keyword"},"@return"),t(),n("span",{class:"token class-name"},[n("span",{class:"token punctuation"},"{"),t("number"),n("span",{class:"token punctuation"},"}")]),t(`
 */`)]),t(`
`),n("span",{class:"token keyword"},"var"),t(),n("span",{class:"token function-variable function"},"sumNumbers"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token keyword"},"function"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
	`),n("span",{class:"token keyword"},"let"),t(" sum "),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),t(`
		num `),n("span",{class:"token operator"},"="),t(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token keyword"},"const"),t(),n("span",{class:"token function-variable function"},"backtrack"),t(),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token punctuation"},"{"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),t("root"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token comment"},"// 将当前数字加入路径变量"),t(`
		num `),n("span",{class:"token operator"},"="),t(" root"),n("span",{class:"token punctuation"},"."),t("val "),n("span",{class:"token operator"},"+"),t(),n("span",{class:"token number"},"10"),t(),n("span",{class:"token operator"},"*"),t(" num"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token comment"},"// 到达叶子节点，将当前路径的数字 num 加入到结果变量 sum 中"),t(`
		`),n("span",{class:"token keyword"},"if"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),t("root"),n("span",{class:"token punctuation"},"."),t("left "),n("span",{class:"token operator"},"&&"),t(),n("span",{class:"token operator"},"!"),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
			sum `),n("span",{class:"token operator"},"+="),t(" num"),n("span",{class:"token punctuation"},";"),t(`
			num `),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),t("num "),n("span",{class:"token operator"},"-"),t(" root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),t(`
			`),n("span",{class:"token keyword"},"return"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token punctuation"},"}"),t(`

		`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("left"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`
		`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},"."),t("right"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`

		`),n("span",{class:"token comment"},"// 从路径变量中去掉当前数字"),t(`
		num `),n("span",{class:"token operator"},"="),t(),n("span",{class:"token punctuation"},"("),t("num "),n("span",{class:"token operator"},"-"),t(" root"),n("span",{class:"token punctuation"},"."),t("val"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"/"),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),t(`
	`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token function"},"backtrack"),n("span",{class:"token punctuation"},"("),t("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),t(`

	`),n("span",{class:"token keyword"},"return"),t(" sum"),n("span",{class:"token punctuation"},";"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),t(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("h2",{id:"相关题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#相关题目","aria-hidden":"true"},"#"),t(" 相关题目")],-1),C=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),A=n("td",{style:{"text-align":"center"}},"112",-1),F={style:{"text-align":"left"}},L={href:"https://leetcode.com/problems/path-sum",target:"_blank",rel:"noopener noreferrer"},V={style:{"text-align":"center"}},q={style:{"text-align":"left"}},D=n("code",null,"树",-1),I=n("code",null,"深度优先搜索",-1),B=n("code",null,"广度优先搜索",-1),R=n("code",null,"1+",-1),z={style:{"text-align":"left"}},M=n("td",{style:{"text-align":"center"}},"124",-1),H={style:{"text-align":"left"}},Y={href:"https://leetcode.com/problems/binary-tree-maximum-path-sum",target:"_blank",rel:"noopener noreferrer"},G={style:{"text-align":"center"}},J={style:{"text-align":"left"}},K=n("code",null,"树",-1),P=n("code",null,"深度优先搜索",-1),Q=n("code",null,"动态规划",-1),U=n("code",null,"1+",-1),W={style:{"text-align":"left"}},X=n("td",{style:{"text-align":"center"}},"988",-1),Z={style:{"text-align":"left"}},$={href:"https://leetcode.com/problems/smallest-string-starting-from-leaf",target:"_blank",rel:"noopener noreferrer"},nn=n("td",{style:{"text-align":"center"}},null,-1),tn={style:{"text-align":"left"}},en=n("code",null,"树",-1),sn=n("code",null,"深度优先搜索",-1),an=n("code",null,"字符串",-1),on=n("code",null,"2+",-1),ln={style:{"text-align":"left"}};function cn(rn,pn){const o=c("ExternalLinkIcon"),l=c("font"),a=c("RouterLink"),u=c("CodeTabs");return k(),m("div",null,[n("h1",f,[b,t(),n("a",g,[t("129. 求根节点到叶节点数字之和"),e(o)])]),n("p",null,[t("🟠 "),e(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1}),t("  🔖  "),e(a,{to:"/tag/tree.html"},{default:s(()=>[v]),_:1}),t(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[y]),_:1}),t(),e(a,{to:"/tag/binary-tree.html"},{default:s(()=>[x]),_:1}),t("  🔗 "),n("a",w,[T,e(o)])]),S,n("p",null,[t("这一题是 "),e(a,{to:"/problem/0257.html"},{default:s(()=>[t("第 257 题")]),_:1}),t(" 的变形题，第 257 题要求输出每条从根节点到叶子节点的路径，这一题变成了把每一个从根节点到叶子节点的数字都串联起来，再累加每条路径，求出最后的总和。实际做题思路基本没变。")]),N,e(u,{id:"204",data:[{id:"DFS"},{id:"回溯"}]},{title0:s(({value:r,isActive:i})=>[t("DFS")]),title1:s(({value:r,isActive:i})=>[t("回溯")]),tab0:s(({value:r,isActive:i})=>[E]),tab1:s(({value:r,isActive:i})=>[j]),_:1}),O,h(" prettier-ignore "),n("table",null,[C,n("tbody",null,[n("tr",null,[A,n("td",F,[n("a",L,[t("路径总和"),e(o)])]),n("td",V,[e(a,{to:"/problem/0112.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",q,[e(a,{to:"/tag/tree.html"},{default:s(()=>[D]),_:1}),t(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[I]),_:1}),t(),e(a,{to:"/tag/breadth-first-search.html"},{default:s(()=>[B]),_:1}),t(),R]),n("td",z,[e(l,{color:"#15bd66"},{default:s(()=>[t("Easy")]),_:1})])]),n("tr",null,[M,n("td",H,[n("a",Y,[t("二叉树中的最大路径和"),e(o)])]),n("td",G,[e(a,{to:"/problem/0124.html"},{default:s(()=>[t("[✓]")]),_:1})]),n("td",J,[e(a,{to:"/tag/tree.html"},{default:s(()=>[K]),_:1}),t(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[P]),_:1}),t(),e(a,{to:"/tag/dynamic-programming.html"},{default:s(()=>[Q]),_:1}),t(),U]),n("td",W,[e(l,{color:"#ff334b"},{default:s(()=>[t("Hard")]),_:1})])]),n("tr",null,[X,n("td",Z,[n("a",$,[t("从叶结点开始的最小字符串"),e(o)])]),nn,n("td",tn,[e(a,{to:"/tag/tree.html"},{default:s(()=>[en]),_:1}),t(),e(a,{to:"/tag/depth-first-search.html"},{default:s(()=>[sn]),_:1}),t(),e(a,{to:"/tag/string.html"},{default:s(()=>[an]),_:1}),t(),on]),n("td",ln,[e(l,{color:"#ffb800"},{default:s(()=>[t("Medium")]),_:1})])])])])])}const dn=d(_,[["render",cn],["__file","0129.html.vue"]]);export{dn as default};
