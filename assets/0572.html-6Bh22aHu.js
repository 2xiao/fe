import{_ as r,r as l,o as i,c as u,a as n,b as t,d as s,w as e,f as d,e as p}from"./app-mXo2sCT-.js";const k={},h={id:"_572-另一棵树的子树",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_572-另一棵树的子树","aria-hidden":"true"},"#",-1),f={href:"https://2xiao.github.io/leetcode-js/problem/0572.html",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"树",-1),m=n("code",null,"深度优先搜索",-1),g=n("code",null,"二叉树",-1),v=n("code",null,"字符串匹配",-1),y=n("code",null,"哈希函数",-1),x={href:"https://leetcode.cn/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"力扣",-1),R={href:"https://leetcode.com/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"LeetCode",-1),S=p('<h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>Given the roots of two binary trees <code>root</code> and <code>subRoot</code>, return <code>true</code> if there is a subtree of <code>root</code> with the same structure and node values of<code> subRoot</code> and <code>false</code> otherwise.</p><p>A subtree of a binary tree <code>tree</code> is a tree that consists of a node in <code>tree</code> and all of this node&#39;s descendants. The tree <code>tree</code> could also be considered as a subtree of itself.</p><p><strong>Example 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,4,5,1,2], subRoot = [4,1,2]</p><p>Output: true</p></blockquote><p><strong>Example 2:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]</p><p>Output: false</p></blockquote><p><strong>Constraints:</strong></p><ul><li>The number of nodes in the <code>root</code> tree is in the range <code>[1, 2000]</code>.</li><li>The number of nodes in the <code>subRoot</code> tree is in the range <code>[1, 1000]</code>.</li><li><code>-10^4 &lt;= root.val &lt;= 10^4</code></li><li><code>-10^4 &lt;= subRoot.val &lt;= 10^4</code></li></ul><h2 id="题目大意" tabindex="-1"><a class="header-anchor" href="#题目大意" aria-hidden="true">#</a> 题目大意</h2><p>给定两个非空二叉树 <code>root</code> 和 <code>subRoot</code> ，检验  <code>root</code> 中是否包含和 <code>subRoot</code> 具有相同结构和节点值的子树。<code>root</code> 的一个子树包括 <code>root</code> 的一个节点和这个节点的所有子孙。<code>root</code> 也可以看做它自身的一棵子树。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>可以使用递归来判断，分为三种情况：</p><ol><li><code>root</code> 和 <code>subRoot</code> 是完全一样的两棵树；</li><li><code>subRoot</code> 是 <code>root</code> 左子树中的子树；</li><li><code>subRoot</code> 是 <code>root</code> 右子树中的子树；</li></ol>',16),N=p(`<h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></span> <span class="token parameter">subRoot</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isSubtree</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> subRoot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token function-variable function">isSame</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> q</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> <span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val <span class="token operator">!==</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">isSame</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSame</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSame</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> subRoot<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> subRoot<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> subRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关题目" tabindex="-1"><a class="header-anchor" href="#相关题目" aria-hidden="true">#</a> 相关题目</h2>`,3),j=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"题号"),n("th",{style:{"text-align":"left"}},"标题"),n("th",{style:{"text-align":"center"}},"题解"),n("th",{style:{"text-align":"left"}},"标签"),n("th",{style:{"text-align":"left"}},"难度")])],-1),E=n("td",{style:{"text-align":"center"}},"250",-1),T={style:{"text-align":"left"}},C={href:"https://leetcode.com/problems/count-univalue-subtrees",target:"_blank",rel:"noopener noreferrer"},L=n("td",{style:{"text-align":"center"}},null,-1),V={style:{"text-align":"left"}},I=n("code",null,"树",-1),B=n("code",null,"深度优先搜索",-1),z=n("code",null,"二叉树",-1),M={style:{"text-align":"left"}},O=n("td",{style:{"text-align":"center"}},"508",-1),A={style:{"text-align":"left"}},G={href:"https://leetcode.com/problems/most-frequent-subtree-sum",target:"_blank",rel:"noopener noreferrer"},D=n("td",{style:{"text-align":"center"}},null,-1),F={style:{"text-align":"left"}},H=n("code",null,"树",-1),J=n("code",null,"深度优先搜索",-1),K=n("code",null,"哈希表",-1),P=n("code",null,"1+",-1),Q={style:{"text-align":"left"}};function U(W,X){const o=l("ExternalLinkIcon"),c=l("font"),a=l("RouterLink");return i(),u("div",null,[n("h1",h,[_,t(),n("a",f,[t("572. 另一棵树的子树"),s(o)])]),n("p",null,[t("🟢 "),s(c,{color:"#15bd66"},{default:e(()=>[t("Easy")]),_:1}),t("  🔖  "),s(a,{to:"/tag/tree.html"},{default:e(()=>[b]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[m]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[g]),_:1}),t(),s(a,{to:"/tag/string-matching.html"},{default:e(()=>[v]),_:1}),t(),s(a,{to:"/tag/hash-function.html"},{default:e(()=>[y]),_:1}),t("  🔗 "),n("a",x,[w,s(o)]),t(),n("a",R,[q,s(o)])]),S,n("p",null,[t("判断两棵数是否完全一致，可以参见 "),s(a,{to:"/problem/0100.html"},{default:e(()=>[t("第 100 题 相同的树")]),_:1}),t("。")]),N,d(" prettier-ignore "),n("table",null,[j,n("tbody",null,[n("tr",null,[E,n("td",T,[n("a",C,[t("统计同值子树 🔒"),s(o)])]),L,n("td",V,[s(a,{to:"/tag/tree.html"},{default:e(()=>[I]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[B]),_:1}),t(),s(a,{to:"/tag/binary-tree.html"},{default:e(()=>[z]),_:1})]),n("td",M,[s(c,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])]),n("tr",null,[O,n("td",A,[n("a",G,[t("出现次数最多的子树元素和"),s(o)])]),D,n("td",F,[s(a,{to:"/tag/tree.html"},{default:e(()=>[H]),_:1}),t(),s(a,{to:"/tag/depth-first-search.html"},{default:e(()=>[J]),_:1}),t(),s(a,{to:"/tag/hash-table.html"},{default:e(()=>[K]),_:1}),t(),P]),n("td",Q,[s(c,{color:"#ffb800"},{default:e(()=>[t("Medium")]),_:1})])])])])])}const Z=r(k,[["render",U],["__file","0572.html.vue"]]);export{Z as default};
