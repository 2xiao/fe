import{_ as i,r as _,o as a,c,a as t,b as e,w as o,d as l,f as u}from"./app-ynO5B_DP.js";const h={},r=t("h1",{id:"双向链表",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#双向链表","aria-hidden":"true"},"#"),l(" 双向链表")],-1),f={class:"hint-container details"},g=t("summary",null,"全部标签",-1),m=t("p",null,[t("strong",null,"数据结构")],-1),y=t("code",null,"数组",-1),b=t("code",null,"矩阵",-1),p=t("code",null,"链表",-1),x=t("span",{class:"blue"},"双向链表",-1),k=t("code",null,"栈",-1),I=t("code",null,"单调栈",-1),v=t("code",null,"队列",-1),M=t("code",null,"单调队列",-1),L=t("code",null,"堆（优先队列）",-1),w=t("code",null,"哈希表",-1),q=t("code",null,"字符串",-1),O=t("code",null,"字符串匹配",-1),z=t("code",null,"树",-1),E=t("code",null,"二叉树",-1),H=t("code",null,"二叉搜索树",-1),N=t("code",null,"最小生成树",-1),R=t("code",null,"图",-1),V=t("code",null,"有序集合",-1),j=t("code",null,"拓扑排序",-1),B=t("code",null,"最短路",-1),C=t("code",null,"强连通分量",-1),U=t("code",null,"欧拉回路",-1),D=t("code",null,"双连通分量",-1),F=t("code",null,"并查集",-1),Q=t("code",null,"字典树",-1),T=t("code",null,"线段树",-1),X=t("code",null,"树状数组",-1),A=t("code",null,"后缀数组",-1),G=t("p",null,[t("strong",null,"算法")],-1),J=t("code",null,"枚举",-1),K=t("code",null,"递归",-1),P=t("code",null,"分治",-1),S=t("code",null,"回溯",-1),W=t("code",null,"贪心",-1),Y=t("code",null,"动态规划",-1),Z=t("code",null,"排序",-1),$=t("code",null,"桶排序",-1),tt=t("code",null,"计数排序",-1),et=t("code",null,"基数排序",-1),lt=t("code",null,"归并排序",-1),ot=t("code",null,"快速选择",-1),nt=t("code",null,"二分查找",-1),st=t("code",null,"记忆化搜索",-1),dt=t("code",null,"深度优先搜索",-1),_t=t("code",null,"广度优先搜索",-1),it=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),ut=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),rt=t("code",null,"状态压缩",-1),ft=t("code",null,"哈希函数",-1),gt=t("code",null,"滚动哈希",-1),mt=t("code",null,"扫描线",-1),yt=t("p",null,[t("strong",null,"其他")],-1),bt=t("code",null,"数学",-1),pt=t("code",null,"数论",-1),xt=t("code",null,"几何",-1),kt=t("code",null,"博弈",-1),It=t("code",null,"模拟",-1),vt=t("code",null,"组合数学",-1),Mt=t("code",null,"随机化",-1),Lt=t("code",null,"概率与统计",-1),wt=t("code",null,"水塘抽样",-1),qt=t("code",null,"拒绝采样",-1),Ot=t("code",null,"数据库",-1),zt=t("code",null,"设计",-1),Et=t("code",null,"数据流",-1),Ht=t("code",null,"脑筋急转弯",-1),Nt=t("code",null,"交互",-1),Rt=t("code",null,"迭代器",-1),Vt=t("code",null,"多线程",-1),jt=t("hr",null,null,-1),Bt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Ct=t("td",{style:{"text-align":"center"}},"146",-1),Ut={style:{"text-align":"left"}},Dt={href:"https://leetcode.com/problems/lru-cache",target:"_blank",rel:"noopener noreferrer"},Ft={style:{"text-align":"center"}},Qt={href:"/problem/0146",target:"_blank",rel:"noopener noreferrer"},Tt={style:{"text-align":"left"}},Xt=t("code",null,"设计",-1),At=t("code",null,"哈希表",-1),Gt=t("code",null,"链表",-1),Jt=t("code",null,"1+",-1),Kt={style:{"text-align":"left"}},Pt=t("td",{style:{"text-align":"center"}},"426",-1),St={style:{"text-align":"left"}},Wt={href:"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},Yt={style:{"text-align":"center"}},Zt={href:"/problem/0426",target:"_blank",rel:"noopener noreferrer"},$t={style:{"text-align":"left"}},te=t("code",null,"栈",-1),ee=t("code",null,"树",-1),le=t("code",null,"深度优先搜索",-1),oe=t("code",null,"4+",-1),ne={style:{"text-align":"left"}},se=t("td",{style:{"text-align":"center"}},"430",-1),de={style:{"text-align":"left"}},_e={href:"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list",target:"_blank",rel:"noopener noreferrer"},ie={style:{"text-align":"center"}},ae={href:"/problem/0430",target:"_blank",rel:"noopener noreferrer"},ce={style:{"text-align":"left"}},ue=t("code",null,"深度优先搜索",-1),he=t("code",null,"链表",-1),re=t("code",null,"双向链表",-1),fe={style:{"text-align":"left"}},ge=t("td",{style:{"text-align":"center"}},"432",-1),me={style:{"text-align":"left"}},ye={href:"https://leetcode.com/problems/all-oone-data-structure",target:"_blank",rel:"noopener noreferrer"},be={style:{"text-align":"center"}},pe={href:"/problem/0432",target:"_blank",rel:"noopener noreferrer"},xe={style:{"text-align":"left"}},ke=t("code",null,"设计",-1),Ie=t("code",null,"哈希表",-1),ve=t("code",null,"链表",-1),Me=t("code",null,"1+",-1),Le={style:{"text-align":"left"}},we=t("td",{style:{"text-align":"center"}},"460",-1),qe={style:{"text-align":"left"}},Oe={href:"https://leetcode.com/problems/lfu-cache",target:"_blank",rel:"noopener noreferrer"},ze=t("td",{style:{"text-align":"center"}},null,-1),Ee={style:{"text-align":"left"}},He=t("code",null,"设计",-1),Ne=t("code",null,"哈希表",-1),Re=t("code",null,"链表",-1),Ve=t("code",null,"1+",-1),je={style:{"text-align":"left"}},Be=t("td",{style:{"text-align":"center"}},"716",-1),Ce={style:{"text-align":"left"}},Ue={href:"https://leetcode.com/problems/max-stack",target:"_blank",rel:"noopener noreferrer"},De=t("td",{style:{"text-align":"center"}},null,-1),Fe={style:{"text-align":"left"}},Qe=t("code",null,"栈",-1),Te=t("code",null,"设计",-1),Xe=t("code",null,"链表",-1),Ae=t("code",null,"2+",-1),Ge={style:{"text-align":"left"}},Je=t("td",{style:{"text-align":"center"}},"1472",-1),Ke={style:{"text-align":"left"}},Pe={href:"https://leetcode.com/problems/design-browser-history",target:"_blank",rel:"noopener noreferrer"},Se={style:{"text-align":"center"}},We={href:"/problem/1472",target:"_blank",rel:"noopener noreferrer"},Ye={style:{"text-align":"left"}},Ze=t("code",null,"栈",-1),$e=t("code",null,"设计",-1),tl=t("code",null,"数组",-1),el=t("code",null,"3+",-1),ll={style:{"text-align":"left"}},ol=t("td",{style:{"text-align":"center"}},"1797",-1),nl={style:{"text-align":"left"}},sl={href:"https://leetcode.com/problems/design-authentication-manager",target:"_blank",rel:"noopener noreferrer"},dl=t("td",{style:{"text-align":"center"}},null,-1),_l={style:{"text-align":"left"}},il=t("code",null,"设计",-1),al=t("code",null,"哈希表",-1),cl=t("code",null,"链表",-1),ul=t("code",null,"1+",-1),hl={style:{"text-align":"left"}},rl=t("td",{style:{"text-align":"center"}},"2296",-1),fl={style:{"text-align":"left"}},gl={href:"https://leetcode.com/problems/design-a-text-editor",target:"_blank",rel:"noopener noreferrer"},ml=t("td",{style:{"text-align":"center"}},null,-1),yl={style:{"text-align":"left"}},bl=t("code",null,"栈",-1),pl=t("code",null,"设计",-1),xl=t("code",null,"链表",-1),kl=t("code",null,"3+",-1),Il={style:{"text-align":"left"}},vl=t("td",{style:{"text-align":"center"}},"3263",-1),Ml={style:{"text-align":"left"}},Ll={href:"https://leetcode.com/problems/convert-doubly-linked-list-to-array-i",target:"_blank",rel:"noopener noreferrer"},wl=t("td",{style:{"text-align":"center"}},null,-1),ql={style:{"text-align":"left"}},Ol=t("code",null,"数组",-1),zl=t("code",null,"链表",-1),El=t("code",null,"双向链表",-1),Hl={style:{"text-align":"left"}},Nl=t("td",{style:{"text-align":"center"}},"3294",-1),Rl={style:{"text-align":"left"}},Vl={href:"https://leetcode.com/problems/convert-doubly-linked-list-to-array-ii",target:"_blank",rel:"noopener noreferrer"},jl=t("td",{style:{"text-align":"center"}},null,-1),Bl={style:{"text-align":"left"}},Cl=t("code",null,"数组",-1),Ul=t("code",null,"链表",-1),Dl=t("code",null,"双向链表",-1),Fl={style:{"text-align":"left"}},Ql=t("td",{style:{"text-align":"center"}},"剑指 Offer 36",-1),Tl={style:{"text-align":"left"}},Xl={href:"https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof",target:"_blank",rel:"noopener noreferrer"},Al={style:{"text-align":"center"}},Gl={href:"/problem/jz_offer_36_1",target:"_blank",rel:"noopener noreferrer"},Jl={style:{"text-align":"left"}},Kl=t("code",null,"栈",-1),Pl=t("code",null,"树",-1),Sl=t("code",null,"深度优先搜索",-1),Wl=t("code",null,"4+",-1),Yl={style:{"text-align":"left"}},Zl=t("td",{style:{"text-align":"center"}},"剑指 Offer II 28",-1),$l={style:{"text-align":"left"}},to={href:"https://leetcode.cn/problems/Qv1Da2",target:"_blank",rel:"noopener noreferrer"},eo=t("td",{style:{"text-align":"center"}},null,-1),lo={style:{"text-align":"left"}},oo=t("code",null,"深度优先搜索",-1),no=t("code",null,"链表",-1),so=t("code",null,"双向链表",-1),_o={style:{"text-align":"left"}},io=t("td",{style:{"text-align":"center"}},"剑指 Offer II 31",-1),ao={style:{"text-align":"left"}},co={href:"https://leetcode.cn/problems/OrIXps",target:"_blank",rel:"noopener noreferrer"},uo={style:{"text-align":"center"}},ho={href:"/problem/jz_offer_II_031",target:"_blank",rel:"noopener noreferrer"},ro={style:{"text-align":"left"}},fo=t("code",null,"设计",-1),go=t("code",null,"哈希表",-1),mo=t("code",null,"链表",-1),yo=t("code",null,"1+",-1),bo={style:{"text-align":"left"}},po=t("td",{style:{"text-align":"center"}},"面试题 16.25",-1),xo={style:{"text-align":"left"}},ko={href:"https://leetcode.cn/problems/lru-cache-lcci",target:"_blank",rel:"noopener noreferrer"},Io={style:{"text-align":"center"}},vo={href:"/problem/i_16.25",target:"_blank",rel:"noopener noreferrer"},Mo={style:{"text-align":"left"}},Lo=t("code",null,"设计",-1),wo=t("code",null,"哈希表",-1),qo=t("code",null,"链表",-1),Oo=t("code",null,"1+",-1),zo={style:{"text-align":"left"}};function Eo(Ho,No){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return a(),c("div",null,[r,t("details",f,[g,m,t("p",null,[e(n,{to:"/outline/tag/array.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/outline/tag/matrix.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[p]),_:1}),l(),x,l(),e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[k]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-stack.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/outline/tag/queue.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/outline/tag/monotonic-queue.html"},{default:o(()=>[M]),_:1}),l(),e(n,{to:"/outline/tag/heap-priority-queue.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/outline/tag/string.html"},{default:o(()=>[q]),_:1}),l(),e(n,{to:"/outline/tag/string-matching.html"},{default:o(()=>[O]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[z]),_:1}),l(),e(n,{to:"/outline/tag/binary-tree.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/outline/tag/binary-search-tree.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/outline/tag/minimum-spanning-tree.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/outline/tag/graph.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/outline/tag/ordered-set.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/outline/tag/topological-sort.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/outline/tag/shortest-path.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/outline/tag/strongly-connected-component.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/outline/tag/eulerian-circuit.html"},{default:o(()=>[U]),_:1}),l(),e(n,{to:"/outline/tag/biconnected-component.html"},{default:o(()=>[D]),_:1}),l(),e(n,{to:"/outline/tag/union-find.html"},{default:o(()=>[F]),_:1}),l(),e(n,{to:"/outline/tag/trie.html"},{default:o(()=>[Q]),_:1}),l(),e(n,{to:"/outline/tag/segment-tree.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/outline/tag/binary-indexed-tree.html"},{default:o(()=>[X]),_:1}),l(),e(n,{to:"/outline/tag/suffix-array.html"},{default:o(()=>[A]),_:1})]),G,t("p",null,[e(n,{to:"/outline/tag/enumeration.html"},{default:o(()=>[J]),_:1}),l(),e(n,{to:"/outline/tag/recursion.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/outline/tag/divide-and-conquer.html"},{default:o(()=>[P]),_:1}),l(),e(n,{to:"/outline/tag/backtracking.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/outline/tag/greedy.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/outline/tag/dynamic-programming.html"},{default:o(()=>[Y]),_:1}),l(),e(n,{to:"/outline/tag/sorting.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/outline/tag/bucket-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/outline/tag/counting-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/outline/tag/radix-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/outline/tag/merge-sort.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/outline/tag/quickselect.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/outline/tag/binary-search.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/outline/tag/memoization.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/outline/tag/breadth-first-search.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/outline/tag/two-pointers.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/outline/tag/bit-manipulation.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/outline/tag/prefix-sum.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/outline/tag/counting.html"},{default:o(()=>[ut]),_:1}),l(),e(n,{to:"/outline/tag/sliding-window.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/outline/tag/bitmask.html"},{default:o(()=>[rt]),_:1}),l(),e(n,{to:"/outline/tag/hash-function.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/outline/tag/rolling-hash.html"},{default:o(()=>[gt]),_:1}),l(),e(n,{to:"/outline/tag/line-sweep.html"},{default:o(()=>[mt]),_:1})]),yt,t("p",null,[e(n,{to:"/outline/tag/math.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/outline/tag/number-theory.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/outline/tag/geometry.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/outline/tag/game-theory.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/outline/tag/simulation.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/outline/tag/combinatorics.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/outline/tag/randomized.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/outline/tag/probability-and-statistics.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/outline/tag/reservoir-sampling.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/outline/tag/rejection-sampling.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/outline/tag/database.html"},{default:o(()=>[Ot]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/outline/tag/data-stream.html"},{default:o(()=>[Et]),_:1}),l(),e(n,{to:"/outline/tag/brainteaser.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/outline/tag/interactive.html"},{default:o(()=>[Nt]),_:1}),l(),e(n,{to:"/outline/tag/iterator.html"},{default:o(()=>[Rt]),_:1}),l(),e(n,{to:"/outline/tag/concurrency.html"},{default:o(()=>[Vt]),_:1})])]),jt,u(" prettier-ignore "),t("table",null,[Bt,t("tbody",null,[t("tr",null,[Ct,t("td",Ut,[t("a",Dt,[l("LRU 缓存"),e(s)])]),t("td",Ft,[t("a",Qt,[l("[✓]"),e(s)])]),t("td",Tt,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Xt]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[At]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[Gt]),_:1}),l(),Jt]),t("td",Kt,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Pt,t("td",St,[t("a",Wt,[l("将二叉搜索树转化为排序的双向链表"),e(s)])]),t("td",Yt,[t("a",Zt,[l("[✓]"),e(s)])]),t("td",$t,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[te]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[ee]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[le]),_:1}),l(),oe]),t("td",ne,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[se,t("td",de,[t("a",_e,[l("扁平化多级双向链表"),e(s)])]),t("td",ie,[t("a",ae,[l("[✓]"),e(s)])]),t("td",ce,[e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[ue]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[he]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[re]),_:1})]),t("td",fe,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ge,t("td",me,[t("a",ye,[l("全 O(1) 的数据结构"),e(s)])]),t("td",be,[t("a",pe,[l("[✓]"),e(s)])]),t("td",xe,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[ke]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Ie]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[ve]),_:1}),l(),Me]),t("td",Le,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[we,t("td",qe,[t("a",Oe,[l("LFU 缓存"),e(s)])]),ze,t("td",Ee,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[He]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[Ne]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[Re]),_:1}),l(),Ve]),t("td",je,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Be,t("td",Ce,[t("a",Ue,[l("最大栈"),e(s)])]),De,t("td",Fe,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Qe]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Te]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[Xe]),_:1}),l(),Ae]),t("td",Ge,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Je,t("td",Ke,[t("a",Pe,[l("设计浏览器历史记录"),e(s)])]),t("td",Se,[t("a",We,[l("[✓]"),e(s)])]),t("td",Ye,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Ze]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[$e]),_:1}),l(),e(n,{to:"/outline/tag/array.html"},{default:o(()=>[tl]),_:1}),l(),el]),t("td",ll,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[ol,t("td",nl,[t("a",sl,[l("设计一个验证系统"),e(s)])]),dl,t("td",_l,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[il]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[al]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[cl]),_:1}),l(),ul]),t("td",hl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[rl,t("td",fl,[t("a",gl,[l("设计一个文本编辑器"),e(s)])]),ml,t("td",yl,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[bl]),_:1}),l(),e(n,{to:"/outline/tag/design.html"},{default:o(()=>[pl]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[xl]),_:1}),l(),kl]),t("td",Il,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[vl,t("td",Ml,[t("a",Ll,[l("将双链表转换为数组 I"),e(s)])]),wl,t("td",ql,[e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Ol]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[zl]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[El]),_:1})]),t("td",Hl,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Nl,t("td",Rl,[t("a",Vl,[l("将双链表转换为数组 II"),e(s)])]),jl,t("td",Bl,[e(n,{to:"/outline/tag/array.html"},{default:o(()=>[Cl]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[Ul]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[Dl]),_:1})]),t("td",Fl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ql,t("td",Tl,[t("a",Xl,[l("二叉搜索树与双向链表"),e(s)])]),t("td",Al,[t("a",Gl,[l("[✓]"),e(s)])]),t("td",Jl,[e(n,{to:"/outline/tag/stack.html"},{default:o(()=>[Kl]),_:1}),l(),e(n,{to:"/outline/tag/tree.html"},{default:o(()=>[Pl]),_:1}),l(),e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[Sl]),_:1}),l(),Wl]),t("td",Yl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Zl,t("td",$l,[t("a",to,[l("展平多级双向链表"),e(s)])]),eo,t("td",lo,[e(n,{to:"/outline/tag/depth-first-search.html"},{default:o(()=>[oo]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[no]),_:1}),l(),e(n,{to:"/outline/tag/doubly-linked-list.html"},{default:o(()=>[so]),_:1})]),t("td",_o,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[io,t("td",ao,[t("a",co,[l("最近最少使用缓存"),e(s)])]),t("td",uo,[t("a",ho,[l("[✓]"),e(s)])]),t("td",ro,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[fo]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[go]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[mo]),_:1}),l(),yo]),t("td",bo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[po,t("td",xo,[t("a",ko,[l("LRU 缓存"),e(s)])]),t("td",Io,[t("a",vo,[l("[✓]"),e(s)])]),t("td",Mo,[e(n,{to:"/outline/tag/design.html"},{default:o(()=>[Lo]),_:1}),l(),e(n,{to:"/outline/tag/hash-table.html"},{default:o(()=>[wo]),_:1}),l(),e(n,{to:"/outline/tag/linked-list.html"},{default:o(()=>[qo]),_:1}),l(),Oo]),t("td",zo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])])])])])}const Vo=i(h,[["render",Eo],["__file","doubly-linked-list.html.vue"]]);export{Vo as default};
