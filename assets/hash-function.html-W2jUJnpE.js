import{_ as a,r as _,o as c,c as i,a as t,d as e,w as o,b as l,f as h}from"./app-psZYpgY9.js";const r={},u=t("h1",{id:"哈希函数",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#哈希函数","aria-hidden":"true"},"#"),l(" 哈希函数")],-1),f=t("summary",null,"全部标签",-1),g=t("p",null,[t("strong",null,"数据结构")],-1),m=t("code",null,"数组",-1),y=t("code",null,"矩阵",-1),x=t("code",null,"链表",-1),b=t("code",null,"双向链表",-1),p=t("code",null,"栈",-1),k=t("code",null,"单调栈",-1),I=t("code",null,"队列",-1),w=t("code",null,"单调队列",-1),H=t("code",null,"堆（优先队列）",-1),M=t("code",null,"哈希表",-1),v=t("code",null,"字符串",-1),q=t("code",null,"字符串匹配",-1),E=t("code",null,"树",-1),L=t("code",null,"二叉树",-1),N=t("code",null,"二叉搜索树",-1),z=t("code",null,"最小生成树",-1),V=t("code",null,"图",-1),B=t("code",null,"有序集合",-1),C=t("code",null,"拓扑排序",-1),R=t("code",null,"最短路",-1),K=t("code",null,"强连通分量",-1),T=t("code",null,"欧拉回路",-1),j=t("code",null,"双连通分量",-1),A=t("code",null,"并查集",-1),D=t("code",null,"字典树",-1),F=t("code",null,"线段树",-1),U=t("code",null,"树状数组",-1),G=t("code",null,"后缀数组",-1),J=t("p",null,[t("strong",null,"算法")],-1),O=t("code",null,"枚举",-1),P=t("code",null,"递归",-1),Q=t("code",null,"分治",-1),S=t("code",null,"回溯",-1),W=t("code",null,"贪心",-1),X=t("code",null,"动态规划",-1),Y=t("code",null,"排序",-1),Z=t("code",null,"桶排序",-1),$=t("code",null,"计数排序",-1),tt=t("code",null,"基数排序",-1),et=t("code",null,"归并排序",-1),lt=t("code",null,"快速选择",-1),ot=t("code",null,"二分查找",-1),nt=t("code",null,"记忆化搜索",-1),st=t("code",null,"深度优先搜索",-1),dt=t("code",null,"广度优先搜索",-1),_t=t("code",null,"双指针",-1),at=t("code",null,"位运算",-1),ct=t("code",null,"前缀和",-1),it=t("code",null,"计数",-1),ht=t("code",null,"滑动窗口",-1),rt=t("code",null,"状态压缩",-1),ut=t("span",{class:"blue"},"哈希函数",-1),ft=t("code",null,"滚动哈希",-1),gt=t("code",null,"扫描线",-1),mt=t("p",null,[t("strong",null,"其他")],-1),yt=t("code",null,"数学",-1),xt=t("code",null,"数论",-1),bt=t("code",null,"几何",-1),pt=t("code",null,"博弈",-1),kt=t("code",null,"模拟",-1),It=t("code",null,"组合数学",-1),wt=t("code",null,"随机化",-1),Ht=t("code",null,"概率与统计",-1),Mt=t("code",null,"水塘抽样",-1),vt=t("code",null,"拒绝采样",-1),qt=t("code",null,"数据库",-1),Et=t("code",null,"设计",-1),Lt=t("code",null,"数据流",-1),Nt=t("code",null,"脑筋急转弯",-1),zt=t("code",null,"交互",-1),Vt=t("code",null,"迭代器",-1),Bt=t("code",null,"多线程",-1),Ct=t("hr",null,null,-1),Rt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"题号"),t("th",{style:{"text-align":"left"}},"标题"),t("th",{style:{"text-align":"center"}},"题解"),t("th",{style:{"text-align":"left"}},"标签"),t("th",{style:{"text-align":"left"}},"难度")])],-1),Kt=t("td",{style:{"text-align":"center"}},"187",-1),Tt={style:{"text-align":"left"}},jt={href:"https://leetcode.com/problems/repeated-dna-sequences",target:"_blank",rel:"noopener noreferrer"},At=t("td",{style:{"text-align":"center"}},null,-1),Dt={style:{"text-align":"left"}},Ft=t("code",null,"位运算",-1),Ut=t("code",null,"哈希表",-1),Gt=t("code",null,"字符串",-1),Jt=t("code",null,"3+",-1),Ot={style:{"text-align":"left"}},Pt=t("td",{style:{"text-align":"center"}},"214",-1),Qt={style:{"text-align":"left"}},St={href:"https://leetcode.com/problems/shortest-palindrome",target:"_blank",rel:"noopener noreferrer"},Wt=t("td",{style:{"text-align":"center"}},null,-1),Xt={style:{"text-align":"left"}},Yt=t("code",null,"字符串",-1),Zt=t("code",null,"字符串匹配",-1),$t=t("code",null,"哈希函数",-1),te=t("code",null,"1+",-1),ee={style:{"text-align":"left"}},le=t("td",{style:{"text-align":"center"}},"535",-1),oe={style:{"text-align":"left"}},ne={href:"https://leetcode.com/problems/encode-and-decode-tinyurl",target:"_blank",rel:"noopener noreferrer"},se=t("td",{style:{"text-align":"center"}},null,-1),de={style:{"text-align":"left"}},_e=t("code",null,"设计",-1),ae=t("code",null,"哈希表",-1),ce=t("code",null,"字符串",-1),ie=t("code",null,"1+",-1),he={style:{"text-align":"left"}},re=t("td",{style:{"text-align":"center"}},"572",-1),ue={style:{"text-align":"left"}},fe={href:"https://leetcode.com/problems/subtree-of-another-tree",target:"_blank",rel:"noopener noreferrer"},ge={style:{"text-align":"center"}},me={style:{"text-align":"left"}},ye=t("code",null,"树",-1),xe=t("code",null,"深度优先搜索",-1),be=t("code",null,"二叉树",-1),pe=t("code",null,"2+",-1),ke={style:{"text-align":"left"}},Ie=t("td",{style:{"text-align":"center"}},"694",-1),we={style:{"text-align":"left"}},He={href:"https://leetcode.com/problems/number-of-distinct-islands",target:"_blank",rel:"noopener noreferrer"},Me=t("td",{style:{"text-align":"center"}},null,-1),ve={style:{"text-align":"left"}},qe=t("code",null,"深度优先搜索",-1),Ee=t("code",null,"广度优先搜索",-1),Le=t("code",null,"并查集",-1),Ne=t("code",null,"2+",-1),ze={style:{"text-align":"left"}},Ve=t("td",{style:{"text-align":"center"}},"705",-1),Be={style:{"text-align":"left"}},Ce={href:"https://leetcode.com/problems/design-hashset",target:"_blank",rel:"noopener noreferrer"},Re={style:{"text-align":"center"}},Ke={style:{"text-align":"left"}},Te=t("code",null,"设计",-1),je=t("code",null,"数组",-1),Ae=t("code",null,"哈希表",-1),De=t("code",null,"2+",-1),Fe={style:{"text-align":"left"}},Ue=t("td",{style:{"text-align":"center"}},"706",-1),Ge={style:{"text-align":"left"}},Je={href:"https://leetcode.com/problems/design-hashmap",target:"_blank",rel:"noopener noreferrer"},Oe={style:{"text-align":"center"}},Pe={style:{"text-align":"left"}},Qe=t("code",null,"设计",-1),Se=t("code",null,"数组",-1),We=t("code",null,"哈希表",-1),Xe=t("code",null,"2+",-1),Ye={style:{"text-align":"left"}},Ze=t("td",{style:{"text-align":"center"}},"711",-1),$e={style:{"text-align":"left"}},tl={href:"https://leetcode.com/problems/number-of-distinct-islands-ii",target:"_blank",rel:"noopener noreferrer"},el=t("td",{style:{"text-align":"center"}},null,-1),ll={style:{"text-align":"left"}},ol=t("code",null,"深度优先搜索",-1),nl=t("code",null,"广度优先搜索",-1),sl=t("code",null,"并查集",-1),dl=t("code",null,"2+",-1),_l={style:{"text-align":"left"}},al=t("td",{style:{"text-align":"center"}},"718",-1),cl={style:{"text-align":"left"}},il={href:"https://leetcode.com/problems/maximum-length-of-repeated-subarray",target:"_blank",rel:"noopener noreferrer"},hl=t("td",{style:{"text-align":"center"}},null,-1),rl={style:{"text-align":"left"}},ul=t("code",null,"数组",-1),fl=t("code",null,"二分查找",-1),gl=t("code",null,"动态规划",-1),ml=t("code",null,"3+",-1),yl={style:{"text-align":"left"}},xl=t("td",{style:{"text-align":"center"}},"1044",-1),bl={style:{"text-align":"left"}},pl={href:"https://leetcode.com/problems/longest-duplicate-substring",target:"_blank",rel:"noopener noreferrer"},kl=t("td",{style:{"text-align":"center"}},null,-1),Il={style:{"text-align":"left"}},wl=t("code",null,"字符串",-1),Hl=t("code",null,"二分查找",-1),Ml=t("code",null,"后缀数组",-1),vl=t("code",null,"3+",-1),ql={style:{"text-align":"left"}},El=t("td",{style:{"text-align":"center"}},"1062",-1),Ll={style:{"text-align":"left"}},Nl={href:"https://leetcode.com/problems/longest-repeating-substring",target:"_blank",rel:"noopener noreferrer"},zl=t("td",{style:{"text-align":"center"}},null,-1),Vl={style:{"text-align":"left"}},Bl=t("code",null,"字符串",-1),Cl=t("code",null,"二分查找",-1),Rl=t("code",null,"动态规划",-1),Kl=t("code",null,"3+",-1),Tl={style:{"text-align":"left"}},jl=t("td",{style:{"text-align":"center"}},"1147",-1),Al={style:{"text-align":"left"}},Dl={href:"https://leetcode.com/problems/longest-chunked-palindrome-decomposition",target:"_blank",rel:"noopener noreferrer"},Fl=t("td",{style:{"text-align":"center"}},null,-1),Ul={style:{"text-align":"left"}},Gl=t("code",null,"贪心",-1),Jl=t("code",null,"双指针",-1),Ol=t("code",null,"字符串",-1),Pl=t("code",null,"3+",-1),Ql={style:{"text-align":"left"}},Sl=t("td",{style:{"text-align":"center"}},"1316",-1),Wl={style:{"text-align":"left"}},Xl={href:"https://leetcode.com/problems/distinct-echo-substrings",target:"_blank",rel:"noopener noreferrer"},Yl=t("td",{style:{"text-align":"center"}},null,-1),Zl={style:{"text-align":"left"}},$l=t("code",null,"字典树",-1),to=t("code",null,"字符串",-1),eo=t("code",null,"哈希函数",-1),lo=t("code",null,"1+",-1),oo={style:{"text-align":"left"}},no=t("td",{style:{"text-align":"center"}},"1392",-1),so={style:{"text-align":"left"}},_o={href:"https://leetcode.com/problems/longest-happy-prefix",target:"_blank",rel:"noopener noreferrer"},ao=t("td",{style:{"text-align":"center"}},null,-1),co={style:{"text-align":"left"}},io=t("code",null,"字符串",-1),ho=t("code",null,"字符串匹配",-1),ro=t("code",null,"哈希函数",-1),uo=t("code",null,"1+",-1),fo={style:{"text-align":"left"}},go=t("td",{style:{"text-align":"center"}},"1461",-1),mo={style:{"text-align":"left"}},yo={href:"https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k",target:"_blank",rel:"noopener noreferrer"},xo=t("td",{style:{"text-align":"center"}},null,-1),bo={style:{"text-align":"left"}},po=t("code",null,"位运算",-1),ko=t("code",null,"哈希表",-1),Io=t("code",null,"字符串",-1),wo=t("code",null,"2+",-1),Ho={style:{"text-align":"left"}},Mo=t("td",{style:{"text-align":"center"}},"1554",-1),vo={style:{"text-align":"left"}},qo={href:"https://leetcode.com/problems/strings-differ-by-one-character",target:"_blank",rel:"noopener noreferrer"},Eo=t("td",{style:{"text-align":"center"}},null,-1),Lo={style:{"text-align":"left"}},No=t("code",null,"哈希表",-1),zo=t("code",null,"字符串",-1),Vo=t("code",null,"哈希函数",-1),Bo=t("code",null,"1+",-1),Co={style:{"text-align":"left"}},Ro=t("td",{style:{"text-align":"center"}},"1698",-1),Ko={style:{"text-align":"left"}},To={href:"https://leetcode.com/problems/number-of-distinct-substrings-in-a-string",target:"_blank",rel:"noopener noreferrer"},jo=t("td",{style:{"text-align":"center"}},null,-1),Ao={style:{"text-align":"left"}},Do=t("code",null,"字典树",-1),Fo=t("code",null,"字符串",-1),Uo=t("code",null,"后缀数组",-1),Go=t("code",null,"2+",-1),Jo={style:{"text-align":"left"}},Oo=t("td",{style:{"text-align":"center"}},"1923",-1),Po={style:{"text-align":"left"}},Qo={href:"https://leetcode.com/problems/longest-common-subpath",target:"_blank",rel:"noopener noreferrer"},So=t("td",{style:{"text-align":"center"}},null,-1),Wo={style:{"text-align":"left"}},Xo=t("code",null,"数组",-1),Yo=t("code",null,"二分查找",-1),Zo=t("code",null,"后缀数组",-1),$o=t("code",null,"2+",-1),tn={style:{"text-align":"left"}},en=t("td",{style:{"text-align":"center"}},"1948",-1),ln={style:{"text-align":"left"}},on={href:"https://leetcode.com/problems/delete-duplicate-folders-in-system",target:"_blank",rel:"noopener noreferrer"},nn=t("td",{style:{"text-align":"center"}},null,-1),sn={style:{"text-align":"left"}},dn=t("code",null,"字典树",-1),_n=t("code",null,"数组",-1),an=t("code",null,"哈希表",-1),cn=t("code",null,"2+",-1),hn={style:{"text-align":"left"}},rn=t("td",{style:{"text-align":"center"}},"1960",-1),un={style:{"text-align":"left"}},fn={href:"https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-substrings",target:"_blank",rel:"noopener noreferrer"},gn=t("td",{style:{"text-align":"center"}},null,-1),mn={style:{"text-align":"left"}},yn=t("code",null,"字符串",-1),xn=t("code",null,"哈希函数",-1),bn=t("code",null,"滚动哈希",-1),pn={style:{"text-align":"left"}},kn=t("td",{style:{"text-align":"center"}},"2156",-1),In={style:{"text-align":"left"}},wn={href:"https://leetcode.com/problems/find-substring-with-given-hash-value",target:"_blank",rel:"noopener noreferrer"},Hn=t("td",{style:{"text-align":"center"}},null,-1),Mn={style:{"text-align":"left"}},vn=t("code",null,"字符串",-1),qn=t("code",null,"滑动窗口",-1),En=t("code",null,"哈希函数",-1),Ln=t("code",null,"1+",-1),Nn={style:{"text-align":"left"}},zn=t("td",{style:{"text-align":"center"}},"2168",-1),Vn={style:{"text-align":"left"}},Bn={href:"https://leetcode.com/problems/unique-substrings-with-equal-digit-frequency",target:"_blank",rel:"noopener noreferrer"},Cn=t("td",{style:{"text-align":"center"}},null,-1),Rn={style:{"text-align":"left"}},Kn=t("code",null,"哈希表",-1),Tn=t("code",null,"字符串",-1),jn=t("code",null,"计数",-1),An=t("code",null,"2+",-1),Dn={style:{"text-align":"left"}},Fn=t("td",{style:{"text-align":"center"}},"2223",-1),Un={style:{"text-align":"left"}},Gn={href:"https://leetcode.com/problems/sum-of-scores-of-built-strings",target:"_blank",rel:"noopener noreferrer"},Jn=t("td",{style:{"text-align":"center"}},null,-1),On={style:{"text-align":"left"}},Pn=t("code",null,"字符串",-1),Qn=t("code",null,"二分查找",-1),Sn=t("code",null,"字符串匹配",-1),Wn=t("code",null,"3+",-1),Xn={style:{"text-align":"left"}},Yn=t("td",{style:{"text-align":"center"}},"2261",-1),Zn={style:{"text-align":"left"}},$n={href:"https://leetcode.com/problems/k-divisible-elements-subarrays",target:"_blank",rel:"noopener noreferrer"},ts={style:{"text-align":"center"}},es={style:{"text-align":"left"}},ls=t("code",null,"字典树",-1),os=t("code",null,"数组",-1),ns=t("code",null,"哈希表",-1),ss=t("code",null,"3+",-1),ds={style:{"text-align":"left"}},_s=t("td",{style:{"text-align":"center"}},"2430",-1),as={style:{"text-align":"left"}},cs={href:"https://leetcode.com/problems/maximum-deletions-on-a-string",target:"_blank",rel:"noopener noreferrer"},is=t("td",{style:{"text-align":"center"}},null,-1),hs={style:{"text-align":"left"}},rs=t("code",null,"字符串",-1),us=t("code",null,"动态规划",-1),fs=t("code",null,"字符串匹配",-1),gs=t("code",null,"2+",-1),ms={style:{"text-align":"left"}},ys=t("td",{style:{"text-align":"center"}},"3006",-1),xs={style:{"text-align":"left"}},bs={href:"https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-i",target:"_blank",rel:"noopener noreferrer"},ps=t("td",{style:{"text-align":"center"}},null,-1),ks={style:{"text-align":"left"}},Is=t("code",null,"双指针",-1),ws=t("code",null,"字符串",-1),Hs=t("code",null,"二分查找",-1),Ms=t("code",null,"3+",-1),vs={style:{"text-align":"left"}},qs=t("td",{style:{"text-align":"center"}},"3008",-1),Es={style:{"text-align":"left"}},Ls={href:"https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-ii",target:"_blank",rel:"noopener noreferrer"},Ns=t("td",{style:{"text-align":"center"}},null,-1),zs={style:{"text-align":"left"}},Vs=t("code",null,"双指针",-1),Bs=t("code",null,"字符串",-1),Cs=t("code",null,"二分查找",-1),Rs=t("code",null,"3+",-1),Ks={style:{"text-align":"left"}},Ts=t("td",{style:{"text-align":"center"}},"3023",-1),js={style:{"text-align":"left"}},As={href:"https://leetcode.com/problems/find-pattern-in-infinite-stream-i",target:"_blank",rel:"noopener noreferrer"},Ds=t("td",{style:{"text-align":"center"}},null,-1),Fs={style:{"text-align":"left"}},Us=t("code",null,"数组",-1),Gs=t("code",null,"字符串匹配",-1),Js=t("code",null,"滑动窗口",-1),Os=t("code",null,"2+",-1),Ps={style:{"text-align":"left"}},Qs=t("td",{style:{"text-align":"center"}},"3029",-1),Ss={style:{"text-align":"left"}},Ws={href:"https://leetcode.com/problems/minimum-time-to-revert-word-to-initial-state-i",target:"_blank",rel:"noopener noreferrer"},Xs=t("td",{style:{"text-align":"center"}},null,-1),Ys={style:{"text-align":"left"}},Zs=t("code",null,"字符串",-1),$s=t("code",null,"字符串匹配",-1),td=t("code",null,"哈希函数",-1),ed=t("code",null,"1+",-1),ld={style:{"text-align":"left"}},od=t("td",{style:{"text-align":"center"}},"3031",-1),nd={style:{"text-align":"left"}},sd={href:"https://leetcode.com/problems/minimum-time-to-revert-word-to-initial-state-ii",target:"_blank",rel:"noopener noreferrer"},dd=t("td",{style:{"text-align":"center"}},null,-1),_d={style:{"text-align":"left"}},ad=t("code",null,"字符串",-1),cd=t("code",null,"字符串匹配",-1),id=t("code",null,"哈希函数",-1),hd=t("code",null,"1+",-1),rd={style:{"text-align":"left"}},ud=t("td",{style:{"text-align":"center"}},"3034",-1),fd={style:{"text-align":"left"}},gd={href:"https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-i",target:"_blank",rel:"noopener noreferrer"},md=t("td",{style:{"text-align":"center"}},null,-1),yd={style:{"text-align":"left"}},xd=t("code",null,"数组",-1),bd=t("code",null,"字符串匹配",-1),pd=t("code",null,"哈希函数",-1),kd=t("code",null,"1+",-1),Id={style:{"text-align":"left"}},wd=t("td",{style:{"text-align":"center"}},"3036",-1),Hd={style:{"text-align":"left"}},Md={href:"https://leetcode.com/problems/number-of-subarrays-that-match-a-pattern-ii",target:"_blank",rel:"noopener noreferrer"},vd=t("td",{style:{"text-align":"center"}},null,-1),qd={style:{"text-align":"left"}},Ed=t("code",null,"数组",-1),Ld=t("code",null,"字符串匹配",-1),Nd=t("code",null,"哈希函数",-1),zd=t("code",null,"1+",-1),Vd={style:{"text-align":"left"}},Bd=t("td",{style:{"text-align":"center"}},"3037",-1),Cd={style:{"text-align":"left"}},Rd={href:"https://leetcode.com/problems/find-pattern-in-infinite-stream-ii",target:"_blank",rel:"noopener noreferrer"},Kd=t("td",{style:{"text-align":"center"}},null,-1),Td={style:{"text-align":"left"}},jd=t("code",null,"数组",-1),Ad=t("code",null,"字符串匹配",-1),Dd=t("code",null,"滑动窗口",-1),Fd=t("code",null,"2+",-1),Ud={style:{"text-align":"left"}},Gd=t("td",{style:{"text-align":"center"}},"3042",-1),Jd={style:{"text-align":"left"}},Od={href:"https://leetcode.com/problems/count-prefix-and-suffix-pairs-i",target:"_blank",rel:"noopener noreferrer"},Pd=t("td",{style:{"text-align":"center"}},null,-1),Qd={style:{"text-align":"left"}},Sd=t("code",null,"字典树",-1),Wd=t("code",null,"数组",-1),Xd=t("code",null,"字符串",-1),Yd=t("code",null,"3+",-1),Zd={style:{"text-align":"left"}},$d=t("td",{style:{"text-align":"center"}},"3045",-1),t_={style:{"text-align":"left"}},e_={href:"https://leetcode.com/problems/count-prefix-and-suffix-pairs-ii",target:"_blank",rel:"noopener noreferrer"},l_=t("td",{style:{"text-align":"center"}},null,-1),o_={style:{"text-align":"left"}},n_=t("code",null,"字典树",-1),s_=t("code",null,"数组",-1),d_=t("code",null,"字符串",-1),__=t("code",null,"3+",-1),a_={style:{"text-align":"left"}},c_=t("td",{style:{"text-align":"center"}},"3135",-1),i_={style:{"text-align":"left"}},h_={href:"https://leetcode.com/problems/equalize-strings-by-adding-or-removing-characters-at-ends",target:"_blank",rel:"noopener noreferrer"},r_=t("td",{style:{"text-align":"center"}},null,-1),u_={style:{"text-align":"left"}},f_=t("code",null,"字符串",-1),g_=t("code",null,"二分查找",-1),m_=t("code",null,"动态规划",-1),y_=t("code",null,"2+",-1),x_={style:{"text-align":"left"}},b_=t("td",{style:{"text-align":"center"}},"3291",-1),p_={style:{"text-align":"left"}},k_={href:"https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-i",target:"_blank",rel:"noopener noreferrer"},I_=t("td",{style:{"text-align":"center"}},null,-1),w_={style:{"text-align":"left"}},H_=t("code",null,"字典树",-1),M_=t("code",null,"线段树",-1),v_=t("code",null,"数组",-1),q_=t("code",null,"6+",-1),E_={style:{"text-align":"left"}},L_=t("td",{style:{"text-align":"center"}},"3292",-1),N_={style:{"text-align":"left"}},z_={href:"https://leetcode.com/problems/minimum-number-of-valid-strings-to-form-target-ii",target:"_blank",rel:"noopener noreferrer"},V_=t("td",{style:{"text-align":"center"}},null,-1),B_={style:{"text-align":"left"}},C_=t("code",null,"线段树",-1),R_=t("code",null,"数组",-1),K_=t("code",null,"字符串",-1),T_=t("code",null,"5+",-1),j_={style:{"text-align":"left"}},A_=t("td",{style:{"text-align":"center"}},"面试题 04.10",-1),D_={style:{"text-align":"left"}},F_={href:"https://leetcode.cn/problems/check-subtree-lcci",target:"_blank",rel:"noopener noreferrer"},U_=t("td",{style:{"text-align":"center"}},null,-1),G_={style:{"text-align":"left"}},J_=t("code",null,"树",-1),O_=t("code",null,"深度优先搜索",-1),P_=t("code",null,"二叉树",-1),Q_=t("code",null,"2+",-1),S_={style:{"text-align":"left"}},W_=t("td",{style:{"text-align":"center"}},"面试题 17.13",-1),X_={style:{"text-align":"left"}},Y_={href:"https://leetcode.cn/problems/re-space-lcci",target:"_blank",rel:"noopener noreferrer"},Z_=t("td",{style:{"text-align":"center"}},null,-1),$_={style:{"text-align":"left"}},ta=t("code",null,"字典树",-1),ea=t("code",null,"数组",-1),la=t("code",null,"哈希表",-1),oa=t("code",null,"4+",-1),na={style:{"text-align":"left"}};function sa(da,_a){const n=_("RouterLink"),s=_("ExternalLinkIcon"),d=_("font");return c(),i("div",null,[u,t("details",null,[f,g,t("p",null,[e(n,{to:"/tag/array.html"},{default:o(()=>[m]),_:1}),l(),e(n,{to:"/tag/matrix.html"},{default:o(()=>[y]),_:1}),l(),e(n,{to:"/tag/linked-list.html"},{default:o(()=>[x]),_:1}),l(),e(n,{to:"/tag/doubly-linked-list.html"},{default:o(()=>[b]),_:1}),l(),e(n,{to:"/tag/stack.html"},{default:o(()=>[p]),_:1}),l(),e(n,{to:"/tag/monotonic-stack.html"},{default:o(()=>[k]),_:1}),l(),e(n,{to:"/tag/queue.html"},{default:o(()=>[I]),_:1}),l(),e(n,{to:"/tag/monotonic-queue.html"},{default:o(()=>[w]),_:1}),l(),e(n,{to:"/tag/heap-priority-queue.html"},{default:o(()=>[H]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[M]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[v]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[q]),_:1}),l(),e(n,{to:"/tag/tree.html"},{default:o(()=>[E]),_:1}),l(),e(n,{to:"/tag/binary-tree.html"},{default:o(()=>[L]),_:1}),l(),e(n,{to:"/tag/binary-search-tree.html"},{default:o(()=>[N]),_:1}),l(),e(n,{to:"/tag/minimum-spanning-tree.html"},{default:o(()=>[z]),_:1}),l(),e(n,{to:"/tag/graph.html"},{default:o(()=>[V]),_:1}),l(),e(n,{to:"/tag/ordered-set.html"},{default:o(()=>[B]),_:1}),l(),e(n,{to:"/tag/topological-sort.html"},{default:o(()=>[C]),_:1}),l(),e(n,{to:"/tag/shortest-path.html"},{default:o(()=>[R]),_:1}),l(),e(n,{to:"/tag/strongly-connected-component.html"},{default:o(()=>[K]),_:1}),l(),e(n,{to:"/tag/eulerian-circuit.html"},{default:o(()=>[T]),_:1}),l(),e(n,{to:"/tag/biconnected-component.html"},{default:o(()=>[j]),_:1}),l(),e(n,{to:"/tag/union-find.html"},{default:o(()=>[A]),_:1}),l(),e(n,{to:"/tag/trie.html"},{default:o(()=>[D]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[F]),_:1}),l(),e(n,{to:"/tag/binary-indexed-tree.html"},{default:o(()=>[U]),_:1}),l(),e(n,{to:"/tag/suffix-array.html"},{default:o(()=>[G]),_:1})]),J,t("p",null,[e(n,{to:"/tag/enumeration.html"},{default:o(()=>[O]),_:1}),l(),e(n,{to:"/tag/recursion.html"},{default:o(()=>[P]),_:1}),l(),e(n,{to:"/tag/divide-and-conquer.html"},{default:o(()=>[Q]),_:1}),l(),e(n,{to:"/tag/backtracking.html"},{default:o(()=>[S]),_:1}),l(),e(n,{to:"/tag/greedy.html"},{default:o(()=>[W]),_:1}),l(),e(n,{to:"/tag/dynamic-programming.html"},{default:o(()=>[X]),_:1}),l(),e(n,{to:"/tag/sorting.html"},{default:o(()=>[Y]),_:1}),l(),e(n,{to:"/tag/bucket-sort.html"},{default:o(()=>[Z]),_:1}),l(),e(n,{to:"/tag/counting-sort.html"},{default:o(()=>[$]),_:1}),l(),e(n,{to:"/tag/radix-sort.html"},{default:o(()=>[tt]),_:1}),l(),e(n,{to:"/tag/merge-sort.html"},{default:o(()=>[et]),_:1}),l(),e(n,{to:"/tag/quickselect.html"},{default:o(()=>[lt]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[ot]),_:1}),l(),e(n,{to:"/tag/memoization.html"},{default:o(()=>[nt]),_:1}),l(),e(n,{to:"/tag/depth-first-search.html"},{default:o(()=>[st]),_:1}),l(),e(n,{to:"/tag/breadth-first-search.html"},{default:o(()=>[dt]),_:1}),l(),e(n,{to:"/tag/two-pointers.html"},{default:o(()=>[_t]),_:1}),l(),e(n,{to:"/tag/bit-manipulation.html"},{default:o(()=>[at]),_:1}),l(),e(n,{to:"/tag/prefix-sum.html"},{default:o(()=>[ct]),_:1}),l(),e(n,{to:"/tag/counting.html"},{default:o(()=>[it]),_:1}),l(),e(n,{to:"/tag/sliding-window.html"},{default:o(()=>[ht]),_:1}),l(),e(n,{to:"/tag/bitmask.html"},{default:o(()=>[rt]),_:1}),l(),ut,l(),e(n,{to:"/tag/rolling-hash.html"},{default:o(()=>[ft]),_:1}),l(),e(n,{to:"/tag/line-sweep.html"},{default:o(()=>[gt]),_:1})]),mt,t("p",null,[e(n,{to:"/tag/math.html"},{default:o(()=>[yt]),_:1}),l(),e(n,{to:"/tag/number-theory.html"},{default:o(()=>[xt]),_:1}),l(),e(n,{to:"/tag/geometry.html"},{default:o(()=>[bt]),_:1}),l(),e(n,{to:"/tag/game-theory.html"},{default:o(()=>[pt]),_:1}),l(),e(n,{to:"/tag/simulation.html"},{default:o(()=>[kt]),_:1}),l(),e(n,{to:"/tag/combinatorics.html"},{default:o(()=>[It]),_:1}),l(),e(n,{to:"/tag/randomized.html"},{default:o(()=>[wt]),_:1}),l(),e(n,{to:"/tag/probability-and-statistics.html"},{default:o(()=>[Ht]),_:1}),l(),e(n,{to:"/tag/reservoir-sampling.html"},{default:o(()=>[Mt]),_:1}),l(),e(n,{to:"/tag/rejection-sampling.html"},{default:o(()=>[vt]),_:1}),l(),e(n,{to:"/tag/database.html"},{default:o(()=>[qt]),_:1}),l(),e(n,{to:"/tag/design.html"},{default:o(()=>[Et]),_:1}),l(),e(n,{to:"/tag/data-stream.html"},{default:o(()=>[Lt]),_:1}),l(),e(n,{to:"/tag/brainteaser.html"},{default:o(()=>[Nt]),_:1}),l(),e(n,{to:"/tag/interactive.html"},{default:o(()=>[zt]),_:1}),l(),e(n,{to:"/tag/iterator.html"},{default:o(()=>[Vt]),_:1}),l(),e(n,{to:"/tag/concurrency.html"},{default:o(()=>[Bt]),_:1})])]),Ct,h(" prettier-ignore "),t("table",null,[Rt,t("tbody",null,[t("tr",null,[Kt,t("td",Tt,[t("a",jt,[l("重复的DNA序列"),e(s)])]),At,t("td",Dt,[e(n,{to:"/tag/bit-manipulation.html"},{default:o(()=>[Ft]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[Ut]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[Gt]),_:1}),l(),Jt]),t("td",Ot,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Pt,t("td",Qt,[t("a",St,[l("最短回文串"),e(s)])]),Wt,t("td",Xt,[e(n,{to:"/tag/string.html"},{default:o(()=>[Yt]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[Zt]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[$t]),_:1}),l(),te]),t("td",ee,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[le,t("td",oe,[t("a",ne,[l("TinyURL 的加密与解密"),e(s)])]),se,t("td",de,[e(n,{to:"/tag/design.html"},{default:o(()=>[_e]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[ae]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[ce]),_:1}),l(),ie]),t("td",he,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[re,t("td",ue,[t("a",fe,[l("另一棵树的子树"),e(s)])]),t("td",ge,[e(n,{to:"/problem/0572.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",me,[e(n,{to:"/tag/tree.html"},{default:o(()=>[ye]),_:1}),l(),e(n,{to:"/tag/depth-first-search.html"},{default:o(()=>[xe]),_:1}),l(),e(n,{to:"/tag/binary-tree.html"},{default:o(()=>[be]),_:1}),l(),pe]),t("td",ke,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ie,t("td",we,[t("a",He,[l("不同岛屿的数量"),e(s)])]),Me,t("td",ve,[e(n,{to:"/tag/depth-first-search.html"},{default:o(()=>[qe]),_:1}),l(),e(n,{to:"/tag/breadth-first-search.html"},{default:o(()=>[Ee]),_:1}),l(),e(n,{to:"/tag/union-find.html"},{default:o(()=>[Le]),_:1}),l(),Ne]),t("td",ze,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ve,t("td",Be,[t("a",Ce,[l("设计哈希集合"),e(s)])]),t("td",Re,[e(n,{to:"/problem/0705.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Ke,[e(n,{to:"/tag/design.html"},{default:o(()=>[Te]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[je]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[Ae]),_:1}),l(),De]),t("td",Fe,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ue,t("td",Ge,[t("a",Je,[l("设计哈希映射"),e(s)])]),t("td",Oe,[e(n,{to:"/problem/0706.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",Pe,[e(n,{to:"/tag/design.html"},{default:o(()=>[Qe]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Se]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[We]),_:1}),l(),Xe]),t("td",Ye,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[Ze,t("td",$e,[t("a",tl,[l("不同岛屿的数量 II"),e(s)])]),el,t("td",ll,[e(n,{to:"/tag/depth-first-search.html"},{default:o(()=>[ol]),_:1}),l(),e(n,{to:"/tag/breadth-first-search.html"},{default:o(()=>[nl]),_:1}),l(),e(n,{to:"/tag/union-find.html"},{default:o(()=>[sl]),_:1}),l(),dl]),t("td",_l,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[al,t("td",cl,[t("a",il,[l("最长重复子数组"),e(s)])]),hl,t("td",rl,[e(n,{to:"/tag/array.html"},{default:o(()=>[ul]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[fl]),_:1}),l(),e(n,{to:"/tag/dynamic-programming.html"},{default:o(()=>[gl]),_:1}),l(),ml]),t("td",yl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[xl,t("td",bl,[t("a",pl,[l("最长重复子串"),e(s)])]),kl,t("td",Il,[e(n,{to:"/tag/string.html"},{default:o(()=>[wl]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[Hl]),_:1}),l(),e(n,{to:"/tag/suffix-array.html"},{default:o(()=>[Ml]),_:1}),l(),vl]),t("td",ql,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[El,t("td",Ll,[t("a",Nl,[l("最长重复子串"),e(s)])]),zl,t("td",Vl,[e(n,{to:"/tag/string.html"},{default:o(()=>[Bl]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[Cl]),_:1}),l(),e(n,{to:"/tag/dynamic-programming.html"},{default:o(()=>[Rl]),_:1}),l(),Kl]),t("td",Tl,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[jl,t("td",Al,[t("a",Dl,[l("段式回文"),e(s)])]),Fl,t("td",Ul,[e(n,{to:"/tag/greedy.html"},{default:o(()=>[Gl]),_:1}),l(),e(n,{to:"/tag/two-pointers.html"},{default:o(()=>[Jl]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[Ol]),_:1}),l(),Pl]),t("td",Ql,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Sl,t("td",Wl,[t("a",Xl,[l("不同的循环子字符串"),e(s)])]),Yl,t("td",Zl,[e(n,{to:"/tag/trie.html"},{default:o(()=>[$l]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[to]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[eo]),_:1}),l(),lo]),t("td",oo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[no,t("td",so,[t("a",_o,[l("最长快乐前缀"),e(s)])]),ao,t("td",co,[e(n,{to:"/tag/string.html"},{default:o(()=>[io]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[ho]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[ro]),_:1}),l(),uo]),t("td",fo,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[go,t("td",mo,[t("a",yo,[l("检查一个字符串是否包含所有长度为 K 的二进制子串"),e(s)])]),xo,t("td",bo,[e(n,{to:"/tag/bit-manipulation.html"},{default:o(()=>[po]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[ko]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[Io]),_:1}),l(),wo]),t("td",Ho,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Mo,t("td",vo,[t("a",qo,[l("只有一个不同字符的字符串"),e(s)])]),Eo,t("td",Lo,[e(n,{to:"/tag/hash-table.html"},{default:o(()=>[No]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[zo]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[Vo]),_:1}),l(),Bo]),t("td",Co,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Ro,t("td",Ko,[t("a",To,[l("字符串的不同子字符串个数"),e(s)])]),jo,t("td",Ao,[e(n,{to:"/tag/trie.html"},{default:o(()=>[Do]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[Fo]),_:1}),l(),e(n,{to:"/tag/suffix-array.html"},{default:o(()=>[Uo]),_:1}),l(),Go]),t("td",Jo,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Oo,t("td",Po,[t("a",Qo,[l("最长公共子路径"),e(s)])]),So,t("td",Wo,[e(n,{to:"/tag/array.html"},{default:o(()=>[Xo]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[Yo]),_:1}),l(),e(n,{to:"/tag/suffix-array.html"},{default:o(()=>[Zo]),_:1}),l(),$o]),t("td",tn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[en,t("td",ln,[t("a",on,[l("删除系统中的重复文件夹"),e(s)])]),nn,t("td",sn,[e(n,{to:"/tag/trie.html"},{default:o(()=>[dn]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[_n]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[an]),_:1}),l(),cn]),t("td",hn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[rn,t("td",un,[t("a",fn,[l("两个回文子字符串长度的最大乘积"),e(s)])]),gn,t("td",mn,[e(n,{to:"/tag/string.html"},{default:o(()=>[yn]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[xn]),_:1}),l(),e(n,{to:"/tag/rolling-hash.html"},{default:o(()=>[bn]),_:1})]),t("td",pn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[kn,t("td",In,[t("a",wn,[l("查找给定哈希值的子串"),e(s)])]),Hn,t("td",Mn,[e(n,{to:"/tag/string.html"},{default:o(()=>[vn]),_:1}),l(),e(n,{to:"/tag/sliding-window.html"},{default:o(()=>[qn]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[En]),_:1}),l(),Ln]),t("td",Nn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[zn,t("td",Vn,[t("a",Bn,[l("每个数字的频率都相同的独特子字符串的数量"),e(s)])]),Cn,t("td",Rn,[e(n,{to:"/tag/hash-table.html"},{default:o(()=>[Kn]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[Tn]),_:1}),l(),e(n,{to:"/tag/counting.html"},{default:o(()=>[jn]),_:1}),l(),An]),t("td",Dn,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Fn,t("td",Un,[t("a",Gn,[l("构造字符串的总得分和"),e(s)])]),Jn,t("td",On,[e(n,{to:"/tag/string.html"},{default:o(()=>[Pn]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[Qn]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[Sn]),_:1}),l(),Wn]),t("td",Xn,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Yn,t("td",Zn,[t("a",$n,[l("含最多 K 个可整除元素的子数组"),e(s)])]),t("td",ts,[e(n,{to:"/problem/2261.html"},{default:o(()=>[l("[✓]")]),_:1})]),t("td",es,[e(n,{to:"/tag/trie.html"},{default:o(()=>[ls]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[os]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[ns]),_:1}),l(),ss]),t("td",ds,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[_s,t("td",as,[t("a",cs,[l("对字母串可执行的最大删除数"),e(s)])]),is,t("td",hs,[e(n,{to:"/tag/string.html"},{default:o(()=>[rs]),_:1}),l(),e(n,{to:"/tag/dynamic-programming.html"},{default:o(()=>[us]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[fs]),_:1}),l(),gs]),t("td",ms,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ys,t("td",xs,[t("a",bs,[l("找出数组中的美丽下标 I"),e(s)])]),ps,t("td",ks,[e(n,{to:"/tag/two-pointers.html"},{default:o(()=>[Is]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[ws]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[Hs]),_:1}),l(),Ms]),t("td",vs,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[qs,t("td",Es,[t("a",Ls,[l("找出数组中的美丽下标 II"),e(s)])]),Ns,t("td",zs,[e(n,{to:"/tag/two-pointers.html"},{default:o(()=>[Vs]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[Bs]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[Cs]),_:1}),l(),Rs]),t("td",Ks,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Ts,t("td",js,[t("a",As,[l("在无限流中寻找模式 I"),e(s)])]),Ds,t("td",Fs,[e(n,{to:"/tag/array.html"},{default:o(()=>[Us]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[Gs]),_:1}),l(),e(n,{to:"/tag/sliding-window.html"},{default:o(()=>[Js]),_:1}),l(),Os]),t("td",Ps,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[Qs,t("td",Ss,[t("a",Ws,[l("将单词恢复初始状态所需的最短时间 I"),e(s)])]),Xs,t("td",Ys,[e(n,{to:"/tag/string.html"},{default:o(()=>[Zs]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[$s]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[td]),_:1}),l(),ed]),t("td",ld,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[od,t("td",nd,[t("a",sd,[l("将单词恢复初始状态所需的最短时间 II"),e(s)])]),dd,t("td",_d,[e(n,{to:"/tag/string.html"},{default:o(()=>[ad]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[cd]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[id]),_:1}),l(),hd]),t("td",rd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[ud,t("td",fd,[t("a",gd,[l("匹配模式数组的子数组数目 I"),e(s)])]),md,t("td",yd,[e(n,{to:"/tag/array.html"},{default:o(()=>[xd]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[bd]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[pd]),_:1}),l(),kd]),t("td",Id,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[wd,t("td",Hd,[t("a",Md,[l("匹配模式数组的子数组数目 II"),e(s)])]),vd,t("td",qd,[e(n,{to:"/tag/array.html"},{default:o(()=>[Ed]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[Ld]),_:1}),l(),e(n,{to:"/tag/hash-function.html"},{default:o(()=>[Nd]),_:1}),l(),zd]),t("td",Vd,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Bd,t("td",Cd,[t("a",Rd,[l("在无限流中寻找模式 II"),e(s)])]),Kd,t("td",Td,[e(n,{to:"/tag/array.html"},{default:o(()=>[jd]),_:1}),l(),e(n,{to:"/tag/string-matching.html"},{default:o(()=>[Ad]),_:1}),l(),e(n,{to:"/tag/sliding-window.html"},{default:o(()=>[Dd]),_:1}),l(),Fd]),t("td",Ud,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[Gd,t("td",Jd,[t("a",Od,[l("统计前后缀下标对 I"),e(s)])]),Pd,t("td",Qd,[e(n,{to:"/tag/trie.html"},{default:o(()=>[Sd]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[Wd]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[Xd]),_:1}),l(),Yd]),t("td",Zd,[e(d,{color:"#15bd66"},{default:o(()=>[l("Easy")]),_:1})])]),t("tr",null,[$d,t("td",t_,[t("a",e_,[l("统计前后缀下标对 II"),e(s)])]),l_,t("td",o_,[e(n,{to:"/tag/trie.html"},{default:o(()=>[n_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[s_]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[d_]),_:1}),l(),__]),t("td",a_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[c_,t("td",i_,[t("a",h_,[l("通过添加或删除结尾字符来同化字符串"),e(s)])]),r_,t("td",u_,[e(n,{to:"/tag/string.html"},{default:o(()=>[f_]),_:1}),l(),e(n,{to:"/tag/binary-search.html"},{default:o(()=>[g_]),_:1}),l(),e(n,{to:"/tag/dynamic-programming.html"},{default:o(()=>[m_]),_:1}),l(),y_]),t("td",x_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[b_,t("td",p_,[t("a",k_,[l("形成目标字符串需要的最少字符串数 I"),e(s)])]),I_,t("td",w_,[e(n,{to:"/tag/trie.html"},{default:o(()=>[H_]),_:1}),l(),e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[M_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[v_]),_:1}),l(),q_]),t("td",E_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[L_,t("td",N_,[t("a",z_,[l("形成目标字符串需要的最少字符串数 II"),e(s)])]),V_,t("td",B_,[e(n,{to:"/tag/segment-tree.html"},{default:o(()=>[C_]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[R_]),_:1}),l(),e(n,{to:"/tag/string.html"},{default:o(()=>[K_]),_:1}),l(),T_]),t("td",j_,[e(d,{color:"#ff334b"},{default:o(()=>[l("Hard")]),_:1})])]),t("tr",null,[A_,t("td",D_,[t("a",F_,[l("检查子树"),e(s)])]),U_,t("td",G_,[e(n,{to:"/tag/tree.html"},{default:o(()=>[J_]),_:1}),l(),e(n,{to:"/tag/depth-first-search.html"},{default:o(()=>[O_]),_:1}),l(),e(n,{to:"/tag/binary-tree.html"},{default:o(()=>[P_]),_:1}),l(),Q_]),t("td",S_,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])]),t("tr",null,[W_,t("td",X_,[t("a",Y_,[l("恢复空格"),e(s)])]),Z_,t("td",$_,[e(n,{to:"/tag/trie.html"},{default:o(()=>[ta]),_:1}),l(),e(n,{to:"/tag/array.html"},{default:o(()=>[ea]),_:1}),l(),e(n,{to:"/tag/hash-table.html"},{default:o(()=>[la]),_:1}),l(),oa]),t("td",na,[e(d,{color:"#ffb800"},{default:o(()=>[l("Medium")]),_:1})])])])])])}const ca=a(r,[["render",sa],["__file","hash-function.html.vue"]]);export{ca as default};
